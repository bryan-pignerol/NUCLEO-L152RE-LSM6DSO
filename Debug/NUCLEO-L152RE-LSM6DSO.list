
NUCLEO-L152RE-LSM6DSO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b630  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001338  0800b770  0800b770  0000c770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caa8  0800caa8  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800caa8  0800caa8  0000daa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cab0  0800cab0  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cab0  0800cab0  0000dab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cab4  0800cab4  0000dab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800cab8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  200001ec  0800cca4  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  0800cca4  0000e288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016237  00000000  00000000  0000e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b79  00000000  00000000  0002444c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00025fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb4  00000000  00000000  00027400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f8  00000000  00000000  000283b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012389  00000000  00000000  0003f9ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d6b  00000000  00000000  00051d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  000e3aa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007214  00000000  00000000  000e3b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000ead3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b758 	.word	0x0800b758

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	0800b758 	.word	0x0800b758

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_drsub>:
 80001a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001a8:	e002      	b.n	80001b0 <__adddf3>
 80001aa:	bf00      	nop

080001ac <__aeabi_dsub>:
 80001ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001b0 <__adddf3>:
 80001b0:	b530      	push	{r4, r5, lr}
 80001b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ba:	ea94 0f05 	teq	r4, r5
 80001be:	bf08      	it	eq
 80001c0:	ea90 0f02 	teqeq	r0, r2
 80001c4:	bf1f      	itttt	ne
 80001c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001d6:	f000 80e2 	beq.w	800039e <__adddf3+0x1ee>
 80001da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001e2:	bfb8      	it	lt
 80001e4:	426d      	neglt	r5, r5
 80001e6:	dd0c      	ble.n	8000202 <__adddf3+0x52>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	ea82 0000 	eor.w	r0, r2, r0
 80001f6:	ea83 0101 	eor.w	r1, r3, r1
 80001fa:	ea80 0202 	eor.w	r2, r0, r2
 80001fe:	ea81 0303 	eor.w	r3, r1, r3
 8000202:	2d36      	cmp	r5, #54	@ 0x36
 8000204:	bf88      	it	hi
 8000206:	bd30      	pophi	{r4, r5, pc}
 8000208:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800020c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000210:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000214:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x70>
 800021a:	4240      	negs	r0, r0
 800021c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000220:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000224:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000228:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800022c:	d002      	beq.n	8000234 <__adddf3+0x84>
 800022e:	4252      	negs	r2, r2
 8000230:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000234:	ea94 0f05 	teq	r4, r5
 8000238:	f000 80a7 	beq.w	800038a <__adddf3+0x1da>
 800023c:	f1a4 0401 	sub.w	r4, r4, #1
 8000240:	f1d5 0e20 	rsbs	lr, r5, #32
 8000244:	db0d      	blt.n	8000262 <__adddf3+0xb2>
 8000246:	fa02 fc0e 	lsl.w	ip, r2, lr
 800024a:	fa22 f205 	lsr.w	r2, r2, r5
 800024e:	1880      	adds	r0, r0, r2
 8000250:	f141 0100 	adc.w	r1, r1, #0
 8000254:	fa03 f20e 	lsl.w	r2, r3, lr
 8000258:	1880      	adds	r0, r0, r2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	4159      	adcs	r1, r3
 8000260:	e00e      	b.n	8000280 <__adddf3+0xd0>
 8000262:	f1a5 0520 	sub.w	r5, r5, #32
 8000266:	f10e 0e20 	add.w	lr, lr, #32
 800026a:	2a01      	cmp	r2, #1
 800026c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000270:	bf28      	it	cs
 8000272:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000276:	fa43 f305 	asr.w	r3, r3, r5
 800027a:	18c0      	adds	r0, r0, r3
 800027c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000280:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000284:	d507      	bpl.n	8000296 <__adddf3+0xe6>
 8000286:	f04f 0e00 	mov.w	lr, #0
 800028a:	f1dc 0c00 	rsbs	ip, ip, #0
 800028e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000292:	eb6e 0101 	sbc.w	r1, lr, r1
 8000296:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800029a:	d31b      	bcc.n	80002d4 <__adddf3+0x124>
 800029c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002a0:	d30c      	bcc.n	80002bc <__adddf3+0x10c>
 80002a2:	0849      	lsrs	r1, r1, #1
 80002a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002ac:	f104 0401 	add.w	r4, r4, #1
 80002b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002b8:	f080 809a 	bcs.w	80003f0 <__adddf3+0x240>
 80002bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002c0:	bf08      	it	eq
 80002c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002c6:	f150 0000 	adcs.w	r0, r0, #0
 80002ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ce:	ea41 0105 	orr.w	r1, r1, r5
 80002d2:	bd30      	pop	{r4, r5, pc}
 80002d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002d8:	4140      	adcs	r0, r0
 80002da:	eb41 0101 	adc.w	r1, r1, r1
 80002de:	3c01      	subs	r4, #1
 80002e0:	bf28      	it	cs
 80002e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002e6:	d2e9      	bcs.n	80002bc <__adddf3+0x10c>
 80002e8:	f091 0f00 	teq	r1, #0
 80002ec:	bf04      	itt	eq
 80002ee:	4601      	moveq	r1, r0
 80002f0:	2000      	moveq	r0, #0
 80002f2:	fab1 f381 	clz	r3, r1
 80002f6:	bf08      	it	eq
 80002f8:	3320      	addeq	r3, #32
 80002fa:	f1a3 030b 	sub.w	r3, r3, #11
 80002fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000302:	da0c      	bge.n	800031e <__adddf3+0x16e>
 8000304:	320c      	adds	r2, #12
 8000306:	dd08      	ble.n	800031a <__adddf3+0x16a>
 8000308:	f102 0c14 	add.w	ip, r2, #20
 800030c:	f1c2 020c 	rsb	r2, r2, #12
 8000310:	fa01 f00c 	lsl.w	r0, r1, ip
 8000314:	fa21 f102 	lsr.w	r1, r1, r2
 8000318:	e00c      	b.n	8000334 <__adddf3+0x184>
 800031a:	f102 0214 	add.w	r2, r2, #20
 800031e:	bfd8      	it	le
 8000320:	f1c2 0c20 	rsble	ip, r2, #32
 8000324:	fa01 f102 	lsl.w	r1, r1, r2
 8000328:	fa20 fc0c 	lsr.w	ip, r0, ip
 800032c:	bfdc      	itt	le
 800032e:	ea41 010c 	orrle.w	r1, r1, ip
 8000332:	4090      	lslle	r0, r2
 8000334:	1ae4      	subs	r4, r4, r3
 8000336:	bfa2      	ittt	ge
 8000338:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800033c:	4329      	orrge	r1, r5
 800033e:	bd30      	popge	{r4, r5, pc}
 8000340:	ea6f 0404 	mvn.w	r4, r4
 8000344:	3c1f      	subs	r4, #31
 8000346:	da1c      	bge.n	8000382 <__adddf3+0x1d2>
 8000348:	340c      	adds	r4, #12
 800034a:	dc0e      	bgt.n	800036a <__adddf3+0x1ba>
 800034c:	f104 0414 	add.w	r4, r4, #20
 8000350:	f1c4 0220 	rsb	r2, r4, #32
 8000354:	fa20 f004 	lsr.w	r0, r0, r4
 8000358:	fa01 f302 	lsl.w	r3, r1, r2
 800035c:	ea40 0003 	orr.w	r0, r0, r3
 8000360:	fa21 f304 	lsr.w	r3, r1, r4
 8000364:	ea45 0103 	orr.w	r1, r5, r3
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	f1c4 040c 	rsb	r4, r4, #12
 800036e:	f1c4 0220 	rsb	r2, r4, #32
 8000372:	fa20 f002 	lsr.w	r0, r0, r2
 8000376:	fa01 f304 	lsl.w	r3, r1, r4
 800037a:	ea40 0003 	orr.w	r0, r0, r3
 800037e:	4629      	mov	r1, r5
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	fa21 f004 	lsr.w	r0, r1, r4
 8000386:	4629      	mov	r1, r5
 8000388:	bd30      	pop	{r4, r5, pc}
 800038a:	f094 0f00 	teq	r4, #0
 800038e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000392:	bf06      	itte	eq
 8000394:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000398:	3401      	addeq	r4, #1
 800039a:	3d01      	subne	r5, #1
 800039c:	e74e      	b.n	800023c <__adddf3+0x8c>
 800039e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003a2:	bf18      	it	ne
 80003a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a8:	d029      	beq.n	80003fe <__adddf3+0x24e>
 80003aa:	ea94 0f05 	teq	r4, r5
 80003ae:	bf08      	it	eq
 80003b0:	ea90 0f02 	teqeq	r0, r2
 80003b4:	d005      	beq.n	80003c2 <__adddf3+0x212>
 80003b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ba:	bf04      	itt	eq
 80003bc:	4619      	moveq	r1, r3
 80003be:	4610      	moveq	r0, r2
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	ea91 0f03 	teq	r1, r3
 80003c6:	bf1e      	ittt	ne
 80003c8:	2100      	movne	r1, #0
 80003ca:	2000      	movne	r0, #0
 80003cc:	bd30      	popne	{r4, r5, pc}
 80003ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003d2:	d105      	bne.n	80003e0 <__adddf3+0x230>
 80003d4:	0040      	lsls	r0, r0, #1
 80003d6:	4149      	adcs	r1, r1
 80003d8:	bf28      	it	cs
 80003da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003e4:	bf3c      	itt	cc
 80003e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ea:	bd30      	popcc	{r4, r5, pc}
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003f8:	f04f 0000 	mov.w	r0, #0
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf1a      	itte	ne
 8000404:	4619      	movne	r1, r3
 8000406:	4610      	movne	r0, r2
 8000408:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800040c:	bf1c      	itt	ne
 800040e:	460b      	movne	r3, r1
 8000410:	4602      	movne	r2, r0
 8000412:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000416:	bf06      	itte	eq
 8000418:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800041c:	ea91 0f03 	teqeq	r1, r3
 8000420:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	bf00      	nop

08000428 <__aeabi_ui2d>:
 8000428:	f090 0f00 	teq	r0, #0
 800042c:	bf04      	itt	eq
 800042e:	2100      	moveq	r1, #0
 8000430:	4770      	bxeq	lr
 8000432:	b530      	push	{r4, r5, lr}
 8000434:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000438:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800043c:	f04f 0500 	mov.w	r5, #0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e750      	b.n	80002e8 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_i2d>:
 8000448:	f090 0f00 	teq	r0, #0
 800044c:	bf04      	itt	eq
 800044e:	2100      	moveq	r1, #0
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000458:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800045c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000460:	bf48      	it	mi
 8000462:	4240      	negmi	r0, r0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e73e      	b.n	80002e8 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_f2d>:
 800046c:	0042      	lsls	r2, r0, #1
 800046e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000472:	ea4f 0131 	mov.w	r1, r1, rrx
 8000476:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800047a:	bf1f      	itttt	ne
 800047c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000480:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000484:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000488:	4770      	bxne	lr
 800048a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800048e:	bf08      	it	eq
 8000490:	4770      	bxeq	lr
 8000492:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000496:	bf04      	itt	eq
 8000498:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	e71c      	b.n	80002e8 <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_ul2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f04f 0500 	mov.w	r5, #0
 80004be:	e00a      	b.n	80004d6 <__aeabi_l2d+0x16>

080004c0 <__aeabi_l2d>:
 80004c0:	ea50 0201 	orrs.w	r2, r0, r1
 80004c4:	bf08      	it	eq
 80004c6:	4770      	bxeq	lr
 80004c8:	b530      	push	{r4, r5, lr}
 80004ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ce:	d502      	bpl.n	80004d6 <__aeabi_l2d+0x16>
 80004d0:	4240      	negs	r0, r0
 80004d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004e2:	f43f aed8 	beq.w	8000296 <__adddf3+0xe6>
 80004e6:	f04f 0203 	mov.w	r2, #3
 80004ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ee:	bf18      	it	ne
 80004f0:	3203      	addne	r2, #3
 80004f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004f6:	bf18      	it	ne
 80004f8:	3203      	addne	r2, #3
 80004fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004fe:	f1c2 0320 	rsb	r3, r2, #32
 8000502:	fa00 fc03 	lsl.w	ip, r0, r3
 8000506:	fa20 f002 	lsr.w	r0, r0, r2
 800050a:	fa01 fe03 	lsl.w	lr, r1, r3
 800050e:	ea40 000e 	orr.w	r0, r0, lr
 8000512:	fa21 f102 	lsr.w	r1, r1, r2
 8000516:	4414      	add	r4, r2
 8000518:	e6bd      	b.n	8000296 <__adddf3+0xe6>
 800051a:	bf00      	nop

0800051c <__aeabi_dmul>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000522:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000526:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800052a:	bf1d      	ittte	ne
 800052c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000530:	ea94 0f0c 	teqne	r4, ip
 8000534:	ea95 0f0c 	teqne	r5, ip
 8000538:	f000 f8de 	bleq	80006f8 <__aeabi_dmul+0x1dc>
 800053c:	442c      	add	r4, r5
 800053e:	ea81 0603 	eor.w	r6, r1, r3
 8000542:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000546:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800054a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800054e:	bf18      	it	ne
 8000550:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000554:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800055c:	d038      	beq.n	80005d0 <__aeabi_dmul+0xb4>
 800055e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	fbe1 e502 	umlal	lr, r5, r1, r2
 800056a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800056e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000572:	f04f 0600 	mov.w	r6, #0
 8000576:	fbe1 5603 	umlal	r5, r6, r1, r3
 800057a:	f09c 0f00 	teq	ip, #0
 800057e:	bf18      	it	ne
 8000580:	f04e 0e01 	orrne.w	lr, lr, #1
 8000584:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000588:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800058c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000590:	d204      	bcs.n	800059c <__aeabi_dmul+0x80>
 8000592:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000596:	416d      	adcs	r5, r5
 8000598:	eb46 0606 	adc.w	r6, r6, r6
 800059c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005a0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005a4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005a8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005b0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005b4:	bf88      	it	hi
 80005b6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ba:	d81e      	bhi.n	80005fa <__aeabi_dmul+0xde>
 80005bc:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005c0:	bf08      	it	eq
 80005c2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005c6:	f150 0000 	adcs.w	r0, r0, #0
 80005ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005d4:	ea46 0101 	orr.w	r1, r6, r1
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	ea81 0103 	eor.w	r1, r1, r3
 80005e0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005e4:	bfc2      	ittt	gt
 80005e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ee:	bd70      	popgt	{r4, r5, r6, pc}
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f04f 0e00 	mov.w	lr, #0
 80005f8:	3c01      	subs	r4, #1
 80005fa:	f300 80ab 	bgt.w	8000754 <__aeabi_dmul+0x238>
 80005fe:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000602:	bfde      	ittt	le
 8000604:	2000      	movle	r0, #0
 8000606:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800060a:	bd70      	pople	{r4, r5, r6, pc}
 800060c:	f1c4 0400 	rsb	r4, r4, #0
 8000610:	3c20      	subs	r4, #32
 8000612:	da35      	bge.n	8000680 <__aeabi_dmul+0x164>
 8000614:	340c      	adds	r4, #12
 8000616:	dc1b      	bgt.n	8000650 <__aeabi_dmul+0x134>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0520 	rsb	r5, r4, #32
 8000620:	fa00 f305 	lsl.w	r3, r0, r5
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f205 	lsl.w	r2, r1, r5
 800062c:	ea40 0002 	orr.w	r0, r0, r2
 8000630:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	fa21 f604 	lsr.w	r6, r1, r4
 8000640:	eb42 0106 	adc.w	r1, r2, r6
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 040c 	rsb	r4, r4, #12
 8000654:	f1c4 0520 	rsb	r5, r4, #32
 8000658:	fa00 f304 	lsl.w	r3, r0, r4
 800065c:	fa20 f005 	lsr.w	r0, r0, r5
 8000660:	fa01 f204 	lsl.w	r2, r1, r4
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	f141 0100 	adc.w	r1, r1, #0
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f205 	lsl.w	r2, r0, r5
 8000688:	ea4e 0e02 	orr.w	lr, lr, r2
 800068c:	fa20 f304 	lsr.w	r3, r0, r4
 8000690:	fa01 f205 	lsl.w	r2, r1, r5
 8000694:	ea43 0302 	orr.w	r3, r3, r2
 8000698:	fa21 f004 	lsr.w	r0, r1, r4
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	fa21 f204 	lsr.w	r2, r1, r4
 80006a4:	ea20 0002 	bic.w	r0, r0, r2
 80006a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b0:	bf08      	it	eq
 80006b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
 80006b8:	f094 0f00 	teq	r4, #0
 80006bc:	d10f      	bne.n	80006de <__aeabi_dmul+0x1c2>
 80006be:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006c2:	0040      	lsls	r0, r0, #1
 80006c4:	eb41 0101 	adc.w	r1, r1, r1
 80006c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006cc:	bf08      	it	eq
 80006ce:	3c01      	subeq	r4, #1
 80006d0:	d0f7      	beq.n	80006c2 <__aeabi_dmul+0x1a6>
 80006d2:	ea41 0106 	orr.w	r1, r1, r6
 80006d6:	f095 0f00 	teq	r5, #0
 80006da:	bf18      	it	ne
 80006dc:	4770      	bxne	lr
 80006de:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006e2:	0052      	lsls	r2, r2, #1
 80006e4:	eb43 0303 	adc.w	r3, r3, r3
 80006e8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ec:	bf08      	it	eq
 80006ee:	3d01      	subeq	r5, #1
 80006f0:	d0f7      	beq.n	80006e2 <__aeabi_dmul+0x1c6>
 80006f2:	ea43 0306 	orr.w	r3, r3, r6
 80006f6:	4770      	bx	lr
 80006f8:	ea94 0f0c 	teq	r4, ip
 80006fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000700:	bf18      	it	ne
 8000702:	ea95 0f0c 	teqne	r5, ip
 8000706:	d00c      	beq.n	8000722 <__aeabi_dmul+0x206>
 8000708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070c:	bf18      	it	ne
 800070e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000712:	d1d1      	bne.n	80006b8 <__aeabi_dmul+0x19c>
 8000714:	ea81 0103 	eor.w	r1, r1, r3
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000726:	bf06      	itte	eq
 8000728:	4610      	moveq	r0, r2
 800072a:	4619      	moveq	r1, r3
 800072c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000730:	d019      	beq.n	8000766 <__aeabi_dmul+0x24a>
 8000732:	ea94 0f0c 	teq	r4, ip
 8000736:	d102      	bne.n	800073e <__aeabi_dmul+0x222>
 8000738:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800073c:	d113      	bne.n	8000766 <__aeabi_dmul+0x24a>
 800073e:	ea95 0f0c 	teq	r5, ip
 8000742:	d105      	bne.n	8000750 <__aeabi_dmul+0x234>
 8000744:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000748:	bf1c      	itt	ne
 800074a:	4610      	movne	r0, r2
 800074c:	4619      	movne	r1, r3
 800074e:	d10a      	bne.n	8000766 <__aeabi_dmul+0x24a>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800076a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800076e:	bd70      	pop	{r4, r5, r6, pc}

08000770 <__aeabi_ddiv>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000776:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800077a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800077e:	bf1d      	ittte	ne
 8000780:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000784:	ea94 0f0c 	teqne	r4, ip
 8000788:	ea95 0f0c 	teqne	r5, ip
 800078c:	f000 f8a7 	bleq	80008de <__aeabi_ddiv+0x16e>
 8000790:	eba4 0405 	sub.w	r4, r4, r5
 8000794:	ea81 0e03 	eor.w	lr, r1, r3
 8000798:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800079c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007a0:	f000 8088 	beq.w	80008b4 <__aeabi_ddiv+0x144>
 80007a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007a8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007c4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007c8:	429d      	cmp	r5, r3
 80007ca:	bf08      	it	eq
 80007cc:	4296      	cmpeq	r6, r2
 80007ce:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007d2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007d6:	d202      	bcs.n	80007de <__aeabi_ddiv+0x6e>
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	1ab6      	subs	r6, r6, r2
 80007e0:	eb65 0503 	sbc.w	r5, r5, r3
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ee:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 000c 	orrcs.w	r0, r0, ip
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800084c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000850:	d018      	beq.n	8000884 <__aeabi_ddiv+0x114>
 8000852:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000856:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800085a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800085e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000862:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000866:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800086a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800086e:	d1c0      	bne.n	80007f2 <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	d10b      	bne.n	800088e <__aeabi_ddiv+0x11e>
 8000876:	ea41 0100 	orr.w	r1, r1, r0
 800087a:	f04f 0000 	mov.w	r0, #0
 800087e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000882:	e7b6      	b.n	80007f2 <__aeabi_ddiv+0x82>
 8000884:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000888:	bf04      	itt	eq
 800088a:	4301      	orreq	r1, r0
 800088c:	2000      	moveq	r0, #0
 800088e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000892:	bf88      	it	hi
 8000894:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000898:	f63f aeaf 	bhi.w	80005fa <__aeabi_dmul+0xde>
 800089c:	ebb5 0c03 	subs.w	ip, r5, r3
 80008a0:	bf04      	itt	eq
 80008a2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008aa:	f150 0000 	adcs.w	r0, r0, #0
 80008ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	pop	{r4, r5, r6, pc}
 80008b4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008c0:	bfc2      	ittt	gt
 80008c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ca:	bd70      	popgt	{r4, r5, r6, pc}
 80008cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008d0:	f04f 0e00 	mov.w	lr, #0
 80008d4:	3c01      	subs	r4, #1
 80008d6:	e690      	b.n	80005fa <__aeabi_dmul+0xde>
 80008d8:	ea45 0e06 	orr.w	lr, r5, r6
 80008dc:	e68d      	b.n	80005fa <__aeabi_dmul+0xde>
 80008de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008e2:	ea94 0f0c 	teq	r4, ip
 80008e6:	bf08      	it	eq
 80008e8:	ea95 0f0c 	teqeq	r5, ip
 80008ec:	f43f af3b 	beq.w	8000766 <__aeabi_dmul+0x24a>
 80008f0:	ea94 0f0c 	teq	r4, ip
 80008f4:	d10a      	bne.n	800090c <__aeabi_ddiv+0x19c>
 80008f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008fa:	f47f af34 	bne.w	8000766 <__aeabi_dmul+0x24a>
 80008fe:	ea95 0f0c 	teq	r5, ip
 8000902:	f47f af25 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e72c      	b.n	8000766 <__aeabi_dmul+0x24a>
 800090c:	ea95 0f0c 	teq	r5, ip
 8000910:	d106      	bne.n	8000920 <__aeabi_ddiv+0x1b0>
 8000912:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000916:	f43f aefd 	beq.w	8000714 <__aeabi_dmul+0x1f8>
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	e722      	b.n	8000766 <__aeabi_dmul+0x24a>
 8000920:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800092a:	f47f aec5 	bne.w	80006b8 <__aeabi_dmul+0x19c>
 800092e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000932:	f47f af0d 	bne.w	8000750 <__aeabi_dmul+0x234>
 8000936:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800093a:	f47f aeeb 	bne.w	8000714 <__aeabi_dmul+0x1f8>
 800093e:	e712      	b.n	8000766 <__aeabi_dmul+0x24a>

08000940 <__gedf2>:
 8000940:	f04f 3cff 	mov.w	ip, #4294967295
 8000944:	e006      	b.n	8000954 <__cmpdf2+0x4>
 8000946:	bf00      	nop

08000948 <__ledf2>:
 8000948:	f04f 0c01 	mov.w	ip, #1
 800094c:	e002      	b.n	8000954 <__cmpdf2+0x4>
 800094e:	bf00      	nop

08000950 <__cmpdf2>:
 8000950:	f04f 0c01 	mov.w	ip, #1
 8000954:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800096a:	d01b      	beq.n	80009a4 <__cmpdf2+0x54>
 800096c:	b001      	add	sp, #4
 800096e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000972:	bf0c      	ite	eq
 8000974:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000978:	ea91 0f03 	teqne	r1, r3
 800097c:	bf02      	ittt	eq
 800097e:	ea90 0f02 	teqeq	r0, r2
 8000982:	2000      	moveq	r0, #0
 8000984:	4770      	bxeq	lr
 8000986:	f110 0f00 	cmn.w	r0, #0
 800098a:	ea91 0f03 	teq	r1, r3
 800098e:	bf58      	it	pl
 8000990:	4299      	cmppl	r1, r3
 8000992:	bf08      	it	eq
 8000994:	4290      	cmpeq	r0, r2
 8000996:	bf2c      	ite	cs
 8000998:	17d8      	asrcs	r0, r3, #31
 800099a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800099e:	f040 0001 	orr.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d102      	bne.n	80009b4 <__cmpdf2+0x64>
 80009ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009b2:	d107      	bne.n	80009c4 <__cmpdf2+0x74>
 80009b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	d1d6      	bne.n	800096c <__cmpdf2+0x1c>
 80009be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009c2:	d0d3      	beq.n	800096c <__cmpdf2+0x1c>
 80009c4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_cdrcmple>:
 80009cc:	4684      	mov	ip, r0
 80009ce:	4610      	mov	r0, r2
 80009d0:	4662      	mov	r2, ip
 80009d2:	468c      	mov	ip, r1
 80009d4:	4619      	mov	r1, r3
 80009d6:	4663      	mov	r3, ip
 80009d8:	e000      	b.n	80009dc <__aeabi_cdcmpeq>
 80009da:	bf00      	nop

080009dc <__aeabi_cdcmpeq>:
 80009dc:	b501      	push	{r0, lr}
 80009de:	f7ff ffb7 	bl	8000950 <__cmpdf2>
 80009e2:	2800      	cmp	r0, #0
 80009e4:	bf48      	it	mi
 80009e6:	f110 0f00 	cmnmi.w	r0, #0
 80009ea:	bd01      	pop	{r0, pc}

080009ec <__aeabi_dcmpeq>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff fff4 	bl	80009dc <__aeabi_cdcmpeq>
 80009f4:	bf0c      	ite	eq
 80009f6:	2001      	moveq	r0, #1
 80009f8:	2000      	movne	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmplt>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffea 	bl	80009dc <__aeabi_cdcmpeq>
 8000a08:	bf34      	ite	cc
 8000a0a:	2001      	movcc	r0, #1
 8000a0c:	2000      	movcs	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmple>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffe0 	bl	80009dc <__aeabi_cdcmpeq>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpge>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffce 	bl	80009cc <__aeabi_cdrcmple>
 8000a30:	bf94      	ite	ls
 8000a32:	2001      	movls	r0, #1
 8000a34:	2000      	movhi	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpgt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffc4 	bl	80009cc <__aeabi_cdrcmple>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmpun>:
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x10>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d10a      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d102      	bne.n	8000a70 <__aeabi_dcmpun+0x20>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_dcmpun+0x26>
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0001 	mov.w	r0, #1
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2uiz>:
 8000acc:	004a      	lsls	r2, r1, #1
 8000ace:	d211      	bcs.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad4:	d211      	bcs.n	8000afa <__aeabi_d2uiz+0x2e>
 8000ad6:	d50d      	bpl.n	8000af4 <__aeabi_d2uiz+0x28>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d40e      	bmi.n	8000b00 <__aeabi_d2uiz+0x34>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d102      	bne.n	8000b06 <__aeabi_d2uiz+0x3a>
 8000b00:	f04f 30ff 	mov.w	r0, #4294967295
 8000b04:	4770      	bx	lr
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	4770      	bx	lr

08000b0c <__aeabi_d2f>:
 8000b0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b14:	bf24      	itt	cs
 8000b16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b1e:	d90d      	bls.n	8000b3c <__aeabi_d2f+0x30>
 8000b20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b40:	d121      	bne.n	8000b86 <__aeabi_d2f+0x7a>
 8000b42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b46:	bfbc      	itt	lt
 8000b48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	4770      	bxlt	lr
 8000b4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b56:	f1c2 0218 	rsb	r2, r2, #24
 8000b5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b62:	fa20 f002 	lsr.w	r0, r0, r2
 8000b66:	bf18      	it	ne
 8000b68:	f040 0001 	orrne.w	r0, r0, #1
 8000b6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b78:	ea40 000c 	orr.w	r0, r0, ip
 8000b7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b84:	e7cc      	b.n	8000b20 <__aeabi_d2f+0x14>
 8000b86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b8a:	d107      	bne.n	8000b9c <__aeabi_d2f+0x90>
 8000b8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b90:	bf1e      	ittt	ne
 8000b92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b9a:	4770      	bxne	lr
 8000b9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ba4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_frsub>:
 8000bac:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bb0:	e002      	b.n	8000bb8 <__addsf3>
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_fsub>:
 8000bb4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bb8 <__addsf3>:
 8000bb8:	0042      	lsls	r2, r0, #1
 8000bba:	bf1f      	itttt	ne
 8000bbc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bc0:	ea92 0f03 	teqne	r2, r3
 8000bc4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bc8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bcc:	d06a      	beq.n	8000ca4 <__addsf3+0xec>
 8000bce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bd2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bd6:	bfc1      	itttt	gt
 8000bd8:	18d2      	addgt	r2, r2, r3
 8000bda:	4041      	eorgt	r1, r0
 8000bdc:	4048      	eorgt	r0, r1
 8000bde:	4041      	eorgt	r1, r0
 8000be0:	bfb8      	it	lt
 8000be2:	425b      	neglt	r3, r3
 8000be4:	2b19      	cmp	r3, #25
 8000be6:	bf88      	it	hi
 8000be8:	4770      	bxhi	lr
 8000bea:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bee:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bf6:	bf18      	it	ne
 8000bf8:	4240      	negne	r0, r0
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bfe:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c02:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c06:	bf18      	it	ne
 8000c08:	4249      	negne	r1, r1
 8000c0a:	ea92 0f03 	teq	r2, r3
 8000c0e:	d03f      	beq.n	8000c90 <__addsf3+0xd8>
 8000c10:	f1a2 0201 	sub.w	r2, r2, #1
 8000c14:	fa41 fc03 	asr.w	ip, r1, r3
 8000c18:	eb10 000c 	adds.w	r0, r0, ip
 8000c1c:	f1c3 0320 	rsb	r3, r3, #32
 8000c20:	fa01 f103 	lsl.w	r1, r1, r3
 8000c24:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c28:	d502      	bpl.n	8000c30 <__addsf3+0x78>
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c30:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c34:	d313      	bcc.n	8000c5e <__addsf3+0xa6>
 8000c36:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c3a:	d306      	bcc.n	8000c4a <__addsf3+0x92>
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c42:	f102 0201 	add.w	r2, r2, #1
 8000c46:	2afe      	cmp	r2, #254	@ 0xfe
 8000c48:	d251      	bcs.n	8000cee <__addsf3+0x136>
 8000c4a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c52:	bf08      	it	eq
 8000c54:	f020 0001 	biceq.w	r0, r0, #1
 8000c58:	ea40 0003 	orr.w	r0, r0, r3
 8000c5c:	4770      	bx	lr
 8000c5e:	0049      	lsls	r1, r1, #1
 8000c60:	eb40 0000 	adc.w	r0, r0, r0
 8000c64:	3a01      	subs	r2, #1
 8000c66:	bf28      	it	cs
 8000c68:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c6c:	d2ed      	bcs.n	8000c4a <__addsf3+0x92>
 8000c6e:	fab0 fc80 	clz	ip, r0
 8000c72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c76:	ebb2 020c 	subs.w	r2, r2, ip
 8000c7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c7e:	bfaa      	itet	ge
 8000c80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c84:	4252      	neglt	r2, r2
 8000c86:	4318      	orrge	r0, r3
 8000c88:	bfbc      	itt	lt
 8000c8a:	40d0      	lsrlt	r0, r2
 8000c8c:	4318      	orrlt	r0, r3
 8000c8e:	4770      	bx	lr
 8000c90:	f092 0f00 	teq	r2, #0
 8000c94:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c98:	bf06      	itte	eq
 8000c9a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c9e:	3201      	addeq	r2, #1
 8000ca0:	3b01      	subne	r3, #1
 8000ca2:	e7b5      	b.n	8000c10 <__addsf3+0x58>
 8000ca4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ca8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cac:	bf18      	it	ne
 8000cae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb2:	d021      	beq.n	8000cf8 <__addsf3+0x140>
 8000cb4:	ea92 0f03 	teq	r2, r3
 8000cb8:	d004      	beq.n	8000cc4 <__addsf3+0x10c>
 8000cba:	f092 0f00 	teq	r2, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea90 0f01 	teq	r0, r1
 8000cc8:	bf1c      	itt	ne
 8000cca:	2000      	movne	r0, #0
 8000ccc:	4770      	bxne	lr
 8000cce:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cd2:	d104      	bne.n	8000cde <__addsf3+0x126>
 8000cd4:	0040      	lsls	r0, r0, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ce2:	bf3c      	itt	cc
 8000ce4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ce8:	4770      	bxcc	lr
 8000cea:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cee:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cf2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf6:	4770      	bx	lr
 8000cf8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cfc:	bf16      	itet	ne
 8000cfe:	4608      	movne	r0, r1
 8000d00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d04:	4601      	movne	r1, r0
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	bf06      	itte	eq
 8000d0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d0e:	ea90 0f01 	teqeq	r0, r1
 8000d12:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_ui2f>:
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e004      	b.n	8000d28 <__aeabi_i2f+0x8>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_i2f>:
 8000d20:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d24:	bf48      	it	mi
 8000d26:	4240      	negmi	r0, r0
 8000d28:	ea5f 0c00 	movs.w	ip, r0
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d34:	4601      	mov	r1, r0
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	e01c      	b.n	8000d76 <__aeabi_l2f+0x2a>

08000d3c <__aeabi_ul2f>:
 8000d3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d40:	bf08      	it	eq
 8000d42:	4770      	bxeq	lr
 8000d44:	f04f 0300 	mov.w	r3, #0
 8000d48:	e00a      	b.n	8000d60 <__aeabi_l2f+0x14>
 8000d4a:	bf00      	nop

08000d4c <__aeabi_l2f>:
 8000d4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d58:	d502      	bpl.n	8000d60 <__aeabi_l2f+0x14>
 8000d5a:	4240      	negs	r0, r0
 8000d5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d60:	ea5f 0c01 	movs.w	ip, r1
 8000d64:	bf02      	ittt	eq
 8000d66:	4684      	moveq	ip, r0
 8000d68:	4601      	moveq	r1, r0
 8000d6a:	2000      	moveq	r0, #0
 8000d6c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d70:	bf08      	it	eq
 8000d72:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d7a:	fabc f28c 	clz	r2, ip
 8000d7e:	3a08      	subs	r2, #8
 8000d80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d84:	db10      	blt.n	8000da8 <__aeabi_l2f+0x5c>
 8000d86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d90:	f1c2 0220 	rsb	r2, r2, #32
 8000d94:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d98:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9c:	eb43 0002 	adc.w	r0, r3, r2
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f102 0220 	add.w	r2, r2, #32
 8000dac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000db0:	f1c2 0220 	rsb	r2, r2, #32
 8000db4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000db8:	fa21 f202 	lsr.w	r2, r1, r2
 8000dbc:	eb43 0002 	adc.w	r0, r3, r2
 8000dc0:	bf08      	it	eq
 8000dc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dc6:	4770      	bx	lr

08000dc8 <__aeabi_fmul>:
 8000dc8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000dcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dd0:	bf1e      	ittt	ne
 8000dd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dd6:	ea92 0f0c 	teqne	r2, ip
 8000dda:	ea93 0f0c 	teqne	r3, ip
 8000dde:	d06f      	beq.n	8000ec0 <__aeabi_fmul+0xf8>
 8000de0:	441a      	add	r2, r3
 8000de2:	ea80 0c01 	eor.w	ip, r0, r1
 8000de6:	0240      	lsls	r0, r0, #9
 8000de8:	bf18      	it	ne
 8000dea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dee:	d01e      	beq.n	8000e2e <__aeabi_fmul+0x66>
 8000df0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000df4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000df8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000e00:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e04:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000e08:	bf3e      	ittt	cc
 8000e0a:	0049      	lslcc	r1, r1, #1
 8000e0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e10:	005b      	lslcc	r3, r3, #1
 8000e12:	ea40 0001 	orr.w	r0, r0, r1
 8000e16:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e1a:	2afd      	cmp	r2, #253	@ 0xfd
 8000e1c:	d81d      	bhi.n	8000e5a <__aeabi_fmul+0x92>
 8000e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e26:	bf08      	it	eq
 8000e28:	f020 0001 	biceq.w	r0, r0, #1
 8000e2c:	4770      	bx	lr
 8000e2e:	f090 0f00 	teq	r0, #0
 8000e32:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e36:	bf08      	it	eq
 8000e38:	0249      	lsleq	r1, r1, #9
 8000e3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e42:	3a7f      	subs	r2, #127	@ 0x7f
 8000e44:	bfc2      	ittt	gt
 8000e46:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e4e:	4770      	bxgt	lr
 8000e50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	3a01      	subs	r2, #1
 8000e5a:	dc5d      	bgt.n	8000f18 <__aeabi_fmul+0x150>
 8000e5c:	f112 0f19 	cmn.w	r2, #25
 8000e60:	bfdc      	itt	le
 8000e62:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e66:	4770      	bxle	lr
 8000e68:	f1c2 0200 	rsb	r2, r2, #0
 8000e6c:	0041      	lsls	r1, r0, #1
 8000e6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e72:	f1c2 0220 	rsb	r2, r2, #32
 8000e76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e7e:	f140 0000 	adc.w	r0, r0, #0
 8000e82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e86:	bf08      	it	eq
 8000e88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e8c:	4770      	bx	lr
 8000e8e:	f092 0f00 	teq	r2, #0
 8000e92:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e96:	bf02      	ittt	eq
 8000e98:	0040      	lsleq	r0, r0, #1
 8000e9a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e9e:	3a01      	subeq	r2, #1
 8000ea0:	d0f9      	beq.n	8000e96 <__aeabi_fmul+0xce>
 8000ea2:	ea40 000c 	orr.w	r0, r0, ip
 8000ea6:	f093 0f00 	teq	r3, #0
 8000eaa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0049      	lsleq	r1, r1, #1
 8000eb2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eb6:	3b01      	subeq	r3, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xe6>
 8000eba:	ea41 010c 	orr.w	r1, r1, ip
 8000ebe:	e78f      	b.n	8000de0 <__aeabi_fmul+0x18>
 8000ec0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ec4:	ea92 0f0c 	teq	r2, ip
 8000ec8:	bf18      	it	ne
 8000eca:	ea93 0f0c 	teqne	r3, ip
 8000ece:	d00a      	beq.n	8000ee6 <__aeabi_fmul+0x11e>
 8000ed0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ed4:	bf18      	it	ne
 8000ed6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eda:	d1d8      	bne.n	8000e8e <__aeabi_fmul+0xc6>
 8000edc:	ea80 0001 	eor.w	r0, r0, r1
 8000ee0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ee4:	4770      	bx	lr
 8000ee6:	f090 0f00 	teq	r0, #0
 8000eea:	bf17      	itett	ne
 8000eec:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ef0:	4608      	moveq	r0, r1
 8000ef2:	f091 0f00 	teqne	r1, #0
 8000ef6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000efa:	d014      	beq.n	8000f26 <__aeabi_fmul+0x15e>
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d101      	bne.n	8000f06 <__aeabi_fmul+0x13e>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	d10f      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f06:	ea93 0f0c 	teq	r3, ip
 8000f0a:	d103      	bne.n	8000f14 <__aeabi_fmul+0x14c>
 8000f0c:	024b      	lsls	r3, r1, #9
 8000f0e:	bf18      	it	ne
 8000f10:	4608      	movne	r0, r1
 8000f12:	d108      	bne.n	8000f26 <__aeabi_fmul+0x15e>
 8000f14:	ea80 0001 	eor.w	r0, r0, r1
 8000f18:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f24:	4770      	bx	lr
 8000f26:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f2a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f2e:	4770      	bx	lr

08000f30 <__aeabi_fdiv>:
 8000f30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f38:	bf1e      	ittt	ne
 8000f3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f3e:	ea92 0f0c 	teqne	r2, ip
 8000f42:	ea93 0f0c 	teqne	r3, ip
 8000f46:	d069      	beq.n	800101c <__aeabi_fdiv+0xec>
 8000f48:	eba2 0203 	sub.w	r2, r2, r3
 8000f4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f50:	0249      	lsls	r1, r1, #9
 8000f52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f56:	d037      	beq.n	8000fc8 <__aeabi_fdiv+0x98>
 8000f58:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f64:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	bf38      	it	cc
 8000f6c:	005b      	lslcc	r3, r3, #1
 8000f6e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f72:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f76:	428b      	cmp	r3, r1
 8000f78:	bf24      	itt	cs
 8000f7a:	1a5b      	subcs	r3, r3, r1
 8000f7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f84:	bf24      	itt	cs
 8000f86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f92:	bf24      	itt	cs
 8000f94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fa0:	bf24      	itt	cs
 8000fa2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fa6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	bf18      	it	ne
 8000fae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fb2:	d1e0      	bne.n	8000f76 <__aeabi_fdiv+0x46>
 8000fb4:	2afd      	cmp	r2, #253	@ 0xfd
 8000fb6:	f63f af50 	bhi.w	8000e5a <__aeabi_fmul+0x92>
 8000fba:	428b      	cmp	r3, r1
 8000fbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fc0:	bf08      	it	eq
 8000fc2:	f020 0001 	biceq.w	r0, r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fd0:	327f      	adds	r2, #127	@ 0x7f
 8000fd2:	bfc2      	ittt	gt
 8000fd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fdc:	4770      	bxgt	lr
 8000fde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fe2:	f04f 0300 	mov.w	r3, #0
 8000fe6:	3a01      	subs	r2, #1
 8000fe8:	e737      	b.n	8000e5a <__aeabi_fmul+0x92>
 8000fea:	f092 0f00 	teq	r2, #0
 8000fee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ff2:	bf02      	ittt	eq
 8000ff4:	0040      	lsleq	r0, r0, #1
 8000ff6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ffa:	3a01      	subeq	r2, #1
 8000ffc:	d0f9      	beq.n	8000ff2 <__aeabi_fdiv+0xc2>
 8000ffe:	ea40 000c 	orr.w	r0, r0, ip
 8001002:	f093 0f00 	teq	r3, #0
 8001006:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0049      	lsleq	r1, r1, #1
 800100e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8001012:	3b01      	subeq	r3, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xda>
 8001016:	ea41 010c 	orr.w	r1, r1, ip
 800101a:	e795      	b.n	8000f48 <__aeabi_fdiv+0x18>
 800101c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001020:	ea92 0f0c 	teq	r2, ip
 8001024:	d108      	bne.n	8001038 <__aeabi_fdiv+0x108>
 8001026:	0242      	lsls	r2, r0, #9
 8001028:	f47f af7d 	bne.w	8000f26 <__aeabi_fmul+0x15e>
 800102c:	ea93 0f0c 	teq	r3, ip
 8001030:	f47f af70 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 8001034:	4608      	mov	r0, r1
 8001036:	e776      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001038:	ea93 0f0c 	teq	r3, ip
 800103c:	d104      	bne.n	8001048 <__aeabi_fdiv+0x118>
 800103e:	024b      	lsls	r3, r1, #9
 8001040:	f43f af4c 	beq.w	8000edc <__aeabi_fmul+0x114>
 8001044:	4608      	mov	r0, r1
 8001046:	e76e      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001048:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800104c:	bf18      	it	ne
 800104e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001052:	d1ca      	bne.n	8000fea <__aeabi_fdiv+0xba>
 8001054:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001058:	f47f af5c 	bne.w	8000f14 <__aeabi_fmul+0x14c>
 800105c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001060:	f47f af3c 	bne.w	8000edc <__aeabi_fmul+0x114>
 8001064:	e75f      	b.n	8000f26 <__aeabi_fmul+0x15e>
 8001066:	bf00      	nop

08001068 <__gesf2>:
 8001068:	f04f 3cff 	mov.w	ip, #4294967295
 800106c:	e006      	b.n	800107c <__cmpsf2+0x4>
 800106e:	bf00      	nop

08001070 <__lesf2>:
 8001070:	f04f 0c01 	mov.w	ip, #1
 8001074:	e002      	b.n	800107c <__cmpsf2+0x4>
 8001076:	bf00      	nop

08001078 <__cmpsf2>:
 8001078:	f04f 0c01 	mov.w	ip, #1
 800107c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001080:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001084:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	bf18      	it	ne
 800108e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001092:	d011      	beq.n	80010b8 <__cmpsf2+0x40>
 8001094:	b001      	add	sp, #4
 8001096:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800109a:	bf18      	it	ne
 800109c:	ea90 0f01 	teqne	r0, r1
 80010a0:	bf58      	it	pl
 80010a2:	ebb2 0003 	subspl.w	r0, r2, r3
 80010a6:	bf88      	it	hi
 80010a8:	17c8      	asrhi	r0, r1, #31
 80010aa:	bf38      	it	cc
 80010ac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010b0:	bf18      	it	ne
 80010b2:	f040 0001 	orrne.w	r0, r0, #1
 80010b6:	4770      	bx	lr
 80010b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010bc:	d102      	bne.n	80010c4 <__cmpsf2+0x4c>
 80010be:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010c2:	d105      	bne.n	80010d0 <__cmpsf2+0x58>
 80010c4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c8:	d1e4      	bne.n	8001094 <__cmpsf2+0x1c>
 80010ca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ce:	d0e1      	beq.n	8001094 <__cmpsf2+0x1c>
 80010d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop

080010d8 <__aeabi_cfrcmple>:
 80010d8:	4684      	mov	ip, r0
 80010da:	4608      	mov	r0, r1
 80010dc:	4661      	mov	r1, ip
 80010de:	e7ff      	b.n	80010e0 <__aeabi_cfcmpeq>

080010e0 <__aeabi_cfcmpeq>:
 80010e0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010e2:	f7ff ffc9 	bl	8001078 <__cmpsf2>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	bf48      	it	mi
 80010ea:	f110 0f00 	cmnmi.w	r0, #0
 80010ee:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010f0 <__aeabi_fcmpeq>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff fff4 	bl	80010e0 <__aeabi_cfcmpeq>
 80010f8:	bf0c      	ite	eq
 80010fa:	2001      	moveq	r0, #1
 80010fc:	2000      	movne	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmplt>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffea 	bl	80010e0 <__aeabi_cfcmpeq>
 800110c:	bf34      	ite	cc
 800110e:	2001      	movcc	r0, #1
 8001110:	2000      	movcs	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmple>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffe0 	bl	80010e0 <__aeabi_cfcmpeq>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpge>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffd2 	bl	80010d8 <__aeabi_cfrcmple>
 8001134:	bf94      	ite	ls
 8001136:	2001      	movls	r0, #1
 8001138:	2000      	movhi	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmpgt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffc8 	bl	80010d8 <__aeabi_cfrcmple>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_f2iz>:
 8001154:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001158:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800115c:	d30f      	bcc.n	800117e <__aeabi_f2iz+0x2a>
 800115e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001162:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001166:	d90d      	bls.n	8001184 <__aeabi_f2iz+0x30>
 8001168:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800116c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001170:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	bf18      	it	ne
 800117a:	4240      	negne	r0, r0
 800117c:	4770      	bx	lr
 800117e:	f04f 0000 	mov.w	r0, #0
 8001182:	4770      	bx	lr
 8001184:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001188:	d101      	bne.n	800118e <__aeabi_f2iz+0x3a>
 800118a:	0242      	lsls	r2, r0, #9
 800118c:	d105      	bne.n	800119a <__aeabi_f2iz+0x46>
 800118e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001192:	bf08      	it	eq
 8001194:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001198:	4770      	bx	lr
 800119a:	f04f 0000 	mov.w	r0, #0
 800119e:	4770      	bx	lr

080011a0 <__aeabi_uldivmod>:
 80011a0:	b953      	cbnz	r3, 80011b8 <__aeabi_uldivmod+0x18>
 80011a2:	b94a      	cbnz	r2, 80011b8 <__aeabi_uldivmod+0x18>
 80011a4:	2900      	cmp	r1, #0
 80011a6:	bf08      	it	eq
 80011a8:	2800      	cmpeq	r0, #0
 80011aa:	bf1c      	itt	ne
 80011ac:	f04f 31ff 	movne.w	r1, #4294967295
 80011b0:	f04f 30ff 	movne.w	r0, #4294967295
 80011b4:	f000 b9c2 	b.w	800153c <__aeabi_idiv0>
 80011b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80011bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011c0:	f000 f83c 	bl	800123c <__udivmoddi4>
 80011c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011cc:	b004      	add	sp, #16
 80011ce:	4770      	bx	lr

080011d0 <__aeabi_d2lz>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	2200      	movs	r2, #0
 80011d4:	2300      	movs	r3, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	460d      	mov	r5, r1
 80011da:	f7ff fc11 	bl	8000a00 <__aeabi_dcmplt>
 80011de:	b928      	cbnz	r0, 80011ec <__aeabi_d2lz+0x1c>
 80011e0:	4620      	mov	r0, r4
 80011e2:	4629      	mov	r1, r5
 80011e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011e8:	f000 b80a 	b.w	8001200 <__aeabi_d2ulz>
 80011ec:	4620      	mov	r0, r4
 80011ee:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011f2:	f000 f805 	bl	8001200 <__aeabi_d2ulz>
 80011f6:	4240      	negs	r0, r0
 80011f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011fc:	bd38      	pop	{r3, r4, r5, pc}
 80011fe:	bf00      	nop

08001200 <__aeabi_d2ulz>:
 8001200:	b5d0      	push	{r4, r6, r7, lr}
 8001202:	2200      	movs	r2, #0
 8001204:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <__aeabi_d2ulz+0x34>)
 8001206:	4606      	mov	r6, r0
 8001208:	460f      	mov	r7, r1
 800120a:	f7ff f987 	bl	800051c <__aeabi_dmul>
 800120e:	f7ff fc5d 	bl	8000acc <__aeabi_d2uiz>
 8001212:	4604      	mov	r4, r0
 8001214:	f7ff f908 	bl	8000428 <__aeabi_ui2d>
 8001218:	2200      	movs	r2, #0
 800121a:	4b07      	ldr	r3, [pc, #28]	@ (8001238 <__aeabi_d2ulz+0x38>)
 800121c:	f7ff f97e 	bl	800051c <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4630      	mov	r0, r6
 8001226:	4639      	mov	r1, r7
 8001228:	f7fe ffc0 	bl	80001ac <__aeabi_dsub>
 800122c:	f7ff fc4e 	bl	8000acc <__aeabi_d2uiz>
 8001230:	4621      	mov	r1, r4
 8001232:	bdd0      	pop	{r4, r6, r7, pc}
 8001234:	3df00000 	.word	0x3df00000
 8001238:	41f00000 	.word	0x41f00000

0800123c <__udivmoddi4>:
 800123c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001240:	9d08      	ldr	r5, [sp, #32]
 8001242:	468e      	mov	lr, r1
 8001244:	4604      	mov	r4, r0
 8001246:	4688      	mov	r8, r1
 8001248:	2b00      	cmp	r3, #0
 800124a:	d14a      	bne.n	80012e2 <__udivmoddi4+0xa6>
 800124c:	428a      	cmp	r2, r1
 800124e:	4617      	mov	r7, r2
 8001250:	d962      	bls.n	8001318 <__udivmoddi4+0xdc>
 8001252:	fab2 f682 	clz	r6, r2
 8001256:	b14e      	cbz	r6, 800126c <__udivmoddi4+0x30>
 8001258:	f1c6 0320 	rsb	r3, r6, #32
 800125c:	fa01 f806 	lsl.w	r8, r1, r6
 8001260:	fa20 f303 	lsr.w	r3, r0, r3
 8001264:	40b7      	lsls	r7, r6
 8001266:	ea43 0808 	orr.w	r8, r3, r8
 800126a:	40b4      	lsls	r4, r6
 800126c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001270:	fbb8 f1fe 	udiv	r1, r8, lr
 8001274:	fa1f fc87 	uxth.w	ip, r7
 8001278:	fb0e 8811 	mls	r8, lr, r1, r8
 800127c:	fb01 f20c 	mul.w	r2, r1, ip
 8001280:	0c23      	lsrs	r3, r4, #16
 8001282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001286:	429a      	cmp	r2, r3
 8001288:	d909      	bls.n	800129e <__udivmoddi4+0x62>
 800128a:	18fb      	adds	r3, r7, r3
 800128c:	f101 30ff 	add.w	r0, r1, #4294967295
 8001290:	f080 80eb 	bcs.w	800146a <__udivmoddi4+0x22e>
 8001294:	429a      	cmp	r2, r3
 8001296:	f240 80e8 	bls.w	800146a <__udivmoddi4+0x22e>
 800129a:	3902      	subs	r1, #2
 800129c:	443b      	add	r3, r7
 800129e:	1a9a      	subs	r2, r3, r2
 80012a0:	fbb2 f0fe 	udiv	r0, r2, lr
 80012a4:	fb0e 2210 	mls	r2, lr, r0, r2
 80012a8:	fb00 fc0c 	mul.w	ip, r0, ip
 80012ac:	b2a3      	uxth	r3, r4
 80012ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80012b2:	459c      	cmp	ip, r3
 80012b4:	d909      	bls.n	80012ca <__udivmoddi4+0x8e>
 80012b6:	18fb      	adds	r3, r7, r3
 80012b8:	f100 32ff 	add.w	r2, r0, #4294967295
 80012bc:	f080 80d7 	bcs.w	800146e <__udivmoddi4+0x232>
 80012c0:	459c      	cmp	ip, r3
 80012c2:	f240 80d4 	bls.w	800146e <__udivmoddi4+0x232>
 80012c6:	443b      	add	r3, r7
 80012c8:	3802      	subs	r0, #2
 80012ca:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012ce:	2100      	movs	r1, #0
 80012d0:	eba3 030c 	sub.w	r3, r3, ip
 80012d4:	b11d      	cbz	r5, 80012de <__udivmoddi4+0xa2>
 80012d6:	2200      	movs	r2, #0
 80012d8:	40f3      	lsrs	r3, r6
 80012da:	e9c5 3200 	strd	r3, r2, [r5]
 80012de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012e2:	428b      	cmp	r3, r1
 80012e4:	d905      	bls.n	80012f2 <__udivmoddi4+0xb6>
 80012e6:	b10d      	cbz	r5, 80012ec <__udivmoddi4+0xb0>
 80012e8:	e9c5 0100 	strd	r0, r1, [r5]
 80012ec:	2100      	movs	r1, #0
 80012ee:	4608      	mov	r0, r1
 80012f0:	e7f5      	b.n	80012de <__udivmoddi4+0xa2>
 80012f2:	fab3 f183 	clz	r1, r3
 80012f6:	2900      	cmp	r1, #0
 80012f8:	d146      	bne.n	8001388 <__udivmoddi4+0x14c>
 80012fa:	4573      	cmp	r3, lr
 80012fc:	d302      	bcc.n	8001304 <__udivmoddi4+0xc8>
 80012fe:	4282      	cmp	r2, r0
 8001300:	f200 8108 	bhi.w	8001514 <__udivmoddi4+0x2d8>
 8001304:	1a84      	subs	r4, r0, r2
 8001306:	eb6e 0203 	sbc.w	r2, lr, r3
 800130a:	2001      	movs	r0, #1
 800130c:	4690      	mov	r8, r2
 800130e:	2d00      	cmp	r5, #0
 8001310:	d0e5      	beq.n	80012de <__udivmoddi4+0xa2>
 8001312:	e9c5 4800 	strd	r4, r8, [r5]
 8001316:	e7e2      	b.n	80012de <__udivmoddi4+0xa2>
 8001318:	2a00      	cmp	r2, #0
 800131a:	f000 8091 	beq.w	8001440 <__udivmoddi4+0x204>
 800131e:	fab2 f682 	clz	r6, r2
 8001322:	2e00      	cmp	r6, #0
 8001324:	f040 80a5 	bne.w	8001472 <__udivmoddi4+0x236>
 8001328:	1a8a      	subs	r2, r1, r2
 800132a:	2101      	movs	r1, #1
 800132c:	0c03      	lsrs	r3, r0, #16
 800132e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001332:	b280      	uxth	r0, r0
 8001334:	b2bc      	uxth	r4, r7
 8001336:	fbb2 fcfe 	udiv	ip, r2, lr
 800133a:	fb0e 221c 	mls	r2, lr, ip, r2
 800133e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001342:	fb04 f20c 	mul.w	r2, r4, ip
 8001346:	429a      	cmp	r2, r3
 8001348:	d907      	bls.n	800135a <__udivmoddi4+0x11e>
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001350:	d202      	bcs.n	8001358 <__udivmoddi4+0x11c>
 8001352:	429a      	cmp	r2, r3
 8001354:	f200 80e3 	bhi.w	800151e <__udivmoddi4+0x2e2>
 8001358:	46c4      	mov	ip, r8
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	fbb3 f2fe 	udiv	r2, r3, lr
 8001360:	fb0e 3312 	mls	r3, lr, r2, r3
 8001364:	fb02 f404 	mul.w	r4, r2, r4
 8001368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800136c:	429c      	cmp	r4, r3
 800136e:	d907      	bls.n	8001380 <__udivmoddi4+0x144>
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	f102 30ff 	add.w	r0, r2, #4294967295
 8001376:	d202      	bcs.n	800137e <__udivmoddi4+0x142>
 8001378:	429c      	cmp	r4, r3
 800137a:	f200 80cd 	bhi.w	8001518 <__udivmoddi4+0x2dc>
 800137e:	4602      	mov	r2, r0
 8001380:	1b1b      	subs	r3, r3, r4
 8001382:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001386:	e7a5      	b.n	80012d4 <__udivmoddi4+0x98>
 8001388:	f1c1 0620 	rsb	r6, r1, #32
 800138c:	408b      	lsls	r3, r1
 800138e:	fa22 f706 	lsr.w	r7, r2, r6
 8001392:	431f      	orrs	r7, r3
 8001394:	fa2e fa06 	lsr.w	sl, lr, r6
 8001398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800139c:	fbba f8f9 	udiv	r8, sl, r9
 80013a0:	fa0e fe01 	lsl.w	lr, lr, r1
 80013a4:	fa20 f306 	lsr.w	r3, r0, r6
 80013a8:	fb09 aa18 	mls	sl, r9, r8, sl
 80013ac:	fa1f fc87 	uxth.w	ip, r7
 80013b0:	ea43 030e 	orr.w	r3, r3, lr
 80013b4:	fa00 fe01 	lsl.w	lr, r0, r1
 80013b8:	fb08 f00c 	mul.w	r0, r8, ip
 80013bc:	0c1c      	lsrs	r4, r3, #16
 80013be:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013c2:	42a0      	cmp	r0, r4
 80013c4:	fa02 f201 	lsl.w	r2, r2, r1
 80013c8:	d90a      	bls.n	80013e0 <__udivmoddi4+0x1a4>
 80013ca:	193c      	adds	r4, r7, r4
 80013cc:	f108 3aff 	add.w	sl, r8, #4294967295
 80013d0:	f080 809e 	bcs.w	8001510 <__udivmoddi4+0x2d4>
 80013d4:	42a0      	cmp	r0, r4
 80013d6:	f240 809b 	bls.w	8001510 <__udivmoddi4+0x2d4>
 80013da:	f1a8 0802 	sub.w	r8, r8, #2
 80013de:	443c      	add	r4, r7
 80013e0:	1a24      	subs	r4, r4, r0
 80013e2:	b298      	uxth	r0, r3
 80013e4:	fbb4 f3f9 	udiv	r3, r4, r9
 80013e8:	fb09 4413 	mls	r4, r9, r3, r4
 80013ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80013f0:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013f4:	45a4      	cmp	ip, r4
 80013f6:	d909      	bls.n	800140c <__udivmoddi4+0x1d0>
 80013f8:	193c      	adds	r4, r7, r4
 80013fa:	f103 30ff 	add.w	r0, r3, #4294967295
 80013fe:	f080 8085 	bcs.w	800150c <__udivmoddi4+0x2d0>
 8001402:	45a4      	cmp	ip, r4
 8001404:	f240 8082 	bls.w	800150c <__udivmoddi4+0x2d0>
 8001408:	3b02      	subs	r3, #2
 800140a:	443c      	add	r4, r7
 800140c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001410:	eba4 040c 	sub.w	r4, r4, ip
 8001414:	fba0 8c02 	umull	r8, ip, r0, r2
 8001418:	4564      	cmp	r4, ip
 800141a:	4643      	mov	r3, r8
 800141c:	46e1      	mov	r9, ip
 800141e:	d364      	bcc.n	80014ea <__udivmoddi4+0x2ae>
 8001420:	d061      	beq.n	80014e6 <__udivmoddi4+0x2aa>
 8001422:	b15d      	cbz	r5, 800143c <__udivmoddi4+0x200>
 8001424:	ebbe 0203 	subs.w	r2, lr, r3
 8001428:	eb64 0409 	sbc.w	r4, r4, r9
 800142c:	fa04 f606 	lsl.w	r6, r4, r6
 8001430:	fa22 f301 	lsr.w	r3, r2, r1
 8001434:	431e      	orrs	r6, r3
 8001436:	40cc      	lsrs	r4, r1
 8001438:	e9c5 6400 	strd	r6, r4, [r5]
 800143c:	2100      	movs	r1, #0
 800143e:	e74e      	b.n	80012de <__udivmoddi4+0xa2>
 8001440:	fbb1 fcf2 	udiv	ip, r1, r2
 8001444:	0c01      	lsrs	r1, r0, #16
 8001446:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800144a:	b280      	uxth	r0, r0
 800144c:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001450:	463b      	mov	r3, r7
 8001452:	fbb1 f1f7 	udiv	r1, r1, r7
 8001456:	4638      	mov	r0, r7
 8001458:	463c      	mov	r4, r7
 800145a:	46b8      	mov	r8, r7
 800145c:	46be      	mov	lr, r7
 800145e:	2620      	movs	r6, #32
 8001460:	eba2 0208 	sub.w	r2, r2, r8
 8001464:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001468:	e765      	b.n	8001336 <__udivmoddi4+0xfa>
 800146a:	4601      	mov	r1, r0
 800146c:	e717      	b.n	800129e <__udivmoddi4+0x62>
 800146e:	4610      	mov	r0, r2
 8001470:	e72b      	b.n	80012ca <__udivmoddi4+0x8e>
 8001472:	f1c6 0120 	rsb	r1, r6, #32
 8001476:	fa2e fc01 	lsr.w	ip, lr, r1
 800147a:	40b7      	lsls	r7, r6
 800147c:	fa0e fe06 	lsl.w	lr, lr, r6
 8001480:	fa20 f101 	lsr.w	r1, r0, r1
 8001484:	ea41 010e 	orr.w	r1, r1, lr
 8001488:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800148c:	fbbc f8fe 	udiv	r8, ip, lr
 8001490:	b2bc      	uxth	r4, r7
 8001492:	fb0e cc18 	mls	ip, lr, r8, ip
 8001496:	fb08 f904 	mul.w	r9, r8, r4
 800149a:	0c0a      	lsrs	r2, r1, #16
 800149c:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80014a0:	40b0      	lsls	r0, r6
 80014a2:	4591      	cmp	r9, r2
 80014a4:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80014a8:	b280      	uxth	r0, r0
 80014aa:	d93e      	bls.n	800152a <__udivmoddi4+0x2ee>
 80014ac:	18ba      	adds	r2, r7, r2
 80014ae:	f108 3cff 	add.w	ip, r8, #4294967295
 80014b2:	d201      	bcs.n	80014b8 <__udivmoddi4+0x27c>
 80014b4:	4591      	cmp	r9, r2
 80014b6:	d81f      	bhi.n	80014f8 <__udivmoddi4+0x2bc>
 80014b8:	eba2 0209 	sub.w	r2, r2, r9
 80014bc:	fbb2 f9fe 	udiv	r9, r2, lr
 80014c0:	fb09 f804 	mul.w	r8, r9, r4
 80014c4:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014c8:	b28a      	uxth	r2, r1
 80014ca:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014ce:	4542      	cmp	r2, r8
 80014d0:	d229      	bcs.n	8001526 <__udivmoddi4+0x2ea>
 80014d2:	18ba      	adds	r2, r7, r2
 80014d4:	f109 31ff 	add.w	r1, r9, #4294967295
 80014d8:	d2c2      	bcs.n	8001460 <__udivmoddi4+0x224>
 80014da:	4542      	cmp	r2, r8
 80014dc:	d2c0      	bcs.n	8001460 <__udivmoddi4+0x224>
 80014de:	f1a9 0102 	sub.w	r1, r9, #2
 80014e2:	443a      	add	r2, r7
 80014e4:	e7bc      	b.n	8001460 <__udivmoddi4+0x224>
 80014e6:	45c6      	cmp	lr, r8
 80014e8:	d29b      	bcs.n	8001422 <__udivmoddi4+0x1e6>
 80014ea:	ebb8 0302 	subs.w	r3, r8, r2
 80014ee:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014f2:	3801      	subs	r0, #1
 80014f4:	46e1      	mov	r9, ip
 80014f6:	e794      	b.n	8001422 <__udivmoddi4+0x1e6>
 80014f8:	eba7 0909 	sub.w	r9, r7, r9
 80014fc:	444a      	add	r2, r9
 80014fe:	fbb2 f9fe 	udiv	r9, r2, lr
 8001502:	f1a8 0c02 	sub.w	ip, r8, #2
 8001506:	fb09 f804 	mul.w	r8, r9, r4
 800150a:	e7db      	b.n	80014c4 <__udivmoddi4+0x288>
 800150c:	4603      	mov	r3, r0
 800150e:	e77d      	b.n	800140c <__udivmoddi4+0x1d0>
 8001510:	46d0      	mov	r8, sl
 8001512:	e765      	b.n	80013e0 <__udivmoddi4+0x1a4>
 8001514:	4608      	mov	r0, r1
 8001516:	e6fa      	b.n	800130e <__udivmoddi4+0xd2>
 8001518:	443b      	add	r3, r7
 800151a:	3a02      	subs	r2, #2
 800151c:	e730      	b.n	8001380 <__udivmoddi4+0x144>
 800151e:	f1ac 0c02 	sub.w	ip, ip, #2
 8001522:	443b      	add	r3, r7
 8001524:	e719      	b.n	800135a <__udivmoddi4+0x11e>
 8001526:	4649      	mov	r1, r9
 8001528:	e79a      	b.n	8001460 <__udivmoddi4+0x224>
 800152a:	eba2 0209 	sub.w	r2, r2, r9
 800152e:	fbb2 f9fe 	udiv	r9, r2, lr
 8001532:	46c4      	mov	ip, r8
 8001534:	fb09 f804 	mul.w	r8, r9, r4
 8001538:	e7c4      	b.n	80014c4 <__udivmoddi4+0x288>
 800153a:	bf00      	nop

0800153c <__aeabi_idiv0>:
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop

08001540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001540:	b590      	push	{r4, r7, lr}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001546:	4b49      	ldr	r3, [pc, #292]	@ (800166c <main+0x12c>)
 8001548:	4a49      	ldr	r2, [pc, #292]	@ (8001670 <main+0x130>)
 800154a:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 800154c:	4b47      	ldr	r3, [pc, #284]	@ (800166c <main+0x12c>)
 800154e:	4a49      	ldr	r2, [pc, #292]	@ (8001674 <main+0x134>)
 8001550:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 8001552:	4b46      	ldr	r3, [pc, #280]	@ (800166c <main+0x12c>)
 8001554:	4a48      	ldr	r2, [pc, #288]	@ (8001678 <main+0x138>)
 8001556:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001558:	f000 fcd5 	bl	8001f06 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f8a8 	bl	80016b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  iks01a3_i2c_stuck_quirk();
 8001560:	f000 faa4 	bl	8001aac <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001564:	f000 f94a 	bl	80017fc <MX_GPIO_Init>
  MX_I2C1_Init();
 8001568:	f000 f8f0 	bl	800174c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800156c:	f000 f91c 	bl	80017a8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lsm6dso_initialize();
 8001570:	f000 fa1a 	bl	80019a8 <lsm6dso_initialize>
  if (NEAI_MODE) {
    neai_state = neai_classification_init(knowledge);
 8001574:	4841      	ldr	r0, [pc, #260]	@ (800167c <main+0x13c>)
 8001576:	f004 f9d5 	bl	8005924 <neai_classification_init>
 800157a:	4603      	mov	r3, r0
 800157c:	461a      	mov	r2, r3
 800157e:	4b40      	ldr	r3, [pc, #256]	@ (8001680 <main+0x140>)
 8001580:	701a      	strb	r2, [r3, #0]
    printf("Initialize NEAI library. NEAI init return: %d.\n",  neai_state);
 8001582:	4b3f      	ldr	r3, [pc, #252]	@ (8001680 <main+0x140>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4619      	mov	r1, r3
 8001588:	483e      	ldr	r0, [pc, #248]	@ (8001684 <main+0x144>)
 800158a:	f005 fff3 	bl	8007574 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (drdy) {
 800158e:	4b3e      	ldr	r3, [pc, #248]	@ (8001688 <main+0x148>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0fa      	beq.n	800158e <main+0x4e>
		  /* Reset data ready condition */
		  drdy = 0;
 8001598:	4b3b      	ldr	r3, [pc, #236]	@ (8001688 <main+0x148>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
		  /* Read acceleration data */
		  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800159e:	2206      	movs	r2, #6
 80015a0:	2100      	movs	r1, #0
 80015a2:	483a      	ldr	r0, [pc, #232]	@ (800168c <main+0x14c>)
 80015a4:	f006 f950 	bl	8007848 <memset>
		  lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80015a8:	4938      	ldr	r1, [pc, #224]	@ (800168c <main+0x14c>)
 80015aa:	4830      	ldr	r0, [pc, #192]	@ (800166c <main+0x12c>)
 80015ac:	f003 fa10 	bl	80049d0 <lsm6dso_acceleration_raw_get>
		  for (uint8_t i = 0; i < AXIS; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	71fb      	strb	r3, [r7, #7]
 80015b4:	e015      	b.n	80015e2 <main+0xa2>
			  neai_buffer[(AXIS * drdy_counter) + i] = lsm6dso_convert_accel_data_to_mg(data_raw_acceleration[i]);
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	4a34      	ldr	r2, [pc, #208]	@ (800168c <main+0x14c>)
 80015ba:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80015be:	4b34      	ldr	r3, [pc, #208]	@ (8001690 <main+0x150>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	441a      	add	r2, r3
 80015ca:	79fb      	ldrb	r3, [r7, #7]
 80015cc:	18d4      	adds	r4, r2, r3
 80015ce:	4608      	mov	r0, r1
 80015d0:	f000 fa58 	bl	8001a84 <lsm6dso_convert_accel_data_to_mg>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4a2f      	ldr	r2, [pc, #188]	@ (8001694 <main+0x154>)
 80015d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  for (uint8_t i = 0; i < AXIS; i++) {
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	3301      	adds	r3, #1
 80015e0:	71fb      	strb	r3, [r7, #7]
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d9e6      	bls.n	80015b6 <main+0x76>
		  }
		  drdy_counter++;
 80015e8:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <main+0x150>)
 80015ea:	881b      	ldrh	r3, [r3, #0]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <main+0x150>)
 80015f2:	801a      	strh	r2, [r3, #0]
		  if (drdy_counter >= SAMPLES) {
 80015f4:	4b26      	ldr	r3, [pc, #152]	@ (8001690 <main+0x150>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80015fa:	d9c8      	bls.n	800158e <main+0x4e>
			  /* Set Output Data Rate */
			  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_OFF);
 80015fc:	2100      	movs	r1, #0
 80015fe:	481b      	ldr	r0, [pc, #108]	@ (800166c <main+0x12c>)
 8001600:	f003 f8ec 	bl	80047dc <lsm6dso_xl_data_rate_set>
#if (NEAI_MODE)
			  neai_state = neai_classification(neai_buffer, class_output_buffer, &id_class);
 8001604:	4a24      	ldr	r2, [pc, #144]	@ (8001698 <main+0x158>)
 8001606:	4925      	ldr	r1, [pc, #148]	@ (800169c <main+0x15c>)
 8001608:	4822      	ldr	r0, [pc, #136]	@ (8001694 <main+0x154>)
 800160a:	f004 fa5d 	bl	8005ac8 <neai_classification>
 800160e:	4603      	mov	r3, r0
 8001610:	461a      	mov	r2, r3
 8001612:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <main+0x140>)
 8001614:	701a      	strb	r2, [r3, #0]
			  printf("Class: %s. NEAI classification return: %d.\r\n", id2class[id_class], neai_state);
 8001616:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <main+0x158>)
 8001618:	881b      	ldrh	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <main+0x160>)
 800161e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <main+0x140>)
 8001624:	7812      	ldrb	r2, [r2, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	481e      	ldr	r0, [pc, #120]	@ (80016a4 <main+0x164>)
 800162a:	f005 ffa3 	bl	8007574 <iprintf>

			  if (!strcmp(id2class[id_class], "static")) {
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <main+0x158>)
 8001630:	881b      	ldrh	r3, [r3, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	4b1a      	ldr	r3, [pc, #104]	@ (80016a0 <main+0x160>)
 8001636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163a:	491b      	ldr	r1, [pc, #108]	@ (80016a8 <main+0x168>)
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fd9f 	bl	8000180 <strcmp>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <main+0x10e>
				  printf("test\r\n");
 8001648:	4818      	ldr	r0, [pc, #96]	@ (80016ac <main+0x16c>)
 800164a:	f005 fffb 	bl	8007644 <puts>
				  printf("%.3f ", neai_buffer[i]);
			  }
			  printf("\r\n");
#endif
			  /* Reset drdy_counter in order to get a new buffer */
			  drdy_counter = 0;
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <main+0x150>)
 8001650:	2200      	movs	r2, #0
 8001652:	801a      	strh	r2, [r3, #0]
			  /* Clean neai buffer */
			  memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 8001654:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001658:	2100      	movs	r1, #0
 800165a:	480e      	ldr	r0, [pc, #56]	@ (8001694 <main+0x154>)
 800165c:	f006 f8f4 	bl	8007848 <memset>
			  /* Set Output Data Rate */
			  lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001660:	2106      	movs	r1, #6
 8001662:	4802      	ldr	r0, [pc, #8]	@ (800166c <main+0x12c>)
 8001664:	f003 f8ba 	bl	80047dc <lsm6dso_xl_data_rate_set>
	  if (drdy) {
 8001668:	e791      	b.n	800158e <main+0x4e>
 800166a:	bf00      	nop
 800166c:	200008b4 	.word	0x200008b4
 8001670:	08001935 	.word	0x08001935
 8001674:	0800196f 	.word	0x0800196f
 8001678:	20000208 	.word	0x20000208
 800167c:	0800b838 	.word	0x0800b838
 8001680:	200002ac 	.word	0x200002ac
 8001684:	0800b7a4 	.word	0x0800b7a4
 8001688:	200002b0 	.word	0x200002b0
 800168c:	200002a4 	.word	0x200002a4
 8001690:	200002b2 	.word	0x200002b2
 8001694:	200002b4 	.word	0x200002b4
 8001698:	200002ae 	.word	0x200002ae
 800169c:	200008c4 	.word	0x200008c4
 80016a0:	20000000 	.word	0x20000000
 80016a4:	0800b7d4 	.word	0x0800b7d4
 80016a8:	0800b794 	.word	0x0800b794
 80016ac:	0800b804 	.word	0x0800b804

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b092      	sub	sp, #72	@ 0x48
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	2234      	movs	r2, #52	@ 0x34
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f006 f8c2 	bl	8007848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
 80016d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001748 <SystemClock_Config+0x98>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80016da:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <SystemClock_Config+0x98>)
 80016dc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016e0:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e2:	2302      	movs	r3, #2
 80016e4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e6:	2301      	movs	r3, #1
 80016e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ea:	2310      	movs	r3, #16
 80016ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016f6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80016fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80016fc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8001700:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	4618      	mov	r0, r3
 8001708:	f001 ff80 	bl	800360c <HAL_RCC_OscConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001712:	f000 fa1b 	bl	8001b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001716:	230f      	movs	r3, #15
 8001718:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171a:	2303      	movs	r3, #3
 800171c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800172a:	463b      	mov	r3, r7
 800172c:	2101      	movs	r1, #1
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fa9c 	bl	8003c6c <HAL_RCC_ClockConfig>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800173a:	f000 fa07 	bl	8001b4c <Error_Handler>
  }
}
 800173e:	bf00      	nop
 8001740:	3748      	adds	r7, #72	@ 0x48
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40007000 	.word	0x40007000

0800174c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <MX_I2C1_Init+0x50>)
 8001752:	4a13      	ldr	r2, [pc, #76]	@ (80017a0 <MX_I2C1_Init+0x54>)
 8001754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001756:	4b11      	ldr	r3, [pc, #68]	@ (800179c <MX_I2C1_Init+0x50>)
 8001758:	4a12      	ldr	r2, [pc, #72]	@ (80017a4 <MX_I2C1_Init+0x58>)
 800175a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800175c:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <MX_I2C1_Init+0x50>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001762:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <MX_I2C1_Init+0x50>)
 8001764:	2200      	movs	r2, #0
 8001766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001768:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <MX_I2C1_Init+0x50>)
 800176a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800176e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001770:	4b0a      	ldr	r3, [pc, #40]	@ (800179c <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <MX_I2C1_Init+0x50>)
 800177e:	2200      	movs	r2, #0
 8001780:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <MX_I2C1_Init+0x50>)
 8001784:	2200      	movs	r2, #0
 8001786:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_I2C1_Init+0x50>)
 800178a:	f000 ff1b 	bl	80025c4 <HAL_I2C_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 f9da 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000208 	.word	0x20000208
 80017a0:	40005400 	.word	0x40005400
 80017a4:	00061a80 	.word	0x00061a80

080017a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <MX_USART2_UART_Init+0x50>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017b2:	4b10      	ldr	r3, [pc, #64]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b08      	ldr	r3, [pc, #32]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017de:	4805      	ldr	r0, [pc, #20]	@ (80017f4 <MX_USART2_UART_Init+0x4c>)
 80017e0:	f002 fd0a 	bl	80041f8 <HAL_UART_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ea:	f000 f9af 	bl	8001b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	2000025c 	.word	0x2000025c
 80017f8:	40004400 	.word	0x40004400

080017fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001812:	4b2f      	ldr	r3, [pc, #188]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a2e      	ldr	r2, [pc, #184]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001818:	f043 0304 	orr.w	r3, r3, #4
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4a28      	ldr	r2, [pc, #160]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	61d3      	str	r3, [r2, #28]
 8001836:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a22      	ldr	r2, [pc, #136]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <MX_GPIO_Init+0xd4>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2120      	movs	r1, #32
 800185e:	481d      	ldr	r0, [pc, #116]	@ (80018d4 <MX_GPIO_Init+0xd8>)
 8001860:	f000 fe80 	bl	8002564 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800186a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 030c 	add.w	r3, r7, #12
 8001878:	4619      	mov	r1, r3
 800187a:	4817      	ldr	r0, [pc, #92]	@ (80018d8 <MX_GPIO_Init+0xdc>)
 800187c:	f000 fce2 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001880:	2320      	movs	r3, #32
 8001882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 030c 	add.w	r3, r7, #12
 8001894:	4619      	mov	r1, r3
 8001896:	480f      	ldr	r0, [pc, #60]	@ (80018d4 <MX_GPIO_Init+0xd8>)
 8001898:	f000 fcd4 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_ACC_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 800189c:	2320      	movs	r3, #32
 800189e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 80018aa:	f107 030c 	add.w	r3, r7, #12
 80018ae:	4619      	mov	r1, r3
 80018b0:	480a      	ldr	r0, [pc, #40]	@ (80018dc <MX_GPIO_Init+0xe0>)
 80018b2:	f000 fcc7 	bl	8002244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2100      	movs	r1, #0
 80018ba:	2017      	movs	r0, #23
 80018bc:	f000 fc8b 	bl	80021d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018c0:	2017      	movs	r0, #23
 80018c2:	f000 fca4 	bl	800220e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018c6:	bf00      	nop
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020000 	.word	0x40020000
 80018d8:	40020800 	.word	0x40020800
 80018dc:	40020400 	.word	0x40020400

080018e0 <__io_putchar>:
  * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
  * @retval
  * @param
  */
int __io_putchar(int ch)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80018ee:	f107 010c 	add.w	r1, r7, #12
 80018f2:	230a      	movs	r3, #10
 80018f4:	2201      	movs	r2, #1
 80018f6:	4804      	ldr	r0, [pc, #16]	@ (8001908 <__io_putchar+0x28>)
 80018f8:	f002 fcce 	bl	8004298 <HAL_UART_Transmit>
 return ch;
 80018fc:	687b      	ldr	r3, [r7, #4]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000025c 	.word	0x2000025c

0800190c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	2b20      	cmp	r3, #32
 800191a:	d103      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x18>
  case GYRO_ACC_INT_Pin:
    drdy = 1;
 800191c:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <HAL_GPIO_EXTI_Callback+0x24>)
 800191e:	2201      	movs	r2, #1
 8001920:	701a      	strb	r2, [r3, #0]
    break;
 8001922:	bf00      	nop
  }
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	200002b0 	.word	0x200002b0

08001934 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af04      	add	r7, sp, #16
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	461a      	mov	r2, r3
 8001940:	460b      	mov	r3, r1
 8001942:	72fb      	strb	r3, [r7, #11]
 8001944:	4613      	mov	r3, r2
 8001946:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	b29a      	uxth	r2, r3
 800194c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001950:	9302      	str	r3, [sp, #8]
 8001952:	893b      	ldrh	r3, [r7, #8]
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	21d7      	movs	r1, #215	@ 0xd7
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 ff74 	bl	800284c <HAL_I2C_Mem_Write>
  return 0;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b088      	sub	sp, #32
 8001972:	af04      	add	r7, sp, #16
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	607a      	str	r2, [r7, #4]
 8001978:	461a      	mov	r2, r3
 800197a:	460b      	mov	r3, r1
 800197c:	72fb      	strb	r3, [r7, #11]
 800197e:	4613      	mov	r3, r2
 8001980:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	b29a      	uxth	r2, r3
 8001986:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800198a:	9302      	str	r3, [sp, #8]
 800198c:	893b      	ldrh	r3, [r7, #8]
 800198e:	9301      	str	r3, [sp, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2301      	movs	r3, #1
 8001996:	21d7      	movs	r1, #215	@ 0xd7
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f001 f851 	bl	8002a40 <HAL_I2C_Mem_Read>
  return 0;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <lsm6dso_initialize>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize()
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  lsm6dso_initialize_basics();
 80019ac:	f000 f80e 	bl	80019cc <lsm6dso_initialize_basics>
#ifdef ACCELEROMETER
  /* Accelelerometer configuration */
  lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 80019b0:	2106      	movs	r1, #6
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <lsm6dso_initialize+0x20>)
 80019b4:	f002 ff12 	bl	80047dc <lsm6dso_xl_data_rate_set>
  lsm6dso_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 80019b8:	2102      	movs	r1, #2
 80019ba:	4803      	ldr	r0, [pc, #12]	@ (80019c8 <lsm6dso_initialize+0x20>)
 80019bc:	f002 fee8 	bl	8004790 <lsm6dso_xl_full_scale_set>
#else
  /* Gyroscope configuration */
  lsm6dso_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
  lsm6dso_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
  lsm6dso_initialize_fifo();
 80019c0:	f000 f82c 	bl	8001a1c <lsm6dso_initialize_fifo>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200008b4 	.word	0x200008b4

080019cc <lsm6dso_initialize_basics>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_basics()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <lsm6dso_initialize_basics+0x44>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]

  do {
    HAL_Delay(20);
 80019d6:	2014      	movs	r0, #20
 80019d8:	f000 fb04 	bl	8001fe4 <HAL_Delay>
    lsm6dso_device_id_get(&dev_ctx, &whoamI);
 80019dc:	490c      	ldr	r1, [pc, #48]	@ (8001a10 <lsm6dso_initialize_basics+0x44>)
 80019de:	480d      	ldr	r0, [pc, #52]	@ (8001a14 <lsm6dso_initialize_basics+0x48>)
 80019e0:	f003 f85b 	bl	8004a9a <lsm6dso_device_id_get>
  } while(whoamI != LSM6DSO_ID);
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <lsm6dso_initialize_basics+0x44>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b6c      	cmp	r3, #108	@ 0x6c
 80019ea:	d1f4      	bne.n	80019d6 <lsm6dso_initialize_basics+0xa>

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80019ec:	2101      	movs	r1, #1
 80019ee:	4809      	ldr	r0, [pc, #36]	@ (8001a14 <lsm6dso_initialize_basics+0x48>)
 80019f0:	f003 f864 	bl	8004abc <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 80019f4:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <lsm6dso_initialize_basics+0x4c>)
 80019f6:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <lsm6dso_initialize_basics+0x48>)
 80019f8:	f003 f886 	bl	8004b08 <lsm6dso_reset_get>
  } while (rst);
 80019fc:	4b06      	ldr	r3, [pc, #24]	@ (8001a18 <lsm6dso_initialize_basics+0x4c>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f7      	bne.n	80019f4 <lsm6dso_initialize_basics+0x28>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	4803      	ldr	r0, [pc, #12]	@ (8001a14 <lsm6dso_initialize_basics+0x48>)
 8001a08:	f003 f897 	bl	8004b3a <lsm6dso_i3c_disable_set>
}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	200002aa 	.word	0x200002aa
 8001a14:	200008b4 	.word	0x200008b4
 8001a18:	200002ab 	.word	0x200002ab

08001a1c <lsm6dso_initialize_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_fifo()
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
#ifdef ACCELEROMETER
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 8001a22:	2106      	movs	r1, #6
 8001a24:	4815      	ldr	r0, [pc, #84]	@ (8001a7c <lsm6dso_initialize_fifo+0x60>)
 8001a26:	f003 f908 	bl	8004c3a <lsm6dso_fifo_xl_batch_set>
  lsm6dso_fifo_gy_batch_set(&dev_ctx, 0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	4813      	ldr	r0, [pc, #76]	@ (8001a7c <lsm6dso_initialize_fifo+0x60>)
 8001a2e:	f003 f92a 	bl	8004c86 <lsm6dso_fifo_gy_batch_set>
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, 0);
  lsm6dso_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
  /* FIFO MODE */
  lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 8001a32:	2101      	movs	r1, #1
 8001a34:	4811      	ldr	r0, [pc, #68]	@ (8001a7c <lsm6dso_initialize_fifo+0x60>)
 8001a36:	f003 f94c 	bl	8004cd2 <lsm6dso_fifo_mode_set>
  /* Watermark config */
  if (SAMPLES <= MAX_FIFO_SIZE) {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001a3a:	2180      	movs	r1, #128	@ 0x80
 8001a3c:	480f      	ldr	r0, [pc, #60]	@ (8001a7c <lsm6dso_initialize_fifo+0x60>)
 8001a3e:	f003 f8c4 	bl	8004bca <lsm6dso_fifo_watermark_set>
  }
  else {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
  }
  /* Need to enable interrupt pin when wtm is reached */
  uint8_t ctrl = 0x08;
 8001a42:	2308      	movs	r3, #8
 8001a44:	71fb      	strb	r3, [r7, #7]
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_INT1_CTRL, (uint8_t *) &ctrl, 1);
 8001a46:	1dfa      	adds	r2, r7, #7
 8001a48:	2301      	movs	r3, #1
 8001a4a:	210d      	movs	r1, #13
 8001a4c:	480b      	ldr	r0, [pc, #44]	@ (8001a7c <lsm6dso_initialize_fifo+0x60>)
 8001a4e:	f002 fe6b 	bl	8004728 <lsm6dso_write_reg>

  /* Configuration de l'interrupt DATA_READY sur INT1 */
  lsm6dso_pin_int1_route_t int1_route = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	809a      	strh	r2, [r3, #4]
  int1_route.drdy_xl = 1;  // Active l'interrupt data-ready pour l'accéléromètre
 8001a5a:	783b      	ldrb	r3, [r7, #0]
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	703b      	strb	r3, [r7, #0]
  lsm6dso_pin_int1_route_set(&dev_ctx, int1_route);
 8001a62:	463b      	mov	r3, r7
 8001a64:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <lsm6dso_initialize_fifo+0x60>)
 8001a6a:	f003 f9c7 	bl	8004dfc <lsm6dso_pin_int1_route_set>

  printf("Interrupt DATA_READY configuree sur INT1\n");
 8001a6e:	4804      	ldr	r0, [pc, #16]	@ (8001a80 <lsm6dso_initialize_fifo+0x64>)
 8001a70:	f005 fde8 	bl	8007644 <puts>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	200008b4 	.word	0x200008b4
 8001a80:	0800b80c 	.word	0x0800b80c

08001a84 <lsm6dso_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lsm6dso_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80fb      	strh	r3, [r7, #6]
  float accel_data_mg = 0.0;
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  {
  case LSM6DSO_2g:
    accel_data_mg = lsm6dso_from_fs2_to_mg(accel_raw_data);
    break;
  case LSM6DSO_4g:
    accel_data_mg = lsm6dso_from_fs4_to_mg(accel_raw_data);
 8001a94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fe63 	bl	8004764 <lsm6dso_from_fs4_to_mg>
 8001a9e:	60f8      	str	r0, [r7, #12]
    break;
 8001aa0:	bf00      	nop
  default:
    accel_data_mg = 0.0;
    break;
  }
#endif
  return accel_data_mg;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	4b20      	ldr	r3, [pc, #128]	@ (8001b44 <iks01a3_i2c_stuck_quirk+0x98>)
 8001ac4:	69db      	ldr	r3, [r3, #28]
 8001ac6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b44 <iks01a3_i2c_stuck_quirk+0x98>)
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	61d3      	str	r3, [r2, #28]
 8001ace:	4b1d      	ldr	r3, [pc, #116]	@ (8001b44 <iks01a3_i2c_stuck_quirk+0x98>)
 8001ad0:	69db      	ldr	r3, [r3, #28]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	607b      	str	r3, [r7, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]

  /* Configure SCL as a GPIO */
  GPIO_InitStruct.Pin = SCL_PIN;
 8001ada:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ade:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aec:	2304      	movs	r3, #4
 8001aee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	4619      	mov	r1, r3
 8001af6:	4814      	ldr	r0, [pc, #80]	@ (8001b48 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001af8:	f000 fba4 	bl	8002244 <HAL_GPIO_Init>

  /* Send a burst of pulses on SCL */
  int pulses = 20;
 8001afc:	2314      	movs	r3, #20
 8001afe:	61fb      	str	r3, [r7, #28]
  do {
    HAL_Delay(1);
 8001b00:	2001      	movs	r0, #1
 8001b02:	f000 fa6f 	bl	8001fe4 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b0c:	480e      	ldr	r0, [pc, #56]	@ (8001b48 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001b0e:	f000 fd29 	bl	8002564 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f000 fa66 	bl	8001fe4 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b1e:	480a      	ldr	r0, [pc, #40]	@ (8001b48 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001b20:	f000 fd20 	bl	8002564 <HAL_GPIO_WritePin>
  } while (pulses--);
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	1e5a      	subs	r2, r3, #1
 8001b28:	61fa      	str	r2, [r7, #28]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1e8      	bne.n	8001b00 <iks01a3_i2c_stuck_quirk+0x54>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001b2e:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <iks01a3_i2c_stuck_quirk+0x98>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	4a04      	ldr	r2, [pc, #16]	@ (8001b44 <iks01a3_i2c_stuck_quirk+0x98>)
 8001b34:	f023 0302 	bic.w	r3, r3, #2
 8001b38:	61d3      	str	r3, [r2, #28]
}
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40020400 	.word	0x40020400

08001b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b50:	b672      	cpsid	i
}
 8001b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <Error_Handler+0x8>

08001b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b5e:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	4a14      	ldr	r2, [pc, #80]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b64:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b68:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b6a:	4b12      	ldr	r3, [pc, #72]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b8e:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	4a08      	ldr	r2, [pc, #32]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b98:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b9a:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_MspInit+0x5c>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba6:	2007      	movs	r0, #7
 8001ba8:	f000 fb0a 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	@ 0x28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a17      	ldr	r2, [pc, #92]	@ (8001c34 <HAL_I2C_MspInit+0x7c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d128      	bne.n	8001c2c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	4b17      	ldr	r3, [pc, #92]	@ (8001c38 <HAL_I2C_MspInit+0x80>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	4a16      	ldr	r2, [pc, #88]	@ (8001c38 <HAL_I2C_MspInit+0x80>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	61d3      	str	r3, [r2, #28]
 8001be6:	4b14      	ldr	r3, [pc, #80]	@ (8001c38 <HAL_I2C_MspInit+0x80>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bf8:	2312      	movs	r3, #18
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c04:	2304      	movs	r3, #4
 8001c06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480b      	ldr	r0, [pc, #44]	@ (8001c3c <HAL_I2C_MspInit+0x84>)
 8001c10:	f000 fb18 	bl	8002244 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	@ (8001c38 <HAL_I2C_MspInit+0x80>)
 8001c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c18:	4a07      	ldr	r2, [pc, #28]	@ (8001c38 <HAL_I2C_MspInit+0x80>)
 8001c1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c20:	4b05      	ldr	r3, [pc, #20]	@ (8001c38 <HAL_I2C_MspInit+0x80>)
 8001c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c2c:	bf00      	nop
 8001c2e:	3728      	adds	r7, #40	@ 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	40005400 	.word	0x40005400
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	40020400 	.word	0x40020400

08001c40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b08a      	sub	sp, #40	@ 0x28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c48:	f107 0314 	add.w	r3, r7, #20
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a17      	ldr	r2, [pc, #92]	@ (8001cbc <HAL_UART_MspInit+0x7c>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d127      	bne.n	8001cb2 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <HAL_UART_MspInit+0x80>)
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	4a16      	ldr	r2, [pc, #88]	@ (8001cc0 <HAL_UART_MspInit+0x80>)
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c6c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c6e:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <HAL_UART_MspInit+0x80>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <HAL_UART_MspInit+0x80>)
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	@ (8001cc0 <HAL_UART_MspInit+0x80>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	61d3      	str	r3, [r2, #28]
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <HAL_UART_MspInit+0x80>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c92:	230c      	movs	r3, #12
 8001c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca2:	2307      	movs	r3, #7
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <HAL_UART_MspInit+0x84>)
 8001cae:	f000 fac9 	bl	8002244 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	@ 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <NMI_Handler+0x4>

08001cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd4:	bf00      	nop
 8001cd6:	e7fd      	b.n	8001cd4 <HardFault_Handler+0x4>

08001cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cdc:	bf00      	nop
 8001cde:	e7fd      	b.n	8001cdc <MemManage_Handler+0x4>

08001ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ce4:	bf00      	nop
 8001ce6:	e7fd      	b.n	8001ce4 <BusFault_Handler+0x4>

08001ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cec:	bf00      	nop
 8001cee:	e7fd      	b.n	8001cec <UsageFault_Handler+0x4>

08001cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bc80      	pop	{r7}
 8001cfa:	4770      	bx	lr

08001cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bc80      	pop	{r7}
 8001d12:	4770      	bx	lr

08001d14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d18:	f000 f948 	bl	8001fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_ACC_INT_Pin);
 8001d24:	2020      	movs	r0, #32
 8001d26:	f000 fc35 	bl	8002594 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  return 1;
 8001d32:	2301      	movs	r3, #1
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <_kill>:

int _kill(int pid, int sig)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d46:	f005 fdd1 	bl	80078ec <__errno>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2216      	movs	r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_exit>:

void _exit (int status)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7ff ffe7 	bl	8001d3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d6e:	bf00      	nop
 8001d70:	e7fd      	b.n	8001d6e <_exit+0x12>

08001d72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	e00a      	b.n	8001d9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d84:	f3af 8000 	nop.w
 8001d88:	4601      	mov	r1, r0
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60ba      	str	r2, [r7, #8]
 8001d90:	b2ca      	uxtb	r2, r1
 8001d92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	dbf0      	blt.n	8001d84 <_read+0x12>
  }

  return len;
 8001da2:	687b      	ldr	r3, [r7, #4]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	e009      	b.n	8001dd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	60ba      	str	r2, [r7, #8]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fd8a 	bl	80018e0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697a      	ldr	r2, [r7, #20]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbf1      	blt.n	8001dbe <_write+0x12>
  }
  return len;
 8001dda:	687b      	ldr	r3, [r7, #4]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <_close>:

int _close(int file)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr

08001e18 <_isatty>:

int _isatty(int file)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e20:	2301      	movs	r3, #1
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e4c:	4a14      	ldr	r2, [pc, #80]	@ (8001ea0 <_sbrk+0x5c>)
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <_sbrk+0x60>)
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e58:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d102      	bne.n	8001e66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e60:	4b11      	ldr	r3, [pc, #68]	@ (8001ea8 <_sbrk+0x64>)
 8001e62:	4a12      	ldr	r2, [pc, #72]	@ (8001eac <_sbrk+0x68>)
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e66:	4b10      	ldr	r3, [pc, #64]	@ (8001ea8 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d207      	bcs.n	8001e84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e74:	f005 fd3a 	bl	80078ec <__errno>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	e009      	b.n	8001e98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e84:	4b08      	ldr	r3, [pc, #32]	@ (8001ea8 <_sbrk+0x64>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <_sbrk+0x64>)
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <_sbrk+0x64>)
 8001e94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20014000 	.word	0x20014000
 8001ea4:	00000400 	.word	0x00000400
 8001ea8:	200008d0 	.word	0x200008d0
 8001eac:	20001288 	.word	0x20001288

08001eb0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr

08001ebc <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ebc:	f7ff fff8 	bl	8001eb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	@ (8001ef0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ec2:	490c      	ldr	r1, [pc, #48]	@ (8001ef4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec8:	e002      	b.n	8001ed0 <LoopCopyDataInit>

08001eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ece:	3304      	adds	r3, #4

08001ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ed4:	d3f9      	bcc.n	8001eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ed6:	4a09      	ldr	r2, [pc, #36]	@ (8001efc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ed8:	4c09      	ldr	r4, [pc, #36]	@ (8001f00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001edc:	e001      	b.n	8001ee2 <LoopFillZerobss>

08001ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee0:	3204      	adds	r2, #4

08001ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ee4:	d3fb      	bcc.n	8001ede <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ee6:	f005 fd07 	bl	80078f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eea:	f7ff fb29 	bl	8001540 <main>
  bx lr
 8001eee:	4770      	bx	lr
  ldr r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ef8:	0800cab8 	.word	0x0800cab8
  ldr r2, =_sbss
 8001efc:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001f00:	20001288 	.word	0x20001288

08001f04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f04:	e7fe      	b.n	8001f04 <ADC1_IRQHandler>

08001f06 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f955 	bl	80021c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f16:	2000      	movs	r0, #0
 8001f18:	f000 f80e 	bl	8001f38 <HAL_InitTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	71fb      	strb	r3, [r7, #7]
 8001f26:	e001      	b.n	8001f2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f28:	f7ff fe16 	bl	8001b58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f44:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <HAL_InitTick+0x68>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d022      	beq.n	8001f92 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f4c:	4b15      	ldr	r3, [pc, #84]	@ (8001fa4 <HAL_InitTick+0x6c>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <HAL_InitTick+0x68>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f000 f962 	bl	800222a <HAL_SYSTICK_Config>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b0f      	cmp	r3, #15
 8001f70:	d809      	bhi.n	8001f86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f72:	2200      	movs	r2, #0
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7a:	f000 f92c 	bl	80021d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <HAL_InitTick+0x70>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	73fb      	strb	r3, [r7, #15]
 8001f8a:	e004      	b.n	8001f96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	73fb      	strb	r3, [r7, #15]
 8001f90:	e001      	b.n	8001f96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	2000001c 	.word	0x2000001c
 8001fa4:	20000014 	.word	0x20000014
 8001fa8:	20000018 	.word	0x20000018

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	@ (8001fc8 <HAL_IncTick+0x1c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <HAL_IncTick+0x20>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4413      	add	r3, r2
 8001fba:	4a03      	ldr	r2, [pc, #12]	@ (8001fc8 <HAL_IncTick+0x1c>)
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200008d4 	.word	0x200008d4
 8001fcc:	2000001c 	.word	0x2000001c

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b02      	ldr	r3, [pc, #8]	@ (8001fe0 <HAL_GetTick+0x10>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc80      	pop	{r7}
 8001fde:	4770      	bx	lr
 8001fe0:	200008d4 	.word	0x200008d4

08001fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fec:	f7ff fff0 	bl	8001fd0 <HAL_GetTick>
 8001ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffc:	d004      	beq.n	8002008 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_Delay+0x40>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4413      	add	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002008:	bf00      	nop
 800200a:	f7ff ffe1 	bl	8001fd0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	429a      	cmp	r2, r3
 8002018:	d8f7      	bhi.n	800200a <HAL_Delay+0x26>
  {
  }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	2000001c 	.word	0x2000001c

08002028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002044:	4013      	ands	r3, r2
 8002046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205a:	4a04      	ldr	r2, [pc, #16]	@ (800206c <__NVIC_SetPriorityGrouping+0x44>)
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	60d3      	str	r3, [r2, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <__NVIC_GetPriorityGrouping+0x18>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	0a1b      	lsrs	r3, r3, #8
 800207a:	f003 0307 	and.w	r3, r3, #7
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	bc80      	pop	{r7}
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	2b00      	cmp	r3, #0
 800209c:	db0b      	blt.n	80020b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	f003 021f 	and.w	r2, r3, #31
 80020a4:	4906      	ldr	r1, [pc, #24]	@ (80020c0 <__NVIC_EnableIRQ+0x34>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	095b      	lsrs	r3, r3, #5
 80020ac:	2001      	movs	r0, #1
 80020ae:	fa00 f202 	lsl.w	r2, r0, r2
 80020b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100

080020c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	6039      	str	r1, [r7, #0]
 80020ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	db0a      	blt.n	80020ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	490c      	ldr	r1, [pc, #48]	@ (8002110 <__NVIC_SetPriority+0x4c>)
 80020de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e2:	0112      	lsls	r2, r2, #4
 80020e4:	b2d2      	uxtb	r2, r2
 80020e6:	440b      	add	r3, r1
 80020e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020ec:	e00a      	b.n	8002104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	4908      	ldr	r1, [pc, #32]	@ (8002114 <__NVIC_SetPriority+0x50>)
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	3b04      	subs	r3, #4
 80020fc:	0112      	lsls	r2, r2, #4
 80020fe:	b2d2      	uxtb	r2, r2
 8002100:	440b      	add	r3, r1
 8002102:	761a      	strb	r2, [r3, #24]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000e100 	.word	0xe000e100
 8002114:	e000ed00 	.word	0xe000ed00

08002118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	@ 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f1c3 0307 	rsb	r3, r3, #7
 8002132:	2b04      	cmp	r3, #4
 8002134:	bf28      	it	cs
 8002136:	2304      	movcs	r3, #4
 8002138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3304      	adds	r3, #4
 800213e:	2b06      	cmp	r3, #6
 8002140:	d902      	bls.n	8002148 <NVIC_EncodePriority+0x30>
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3b03      	subs	r3, #3
 8002146:	e000      	b.n	800214a <NVIC_EncodePriority+0x32>
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800214c:	f04f 32ff 	mov.w	r2, #4294967295
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43da      	mvns	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	401a      	ands	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002160:	f04f 31ff 	mov.w	r1, #4294967295
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43d9      	mvns	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	4313      	orrs	r3, r2
         );
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800218c:	d301      	bcc.n	8002192 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800218e:	2301      	movs	r3, #1
 8002190:	e00f      	b.n	80021b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002192:	4a0a      	ldr	r2, [pc, #40]	@ (80021bc <SysTick_Config+0x40>)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	3b01      	subs	r3, #1
 8002198:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800219a:	210f      	movs	r1, #15
 800219c:	f04f 30ff 	mov.w	r0, #4294967295
 80021a0:	f7ff ff90 	bl	80020c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021a4:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <SysTick_Config+0x40>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021aa:	4b04      	ldr	r3, [pc, #16]	@ (80021bc <SysTick_Config+0x40>)
 80021ac:	2207      	movs	r2, #7
 80021ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	e000e010 	.word	0xe000e010

080021c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f7ff ff2d 	bl	8002028 <__NVIC_SetPriorityGrouping>
}
 80021ce:	bf00      	nop
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b086      	sub	sp, #24
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021e8:	f7ff ff42 	bl	8002070 <__NVIC_GetPriorityGrouping>
 80021ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68b9      	ldr	r1, [r7, #8]
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f7ff ff90 	bl	8002118 <NVIC_EncodePriority>
 80021f8:	4602      	mov	r2, r0
 80021fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021fe:	4611      	mov	r1, r2
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff ff5f 	bl	80020c4 <__NVIC_SetPriority>
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	4603      	mov	r3, r0
 8002216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff ff35 	bl	800208c <__NVIC_EnableIRQ>
}
 8002222:	bf00      	nop
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b082      	sub	sp, #8
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff ffa2 	bl	800217c <SysTick_Config>
 8002238:	4603      	mov	r3, r0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800225a:	e160      	b.n	800251e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2101      	movs	r1, #1
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa01 f303 	lsl.w	r3, r1, r3
 8002268:	4013      	ands	r3, r2
 800226a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 8152 	beq.w	8002518 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d005      	beq.n	800228c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002288:	2b02      	cmp	r3, #2
 800228a:	d130      	bne.n	80022ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80022c2:	2201      	movs	r2, #1
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4013      	ands	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f003 0201 	and.w	r2, r3, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d017      	beq.n	800232a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	2203      	movs	r2, #3
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	4313      	orrs	r3, r2
 8002322:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0303 	and.w	r3, r3, #3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d123      	bne.n	800237e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	08da      	lsrs	r2, r3, #3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3208      	adds	r2, #8
 800233e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002342:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	691a      	ldr	r2, [r3, #16]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	08da      	lsrs	r2, r3, #3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3208      	adds	r2, #8
 8002378:	6939      	ldr	r1, [r7, #16]
 800237a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	2203      	movs	r2, #3
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80ac 	beq.w	8002518 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	4b5e      	ldr	r3, [pc, #376]	@ (800253c <HAL_GPIO_Init+0x2f8>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	4a5d      	ldr	r2, [pc, #372]	@ (800253c <HAL_GPIO_Init+0x2f8>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6213      	str	r3, [r2, #32]
 80023cc:	4b5b      	ldr	r3, [pc, #364]	@ (800253c <HAL_GPIO_Init+0x2f8>)
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80023d8:	4a59      	ldr	r2, [pc, #356]	@ (8002540 <HAL_GPIO_Init+0x2fc>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a51      	ldr	r2, [pc, #324]	@ (8002544 <HAL_GPIO_Init+0x300>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d025      	beq.n	8002450 <HAL_GPIO_Init+0x20c>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a50      	ldr	r2, [pc, #320]	@ (8002548 <HAL_GPIO_Init+0x304>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d01f      	beq.n	800244c <HAL_GPIO_Init+0x208>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a4f      	ldr	r2, [pc, #316]	@ (800254c <HAL_GPIO_Init+0x308>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d019      	beq.n	8002448 <HAL_GPIO_Init+0x204>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a4e      	ldr	r2, [pc, #312]	@ (8002550 <HAL_GPIO_Init+0x30c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d013      	beq.n	8002444 <HAL_GPIO_Init+0x200>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a4d      	ldr	r2, [pc, #308]	@ (8002554 <HAL_GPIO_Init+0x310>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d00d      	beq.n	8002440 <HAL_GPIO_Init+0x1fc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	4a4c      	ldr	r2, [pc, #304]	@ (8002558 <HAL_GPIO_Init+0x314>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d007      	beq.n	800243c <HAL_GPIO_Init+0x1f8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4a4b      	ldr	r2, [pc, #300]	@ (800255c <HAL_GPIO_Init+0x318>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_GPIO_Init+0x1f4>
 8002434:	2306      	movs	r3, #6
 8002436:	e00c      	b.n	8002452 <HAL_GPIO_Init+0x20e>
 8002438:	2307      	movs	r3, #7
 800243a:	e00a      	b.n	8002452 <HAL_GPIO_Init+0x20e>
 800243c:	2305      	movs	r3, #5
 800243e:	e008      	b.n	8002452 <HAL_GPIO_Init+0x20e>
 8002440:	2304      	movs	r3, #4
 8002442:	e006      	b.n	8002452 <HAL_GPIO_Init+0x20e>
 8002444:	2303      	movs	r3, #3
 8002446:	e004      	b.n	8002452 <HAL_GPIO_Init+0x20e>
 8002448:	2302      	movs	r3, #2
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0x20e>
 800244c:	2301      	movs	r3, #1
 800244e:	e000      	b.n	8002452 <HAL_GPIO_Init+0x20e>
 8002450:	2300      	movs	r3, #0
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	f002 0203 	and.w	r2, r2, #3
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	4093      	lsls	r3, r2
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002462:	4937      	ldr	r1, [pc, #220]	@ (8002540 <HAL_GPIO_Init+0x2fc>)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	089b      	lsrs	r3, r3, #2
 8002468:	3302      	adds	r3, #2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002470:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	4013      	ands	r3, r2
 800247e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002494:	4a32      	ldr	r2, [pc, #200]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d003      	beq.n	80024be <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024be:	4a28      	ldr	r2, [pc, #160]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c4:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	43db      	mvns	r3, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4013      	ands	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	4013      	ands	r3, r2
 80024fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002512:	4a13      	ldr	r2, [pc, #76]	@ (8002560 <HAL_GPIO_Init+0x31c>)
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	3301      	adds	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	f47f ae97 	bne.w	800225c <HAL_GPIO_Init+0x18>
  }
}
 800252e:	bf00      	nop
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023800 	.word	0x40023800
 8002540:	40010000 	.word	0x40010000
 8002544:	40020000 	.word	0x40020000
 8002548:	40020400 	.word	0x40020400
 800254c:	40020800 	.word	0x40020800
 8002550:	40020c00 	.word	0x40020c00
 8002554:	40021000 	.word	0x40021000
 8002558:	40021400 	.word	0x40021400
 800255c:	40021800 	.word	0x40021800
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	460b      	mov	r3, r1
 800256e:	807b      	strh	r3, [r7, #2]
 8002570:	4613      	mov	r3, r2
 8002572:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002574:	787b      	ldrb	r3, [r7, #1]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002580:	e003      	b.n	800258a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002582:	887b      	ldrh	r3, [r7, #2]
 8002584:	041a      	lsls	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	619a      	str	r2, [r3, #24]
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800259e:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	4013      	ands	r3, r2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d006      	beq.n	80025b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff f9aa 	bl	800190c <HAL_GPIO_EXTI_Callback>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3708      	adds	r7, #8
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40010400 	.word	0x40010400

080025c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e12b      	b.n	800282e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d106      	bne.n	80025f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fae4 	bl	8001bb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2224      	movs	r2, #36	@ 0x24
 80025f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002616:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002626:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002628:	f001 fd5e 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 800262c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4a81      	ldr	r2, [pc, #516]	@ (8002838 <HAL_I2C_Init+0x274>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d807      	bhi.n	8002648 <HAL_I2C_Init+0x84>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	4a80      	ldr	r2, [pc, #512]	@ (800283c <HAL_I2C_Init+0x278>)
 800263c:	4293      	cmp	r3, r2
 800263e:	bf94      	ite	ls
 8002640:	2301      	movls	r3, #1
 8002642:	2300      	movhi	r3, #0
 8002644:	b2db      	uxtb	r3, r3
 8002646:	e006      	b.n	8002656 <HAL_I2C_Init+0x92>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4a7d      	ldr	r2, [pc, #500]	@ (8002840 <HAL_I2C_Init+0x27c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	bf94      	ite	ls
 8002650:	2301      	movls	r3, #1
 8002652:	2300      	movhi	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e0e7      	b.n	800282e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4a78      	ldr	r2, [pc, #480]	@ (8002844 <HAL_I2C_Init+0x280>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	0c9b      	lsrs	r3, r3, #18
 8002668:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	430a      	orrs	r2, r1
 800267c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4a6a      	ldr	r2, [pc, #424]	@ (8002838 <HAL_I2C_Init+0x274>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d802      	bhi.n	8002698 <HAL_I2C_Init+0xd4>
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3301      	adds	r3, #1
 8002696:	e009      	b.n	80026ac <HAL_I2C_Init+0xe8>
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	4a69      	ldr	r2, [pc, #420]	@ (8002848 <HAL_I2C_Init+0x284>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	3301      	adds	r3, #1
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	430b      	orrs	r3, r1
 80026b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026be:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	495c      	ldr	r1, [pc, #368]	@ (8002838 <HAL_I2C_Init+0x274>)
 80026c8:	428b      	cmp	r3, r1
 80026ca:	d819      	bhi.n	8002700 <HAL_I2C_Init+0x13c>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e59      	subs	r1, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026da:	1c59      	adds	r1, r3, #1
 80026dc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026e0:	400b      	ands	r3, r1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_I2C_Init+0x138>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1e59      	subs	r1, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fa:	e051      	b.n	80027a0 <HAL_I2C_Init+0x1dc>
 80026fc:	2304      	movs	r3, #4
 80026fe:	e04f      	b.n	80027a0 <HAL_I2C_Init+0x1dc>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d111      	bne.n	800272c <HAL_I2C_Init+0x168>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e58      	subs	r0, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	440b      	add	r3, r1
 8002716:	fbb0 f3f3 	udiv	r3, r0, r3
 800271a:	3301      	adds	r3, #1
 800271c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002720:	2b00      	cmp	r3, #0
 8002722:	bf0c      	ite	eq
 8002724:	2301      	moveq	r3, #1
 8002726:	2300      	movne	r3, #0
 8002728:	b2db      	uxtb	r3, r3
 800272a:	e012      	b.n	8002752 <HAL_I2C_Init+0x18e>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e58      	subs	r0, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	0099      	lsls	r1, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Init+0x196>
 8002756:	2301      	movs	r3, #1
 8002758:	e022      	b.n	80027a0 <HAL_I2C_Init+0x1dc>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10e      	bne.n	8002780 <HAL_I2C_Init+0x1bc>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	1e58      	subs	r0, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	460b      	mov	r3, r1
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	440b      	add	r3, r1
 8002770:	fbb0 f3f3 	udiv	r3, r0, r3
 8002774:	3301      	adds	r3, #1
 8002776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800277e:	e00f      	b.n	80027a0 <HAL_I2C_Init+0x1dc>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1e58      	subs	r0, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	440b      	add	r3, r1
 800278e:	0099      	lsls	r1, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	fbb0 f3f3 	udiv	r3, r0, r3
 8002796:	3301      	adds	r3, #1
 8002798:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	6809      	ldr	r1, [r1, #0]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69da      	ldr	r2, [r3, #28]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ce:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6911      	ldr	r1, [r2, #16]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68d2      	ldr	r2, [r2, #12]
 80027da:	4311      	orrs	r1, r2
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	000186a0 	.word	0x000186a0
 800283c:	001e847f 	.word	0x001e847f
 8002840:	003d08ff 	.word	0x003d08ff
 8002844:	431bde83 	.word	0x431bde83
 8002848:	10624dd3 	.word	0x10624dd3

0800284c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	4608      	mov	r0, r1
 8002856:	4611      	mov	r1, r2
 8002858:	461a      	mov	r2, r3
 800285a:	4603      	mov	r3, r0
 800285c:	817b      	strh	r3, [r7, #10]
 800285e:	460b      	mov	r3, r1
 8002860:	813b      	strh	r3, [r7, #8]
 8002862:	4613      	mov	r3, r2
 8002864:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002866:	f7ff fbb3 	bl	8001fd0 <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b20      	cmp	r3, #32
 8002876:	f040 80d9 	bne.w	8002a2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	2319      	movs	r3, #25
 8002880:	2201      	movs	r2, #1
 8002882:	496d      	ldr	r1, [pc, #436]	@ (8002a38 <HAL_I2C_Mem_Write+0x1ec>)
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f000 fc8b 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	e0cc      	b.n	8002a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_I2C_Mem_Write+0x56>
 800289e:	2302      	movs	r3, #2
 80028a0:	e0c5      	b.n	8002a2e <HAL_I2C_Mem_Write+0x1e2>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b01      	cmp	r3, #1
 80028b6:	d007      	beq.n	80028c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2221      	movs	r2, #33	@ 0x21
 80028dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2240      	movs	r2, #64	@ 0x40
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a3a      	ldr	r2, [r7, #32]
 80028f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4a4d      	ldr	r2, [pc, #308]	@ (8002a3c <HAL_I2C_Mem_Write+0x1f0>)
 8002908:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800290a:	88f8      	ldrh	r0, [r7, #6]
 800290c:	893a      	ldrh	r2, [r7, #8]
 800290e:	8979      	ldrh	r1, [r7, #10]
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	4603      	mov	r3, r0
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 fac2 	bl	8002ea4 <I2C_RequestMemoryWrite>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d052      	beq.n	80029cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e081      	b.n	8002a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fd50 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293e:	2b04      	cmp	r3, #4
 8002940:	d107      	bne.n	8002952 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002950:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e06b      	b.n	8002a2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	781a      	ldrb	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	1c5a      	adds	r2, r3, #1
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002970:	3b01      	subs	r3, #1
 8002972:	b29a      	uxth	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29a      	uxth	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d11b      	bne.n	80029cc <HAL_I2C_Mem_Write+0x180>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b29a      	uxth	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1aa      	bne.n	800292a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d4:	697a      	ldr	r2, [r7, #20]
 80029d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fd43 	bl	8003464 <I2C_WaitOnBTFFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00d      	beq.n	8002a00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d107      	bne.n	80029fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e016      	b.n	8002a2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	e000      	b.n	8002a2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a2c:	2302      	movs	r3, #2
  }
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	00100002 	.word	0x00100002
 8002a3c:	ffff0000 	.word	0xffff0000

08002a40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08c      	sub	sp, #48	@ 0x30
 8002a44:	af02      	add	r7, sp, #8
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	4608      	mov	r0, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4603      	mov	r3, r0
 8002a50:	817b      	strh	r3, [r7, #10]
 8002a52:	460b      	mov	r3, r1
 8002a54:	813b      	strh	r3, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a5a:	f7ff fab9 	bl	8001fd0 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b20      	cmp	r3, #32
 8002a6a:	f040 8214 	bne.w	8002e96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	2319      	movs	r3, #25
 8002a74:	2201      	movs	r2, #1
 8002a76:	497b      	ldr	r1, [pc, #492]	@ (8002c64 <HAL_I2C_Mem_Read+0x224>)
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fb91 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
 8002a86:	e207      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d101      	bne.n	8002a96 <HAL_I2C_Mem_Read+0x56>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e200      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d007      	beq.n	8002abc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0201 	orr.w	r2, r2, #1
 8002aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2222      	movs	r2, #34	@ 0x22
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2240      	movs	r2, #64	@ 0x40
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002aec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a5b      	ldr	r2, [pc, #364]	@ (8002c68 <HAL_I2C_Mem_Read+0x228>)
 8002afc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002afe:	88f8      	ldrh	r0, [r7, #6]
 8002b00:	893a      	ldrh	r2, [r7, #8]
 8002b02:	8979      	ldrh	r1, [r7, #10]
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 fa5e 	bl	8002fd0 <I2C_RequestMemoryRead>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d001      	beq.n	8002b1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e1bc      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d113      	bne.n	8002b4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b26:	2300      	movs	r3, #0
 8002b28:	623b      	str	r3, [r7, #32]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	623b      	str	r3, [r7, #32]
 8002b3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	e190      	b.n	8002e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d11b      	bne.n	8002b8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	61fb      	str	r3, [r7, #28]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e170      	b.n	8002e70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d11b      	bne.n	8002bce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ba4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61bb      	str	r3, [r7, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	695b      	ldr	r3, [r3, #20]
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	e150      	b.n	8002e70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	617b      	str	r3, [r7, #20]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002be4:	e144      	b.n	8002e70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	f200 80f1 	bhi.w	8002dd2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d123      	bne.n	8002c40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f000 fc79 	bl	80034f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e145      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	b2d2      	uxtb	r2, r2
 8002c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	3b01      	subs	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c3e:	e117      	b.n	8002e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d14e      	bne.n	8002ce6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c4e:	2200      	movs	r2, #0
 8002c50:	4906      	ldr	r1, [pc, #24]	@ (8002c6c <HAL_I2C_Mem_Read+0x22c>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 faa4 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d008      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e11a      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
 8002c62:	bf00      	nop
 8002c64:	00100002 	.word	0x00100002
 8002c68:	ffff0000 	.word	0xffff0000
 8002c6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ce4:	e0c4      	b.n	8002e70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cec:	2200      	movs	r2, #0
 8002cee:	496c      	ldr	r1, [pc, #432]	@ (8002ea0 <HAL_I2C_Mem_Read+0x460>)
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f000 fa55 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	e0cb      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d48:	2200      	movs	r2, #0
 8002d4a:	4955      	ldr	r1, [pc, #340]	@ (8002ea0 <HAL_I2C_Mem_Read+0x460>)
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fa27 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e09d      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691a      	ldr	r2, [r3, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	b2d2      	uxtb	r2, r2
 8002daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dd0:	e04e      	b.n	8002e70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fb8c 	bl	80034f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e058      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df0:	b2d2      	uxtb	r2, r2
 8002df2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	1c5a      	adds	r2, r3, #1
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b04      	cmp	r3, #4
 8002e24:	d124      	bne.n	8002e70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	f47f aeb6 	bne.w	8002be6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	e000      	b.n	8002e98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e96:	2302      	movs	r3, #2
  }
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3728      	adds	r7, #40	@ 0x28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	00010004 	.word	0x00010004

08002ea4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	4608      	mov	r0, r1
 8002eae:	4611      	mov	r1, r2
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	817b      	strh	r3, [r7, #10]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	813b      	strh	r3, [r7, #8]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ecc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f960 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00d      	beq.n	8002f02 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ef4:	d103      	bne.n	8002efe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002efc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e05f      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f02:	897b      	ldrh	r3, [r7, #10]
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	461a      	mov	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f10:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f14:	6a3a      	ldr	r2, [r7, #32]
 8002f16:	492d      	ldr	r1, [pc, #180]	@ (8002fcc <I2C_RequestMemoryWrite+0x128>)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 f9bb 	bl	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e04c      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f40:	6a39      	ldr	r1, [r7, #32]
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fa46 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00d      	beq.n	8002f6a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d107      	bne.n	8002f66 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f64:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e02b      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d105      	bne.n	8002f7c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f70:	893b      	ldrh	r3, [r7, #8]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	e021      	b.n	8002fc0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f7c:	893b      	ldrh	r3, [r7, #8]
 8002f7e:	0a1b      	lsrs	r3, r3, #8
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 fa20 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00d      	beq.n	8002fb6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	2b04      	cmp	r3, #4
 8002fa0:	d107      	bne.n	8002fb2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fb0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e005      	b.n	8002fc2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fb6:	893b      	ldrh	r3, [r7, #8]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	00010002 	.word	0x00010002

08002fd0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	817b      	strh	r3, [r7, #10]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	813b      	strh	r3, [r7, #8]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ff8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2200      	movs	r2, #0
 8003012:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f8c2 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800302c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003030:	d103      	bne.n	800303a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003038:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0aa      	b.n	8003194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800304c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	4952      	ldr	r1, [pc, #328]	@ (800319c <I2C_RequestMemoryRead+0x1cc>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f91d 	bl	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e097      	b.n	8003194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f9a8 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e076      	b.n	8003194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]
 80030b6:	e021      	b.n	80030fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030b8:	893b      	ldrh	r3, [r7, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f982 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e050      	b.n	8003194 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030fe:	6a39      	ldr	r1, [r7, #32]
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 f967 	bl	80033d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00d      	beq.n	8003128 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	2b04      	cmp	r3, #4
 8003112:	d107      	bne.n	8003124 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003122:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e035      	b.n	8003194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003136:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	2200      	movs	r2, #0
 8003140:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f82b 	bl	80031a0 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00d      	beq.n	800316c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800315a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800315e:	d103      	bne.n	8003168 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003166:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e013      	b.n	8003194 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800316c:	897b      	ldrh	r3, [r7, #10]
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800317c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317e:	6a3a      	ldr	r2, [r7, #32]
 8003180:	4906      	ldr	r1, [pc, #24]	@ (800319c <I2C_RequestMemoryRead+0x1cc>)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f886 	bl	8003294 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	00010002 	.word	0x00010002

080031a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031b0:	e048      	b.n	8003244 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d044      	beq.n	8003244 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe ff09 	bl	8001fd0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d139      	bne.n	8003244 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	0c1b      	lsrs	r3, r3, #16
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d10d      	bne.n	80031f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	43da      	mvns	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	4013      	ands	r3, r2
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	e00c      	b.n	8003210 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	43da      	mvns	r2, r3
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4013      	ands	r3, r2
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	429a      	cmp	r2, r3
 8003214:	d116      	bne.n	8003244 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003230:	f043 0220 	orr.w	r2, r3, #32
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e023      	b.n	800328c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10d      	bne.n	800326a <I2C_WaitOnFlagUntilTimeout+0xca>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	43da      	mvns	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	e00c      	b.n	8003284 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	43da      	mvns	r2, r3
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4013      	ands	r3, r2
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	429a      	cmp	r2, r3
 8003288:	d093      	beq.n	80031b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032a2:	e071      	b.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b2:	d123      	bne.n	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	f043 0204 	orr.w	r2, r3, #4
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e067      	b.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003302:	d041      	beq.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003304:	f7fe fe64 	bl	8001fd0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	429a      	cmp	r2, r3
 8003312:	d302      	bcc.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d136      	bne.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10c      	bne.n	800333e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	4013      	ands	r3, r2
 8003330:	b29b      	uxth	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	e00b      	b.n	8003356 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	43da      	mvns	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	4013      	ands	r3, r2
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	bf14      	ite	ne
 8003350:	2301      	movne	r3, #1
 8003352:	2300      	moveq	r3, #0
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d016      	beq.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2220      	movs	r2, #32
 8003364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003374:	f043 0220 	orr.w	r2, r3, #32
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e021      	b.n	80033cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	0c1b      	lsrs	r3, r3, #16
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d10c      	bne.n	80033ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf14      	ite	ne
 80033a4:	2301      	movne	r3, #1
 80033a6:	2300      	moveq	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	e00b      	b.n	80033c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	43da      	mvns	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4013      	ands	r3, r2
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	bf14      	ite	ne
 80033be:	2301      	movne	r3, #1
 80033c0:	2300      	moveq	r3, #0
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f47f af6d 	bne.w	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e0:	e034      	b.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033e2:	68f8      	ldr	r0, [r7, #12]
 80033e4:	f000 f8e3 	bl	80035ae <I2C_IsAcknowledgeFailed>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e034      	b.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d028      	beq.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe fde9 	bl	8001fd0 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11d      	bne.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d016      	beq.n	800344c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	f043 0220 	orr.w	r2, r3, #32
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e007      	b.n	800345c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003456:	2b80      	cmp	r3, #128	@ 0x80
 8003458:	d1c3      	bne.n	80033e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003470:	e034      	b.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f89b 	bl	80035ae <I2C_IsAcknowledgeFailed>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e034      	b.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d028      	beq.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fe fda1 	bl	8001fd0 <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11d      	bne.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d016      	beq.n	80034dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c8:	f043 0220 	orr.w	r2, r3, #32
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e007      	b.n	80034ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f003 0304 	and.w	r3, r3, #4
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d1c3      	bne.n	8003472 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003500:	e049      	b.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	2b10      	cmp	r3, #16
 800350e:	d119      	bne.n	8003544 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0210 	mvn.w	r2, #16
 8003518:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e030      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003544:	f7fe fd44 	bl	8001fd0 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	429a      	cmp	r2, r3
 8003552:	d302      	bcc.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11d      	bne.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d016      	beq.n	8003596 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003582:	f043 0220 	orr.w	r2, r3, #32
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e007      	b.n	80035a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a0:	2b40      	cmp	r3, #64	@ 0x40
 80035a2:	d1ae      	bne.n	8003502 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b083      	sub	sp, #12
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c4:	d11b      	bne.n	80035fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80035ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ea:	f043 0204 	orr.w	r2, r3, #4
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
	...

0800360c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e31d      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361e:	4b94      	ldr	r3, [pc, #592]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
 8003626:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003628:	4b91      	ldr	r3, [pc, #580]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003630:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d07b      	beq.n	8003736 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	2b08      	cmp	r3, #8
 8003642:	d006      	beq.n	8003652 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	2b0c      	cmp	r3, #12
 8003648:	d10f      	bne.n	800366a <HAL_RCC_OscConfig+0x5e>
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003650:	d10b      	bne.n	800366a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003652:	4b87      	ldr	r3, [pc, #540]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d06a      	beq.n	8003734 <HAL_RCC_OscConfig+0x128>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d166      	bne.n	8003734 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e2f7      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d106      	bne.n	8003680 <HAL_RCC_OscConfig+0x74>
 8003672:	4b7f      	ldr	r3, [pc, #508]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a7e      	ldr	r2, [pc, #504]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	e02d      	b.n	80036dc <HAL_RCC_OscConfig+0xd0>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10c      	bne.n	80036a2 <HAL_RCC_OscConfig+0x96>
 8003688:	4b79      	ldr	r3, [pc, #484]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a78      	ldr	r2, [pc, #480]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800368e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b76      	ldr	r3, [pc, #472]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a75      	ldr	r2, [pc, #468]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800369a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	e01c      	b.n	80036dc <HAL_RCC_OscConfig+0xd0>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d10c      	bne.n	80036c4 <HAL_RCC_OscConfig+0xb8>
 80036aa:	4b71      	ldr	r3, [pc, #452]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a70      	ldr	r2, [pc, #448]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	6013      	str	r3, [r2, #0]
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0xd0>
 80036c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a69      	ldr	r2, [pc, #420]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ce:	6013      	str	r3, [r2, #0]
 80036d0:	4b67      	ldr	r3, [pc, #412]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a66      	ldr	r2, [pc, #408]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80036d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d013      	beq.n	800370c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036e4:	f7fe fc74 	bl	8001fd0 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe fc70 	bl	8001fd0 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	@ 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e2ad      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0xe0>
 800370a:	e014      	b.n	8003736 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370c:	f7fe fc60 	bl	8001fd0 <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003714:	f7fe fc5c 	bl	8001fd0 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b64      	cmp	r3, #100	@ 0x64
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e299      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003726:	4b52      	ldr	r3, [pc, #328]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f0      	bne.n	8003714 <HAL_RCC_OscConfig+0x108>
 8003732:	e000      	b.n	8003736 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d05a      	beq.n	80037f8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d005      	beq.n	8003754 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d119      	bne.n	8003782 <HAL_RCC_OscConfig+0x176>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d116      	bne.n	8003782 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003754:	4b46      	ldr	r3, [pc, #280]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d005      	beq.n	800376c <HAL_RCC_OscConfig+0x160>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e276      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b40      	ldr	r3, [pc, #256]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	493d      	ldr	r1, [pc, #244]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003780:	e03a      	b.n	80037f8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d020      	beq.n	80037cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800378a:	4b3a      	ldr	r3, [pc, #232]	@ (8003874 <HAL_RCC_OscConfig+0x268>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003790:	f7fe fc1e 	bl	8001fd0 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003798:	f7fe fc1a 	bl	8001fd0 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e257      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037aa:	4b31      	ldr	r3, [pc, #196]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d0f0      	beq.n	8003798 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b6:	4b2e      	ldr	r3, [pc, #184]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	492a      	ldr	r1, [pc, #168]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	604b      	str	r3, [r1, #4]
 80037ca:	e015      	b.n	80037f8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037cc:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <HAL_RCC_OscConfig+0x268>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe fbfd 	bl	8001fd0 <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037da:	f7fe fbf9 	bl	8001fd0 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e236      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037ec:	4b20      	ldr	r3, [pc, #128]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80b8 	beq.w	8003976 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d170      	bne.n	80038ee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800380c:	4b18      	ldr	r3, [pc, #96]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_RCC_OscConfig+0x218>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	699b      	ldr	r3, [r3, #24]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e21a      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1a      	ldr	r2, [r3, #32]
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003830:	429a      	cmp	r2, r3
 8003832:	d921      	bls.n	8003878 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fc7d 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d001      	beq.n	8003848 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e208      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003848:	4b09      	ldr	r3, [pc, #36]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6a1b      	ldr	r3, [r3, #32]
 8003854:	4906      	ldr	r1, [pc, #24]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 8003856:	4313      	orrs	r3, r2
 8003858:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385a:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	061b      	lsls	r3, r3, #24
 8003868:	4901      	ldr	r1, [pc, #4]	@ (8003870 <HAL_RCC_OscConfig+0x264>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
 800386e:	e020      	b.n	80038b2 <HAL_RCC_OscConfig+0x2a6>
 8003870:	40023800 	.word	0x40023800
 8003874:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003878:	4b99      	ldr	r3, [pc, #612]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a1b      	ldr	r3, [r3, #32]
 8003884:	4996      	ldr	r1, [pc, #600]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003886:	4313      	orrs	r3, r2
 8003888:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800388a:	4b95      	ldr	r3, [pc, #596]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	061b      	lsls	r3, r3, #24
 8003898:	4991      	ldr	r1, [pc, #580]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fc48 	bl	8004138 <RCC_SetFlashLatencyFromMSIRange>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1d3      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	0b5b      	lsrs	r3, r3, #13
 80038b8:	3301      	adds	r3, #1
 80038ba:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80038c2:	4a87      	ldr	r2, [pc, #540]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 80038c4:	6892      	ldr	r2, [r2, #8]
 80038c6:	0912      	lsrs	r2, r2, #4
 80038c8:	f002 020f 	and.w	r2, r2, #15
 80038cc:	4985      	ldr	r1, [pc, #532]	@ (8003ae4 <HAL_RCC_OscConfig+0x4d8>)
 80038ce:	5c8a      	ldrb	r2, [r1, r2]
 80038d0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80038d2:	4a85      	ldr	r2, [pc, #532]	@ (8003ae8 <HAL_RCC_OscConfig+0x4dc>)
 80038d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038d6:	4b85      	ldr	r3, [pc, #532]	@ (8003aec <HAL_RCC_OscConfig+0x4e0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fb2c 	bl	8001f38 <HAL_InitTick>
 80038e0:	4603      	mov	r3, r0
 80038e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d045      	beq.n	8003976 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80038ea:	7bfb      	ldrb	r3, [r7, #15]
 80038ec:	e1b5      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d029      	beq.n	800394a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038f6:	4b7e      	ldr	r3, [pc, #504]	@ (8003af0 <HAL_RCC_OscConfig+0x4e4>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fb68 	bl	8001fd0 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003904:	f7fe fb64 	bl	8001fd0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e1a1      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003916:	4b72      	ldr	r3, [pc, #456]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003922:	4b6f      	ldr	r3, [pc, #444]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	496c      	ldr	r1, [pc, #432]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003934:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	061b      	lsls	r3, r3, #24
 8003942:	4967      	ldr	r1, [pc, #412]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]
 8003948:	e015      	b.n	8003976 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800394a:	4b69      	ldr	r3, [pc, #420]	@ (8003af0 <HAL_RCC_OscConfig+0x4e4>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003950:	f7fe fb3e 	bl	8001fd0 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003958:	f7fe fb3a 	bl	8001fd0 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e177      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800396a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d030      	beq.n	80039e4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d016      	beq.n	80039b8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398a:	4b5a      	ldr	r3, [pc, #360]	@ (8003af4 <HAL_RCC_OscConfig+0x4e8>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003990:	f7fe fb1e 	bl	8001fd0 <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003998:	f7fe fb1a 	bl	8001fd0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e157      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039aa:	4b4d      	ldr	r3, [pc, #308]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 80039ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x38c>
 80039b6:	e015      	b.n	80039e4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b8:	4b4e      	ldr	r3, [pc, #312]	@ (8003af4 <HAL_RCC_OscConfig+0x4e8>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fe fb07 	bl	8001fd0 <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fe fb03 	bl	8001fd0 <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e140      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80039d8:	4b41      	ldr	r3, [pc, #260]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 80039da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80b5 	beq.w	8003b5c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 80039f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10d      	bne.n	8003a1e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	4b37      	ldr	r3, [pc, #220]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	4a36      	ldr	r2, [pc, #216]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a0c:	6253      	str	r3, [r2, #36]	@ 0x24
 8003a0e:	4b34      	ldr	r3, [pc, #208]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b36      	ldr	r3, [pc, #216]	@ (8003af8 <HAL_RCC_OscConfig+0x4ec>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d118      	bne.n	8003a5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b33      	ldr	r3, [pc, #204]	@ (8003af8 <HAL_RCC_OscConfig+0x4ec>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a32      	ldr	r2, [pc, #200]	@ (8003af8 <HAL_RCC_OscConfig+0x4ec>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fe facb 	bl	8001fd0 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3e:	f7fe fac7 	bl	8001fd0 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b64      	cmp	r3, #100	@ 0x64
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e104      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a50:	4b29      	ldr	r3, [pc, #164]	@ (8003af8 <HAL_RCC_OscConfig+0x4ec>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d106      	bne.n	8003a72 <HAL_RCC_OscConfig+0x466>
 8003a64:	4b1e      	ldr	r3, [pc, #120]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a6e:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a70:	e02d      	b.n	8003ace <HAL_RCC_OscConfig+0x4c2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x488>
 8003a7a:	4b19      	ldr	r3, [pc, #100]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a84:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a86:	4b16      	ldr	r3, [pc, #88]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8a:	4a15      	ldr	r2, [pc, #84]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a90:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a92:	e01c      	b.n	8003ace <HAL_RCC_OscConfig+0x4c2>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2b05      	cmp	r3, #5
 8003a9a:	d10c      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x4aa>
 8003a9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa0:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003aa2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003aa6:	6353      	str	r3, [r2, #52]	@ 0x34
 8003aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aac:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ab2:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ab4:	e00b      	b.n	8003ace <HAL_RCC_OscConfig+0x4c2>
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aba:	4a09      	ldr	r2, [pc, #36]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003abc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ac0:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac6:	4a06      	ldr	r2, [pc, #24]	@ (8003ae0 <HAL_RCC_OscConfig+0x4d4>)
 8003ac8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003acc:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d024      	beq.n	8003b20 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad6:	f7fe fa7b 	bl	8001fd0 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003adc:	e019      	b.n	8003b12 <HAL_RCC_OscConfig+0x506>
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	0800c630 	.word	0x0800c630
 8003ae8:	20000014 	.word	0x20000014
 8003aec:	20000018 	.word	0x20000018
 8003af0:	42470020 	.word	0x42470020
 8003af4:	42470680 	.word	0x42470680
 8003af8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7fe fa68 	bl	8001fd0 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0a3      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b12:	4b54      	ldr	r3, [pc, #336]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <HAL_RCC_OscConfig+0x4f0>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7fe fa56 	bl	8001fd0 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fe fa52 	bl	8001fd0 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e08d      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b3e:	4b49      	ldr	r3, [pc, #292]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b4a:	7ffb      	ldrb	r3, [r7, #31]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b44      	ldr	r3, [pc, #272]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	4a43      	ldr	r2, [pc, #268]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d079      	beq.n	8003c58 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d056      	beq.n	8003c18 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d13b      	bne.n	8003bea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b3d      	ldr	r3, [pc, #244]	@ (8003c68 <HAL_RCC_OscConfig+0x65c>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fa2a 	bl	8001fd0 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fe fa26 	bl	8001fd0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e063      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b92:	4b34      	ldr	r3, [pc, #208]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b9e:	4b31      	ldr	r3, [pc, #196]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bae:	4319      	orrs	r1, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	492b      	ldr	r1, [pc, #172]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	@ (8003c68 <HAL_RCC_OscConfig+0x65c>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc2:	f7fe fa05 	bl	8001fd0 <HAL_GetTick>
 8003bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bca:	f7fe fa01 	bl	8001fd0 <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e03e      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bdc:	4b21      	ldr	r3, [pc, #132]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCC_OscConfig+0x5be>
 8003be8:	e036      	b.n	8003c58 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bea:	4b1f      	ldr	r3, [pc, #124]	@ (8003c68 <HAL_RCC_OscConfig+0x65c>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fe f9ee 	bl	8001fd0 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf8:	f7fe f9ea 	bl	8001fd0 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e027      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c0a:	4b16      	ldr	r3, [pc, #88]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1f0      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x5ec>
 8003c16:	e01f      	b.n	8003c58 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e01a      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c24:	4b0f      	ldr	r3, [pc, #60]	@ (8003c64 <HAL_RCC_OscConfig+0x658>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d10d      	bne.n	8003c54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d106      	bne.n	8003c54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3720      	adds	r7, #32
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	42470060 	.word	0x42470060

08003c6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e11a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c80:	4b8f      	ldr	r3, [pc, #572]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d919      	bls.n	8003cc2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0x34>
 8003c94:	4b8a      	ldr	r3, [pc, #552]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a89      	ldr	r2, [pc, #548]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003c9a:	f043 0304 	orr.w	r3, r3, #4
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b87      	ldr	r3, [pc, #540]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f023 0201 	bic.w	r2, r3, #1
 8003ca8:	4985      	ldr	r1, [pc, #532]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb0:	4b83      	ldr	r3, [pc, #524]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0301 	and.w	r3, r3, #1
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0f9      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cce:	4b7d      	ldr	r3, [pc, #500]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	497a      	ldr	r1, [pc, #488]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f000 808e 	beq.w	8003e0a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cf6:	4b73      	ldr	r3, [pc, #460]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d121      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e0d7      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b03      	cmp	r3, #3
 8003d0c:	d107      	bne.n	8003d1e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d115      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e0cb      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d107      	bne.n	8003d36 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d26:	4b67      	ldr	r3, [pc, #412]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d109      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e0bf      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d36:	4b63      	ldr	r3, [pc, #396]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e0b7      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d46:	4b5f      	ldr	r3, [pc, #380]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 0203 	bic.w	r2, r3, #3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	495c      	ldr	r1, [pc, #368]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003d54:	4313      	orrs	r3, r2
 8003d56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d58:	f7fe f93a 	bl	8001fd0 <HAL_GetTick>
 8003d5c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d112      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d68:	f7fe f932 	bl	8001fd0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e09b      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d7e:	4b51      	ldr	r3, [pc, #324]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d1ee      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xfc>
 8003d8a:	e03e      	b.n	8003e0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d112      	bne.n	8003dba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d94:	e00a      	b.n	8003dac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d96:	f7fe f91b 	bl	8001fd0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e084      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dac:	4b45      	ldr	r3, [pc, #276]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d1ee      	bne.n	8003d96 <HAL_RCC_ClockConfig+0x12a>
 8003db8:	e027      	b.n	8003e0a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d11d      	bne.n	8003dfe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dc2:	e00a      	b.n	8003dda <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc4:	f7fe f904 	bl	8001fd0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e06d      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dda:	4b3a      	ldr	r3, [pc, #232]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d1ee      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x158>
 8003de6:	e010      	b.n	8003e0a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de8:	f7fe f8f2 	bl	8001fd0 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e05b      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dfe:	4b31      	ldr	r3, [pc, #196]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1ee      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d219      	bcs.n	8003e4c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d105      	bne.n	8003e2a <HAL_RCC_ClockConfig+0x1be>
 8003e1e:	4b28      	ldr	r3, [pc, #160]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a27      	ldr	r2, [pc, #156]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b25      	ldr	r3, [pc, #148]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f023 0201 	bic.w	r2, r3, #1
 8003e32:	4923      	ldr	r1, [pc, #140]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e3a:	4b21      	ldr	r3, [pc, #132]	@ (8003ec0 <HAL_RCC_ClockConfig+0x254>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d001      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e034      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d008      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e58:	4b1a      	ldr	r3, [pc, #104]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	4917      	ldr	r1, [pc, #92]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d009      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e76:	4b13      	ldr	r3, [pc, #76]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	00db      	lsls	r3, r3, #3
 8003e84:	490f      	ldr	r1, [pc, #60]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e8a:	f000 f823 	bl	8003ed4 <HAL_RCC_GetSysClockFreq>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec4 <HAL_RCC_ClockConfig+0x258>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	091b      	lsrs	r3, r3, #4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	490b      	ldr	r1, [pc, #44]	@ (8003ec8 <HAL_RCC_ClockConfig+0x25c>)
 8003e9c:	5ccb      	ldrb	r3, [r1, r3]
 8003e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ecc <HAL_RCC_ClockConfig+0x260>)
 8003ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ea6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed0 <HAL_RCC_ClockConfig+0x264>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fe f844 	bl	8001f38 <HAL_InitTick>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	72fb      	strb	r3, [r7, #11]

  return status;
 8003eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023c00 	.word	0x40023c00
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	0800c630 	.word	0x0800c630
 8003ecc:	20000014 	.word	0x20000014
 8003ed0:	20000018 	.word	0x20000018

08003ed4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ed8:	b092      	sub	sp, #72	@ 0x48
 8003eda:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003edc:	4b79      	ldr	r3, [pc, #484]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b0c      	cmp	r3, #12
 8003eea:	d00d      	beq.n	8003f08 <HAL_RCC_GetSysClockFreq+0x34>
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	f200 80d5 	bhi.w	800409c <HAL_RCC_GetSysClockFreq+0x1c8>
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d002      	beq.n	8003efc <HAL_RCC_GetSysClockFreq+0x28>
 8003ef6:	2b08      	cmp	r3, #8
 8003ef8:	d003      	beq.n	8003f02 <HAL_RCC_GetSysClockFreq+0x2e>
 8003efa:	e0cf      	b.n	800409c <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003efc:	4b72      	ldr	r3, [pc, #456]	@ (80040c8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003efe:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003f00:	e0da      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f02:	4b72      	ldr	r3, [pc, #456]	@ (80040cc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003f04:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003f06:	e0d7      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0a:	0c9b      	lsrs	r3, r3, #18
 8003f0c:	f003 020f 	and.w	r2, r3, #15
 8003f10:	4b6f      	ldr	r3, [pc, #444]	@ (80040d0 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f12:	5c9b      	ldrb	r3, [r3, r2]
 8003f14:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f18:	0d9b      	lsrs	r3, r3, #22
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f22:	4b68      	ldr	r3, [pc, #416]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d05d      	beq.n	8003fea <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	2200      	movs	r2, #0
 8003f32:	4618      	mov	r0, r3
 8003f34:	4611      	mov	r1, r2
 8003f36:	4604      	mov	r4, r0
 8003f38:	460d      	mov	r5, r1
 8003f3a:	4622      	mov	r2, r4
 8003f3c:	462b      	mov	r3, r5
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 0100 	mov.w	r1, #0
 8003f46:	0159      	lsls	r1, r3, #5
 8003f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f4c:	0150      	lsls	r0, r2, #5
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4621      	mov	r1, r4
 8003f54:	1a51      	subs	r1, r2, r1
 8003f56:	6139      	str	r1, [r7, #16]
 8003f58:	4629      	mov	r1, r5
 8003f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f5e:	617b      	str	r3, [r7, #20]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	018b      	lsls	r3, r1, #6
 8003f70:	4651      	mov	r1, sl
 8003f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f76:	4651      	mov	r1, sl
 8003f78:	018a      	lsls	r2, r1, #6
 8003f7a:	46d4      	mov	ip, sl
 8003f7c:	ebb2 080c 	subs.w	r8, r2, ip
 8003f80:	4659      	mov	r1, fp
 8003f82:	eb63 0901 	sbc.w	r9, r3, r1
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f9a:	4690      	mov	r8, r2
 8003f9c:	4699      	mov	r9, r3
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	eb18 0303 	adds.w	r3, r8, r3
 8003fa4:	60bb      	str	r3, [r7, #8]
 8003fa6:	462b      	mov	r3, r5
 8003fa8:	eb49 0303 	adc.w	r3, r9, r3
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fba:	4629      	mov	r1, r5
 8003fbc:	024b      	lsls	r3, r1, #9
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4604      	mov	r4, r0
 8003fc4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003fc8:	4601      	mov	r1, r0
 8003fca:	024a      	lsls	r2, r1, #9
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fdc:	f7fd f8e0 	bl	80011a0 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fe8:	e055      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	2200      	movs	r2, #0
 8003fee:	623b      	str	r3, [r7, #32]
 8003ff0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ff2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ff6:	4642      	mov	r2, r8
 8003ff8:	464b      	mov	r3, r9
 8003ffa:	f04f 0000 	mov.w	r0, #0
 8003ffe:	f04f 0100 	mov.w	r1, #0
 8004002:	0159      	lsls	r1, r3, #5
 8004004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004008:	0150      	lsls	r0, r2, #5
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	46c4      	mov	ip, r8
 8004010:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004014:	4640      	mov	r0, r8
 8004016:	4649      	mov	r1, r9
 8004018:	468c      	mov	ip, r1
 800401a:	eb63 0b0c 	sbc.w	fp, r3, ip
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800402a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800402e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004032:	ebb2 040a 	subs.w	r4, r2, sl
 8004036:	eb63 050b 	sbc.w	r5, r3, fp
 800403a:	f04f 0200 	mov.w	r2, #0
 800403e:	f04f 0300 	mov.w	r3, #0
 8004042:	00eb      	lsls	r3, r5, #3
 8004044:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004048:	00e2      	lsls	r2, r4, #3
 800404a:	4614      	mov	r4, r2
 800404c:	461d      	mov	r5, r3
 800404e:	4603      	mov	r3, r0
 8004050:	18e3      	adds	r3, r4, r3
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	460b      	mov	r3, r1
 8004056:	eb45 0303 	adc.w	r3, r5, r3
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	f04f 0300 	mov.w	r3, #0
 8004064:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004068:	4629      	mov	r1, r5
 800406a:	028b      	lsls	r3, r1, #10
 800406c:	4620      	mov	r0, r4
 800406e:	4629      	mov	r1, r5
 8004070:	4604      	mov	r4, r0
 8004072:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004076:	4601      	mov	r1, r0
 8004078:	028a      	lsls	r2, r1, #10
 800407a:	4610      	mov	r0, r2
 800407c:	4619      	mov	r1, r3
 800407e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004080:	2200      	movs	r2, #0
 8004082:	61bb      	str	r3, [r7, #24]
 8004084:	61fa      	str	r2, [r7, #28]
 8004086:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408a:	f7fd f889 	bl	80011a0 <__aeabi_uldivmod>
 800408e:	4602      	mov	r2, r0
 8004090:	460b      	mov	r3, r1
 8004092:	4613      	mov	r3, r2
 8004094:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8004096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004098:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800409a:	e00d      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800409c:	4b09      	ldr	r3, [pc, #36]	@ (80040c4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	0b5b      	lsrs	r3, r3, #13
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80040a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040aa:	3301      	adds	r3, #1
 80040ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80040b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3748      	adds	r7, #72	@ 0x48
 80040be:	46bd      	mov	sp, r7
 80040c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040c4:	40023800 	.word	0x40023800
 80040c8:	00f42400 	.word	0x00f42400
 80040cc:	007a1200 	.word	0x007a1200
 80040d0:	0800c624 	.word	0x0800c624

080040d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d8:	4b02      	ldr	r3, [pc, #8]	@ (80040e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80040da:	681b      	ldr	r3, [r3, #0]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr
 80040e4:	20000014 	.word	0x20000014

080040e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040ec:	f7ff fff2 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 80040f0:	4602      	mov	r2, r0
 80040f2:	4b05      	ldr	r3, [pc, #20]	@ (8004108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	0a1b      	lsrs	r3, r3, #8
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	4903      	ldr	r1, [pc, #12]	@ (800410c <HAL_RCC_GetPCLK1Freq+0x24>)
 80040fe:	5ccb      	ldrb	r3, [r1, r3]
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40023800 	.word	0x40023800
 800410c:	0800c640 	.word	0x0800c640

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004114:	f7ff ffde 	bl	80040d4 <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b05      	ldr	r3, [pc, #20]	@ (8004130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0adb      	lsrs	r3, r3, #11
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4903      	ldr	r1, [pc, #12]	@ (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800412c:	4618      	mov	r0, r3
 800412e:	bd80      	pop	{r7, pc}
 8004130:	40023800 	.word	0x40023800
 8004134:	0800c640 	.word	0x0800c640

08004138 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004138:	b480      	push	{r7}
 800413a:	b087      	sub	sp, #28
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004144:	4b29      	ldr	r3, [pc, #164]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d12c      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004150:	4b26      	ldr	r3, [pc, #152]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d005      	beq.n	8004168 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800415c:	4b24      	ldr	r3, [pc, #144]	@ (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	e016      	b.n	8004196 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004168:	4b20      	ldr	r3, [pc, #128]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	4a1f      	ldr	r2, [pc, #124]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800416e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004172:	6253      	str	r3, [r2, #36]	@ 0x24
 8004174:	4b1d      	ldr	r3, [pc, #116]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004180:	4b1b      	ldr	r3, [pc, #108]	@ (80041f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004188:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800418a:	4b18      	ldr	r3, [pc, #96]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	4a17      	ldr	r2, [pc, #92]	@ (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004190:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004194:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 800419c:	d105      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x72>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041a4:	d101      	bne.n	80041aa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80041a6:	2301      	movs	r3, #1
 80041a8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x84>
 80041b0:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a0f      	ldr	r2, [pc, #60]	@ (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 0201 	bic.w	r2, r3, #1
 80041c4:	490b      	ldr	r1, [pc, #44]	@ (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041cc:	4b09      	ldr	r3, [pc, #36]	@ (80041f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	371c      	adds	r7, #28
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40023800 	.word	0x40023800
 80041f0:	40007000 	.word	0x40007000
 80041f4:	40023c00 	.word	0x40023c00

080041f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d101      	bne.n	800420a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e042      	b.n	8004290 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d106      	bne.n	8004224 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fd fd0e 	bl	8001c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2224      	movs	r2, #36	@ 0x24
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800423a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f971 	bl	8004524 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004250:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004260:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004270:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	@ 0x28
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	603b      	str	r3, [r7, #0]
 80042a4:	4613      	mov	r3, r2
 80042a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b20      	cmp	r3, #32
 80042b6:	d175      	bne.n	80043a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_UART_Transmit+0x2c>
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e06e      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2221      	movs	r2, #33	@ 0x21
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042d6:	f7fd fe7b 	bl	8001fd0 <HAL_GetTick>
 80042da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	88fa      	ldrh	r2, [r7, #6]
 80042e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042f0:	d108      	bne.n	8004304 <HAL_UART_Transmit+0x6c>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e003      	b.n	800430c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800430c:	e02e      	b.n	800436c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	2200      	movs	r2, #0
 8004316:	2180      	movs	r1, #128	@ 0x80
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f000 f848 	bl	80043ae <UART_WaitOnFlagUntilTimeout>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d005      	beq.n	8004330 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e03a      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004344:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3302      	adds	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e007      	b.n	800435e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	3301      	adds	r3, #1
 800435c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004362:	b29b      	uxth	r3, r3
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1cb      	bne.n	800430e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2200      	movs	r2, #0
 800437e:	2140      	movs	r1, #64	@ 0x40
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f814 	bl	80043ae <UART_WaitOnFlagUntilTimeout>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e006      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	e000      	b.n	80043a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043a4:	2302      	movs	r3, #2
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3720      	adds	r7, #32
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b086      	sub	sp, #24
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	603b      	str	r3, [r7, #0]
 80043ba:	4613      	mov	r3, r2
 80043bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043be:	e03b      	b.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c6:	d037      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c8:	f7fd fe02 	bl	8001fd0 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	6a3a      	ldr	r2, [r7, #32]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d302      	bcc.n	80043de <UART_WaitOnFlagUntilTimeout+0x30>
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e03a      	b.n	8004458 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d023      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b80      	cmp	r3, #128	@ 0x80
 80043f4:	d020      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b40      	cmp	r3, #64	@ 0x40
 80043fa:	d01d      	beq.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b08      	cmp	r3, #8
 8004408:	d116      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	617b      	str	r3, [r7, #20]
 800441e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f81d 	bl	8004460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2208      	movs	r2, #8
 800442a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e00f      	b.n	8004458 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	4013      	ands	r3, r2
 8004442:	68ba      	ldr	r2, [r7, #8]
 8004444:	429a      	cmp	r2, r3
 8004446:	bf0c      	ite	eq
 8004448:	2301      	moveq	r3, #1
 800444a:	2300      	movne	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	461a      	mov	r2, r3
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	429a      	cmp	r2, r3
 8004454:	d0b4      	beq.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	3718      	adds	r7, #24
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004460:	b480      	push	{r7}
 8004462:	b095      	sub	sp, #84	@ 0x54
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	330c      	adds	r3, #12
 800446e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004488:	643a      	str	r2, [r7, #64]	@ 0x40
 800448a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800448e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e5      	bne.n	8004468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3314      	adds	r3, #20
 80044a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f023 0301 	bic.w	r3, r3, #1
 80044b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3314      	adds	r3, #20
 80044ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d119      	bne.n	800450c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	e853 3f00 	ldrex	r3, [r3]
 80044e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	f023 0310 	bic.w	r3, r3, #16
 80044ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	330c      	adds	r3, #12
 80044f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044f8:	61ba      	str	r2, [r7, #24]
 80044fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fc:	6979      	ldr	r1, [r7, #20]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	e841 2300 	strex	r3, r2, [r1]
 8004504:	613b      	str	r3, [r7, #16]
   return(result);
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1e5      	bne.n	80044d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800451a:	bf00      	nop
 800451c:	3754      	adds	r7, #84	@ 0x54
 800451e:	46bd      	mov	sp, r7
 8004520:	bc80      	pop	{r7}
 8004522:	4770      	bx	lr

08004524 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68da      	ldr	r2, [r3, #12]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	430a      	orrs	r2, r1
 8004540:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689a      	ldr	r2, [r3, #8]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	4313      	orrs	r3, r2
 8004558:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004564:	f023 030c 	bic.w	r3, r3, #12
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6812      	ldr	r2, [r2, #0]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	430b      	orrs	r3, r1
 8004570:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a55      	ldr	r2, [pc, #340]	@ (80046e4 <UART_SetConfig+0x1c0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d103      	bne.n	800459a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004592:	f7ff fdbd 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	e002      	b.n	80045a0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800459a:	f7ff fda5 	bl	80040e8 <HAL_RCC_GetPCLK1Freq>
 800459e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045a8:	d14c      	bne.n	8004644 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009a      	lsls	r2, r3, #2
 80045b4:	441a      	add	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c0:	4a49      	ldr	r2, [pc, #292]	@ (80046e8 <UART_SetConfig+0x1c4>)
 80045c2:	fba2 2303 	umull	r2, r3, r2, r3
 80045c6:	095b      	lsrs	r3, r3, #5
 80045c8:	0119      	lsls	r1, r3, #4
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	009a      	lsls	r2, r3, #2
 80045d4:	441a      	add	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80045e0:	4b41      	ldr	r3, [pc, #260]	@ (80046e8 <UART_SetConfig+0x1c4>)
 80045e2:	fba3 0302 	umull	r0, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	2064      	movs	r0, #100	@ 0x64
 80045ea:	fb00 f303 	mul.w	r3, r0, r3
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	00db      	lsls	r3, r3, #3
 80045f2:	3332      	adds	r3, #50	@ 0x32
 80045f4:	4a3c      	ldr	r2, [pc, #240]	@ (80046e8 <UART_SetConfig+0x1c4>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	095b      	lsrs	r3, r3, #5
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004602:	4419      	add	r1, r3
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fbb2 f2f3 	udiv	r2, r2, r3
 800461a:	4b33      	ldr	r3, [pc, #204]	@ (80046e8 <UART_SetConfig+0x1c4>)
 800461c:	fba3 0302 	umull	r0, r3, r3, r2
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	2064      	movs	r0, #100	@ 0x64
 8004624:	fb00 f303 	mul.w	r3, r0, r3
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	3332      	adds	r3, #50	@ 0x32
 800462e:	4a2e      	ldr	r2, [pc, #184]	@ (80046e8 <UART_SetConfig+0x1c4>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	f003 0207 	and.w	r2, r3, #7
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	440a      	add	r2, r1
 8004640:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004642:	e04a      	b.n	80046da <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4613      	mov	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	4413      	add	r3, r2
 800464c:	009a      	lsls	r2, r3, #2
 800464e:	441a      	add	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
 800465a:	4a23      	ldr	r2, [pc, #140]	@ (80046e8 <UART_SetConfig+0x1c4>)
 800465c:	fba2 2303 	umull	r2, r3, r2, r3
 8004660:	095b      	lsrs	r3, r3, #5
 8004662:	0119      	lsls	r1, r3, #4
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	4613      	mov	r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4413      	add	r3, r2
 800466c:	009a      	lsls	r2, r3, #2
 800466e:	441a      	add	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	fbb2 f2f3 	udiv	r2, r2, r3
 800467a:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <UART_SetConfig+0x1c4>)
 800467c:	fba3 0302 	umull	r0, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	2064      	movs	r0, #100	@ 0x64
 8004684:	fb00 f303 	mul.w	r3, r0, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	3332      	adds	r3, #50	@ 0x32
 800468e:	4a16      	ldr	r2, [pc, #88]	@ (80046e8 <UART_SetConfig+0x1c4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800469a:	4419      	add	r1, r3
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009a      	lsls	r2, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <UART_SetConfig+0x1c4>)
 80046b4:	fba3 0302 	umull	r0, r3, r3, r2
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	2064      	movs	r0, #100	@ 0x64
 80046bc:	fb00 f303 	mul.w	r3, r0, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	011b      	lsls	r3, r3, #4
 80046c4:	3332      	adds	r3, #50	@ 0x32
 80046c6:	4a08      	ldr	r2, [pc, #32]	@ (80046e8 <UART_SetConfig+0x1c4>)
 80046c8:	fba2 2303 	umull	r2, r3, r2, r3
 80046cc:	095b      	lsrs	r3, r3, #5
 80046ce:	f003 020f 	and.w	r2, r3, #15
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	440a      	add	r2, r1
 80046d8:	609a      	str	r2, [r3, #8]
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40013800 	.word	0x40013800
 80046e8:	51eb851f 	.word	0x51eb851f

080046ec <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	461a      	mov	r2, r3
 80046f8:	460b      	mov	r3, r1
 80046fa:	72fb      	strb	r3, [r7, #11]
 80046fc:	4613      	mov	r3, r2
 80046fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <lsm6dso_read_reg+0x20>
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	e009      	b.n	8004720 <lsm6dso_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685c      	ldr	r4, [r3, #4]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68d8      	ldr	r0, [r3, #12]
 8004714:	893b      	ldrh	r3, [r7, #8]
 8004716:	7af9      	ldrb	r1, [r7, #11]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	47a0      	blx	r4
 800471c:	6178      	str	r0, [r7, #20]

  return ret;
 800471e:	697b      	ldr	r3, [r7, #20]
}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bd90      	pop	{r4, r7, pc}

08004728 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	607a      	str	r2, [r7, #4]
 8004732:	461a      	mov	r2, r3
 8004734:	460b      	mov	r3, r1
 8004736:	72fb      	strb	r3, [r7, #11]
 8004738:	4613      	mov	r3, r2
 800473a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <lsm6dso_write_reg+0x20>
 8004742:	f04f 33ff 	mov.w	r3, #4294967295
 8004746:	e009      	b.n	800475c <lsm6dso_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681c      	ldr	r4, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	68d8      	ldr	r0, [r3, #12]
 8004750:	893b      	ldrh	r3, [r7, #8]
 8004752:	7af9      	ldrb	r1, [r7, #11]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	47a0      	blx	r4
 8004758:	6178      	str	r0, [r7, #20]

  return ret;
 800475a:	697b      	ldr	r3, [r7, #20]
}
 800475c:	4618      	mov	r0, r3
 800475e:	371c      	adds	r7, #28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd90      	pop	{r4, r7, pc}

08004764 <lsm6dso_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dso_from_fs4_to_mg(int16_t lsb)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	4603      	mov	r3, r0
 800476c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 800476e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fc fad4 	bl	8000d20 <__aeabi_i2f>
 8004778:	4603      	mov	r3, r0
 800477a:	4904      	ldr	r1, [pc, #16]	@ (800478c <lsm6dso_from_fs4_to_mg+0x28>)
 800477c:	4618      	mov	r0, r3
 800477e:	f7fc fb23 	bl	8000dc8 <__aeabi_fmul>
 8004782:	4603      	mov	r3, r0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3708      	adds	r7, #8
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	3df9db23 	.word	0x3df9db23

08004790 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	460b      	mov	r3, r1
 800479a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800479c:	f107 0208 	add.w	r2, r7, #8
 80047a0:	2301      	movs	r3, #1
 80047a2:	2110      	movs	r1, #16
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ffa1 	bl	80046ec <lsm6dso_read_reg>
 80047aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	f003 0303 	and.w	r3, r3, #3
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	7a3b      	ldrb	r3, [r7, #8]
 80047bc:	f362 0383 	bfi	r3, r2, #2, #2
 80047c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80047c2:	f107 0208 	add.w	r2, r7, #8
 80047c6:	2301      	movs	r3, #1
 80047c8:	2110      	movs	r1, #16
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f7ff ffac 	bl	8004728 <lsm6dso_write_reg>
 80047d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80047d2:	68fb      	ldr	r3, [r7, #12]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80047e8:	78fb      	ldrb	r3, [r7, #3]
 80047ea:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80047ec:	f107 030c 	add.w	r3, r7, #12
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa93 	bl	8004d1e <lsm6dso_fsm_enable_get>
 80047f8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <lsm6dso_xl_data_rate_set+0x28>
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	e0e0      	b.n	80049c6 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004804:	7b3b      	ldrb	r3, [r7, #12]
 8004806:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800480a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800480c:	7b3b      	ldrb	r3, [r7, #12]
 800480e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004812:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004814:	4313      	orrs	r3, r2
 8004816:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004818:	7b3b      	ldrb	r3, [r7, #12]
 800481a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800481e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004820:	4313      	orrs	r3, r2
 8004822:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004824:	7b3b      	ldrb	r3, [r7, #12]
 8004826:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800482a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800482c:	4313      	orrs	r3, r2
 800482e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004830:	7b3b      	ldrb	r3, [r7, #12]
 8004832:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004836:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004838:	4313      	orrs	r3, r2
 800483a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800483c:	7b3b      	ldrb	r3, [r7, #12]
 800483e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004842:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004844:	4313      	orrs	r3, r2
 8004846:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004848:	7b3b      	ldrb	r3, [r7, #12]
 800484a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800484e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004850:	4313      	orrs	r3, r2
 8004852:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004854:	7b3b      	ldrb	r3, [r7, #12]
 8004856:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800485a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800485c:	4313      	orrs	r3, r2
 800485e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004860:	7b7b      	ldrb	r3, [r7, #13]
 8004862:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004866:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004868:	4313      	orrs	r3, r2
 800486a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800486c:	7b7b      	ldrb	r3, [r7, #13]
 800486e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004872:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004874:	4313      	orrs	r3, r2
 8004876:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004878:	7b7b      	ldrb	r3, [r7, #13]
 800487a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800487e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004880:	4313      	orrs	r3, r2
 8004882:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004884:	7b7b      	ldrb	r3, [r7, #13]
 8004886:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800488a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800488c:	4313      	orrs	r3, r2
 800488e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004890:	7b7b      	ldrb	r3, [r7, #13]
 8004892:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004896:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004898:	4313      	orrs	r3, r2
 800489a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800489c:	7b7b      	ldrb	r3, [r7, #13]
 800489e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80048a4:	4313      	orrs	r3, r2
 80048a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80048a8:	7b7b      	ldrb	r3, [r7, #13]
 80048aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80048b0:	4313      	orrs	r3, r2
 80048b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80048b4:	7b7b      	ldrb	r3, [r7, #13]
 80048b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80048bc:	4313      	orrs	r3, r2
 80048be:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d164      	bne.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80048c4:	f107 030b 	add.w	r3, r7, #11
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 fa48 	bl	8004d60 <lsm6dso_fsm_data_rate_get>
 80048d0:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <lsm6dso_xl_data_rate_set+0x100>
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	e074      	b.n	80049c6 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80048dc:	7afb      	ldrb	r3, [r7, #11]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d852      	bhi.n	8004988 <lsm6dso_xl_data_rate_set+0x1ac>
 80048e2:	a201      	add	r2, pc, #4	@ (adr r2, 80048e8 <lsm6dso_xl_data_rate_set+0x10c>)
 80048e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e8:	080048f9 	.word	0x080048f9
 80048ec:	0800490b 	.word	0x0800490b
 80048f0:	08004929 	.word	0x08004929
 80048f4:	08004953 	.word	0x08004953
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d102      	bne.n	8004904 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80048fe:	2301      	movs	r3, #1
 8004900:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004902:	e044      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	75fb      	strb	r3, [r7, #23]
        break;
 8004908:	e041      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004910:	2302      	movs	r3, #2
 8004912:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004914:	e03b      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d102      	bne.n	8004922 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 800491c:	2302      	movs	r3, #2
 800491e:	75fb      	strb	r3, [r7, #23]
        break;
 8004920:	e035      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	75fb      	strb	r3, [r7, #23]
        break;
 8004926:	e032      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004928:	78fb      	ldrb	r3, [r7, #3]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d102      	bne.n	8004934 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800492e:	2303      	movs	r3, #3
 8004930:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004932:	e02c      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004934:	78fb      	ldrb	r3, [r7, #3]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d102      	bne.n	8004940 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800493a:	2303      	movs	r3, #3
 800493c:	75fb      	strb	r3, [r7, #23]
        break;
 800493e:	e026      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004940:	78fb      	ldrb	r3, [r7, #3]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d102      	bne.n	800494c <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004946:	2303      	movs	r3, #3
 8004948:	75fb      	strb	r3, [r7, #23]
        break;
 800494a:	e020      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	75fb      	strb	r3, [r7, #23]
        break;
 8004950:	e01d      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004952:	78fb      	ldrb	r3, [r7, #3]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d102      	bne.n	800495e <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004958:	2304      	movs	r3, #4
 800495a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800495c:	e017      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800495e:	78fb      	ldrb	r3, [r7, #3]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d102      	bne.n	800496a <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004964:	2304      	movs	r3, #4
 8004966:	75fb      	strb	r3, [r7, #23]
        break;
 8004968:	e011      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	2b02      	cmp	r3, #2
 800496e:	d102      	bne.n	8004976 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004970:	2304      	movs	r3, #4
 8004972:	75fb      	strb	r3, [r7, #23]
        break;
 8004974:	e00b      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8004976:	78fb      	ldrb	r3, [r7, #3]
 8004978:	2b03      	cmp	r3, #3
 800497a:	d102      	bne.n	8004982 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800497c:	2304      	movs	r3, #4
 800497e:	75fb      	strb	r3, [r7, #23]
        break;
 8004980:	e005      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	75fb      	strb	r3, [r7, #23]
        break;
 8004986:	e002      	b.n	800498e <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	75fb      	strb	r3, [r7, #23]
        break;
 800498c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800498e:	f107 0208 	add.w	r2, r7, #8
 8004992:	2301      	movs	r3, #1
 8004994:	2110      	movs	r1, #16
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fea8 	bl	80046ec <lsm6dso_read_reg>
 800499c:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 800499e:	7dfb      	ldrb	r3, [r7, #23]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	b2da      	uxtb	r2, r3
 80049a6:	7a3b      	ldrb	r3, [r7, #8]
 80049a8:	f362 1307 	bfi	r3, r2, #4, #4
 80049ac:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80049ae:	f107 0208 	add.w	r2, r7, #8
 80049b2:	2301      	movs	r3, #1
 80049b4:	2110      	movs	r1, #16
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7ff feb6 	bl	8004728 <lsm6dso_write_reg>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  return ret;
 80049c4:	693b      	ldr	r3, [r7, #16]
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3718      	adds	r7, #24
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop

080049d0 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80049da:	f107 020c 	add.w	r2, r7, #12
 80049de:	2306      	movs	r3, #6
 80049e0:	2128      	movs	r1, #40	@ 0x28
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff fe82 	bl	80046ec <lsm6dso_read_reg>
 80049e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80049ea:	7b7b      	ldrb	r3, [r7, #13]
 80049ec:	b21a      	sxth	r2, r3
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	7b3a      	ldrb	r2, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	b21a      	sxth	r2, r3
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	3302      	adds	r3, #2
 8004a10:	b212      	sxth	r2, r2
 8004a12:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	3302      	adds	r3, #2
 8004a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	b29b      	uxth	r3, r3
 8004a22:	7bba      	ldrb	r2, [r7, #14]
 8004a24:	4413      	add	r3, r2
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	b212      	sxth	r2, r2
 8004a2e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004a30:	7c7a      	ldrb	r2, [r7, #17]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3304      	adds	r3, #4
 8004a36:	b212      	sxth	r2, r2
 8004a38:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	7c3a      	ldrb	r2, [r7, #16]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3304      	adds	r3, #4
 8004a52:	b212      	sxth	r2, r2
 8004a54:	801a      	strh	r2, [r3, #0]

  return ret;
 8004a56:	697b      	ldr	r3, [r7, #20]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3718      	adds	r7, #24
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(const stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	460b      	mov	r3, r1
 8004a6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8004a70:	78fb      	ldrb	r3, [r7, #3]
 8004a72:	f003 0303 	and.w	r3, r3, #3
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	7a3b      	ldrb	r3, [r7, #8]
 8004a7a:	f362 1387 	bfi	r3, r2, #6, #2
 8004a7e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004a80:	f107 0208 	add.w	r2, r7, #8
 8004a84:	2301      	movs	r3, #1
 8004a86:	2101      	movs	r1, #1
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f7ff fe4d 	bl	8004728 <lsm6dso_write_reg>
 8004a8e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004a90:	68fb      	ldr	r3, [r7, #12]
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
 8004aa2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	210f      	movs	r1, #15
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fe1e 	bl	80046ec <lsm6dso_read_reg>
 8004ab0:	60f8      	str	r0, [r7, #12]

  return ret;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004ac8:	f107 0208 	add.w	r2, r7, #8
 8004acc:	2301      	movs	r3, #1
 8004ace:	2112      	movs	r1, #18
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff fe0b 	bl	80046ec <lsm6dso_read_reg>
 8004ad6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d10f      	bne.n	8004afe <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8004ade:	78fb      	ldrb	r3, [r7, #3]
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	7a3b      	ldrb	r3, [r7, #8]
 8004ae8:	f362 0300 	bfi	r3, r2, #0, #1
 8004aec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004aee:	f107 0208 	add.w	r2, r7, #8
 8004af2:	2301      	movs	r3, #1
 8004af4:	2112      	movs	r1, #18
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fe16 	bl	8004728 <lsm6dso_write_reg>
 8004afc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004afe:	68fb      	ldr	r3, [r7, #12]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3710      	adds	r7, #16
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <lsm6dso_reset_get>:
  * @param  val      Get the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004b12:	f107 0208 	add.w	r2, r7, #8
 8004b16:	2301      	movs	r3, #1
 8004b18:	2112      	movs	r1, #18
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff fde6 	bl	80046ec <lsm6dso_read_reg>
 8004b20:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8004b22:	7a3b      	ldrb	r3, [r7, #8]
 8004b24:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	701a      	strb	r2, [r3, #0]

  return ret;
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(const stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b086      	sub	sp, #24
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	460b      	mov	r3, r1
 8004b44:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004b46:	f107 020c 	add.w	r2, r7, #12
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	2118      	movs	r1, #24
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff fdcc 	bl	80046ec <lsm6dso_read_reg>
 8004b54:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004b56:	78fb      	ldrb	r3, [r7, #3]
 8004b58:	09db      	lsrs	r3, r3, #7
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	b2da      	uxtb	r2, r3
 8004b62:	7b3b      	ldrb	r3, [r7, #12]
 8004b64:	f362 0341 	bfi	r3, r2, #1, #1
 8004b68:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004b6a:	f107 020c 	add.w	r2, r7, #12
 8004b6e:	2301      	movs	r3, #1
 8004b70:	2118      	movs	r1, #24
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff fdd8 	bl	8004728 <lsm6dso_write_reg>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <lsm6dso_i3c_disable_set+0x50>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	e01b      	b.n	8004bc2 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8004b8a:	f107 0210 	add.w	r2, r7, #16
 8004b8e:	2301      	movs	r3, #1
 8004b90:	2162      	movs	r1, #98	@ 0x62
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff fdaa 	bl	80046ec <lsm6dso_read_reg>
 8004b98:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	7c3b      	ldrb	r3, [r7, #16]
 8004ba4:	f362 03c4 	bfi	r3, r2, #3, #2
 8004ba8:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8004baa:	f107 0210 	add.w	r2, r7, #16
 8004bae:	2301      	movs	r3, #1
 8004bb0:	2162      	movs	r1, #98	@ 0x62
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f7ff fdb8 	bl	8004728 <lsm6dso_write_reg>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	617b      	str	r3, [r7, #20]

  return ret;
 8004bc0:	697b      	ldr	r3, [r7, #20]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 8004bd6:	f107 020c 	add.w	r2, r7, #12
 8004bda:	2301      	movs	r3, #1
 8004bdc:	2108      	movs	r1, #8
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7ff fd84 	bl	80046ec <lsm6dso_read_reg>
 8004be4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <lsm6dso_fifo_watermark_set+0x26>
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	e020      	b.n	8004c32 <lsm6dso_fifo_watermark_set+0x68>

  fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	743b      	strb	r3, [r7, #16]
  fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	0a1b      	lsrs	r3, r3, #8
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	b2da      	uxtb	r2, r3
 8004c02:	7b3b      	ldrb	r3, [r7, #12]
 8004c04:	f362 0300 	bfi	r3, r2, #0, #1
 8004c08:	733b      	strb	r3, [r7, #12]

  ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8004c0a:	f107 0210 	add.w	r2, r7, #16
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2107      	movs	r1, #7
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fd88 	bl	8004728 <lsm6dso_write_reg>
 8004c18:	6178      	str	r0, [r7, #20]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 8004c1a:	f107 020c 	add.w	r2, r7, #12
 8004c1e:	2301      	movs	r3, #1
 8004c20:	2108      	movs	r1, #8
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f7ff fd80 	bl	8004728 <lsm6dso_write_reg>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]

  return ret;
 8004c30:	697b      	ldr	r3, [r7, #20]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c46:	f107 0208 	add.w	r2, r7, #8
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	2109      	movs	r1, #9
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fd4c 	bl	80046ec <lsm6dso_read_reg>
 8004c54:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10f      	bne.n	8004c7c <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 8004c5c:	78fb      	ldrb	r3, [r7, #3]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	7a3b      	ldrb	r3, [r7, #8]
 8004c66:	f362 0303 	bfi	r3, r2, #0, #4
 8004c6a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c6c:	f107 0208 	add.w	r2, r7, #8
 8004c70:	2301      	movs	r3, #1
 8004c72:	2109      	movs	r1, #9
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fd57 	bl	8004728 <lsm6dso_write_reg>
 8004c7a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <lsm6dso_fifo_gy_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_gy_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_gy_t val)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	460b      	mov	r3, r1
 8004c90:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c92:	f107 0208 	add.w	r2, r7, #8
 8004c96:	2301      	movs	r3, #1
 8004c98:	2109      	movs	r1, #9
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fd26 	bl	80046ec <lsm6dso_read_reg>
 8004ca0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10f      	bne.n	8004cc8 <lsm6dso_fifo_gy_batch_set+0x42>
  {
    reg.bdr_gy = (uint8_t)val;
 8004ca8:	78fb      	ldrb	r3, [r7, #3]
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	7a3b      	ldrb	r3, [r7, #8]
 8004cb2:	f362 1307 	bfi	r3, r2, #4, #4
 8004cb6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004cb8:	f107 0208 	add.w	r2, r7, #8
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	2109      	movs	r1, #9
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f7ff fd31 	bl	8004728 <lsm6dso_write_reg>
 8004cc6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b084      	sub	sp, #16
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	460b      	mov	r3, r1
 8004cdc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004cde:	f107 0208 	add.w	r2, r7, #8
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	210a      	movs	r1, #10
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f7ff fd00 	bl	80046ec <lsm6dso_read_reg>
 8004cec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8004cf4:	78fb      	ldrb	r3, [r7, #3]
 8004cf6:	f003 0307 	and.w	r3, r3, #7
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	7a3b      	ldrb	r3, [r7, #8]
 8004cfe:	f362 0302 	bfi	r3, r2, #0, #3
 8004d02:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004d04:	f107 0208 	add.w	r2, r7, #8
 8004d08:	2301      	movs	r3, #1
 8004d0a:	210a      	movs	r1, #10
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fd0b 	bl	8004728 <lsm6dso_write_reg>
 8004d12:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d14:	68fb      	ldr	r3, [r7, #12]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(const stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b084      	sub	sp, #16
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
 8004d26:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004d28:	2102      	movs	r1, #2
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fe98 	bl	8004a60 <lsm6dso_mem_bank_set>
 8004d30:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8004d32:	2302      	movs	r3, #2
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	2146      	movs	r1, #70	@ 0x46
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff fcd7 	bl	80046ec <lsm6dso_read_reg>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	4413      	add	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004d46:	2100      	movs	r1, #0
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fe89 	bl	8004a60 <lsm6dso_mem_bank_set>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  return ret;
 8004d56:	68fb      	ldr	r3, [r7, #12]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004d6a:	2102      	movs	r1, #2
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fe77 	bl	8004a60 <lsm6dso_mem_bank_set>
 8004d72:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <lsm6dso_fsm_data_rate_get+0x1e>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	e03a      	b.n	8004df4 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8004d7e:	f107 0208 	add.w	r2, r7, #8
 8004d82:	2301      	movs	r3, #1
 8004d84:	215f      	movs	r1, #95	@ 0x5f
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff fcb0 	bl	80046ec <lsm6dso_read_reg>
 8004d8c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d125      	bne.n	8004de0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8004d94:	7a3b      	ldrb	r3, [r7, #8]
 8004d96:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d81b      	bhi.n	8004dd8 <lsm6dso_fsm_data_rate_get+0x78>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <lsm6dso_fsm_data_rate_get+0x48>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dc1 	.word	0x08004dc1
 8004db0:	08004dc9 	.word	0x08004dc9
 8004db4:	08004dd1 	.word	0x08004dd1
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	701a      	strb	r2, [r3, #0]
      break;
 8004dbe:	e010      	b.n	8004de2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
      break;
 8004dc6:	e00c      	b.n	8004de2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	701a      	strb	r2, [r3, #0]
      break;
 8004dce:	e008      	b.n	8004de2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2203      	movs	r2, #3
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e004      	b.n	8004de2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	701a      	strb	r2, [r3, #0]
      break;
 8004dde:	e000      	b.n	8004de2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8004de0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004de2:	2100      	movs	r1, #0
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fe3b 	bl	8004a60 <lsm6dso_mem_bank_set>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  return ret;
 8004df2:	68fb      	ldr	r3, [r7, #12]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b090      	sub	sp, #64	@ 0x40
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	1d3b      	adds	r3, r7, #4
 8004e06:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8004e10:	793b      	ldrb	r3, [r7, #4]
 8004e12:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e1c:	f362 0300 	bfi	r3, r2, #0, #1
 8004e20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8004e24:	793b      	ldrb	r3, [r7, #4]
 8004e26:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e30:	f362 0341 	bfi	r3, r2, #1, #1
 8004e34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8004e38:	793b      	ldrb	r3, [r7, #4]
 8004e3a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e44:	f362 0382 	bfi	r3, r2, #2, #1
 8004e48:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8004e4c:	793b      	ldrb	r3, [r7, #4]
 8004e4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e58:	f362 03c3 	bfi	r3, r2, #3, #1
 8004e5c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8004e60:	793b      	ldrb	r3, [r7, #4]
 8004e62:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e6c:	f362 1304 	bfi	r3, r2, #4, #1
 8004e70:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8004e74:	793b      	ldrb	r3, [r7, #4]
 8004e76:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e7a:	b2da      	uxtb	r2, r3
 8004e7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e80:	f362 1345 	bfi	r3, r2, #5, #1
 8004e84:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8004e88:	793b      	ldrb	r3, [r7, #4]
 8004e8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e94:	f362 1386 	bfi	r3, r2, #6, #1
 8004e98:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8004e9c:	797b      	ldrb	r3, [r7, #5]
 8004e9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004ea8:	f362 13c7 	bfi	r3, r2, #7, #1
 8004eac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8004eb0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	210d      	movs	r1, #13
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fc35 	bl	8004728 <lsm6dso_write_reg>
 8004ebe:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <lsm6dso_pin_int1_route_set+0xce>
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec8:	e33a      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004eca:	f107 0210 	add.w	r2, r7, #16
 8004ece:	2301      	movs	r3, #1
 8004ed0:	2113      	movs	r1, #19
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f7ff fc0a 	bl	80046ec <lsm6dso_read_reg>
 8004ed8:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <lsm6dso_pin_int1_route_set+0xe8>
 8004ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee2:	e32d      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8004ee4:	793b      	ldrb	r3, [r7, #4]
 8004ee6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	797b      	ldrb	r3, [r7, #5]
 8004eee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d004      	beq.n	8004f06 <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8004efc:	7c3b      	ldrb	r3, [r7, #16]
 8004efe:	f043 0320 	orr.w	r3, r3, #32
 8004f02:	743b      	strb	r3, [r7, #16]
 8004f04:	e003      	b.n	8004f0e <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8004f06:	7c3b      	ldrb	r3, [r7, #16]
 8004f08:	f023 0320 	bic.w	r3, r3, #32
 8004f0c:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004f0e:	f107 0210 	add.w	r2, r7, #16
 8004f12:	2301      	movs	r3, #1
 8004f14:	2113      	movs	r1, #19
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f7ff fc06 	bl	8004728 <lsm6dso_write_reg>
 8004f1c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <lsm6dso_pin_int1_route_set+0x12c>
 8004f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f26:	e30b      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8004f28:	f107 0220 	add.w	r2, r7, #32
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	210e      	movs	r1, #14
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f7ff fbdb 	bl	80046ec <lsm6dso_read_reg>
 8004f36:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8004f38:	793b      	ldrb	r3, [r7, #4]
 8004f3a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f44:	f362 0382 	bfi	r3, r2, #2, #1
 8004f48:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8004f4c:	f107 0220 	add.w	r2, r7, #32
 8004f50:	2301      	movs	r3, #1
 8004f52:	210e      	movs	r1, #14
 8004f54:	68f8      	ldr	r0, [r7, #12]
 8004f56:	f7ff fbe7 	bl	8004728 <lsm6dso_write_reg>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f5e:	4413      	add	r3, r2
 8004f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <lsm6dso_pin_int1_route_set+0x170>
 8004f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6a:	e2e9      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004f6c:	f107 0218 	add.w	r2, r7, #24
 8004f70:	2301      	movs	r3, #1
 8004f72:	215f      	movs	r1, #95	@ 0x5f
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff fbb9 	bl	80046ec <lsm6dso_read_reg>
 8004f7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 8004f7c:	797b      	ldrb	r3, [r7, #5]
 8004f7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	7e3b      	ldrb	r3, [r7, #24]
 8004f86:	f362 0300 	bfi	r3, r2, #0, #1
 8004f8a:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004f8c:	f107 0218 	add.w	r2, r7, #24
 8004f90:	2301      	movs	r3, #1
 8004f92:	215f      	movs	r1, #95	@ 0x5f
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7ff fbc7 	bl	8004728 <lsm6dso_write_reg>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f9e:	4413      	add	r3, r2
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <lsm6dso_pin_int1_route_set+0x1b0>
 8004fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004faa:	e2c9      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 8004fac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fb0:	f023 0307 	bic.w	r3, r3, #7
 8004fb4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8004fb8:	79bb      	ldrb	r3, [r7, #6]
 8004fba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fc4:	f362 03c3 	bfi	r3, r2, #3, #1
 8004fc8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8004fcc:	79bb      	ldrb	r3, [r7, #6]
 8004fce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fd8:	f362 1304 	bfi	r3, r2, #4, #1
 8004fdc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8004fe0:	79bb      	ldrb	r3, [r7, #6]
 8004fe2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fec:	f362 1345 	bfi	r3, r2, #5, #1
 8004ff0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8004ff4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004ff8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ffc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8005000:	79bb      	ldrb	r3, [r7, #6]
 8005002:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800500c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005010:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8005014:	79bb      	ldrb	r3, [r7, #6]
 8005016:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005020:	f362 0300 	bfi	r3, r2, #0, #1
 8005024:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8005028:	79bb      	ldrb	r3, [r7, #6]
 800502a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005034:	f362 0341 	bfi	r3, r2, #1, #1
 8005038:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 800503c:	79bb      	ldrb	r3, [r7, #6]
 800503e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005048:	f362 0382 	bfi	r3, r2, #2, #1
 800504c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800505c:	f362 03c3 	bfi	r3, r2, #3, #1
 8005060:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005070:	f362 1304 	bfi	r3, r2, #4, #1
 8005074:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005084:	f362 1345 	bfi	r3, r2, #5, #1
 8005088:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005098:	f362 1386 	bfi	r3, r2, #6, #1
 800509c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80050ac:	f362 13c7 	bfi	r3, r2, #7, #1
 80050b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 80050b4:	79fb      	ldrb	r3, [r7, #7]
 80050b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050c0:	f362 0300 	bfi	r3, r2, #0, #1
 80050c4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 80050c8:	79fb      	ldrb	r3, [r7, #7]
 80050ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050d4:	f362 0341 	bfi	r3, r2, #1, #1
 80050d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050e8:	f362 0382 	bfi	r3, r2, #2, #1
 80050ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 80050f0:	7a3b      	ldrb	r3, [r7, #8]
 80050f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050fc:	f362 03c3 	bfi	r3, r2, #3, #1
 8005100:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8005104:	7a3b      	ldrb	r3, [r7, #8]
 8005106:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800510a:	b2da      	uxtb	r2, r3
 800510c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005110:	f362 1304 	bfi	r3, r2, #4, #1
 8005114:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8005118:	7a3b      	ldrb	r3, [r7, #8]
 800511a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800511e:	b2da      	uxtb	r2, r3
 8005120:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005124:	f362 1345 	bfi	r3, r2, #5, #1
 8005128:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 800512c:	7a3b      	ldrb	r3, [r7, #8]
 800512e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005132:	b2da      	uxtb	r2, r3
 8005134:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005138:	f362 1386 	bfi	r3, r2, #6, #1
 800513c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8005140:	7a3b      	ldrb	r3, [r7, #8]
 8005142:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800514c:	f362 13c7 	bfi	r3, r2, #7, #1
 8005150:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005154:	2102      	movs	r1, #2
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f7ff fc82 	bl	8004a60 <lsm6dso_mem_bank_set>
 800515c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800515e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <lsm6dso_pin_int1_route_set+0x36c>
 8005164:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005166:	e1eb      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8005168:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800516c:	2301      	movs	r3, #1
 800516e:	210a      	movs	r1, #10
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff fad9 	bl	8004728 <lsm6dso_write_reg>
 8005176:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 8005178:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800517c:	2301      	movs	r3, #1
 800517e:	210b      	movs	r1, #11
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f7ff fad1 	bl	8004728 <lsm6dso_write_reg>
 8005186:	4602      	mov	r2, r0
 8005188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800518a:	4413      	add	r3, r2
 800518c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 800518e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005192:	2301      	movs	r3, #1
 8005194:	210c      	movs	r1, #12
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff fac6 	bl	8004728 <lsm6dso_write_reg>
 800519c:	4602      	mov	r2, r0
 800519e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a0:	4413      	add	r3, r2
 80051a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80051a4:	2100      	movs	r1, #0
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f7ff fc5a 	bl	8004a60 <lsm6dso_mem_bank_set>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b0:	4413      	add	r3, r2
 80051b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80051b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <lsm6dso_pin_int1_route_set+0x3c2>
 80051ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051bc:	e1c0      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 80051be:	797b      	ldrb	r3, [r7, #5]
 80051c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	7d3b      	ldrb	r3, [r7, #20]
 80051c8:	f362 0300 	bfi	r3, r2, #0, #1
 80051cc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 80051ce:	797b      	ldrb	r3, [r7, #5]
 80051d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	7d3b      	ldrb	r3, [r7, #20]
 80051d8:	f362 0382 	bfi	r3, r2, #2, #1
 80051dc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 80051de:	797b      	ldrb	r3, [r7, #5]
 80051e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	7d3b      	ldrb	r3, [r7, #20]
 80051e8:	f362 03c3 	bfi	r3, r2, #3, #1
 80051ec:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 80051ee:	797b      	ldrb	r3, [r7, #5]
 80051f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	7d3b      	ldrb	r3, [r7, #20]
 80051f8:	f362 1304 	bfi	r3, r2, #4, #1
 80051fc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 80051fe:	797b      	ldrb	r3, [r7, #5]
 8005200:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005204:	b2da      	uxtb	r2, r3
 8005206:	7d3b      	ldrb	r3, [r7, #20]
 8005208:	f362 1345 	bfi	r3, r2, #5, #1
 800520c:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 800520e:	797b      	ldrb	r3, [r7, #5]
 8005210:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	7d3b      	ldrb	r3, [r7, #20]
 8005218:	f362 1386 	bfi	r3, r2, #6, #1
 800521c:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 800521e:	79bb      	ldrb	r3, [r7, #6]
 8005220:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	7d3b      	ldrb	r3, [r7, #20]
 8005228:	f362 13c7 	bfi	r3, r2, #7, #1
 800522c:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 800522e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005232:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005236:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 8005238:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800523c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005240:	b2db      	uxtb	r3, r3
 8005242:	4313      	orrs	r3, r2
 8005244:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 8005246:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800524a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800524e:	b2db      	uxtb	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 8005254:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005258:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800525c:	b2db      	uxtb	r3, r3
 800525e:	4313      	orrs	r3, r2
 8005260:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 8005262:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005266:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800526a:	b2db      	uxtb	r3, r3
 800526c:	4313      	orrs	r3, r2
 800526e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 8005270:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005274:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005278:	b2db      	uxtb	r3, r3
 800527a:	4313      	orrs	r3, r2
 800527c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 800527e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005282:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005286:	b2db      	uxtb	r3, r3
 8005288:	4313      	orrs	r3, r2
 800528a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 800528c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005290:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 800529a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800529e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 80052a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80052ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	4313      	orrs	r3, r2
 80052b4:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 80052b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80052ba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	4313      	orrs	r3, r2
 80052c2:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 80052c4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80052c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	4313      	orrs	r3, r2
 80052d0:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 80052d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052d6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	4313      	orrs	r3, r2
 80052de:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 80052e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	4313      	orrs	r3, r2
 80052ec:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 80052ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052f2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	4313      	orrs	r3, r2
 80052fa:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 80052fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005300:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005304:	b2db      	uxtb	r3, r3
 8005306:	4313      	orrs	r3, r2
 8005308:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 800530a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800530e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005312:	b2db      	uxtb	r3, r3
 8005314:	4313      	orrs	r3, r2
 8005316:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 8005318:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800531c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	4313      	orrs	r3, r2
 8005324:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 8005326:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800532a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800532e:	b2db      	uxtb	r3, r3
 8005330:	4313      	orrs	r3, r2
 8005332:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 8005334:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005338:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800533c:	b2db      	uxtb	r3, r3
 800533e:	4313      	orrs	r3, r2
 8005340:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 8005342:	2b00      	cmp	r3, #0
 8005344:	d004      	beq.n	8005350 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8005346:	7d3b      	ldrb	r3, [r7, #20]
 8005348:	f043 0302 	orr.w	r3, r3, #2
 800534c:	753b      	strb	r3, [r7, #20]
 800534e:	e003      	b.n	8005358 <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8005350:	7d3b      	ldrb	r3, [r7, #20]
 8005352:	f023 0302 	bic.w	r3, r3, #2
 8005356:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8005358:	f107 0214 	add.w	r2, r7, #20
 800535c:	2301      	movs	r3, #1
 800535e:	215e      	movs	r1, #94	@ 0x5e
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f7ff f9e1 	bl	8004728 <lsm6dso_write_reg>
 8005366:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005368:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800536a:	2b00      	cmp	r3, #0
 800536c:	d001      	beq.n	8005372 <lsm6dso_pin_int1_route_set+0x576>
 800536e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005370:	e0e6      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8005372:	f107 021c 	add.w	r2, r7, #28
 8005376:	2301      	movs	r3, #1
 8005378:	2158      	movs	r1, #88	@ 0x58
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff f9b6 	bl	80046ec <lsm6dso_read_reg>
 8005380:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8005382:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005386:	461a      	mov	r2, r3
 8005388:	2100      	movs	r1, #0
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f8dc 	bl	8005548 <lsm6dso_pin_int2_route_get>
 8005390:	4602      	mov	r2, r0
 8005392:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005394:	4413      	add	r3, r2
 8005396:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <lsm6dso_pin_int1_route_set+0x5a6>
 800539e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053a0:	e0ce      	b.n	8005540 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 80053a2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80053aa:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 80053ac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053b0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 80053ba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	4313      	orrs	r3, r2
 80053c6:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 80053c8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 80053d6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053da:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4313      	orrs	r3, r2
 80053e2:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 80053e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	4313      	orrs	r3, r2
 80053f0:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 80053f2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	4313      	orrs	r3, r2
 80053fe:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 8005400:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005404:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	4313      	orrs	r3, r2
 800540c:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 800540e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005412:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	4313      	orrs	r3, r2
 800541a:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 800541c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005420:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005424:	b2db      	uxtb	r3, r3
 8005426:	4313      	orrs	r3, r2
 8005428:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 800542a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800542e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	4313      	orrs	r3, r2
 8005436:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 8005438:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800543c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4313      	orrs	r3, r2
 8005444:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 8005446:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800544a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800544e:	b2db      	uxtb	r3, r3
 8005450:	4313      	orrs	r3, r2
 8005452:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 8005454:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005458:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800545c:	b2db      	uxtb	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 8005462:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005466:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800546a:	b2db      	uxtb	r3, r3
 800546c:	4313      	orrs	r3, r2
 800546e:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8005470:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005474:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	4313      	orrs	r3, r2
 800547c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 800547e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005482:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005486:	b2db      	uxtb	r3, r3
 8005488:	4313      	orrs	r3, r2
 800548a:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 800548c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005490:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	4313      	orrs	r3, r2
 8005498:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 800549a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800549e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	4313      	orrs	r3, r2
 80054a6:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 80054a8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	4313      	orrs	r3, r2
 80054b4:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 80054b6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80054ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 80054c4:	7d3b      	ldrb	r3, [r7, #20]
 80054c6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4313      	orrs	r3, r2
 80054ce:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 80054d0:	7d3b      	ldrb	r3, [r7, #20]
 80054d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	4313      	orrs	r3, r2
 80054da:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 80054dc:	7d3b      	ldrb	r3, [r7, #20]
 80054de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	4313      	orrs	r3, r2
 80054e6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 80054e8:	7d3b      	ldrb	r3, [r7, #20]
 80054ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	4313      	orrs	r3, r2
 80054f2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 80054f4:	7d3b      	ldrb	r3, [r7, #20]
 80054f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	4313      	orrs	r3, r2
 80054fe:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 8005500:	7d3b      	ldrb	r3, [r7, #20]
 8005502:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4313      	orrs	r3, r2
 800550a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 800550c:	7d3b      	ldrb	r3, [r7, #20]
 800550e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005512:	b2db      	uxtb	r3, r3
 8005514:	4313      	orrs	r3, r2
 8005516:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 800551c:	7f3b      	ldrb	r3, [r7, #28]
 800551e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005522:	773b      	strb	r3, [r7, #28]
 8005524:	e003      	b.n	800552e <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8005526:	7f3b      	ldrb	r3, [r7, #28]
 8005528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800552c:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 800552e:	f107 021c 	add.w	r2, r7, #28
 8005532:	2301      	movs	r3, #1
 8005534:	2158      	movs	r1, #88	@ 0x58
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff f8f6 	bl	8004728 <lsm6dso_write_reg>
 800553c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 800553e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005540:	4618      	mov	r0, r3
 8005542:	3740      	adds	r7, #64	@ 0x40
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(const stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b08c      	sub	sp, #48	@ 0x30
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8005554:	2300      	movs	r3, #0
 8005556:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d010      	beq.n	8005580 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 800555e:	f107 0210 	add.w	r2, r7, #16
 8005562:	2301      	movs	r3, #1
 8005564:	216f      	movs	r1, #111	@ 0x6f
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f7ff f8c0 	bl	80046ec <lsm6dso_read_reg>
 800556c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 800556e:	7c3b      	ldrb	r3, [r7, #16]
 8005570:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005574:	b2d9      	uxtb	r1, r3
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	7813      	ldrb	r3, [r2, #0]
 800557a:	f361 0300 	bfi	r3, r1, #0, #1
 800557e:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 81c7 	beq.w	8005916 <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d104      	bne.n	8005598 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800558e:	2102      	movs	r1, #2
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fa65 	bl	8004a60 <lsm6dso_mem_bank_set>
 8005596:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8005598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800559a:	2b00      	cmp	r3, #0
 800559c:	d107      	bne.n	80055ae <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 800559e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80055a2:	2301      	movs	r3, #1
 80055a4:	210e      	movs	r1, #14
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff f8a0 	bl	80046ec <lsm6dso_read_reg>
 80055ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 80055b4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80055b8:	2301      	movs	r3, #1
 80055ba:	210f      	movs	r1, #15
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff f895 	bl	80046ec <lsm6dso_read_reg>
 80055c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 80055c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 80055ca:	f107 0220 	add.w	r2, r7, #32
 80055ce:	2301      	movs	r3, #1
 80055d0:	2110      	movs	r1, #16
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff f88a 	bl	80046ec <lsm6dso_read_reg>
 80055d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d104      	bne.n	80055ea <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80055e0:	2100      	movs	r1, #0
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fa3c 	bl	8004a60 <lsm6dso_mem_bank_set>
 80055e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 80055ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 80055f0:	f107 021c 	add.w	r2, r7, #28
 80055f4:	2301      	movs	r3, #1
 80055f6:	210e      	movs	r1, #14
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff f877 	bl	80046ec <lsm6dso_read_reg>
 80055fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8005600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005602:	2b00      	cmp	r3, #0
 8005604:	d107      	bne.n	8005616 <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 8005606:	f107 0218 	add.w	r2, r7, #24
 800560a:	2301      	movs	r3, #1
 800560c:	215f      	movs	r1, #95	@ 0x5f
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f7ff f86c 	bl	80046ec <lsm6dso_read_reg>
 8005614:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800561c:	f107 0214 	add.w	r2, r7, #20
 8005620:	2301      	movs	r3, #1
 8005622:	2113      	movs	r1, #19
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff f861 	bl	80046ec <lsm6dso_read_reg>
 800562a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 800562c:	7d3b      	ldrb	r3, [r7, #20]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b00      	cmp	r3, #0
 8005636:	d128      	bne.n	800568a <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 8005638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563a:	2b00      	cmp	r3, #0
 800563c:	d110      	bne.n	8005660 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 800563e:	f107 021c 	add.w	r2, r7, #28
 8005642:	2301      	movs	r3, #1
 8005644:	210e      	movs	r1, #14
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff f850 	bl	80046ec <lsm6dso_read_reg>
 800564c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 800564e:	7f3b      	ldrb	r3, [r7, #28]
 8005650:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005654:	b2d9      	uxtb	r1, r3
 8005656:	687a      	ldr	r2, [r7, #4]
 8005658:	7813      	ldrb	r3, [r2, #0]
 800565a:	f361 03c3 	bfi	r3, r1, #3, #1
 800565e:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8005660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11b      	bne.n	800569e <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8005666:	f107 0218 	add.w	r2, r7, #24
 800566a:	2301      	movs	r3, #1
 800566c:	215f      	movs	r1, #95	@ 0x5f
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f7ff f83c 	bl	80046ec <lsm6dso_read_reg>
 8005674:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 8005676:	7e3b      	ldrb	r3, [r7, #24]
 8005678:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800567c:	b2d9      	uxtb	r1, r3
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	7853      	ldrb	r3, [r2, #1]
 8005682:	f361 0300 	bfi	r3, r1, #0, #1
 8005686:	7053      	strb	r3, [r2, #1]
 8005688:	e009      	b.n	800569e <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	7813      	ldrb	r3, [r2, #0]
 800568e:	f023 0308 	bic.w	r3, r3, #8
 8005692:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	7853      	ldrb	r3, [r2, #1]
 8005698:	f023 0301 	bic.w	r3, r3, #1
 800569c:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 800569e:	7f3b      	ldrb	r3, [r7, #28]
 80056a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056a4:	b2d9      	uxtb	r1, r3
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	7813      	ldrb	r3, [r2, #0]
 80056aa:	f361 0341 	bfi	r3, r1, #1, #1
 80056ae:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 80056b0:	7f3b      	ldrb	r3, [r7, #28]
 80056b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80056b6:	b2d9      	uxtb	r1, r3
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	7813      	ldrb	r3, [r2, #0]
 80056bc:	f361 0382 	bfi	r3, r1, #2, #1
 80056c0:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 80056c2:	7f3b      	ldrb	r3, [r7, #28]
 80056c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056c8:	b2d9      	uxtb	r1, r3
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	7813      	ldrb	r3, [r2, #0]
 80056ce:	f361 03c3 	bfi	r3, r1, #3, #1
 80056d2:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 80056d4:	7f3b      	ldrb	r3, [r7, #28]
 80056d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80056da:	b2d9      	uxtb	r1, r3
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	7813      	ldrb	r3, [r2, #0]
 80056e0:	f361 1304 	bfi	r3, r1, #4, #1
 80056e4:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 80056e6:	7f3b      	ldrb	r3, [r7, #28]
 80056e8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056ec:	b2d9      	uxtb	r1, r3
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	7813      	ldrb	r3, [r2, #0]
 80056f2:	f361 1345 	bfi	r3, r1, #5, #1
 80056f6:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 80056f8:	7f3b      	ldrb	r3, [r7, #28]
 80056fa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056fe:	b2d9      	uxtb	r1, r3
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	7813      	ldrb	r3, [r2, #0]
 8005704:	f361 1386 	bfi	r3, r1, #6, #1
 8005708:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 800570a:	7f3b      	ldrb	r3, [r7, #28]
 800570c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005710:	b2d9      	uxtb	r1, r3
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	7813      	ldrb	r3, [r2, #0]
 8005716:	f361 13c7 	bfi	r3, r1, #7, #1
 800571a:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 800571c:	7e3b      	ldrb	r3, [r7, #24]
 800571e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005722:	b2d9      	uxtb	r1, r3
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	7853      	ldrb	r3, [r2, #1]
 8005728:	f361 0300 	bfi	r3, r1, #0, #1
 800572c:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 800572e:	7e3b      	ldrb	r3, [r7, #24]
 8005730:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005734:	b2d9      	uxtb	r1, r3
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	7853      	ldrb	r3, [r2, #1]
 800573a:	f361 0341 	bfi	r3, r1, #1, #1
 800573e:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8005740:	7e3b      	ldrb	r3, [r7, #24]
 8005742:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005746:	b2d9      	uxtb	r1, r3
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	7853      	ldrb	r3, [r2, #1]
 800574c:	f361 0382 	bfi	r3, r1, #2, #1
 8005750:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 8005752:	7e3b      	ldrb	r3, [r7, #24]
 8005754:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005758:	b2d9      	uxtb	r1, r3
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	7853      	ldrb	r3, [r2, #1]
 800575e:	f361 03c3 	bfi	r3, r1, #3, #1
 8005762:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 8005764:	7e3b      	ldrb	r3, [r7, #24]
 8005766:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800576a:	b2d9      	uxtb	r1, r3
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	7853      	ldrb	r3, [r2, #1]
 8005770:	f361 1304 	bfi	r3, r1, #4, #1
 8005774:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 8005776:	7e3b      	ldrb	r3, [r7, #24]
 8005778:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800577c:	b2d9      	uxtb	r1, r3
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	7853      	ldrb	r3, [r2, #1]
 8005782:	f361 1345 	bfi	r3, r1, #5, #1
 8005786:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 8005788:	7e3b      	ldrb	r3, [r7, #24]
 800578a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800578e:	b2d9      	uxtb	r1, r3
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	7853      	ldrb	r3, [r2, #1]
 8005794:	f361 1386 	bfi	r3, r1, #6, #1
 8005798:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 800579a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800579e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057a2:	b2d9      	uxtb	r1, r3
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	7853      	ldrb	r3, [r2, #1]
 80057a8:	f361 13c7 	bfi	r3, r1, #7, #1
 80057ac:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 80057ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057b6:	b2d9      	uxtb	r1, r3
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	7893      	ldrb	r3, [r2, #2]
 80057bc:	f361 0300 	bfi	r3, r1, #0, #1
 80057c0:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 80057c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057c6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80057ca:	b2d9      	uxtb	r1, r3
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	7893      	ldrb	r3, [r2, #2]
 80057d0:	f361 0382 	bfi	r3, r1, #2, #1
 80057d4:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 80057d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057de:	b2d9      	uxtb	r1, r3
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	7893      	ldrb	r3, [r2, #2]
 80057e4:	f361 03c3 	bfi	r3, r1, #3, #1
 80057e8:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 80057ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057f2:	b2d9      	uxtb	r1, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	7893      	ldrb	r3, [r2, #2]
 80057f8:	f361 1304 	bfi	r3, r1, #4, #1
 80057fc:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 80057fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005802:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005806:	b2d9      	uxtb	r1, r3
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	7893      	ldrb	r3, [r2, #2]
 800580c:	f361 1345 	bfi	r3, r1, #5, #1
 8005810:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 8005812:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005816:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800581a:	b2d9      	uxtb	r1, r3
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	7893      	ldrb	r3, [r2, #2]
 8005820:	f361 1386 	bfi	r3, r1, #6, #1
 8005824:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 8005826:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800582a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800582e:	b2d9      	uxtb	r1, r3
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	7893      	ldrb	r3, [r2, #2]
 8005834:	f361 13c7 	bfi	r3, r1, #7, #1
 8005838:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800583a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800583e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005842:	b2d9      	uxtb	r1, r3
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	78d3      	ldrb	r3, [r2, #3]
 8005848:	f361 0300 	bfi	r3, r1, #0, #1
 800584c:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 800584e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005852:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005856:	b2d9      	uxtb	r1, r3
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	78d3      	ldrb	r3, [r2, #3]
 800585c:	f361 0341 	bfi	r3, r1, #1, #1
 8005860:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 8005862:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005866:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800586a:	b2d9      	uxtb	r1, r3
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	78d3      	ldrb	r3, [r2, #3]
 8005870:	f361 0382 	bfi	r3, r1, #2, #1
 8005874:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 8005876:	f897 3020 	ldrb.w	r3, [r7, #32]
 800587a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800587e:	b2d9      	uxtb	r1, r3
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	78d3      	ldrb	r3, [r2, #3]
 8005884:	f361 03c3 	bfi	r3, r1, #3, #1
 8005888:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800588a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800588e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005892:	b2d9      	uxtb	r1, r3
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	78d3      	ldrb	r3, [r2, #3]
 8005898:	f361 1304 	bfi	r3, r1, #4, #1
 800589c:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 800589e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80058a6:	b2d9      	uxtb	r1, r3
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	78d3      	ldrb	r3, [r2, #3]
 80058ac:	f361 1345 	bfi	r3, r1, #5, #1
 80058b0:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 80058b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80058ba:	b2d9      	uxtb	r1, r3
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	78d3      	ldrb	r3, [r2, #3]
 80058c0:	f361 1386 	bfi	r3, r1, #6, #1
 80058c4:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 80058c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80058ce:	b2d9      	uxtb	r1, r3
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	78d3      	ldrb	r3, [r2, #3]
 80058d4:	f361 13c7 	bfi	r3, r1, #7, #1
 80058d8:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 80058da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058e2:	b2d9      	uxtb	r1, r3
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	7913      	ldrb	r3, [r2, #4]
 80058e8:	f361 0300 	bfi	r3, r1, #0, #1
 80058ec:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 80058ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80058f6:	b2d9      	uxtb	r1, r3
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	7913      	ldrb	r3, [r2, #4]
 80058fc:	f361 0341 	bfi	r3, r1, #1, #1
 8005900:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8005902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005906:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800590a:	b2d9      	uxtb	r1, r3
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	7913      	ldrb	r3, [r2, #4]
 8005910:	f361 0382 	bfi	r3, r1, #2, #1
 8005914:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 8005916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005918:	4618      	mov	r0, r3
 800591a:	3730      	adds	r7, #48	@ 0x30
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <_fminf>:
 8005920:	f005 bdd0 	b.w	800b4c4 <fminf>

08005924 <neai_classification_init>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	4605      	mov	r5, r0
 8005928:	4958      	ldr	r1, [pc, #352]	@ (8005a8c <neai_classification_init+0x168>)
 800592a:	4b59      	ldr	r3, [pc, #356]	@ (8005a90 <neai_classification_init+0x16c>)
 800592c:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	600d      	str	r5, [r1, #0]
 8005934:	f8d0 0c00 	ldr.w	r0, [r0, #3072]	@ 0xc00
 8005938:	f7fb fc0c 	bl	8001154 <__aeabi_f2iz>
 800593c:	2300      	movs	r3, #0
 800593e:	2107      	movs	r1, #7
 8005940:	4a54      	ldr	r2, [pc, #336]	@ (8005a94 <neai_classification_init+0x170>)
 8005942:	4e55      	ldr	r6, [pc, #340]	@ (8005a98 <neai_classification_init+0x174>)
 8005944:	6013      	str	r3, [r2, #0]
 8005946:	6033      	str	r3, [r6, #0]
 8005948:	4b54      	ldr	r3, [pc, #336]	@ (8005a9c <neai_classification_init+0x178>)
 800594a:	4c55      	ldr	r4, [pc, #340]	@ (8005aa0 <neai_classification_init+0x17c>)
 800594c:	6019      	str	r1, [r3, #0]
 800594e:	4b55      	ldr	r3, [pc, #340]	@ (8005aa4 <neai_classification_init+0x180>)
 8005950:	4955      	ldr	r1, [pc, #340]	@ (8005aa8 <neai_classification_init+0x184>)
 8005952:	6018      	str	r0, [r3, #0]
 8005954:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 8005958:	6020      	str	r0, [r4, #0]
 800595a:	4e54      	ldr	r6, [pc, #336]	@ (8005aac <neai_classification_init+0x188>)
 800595c:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8005960:	6053      	str	r3, [r2, #4]
 8005962:	f203 3301 	addw	r3, r3, #769	@ 0x301
 8005966:	f204 3405 	addw	r4, r4, #773	@ 0x305
 800596a:	f605 4704 	addw	r7, r5, #3076	@ 0xc04
 800596e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005972:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8005976:	600f      	str	r7, [r1, #0]
 8005978:	6033      	str	r3, [r6, #0]
 800597a:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800597e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8005982:	f7fb fbb5 	bl	80010f0 <__aeabi_fcmpeq>
 8005986:	2800      	cmp	r0, #0
 8005988:	d06f      	beq.n	8005a6a <neai_classification_init+0x146>
 800598a:	4949      	ldr	r1, [pc, #292]	@ (8005ab0 <neai_classification_init+0x18c>)
 800598c:	6860      	ldr	r0, [r4, #4]
 800598e:	f7fb fbaf 	bl	80010f0 <__aeabi_fcmpeq>
 8005992:	2800      	cmp	r0, #0
 8005994:	d069      	beq.n	8005a6a <neai_classification_init+0x146>
 8005996:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 800599a:	68a0      	ldr	r0, [r4, #8]
 800599c:	f7fb fba8 	bl	80010f0 <__aeabi_fcmpeq>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d062      	beq.n	8005a6a <neai_classification_init+0x146>
 80059a4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059a8:	68e0      	ldr	r0, [r4, #12]
 80059aa:	f7fb fba1 	bl	80010f0 <__aeabi_fcmpeq>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	d05b      	beq.n	8005a6a <neai_classification_init+0x146>
 80059b2:	2100      	movs	r1, #0
 80059b4:	6920      	ldr	r0, [r4, #16]
 80059b6:	f7fb fb9b 	bl	80010f0 <__aeabi_fcmpeq>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d055      	beq.n	8005a6a <neai_classification_init+0x146>
 80059be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80059c2:	6960      	ldr	r0, [r4, #20]
 80059c4:	f7fb fb94 	bl	80010f0 <__aeabi_fcmpeq>
 80059c8:	2800      	cmp	r0, #0
 80059ca:	d04e      	beq.n	8005a6a <neai_classification_init+0x146>
 80059cc:	2100      	movs	r1, #0
 80059ce:	69a0      	ldr	r0, [r4, #24]
 80059d0:	f7fb fb8e 	bl	80010f0 <__aeabi_fcmpeq>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d048      	beq.n	8005a6a <neai_classification_init+0x146>
 80059d8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059dc:	69e0      	ldr	r0, [r4, #28]
 80059de:	f7fb fb87 	bl	80010f0 <__aeabi_fcmpeq>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d041      	beq.n	8005a6a <neai_classification_init+0x146>
 80059e6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80059ea:	6a20      	ldr	r0, [r4, #32]
 80059ec:	f7fb fb80 	bl	80010f0 <__aeabi_fcmpeq>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d03a      	beq.n	8005a6a <neai_classification_init+0x146>
 80059f4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059f8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80059fa:	f7fb fb79 	bl	80010f0 <__aeabi_fcmpeq>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d033      	beq.n	8005a6a <neai_classification_init+0x146>
 8005a02:	2100      	movs	r1, #0
 8005a04:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8005a06:	f7fb fb73 	bl	80010f0 <__aeabi_fcmpeq>
 8005a0a:	b370      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a0c:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005a10:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005a12:	f7fb fb6d 	bl	80010f0 <__aeabi_fcmpeq>
 8005a16:	b340      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a18:	2100      	movs	r1, #0
 8005a1a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005a1c:	f7fb fb68 	bl	80010f0 <__aeabi_fcmpeq>
 8005a20:	b318      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a22:	2100      	movs	r1, #0
 8005a24:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8005a26:	f7fb fb63 	bl	80010f0 <__aeabi_fcmpeq>
 8005a2a:	b1f0      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8005a30:	f7fb fb5e 	bl	80010f0 <__aeabi_fcmpeq>
 8005a34:	b1c8      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a36:	491f      	ldr	r1, [pc, #124]	@ (8005ab4 <neai_classification_init+0x190>)
 8005a38:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005a3a:	f7fb fb59 	bl	80010f0 <__aeabi_fcmpeq>
 8005a3e:	b1a0      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a40:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a44:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005a46:	f7fb fb53 	bl	80010f0 <__aeabi_fcmpeq>
 8005a4a:	b170      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a4c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a50:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005a52:	f7fb fb4d 	bl	80010f0 <__aeabi_fcmpeq>
 8005a56:	b140      	cbz	r0, 8005a6a <neai_classification_init+0x146>
 8005a58:	4917      	ldr	r1, [pc, #92]	@ (8005ab8 <neai_classification_init+0x194>)
 8005a5a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005a5c:	f7fb fb48 	bl	80010f0 <__aeabi_fcmpeq>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	bf0c      	ite	eq
 8005a64:	237d      	moveq	r3, #125	@ 0x7d
 8005a66:	2300      	movne	r3, #0
 8005a68:	e000      	b.n	8005a6c <neai_classification_init+0x148>
 8005a6a:	237d      	movs	r3, #125	@ 0x7d
 8005a6c:	4c13      	ldr	r4, [pc, #76]	@ (8005abc <neai_classification_init+0x198>)
 8005a6e:	4914      	ldr	r1, [pc, #80]	@ (8005ac0 <neai_classification_init+0x19c>)
 8005a70:	4814      	ldr	r0, [pc, #80]	@ (8005ac4 <neai_classification_init+0x1a0>)
 8005a72:	7023      	strb	r3, [r4, #0]
 8005a74:	f7ff ff54 	bl	8005920 <_fminf>
 8005a78:	4912      	ldr	r1, [pc, #72]	@ (8005ac4 <neai_classification_init+0x1a0>)
 8005a7a:	f7fb fb39 	bl	80010f0 <__aeabi_fcmpeq>
 8005a7e:	b108      	cbz	r0, 8005a84 <neai_classification_init+0x160>
 8005a80:	7820      	ldrb	r0, [r4, #0]
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a84:	2381      	movs	r3, #129	@ 0x81
 8005a86:	7023      	strb	r3, [r4, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a8c:	2000111c 	.word	0x2000111c
 8005a90:	20001120 	.word	0x20001120
 8005a94:	200008fc 	.word	0x200008fc
 8005a98:	2000090c 	.word	0x2000090c
 8005a9c:	20000908 	.word	0x20000908
 8005aa0:	20000910 	.word	0x20000910
 8005aa4:	20000904 	.word	0x20000904
 8005aa8:	20000918 	.word	0x20000918
 8005aac:	20000914 	.word	0x20000914
 8005ab0:	40400000 	.word	0x40400000
 8005ab4:	49742400 	.word	0x49742400
 8005ab8:	41100000 	.word	0x41100000
 8005abc:	20000020 	.word	0x20000020
 8005ac0:	40066666 	.word	0x40066666
 8005ac4:	3f8ccccd 	.word	0x3f8ccccd

08005ac8 <neai_classification>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	4bab      	ldr	r3, [pc, #684]	@ (8005d7c <neai_classification+0x2b4>)
 8005ace:	b08d      	sub	sp, #52	@ 0x34
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	9102      	str	r1, [sp, #8]
 8005ad4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ad6:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005ad8:	b113      	cbz	r3, 8005ae0 <neai_classification+0x18>
 8005ada:	2b81      	cmp	r3, #129	@ 0x81
 8005adc:	f040 860f 	bne.w	80066fe <neai_classification+0xc36>
 8005ae0:	4da7      	ldr	r5, [pc, #668]	@ (8005d80 <neai_classification+0x2b8>)
 8005ae2:	4ba8      	ldr	r3, [pc, #672]	@ (8005d84 <neai_classification+0x2bc>)
 8005ae4:	462c      	mov	r4, r5
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	1f06      	subs	r6, r0, #4
 8005aea:	f1a3 0904 	sub.w	r9, r3, #4
 8005aee:	4ba6      	ldr	r3, [pc, #664]	@ (8005d88 <neai_classification+0x2c0>)
 8005af0:	f505 68c0 	add.w	r8, r5, #1536	@ 0x600
 8005af4:	681f      	ldr	r7, [r3, #0]
 8005af6:	3f04      	subs	r7, #4
 8005af8:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8005afc:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8005b00:	f7fb f858 	bl	8000bb4 <__aeabi_fsub>
 8005b04:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005b08:	f7fb f95e 	bl	8000dc8 <__aeabi_fmul>
 8005b0c:	f844 0b04 	str.w	r0, [r4], #4
 8005b10:	45a0      	cmp	r8, r4
 8005b12:	d1f1      	bne.n	8005af8 <neai_classification+0x30>
 8005b14:	2700      	movs	r7, #0
 8005b16:	4b9d      	ldr	r3, [pc, #628]	@ (8005d8c <neai_classification+0x2c4>)
 8005b18:	4e9d      	ldr	r6, [pc, #628]	@ (8005d90 <neai_classification+0x2c8>)
 8005b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4a9d      	ldr	r2, [pc, #628]	@ (8005d94 <neai_classification+0x2cc>)
 8005b20:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8005b24:	3303      	adds	r3, #3
 8005b26:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8005b2a:	f842 1f04 	str.w	r1, [r2, #4]!
 8005b2e:	d1f7      	bne.n	8005b20 <neai_classification+0x58>
 8005b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b32:	f8d3 8000 	ldr.w	r8, [r3]
 8005b36:	4b95      	ldr	r3, [pc, #596]	@ (8005d8c <neai_classification+0x2c4>)
 8005b38:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b3c:	461c      	mov	r4, r3
 8005b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b40:	f854 9f04 	ldr.w	r9, [r4, #4]!
 8005b44:	4641      	mov	r1, r8
 8005b46:	4648      	mov	r0, r9
 8005b48:	f7fb fadc 	bl	8001104 <__aeabi_fcmplt>
 8005b4c:	b100      	cbz	r0, 8005b50 <neai_classification+0x88>
 8005b4e:	46c8      	mov	r8, r9
 8005b50:	4b91      	ldr	r3, [pc, #580]	@ (8005d98 <neai_classification+0x2d0>)
 8005b52:	42a3      	cmp	r3, r4
 8005b54:	d1f4      	bne.n	8005b40 <neai_classification+0x78>
 8005b56:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005b5a:	4640      	mov	r0, r8
 8005b5c:	f7fb f82a 	bl	8000bb4 <__aeabi_fsub>
 8005b60:	f04f 0b00 	mov.w	fp, #0
 8005b64:	4682      	mov	sl, r0
 8005b66:	4634      	mov	r4, r6
 8005b68:	4b89      	ldr	r3, [pc, #548]	@ (8005d90 <neai_classification+0x2c8>)
 8005b6a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8005b6e:	f8cd b000 	str.w	fp, [sp]
 8005b72:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005b76:	9706      	str	r7, [sp, #24]
 8005b78:	f10b 0701 	add.w	r7, fp, #1
 8005b7c:	9401      	str	r4, [sp, #4]
 8005b7e:	4638      	mov	r0, r7
 8005b80:	f844 ab04 	str.w	sl, [r4], #4
 8005b84:	f7fb f8cc 	bl	8000d20 <__aeabi_i2f>
 8005b88:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 8005b8c:	f7fb f91c 	bl	8000dc8 <__aeabi_fmul>
 8005b90:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005b94:	f7fb f80e 	bl	8000bb4 <__aeabi_fsub>
 8005b98:	4605      	mov	r5, r0
 8005b9a:	9800      	ldr	r0, [sp, #0]
 8005b9c:	f7fb f8bc 	bl	8000d18 <__aeabi_ui2f>
 8005ba0:	4601      	mov	r1, r0
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f7fb fac2 	bl	800112c <__aeabi_fcmpge>
 8005ba8:	4656      	mov	r6, sl
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d02e      	beq.n	8005c0c <neai_classification+0x144>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	462c      	mov	r4, r5
 8005bb4:	461d      	mov	r5, r3
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	b2aa      	uxth	r2, r5
 8005bba:	4610      	mov	r0, r2
 8005bbc:	9308      	str	r3, [sp, #32]
 8005bbe:	9207      	str	r2, [sp, #28]
 8005bc0:	f7fb f8ae 	bl	8000d20 <__aeabi_i2f>
 8005bc4:	4631      	mov	r1, r6
 8005bc6:	f7fb f8ff 	bl	8000dc8 <__aeabi_fmul>
 8005bca:	9b00      	ldr	r3, [sp, #0]
 8005bcc:	4a6f      	ldr	r2, [pc, #444]	@ (8005d8c <neai_classification+0x2c4>)
 8005bce:	3501      	adds	r5, #1
 8005bd0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005bd4:	f7fa fff0 	bl	8000bb8 <__addsf3>
 8005bd8:	9a07      	ldr	r2, [sp, #28]
 8005bda:	4606      	mov	r6, r0
 8005bdc:	1c50      	adds	r0, r2, #1
 8005bde:	f7fb f89f 	bl	8000d20 <__aeabi_i2f>
 8005be2:	4601      	mov	r1, r0
 8005be4:	4630      	mov	r0, r6
 8005be6:	f7fb f9a3 	bl	8000f30 <__aeabi_fdiv>
 8005bea:	9b00      	ldr	r3, [sp, #0]
 8005bec:	4606      	mov	r6, r0
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	b293      	uxth	r3, r2
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	f7fb f88f 	bl	8000d18 <__aeabi_ui2f>
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	f7fb fa8c 	bl	8001118 <__aeabi_fcmple>
 8005c00:	9b08      	ldr	r3, [sp, #32]
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d1d8      	bne.n	8005bb8 <neai_classification+0xf0>
 8005c06:	461c      	mov	r4, r3
 8005c08:	f843 6c04 	str.w	r6, [r3, #-4]
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	f8d9 0000 	ldr.w	r0, [r9]
 8005c12:	f7fb fa77 	bl	8001104 <__aeabi_fcmplt>
 8005c16:	b120      	cbz	r0, 8005c22 <neai_classification+0x15a>
 8005c18:	9b03      	ldr	r3, [sp, #12]
 8005c1a:	f8c9 3000 	str.w	r3, [r9]
 8005c1e:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8005c22:	4631      	mov	r1, r6
 8005c24:	4640      	mov	r0, r8
 8005c26:	f7fb fa8b 	bl	8001140 <__aeabi_fcmpgt>
 8005c2a:	2800      	cmp	r0, #0
 8005c2c:	f000 856b 	beq.w	8006706 <neai_classification+0xc3e>
 8005c30:	f1bb 0f00 	cmp.w	fp, #0
 8005c34:	f000 8567 	beq.w	8006706 <neai_classification+0xc3e>
 8005c38:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 8005c3c:	4b54      	ldr	r3, [pc, #336]	@ (8005d90 <neai_classification+0x2c8>)
 8005c3e:	9a01      	ldr	r2, [sp, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	9f06      	ldr	r7, [sp, #24]
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	3701      	adds	r7, #1
 8005c48:	2f03      	cmp	r7, #3
 8005c4a:	f106 0608 	add.w	r6, r6, #8
 8005c4e:	f105 0504 	add.w	r5, r5, #4
 8005c52:	f47f af63 	bne.w	8005b1c <neai_classification+0x54>
 8005c56:	4b4e      	ldr	r3, [pc, #312]	@ (8005d90 <neai_classification+0x2c8>)
 8005c58:	2100      	movs	r1, #0
 8005c5a:	681c      	ldr	r4, [r3, #0]
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f7fb fa51 	bl	8001104 <__aeabi_fcmplt>
 8005c62:	b108      	cbz	r0, 8005c68 <neai_classification+0x1a0>
 8005c64:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c68:	4b49      	ldr	r3, [pc, #292]	@ (8005d90 <neai_classification+0x2c8>)
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	601c      	str	r4, [r3, #0]
 8005c6e:	685c      	ldr	r4, [r3, #4]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7fb fa47 	bl	8001104 <__aeabi_fcmplt>
 8005c76:	b108      	cbz	r0, 8005c7c <neai_classification+0x1b4>
 8005c78:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c7c:	4b44      	ldr	r3, [pc, #272]	@ (8005d90 <neai_classification+0x2c8>)
 8005c7e:	2100      	movs	r1, #0
 8005c80:	605c      	str	r4, [r3, #4]
 8005c82:	689c      	ldr	r4, [r3, #8]
 8005c84:	4620      	mov	r0, r4
 8005c86:	f7fb fa3d 	bl	8001104 <__aeabi_fcmplt>
 8005c8a:	b108      	cbz	r0, 8005c90 <neai_classification+0x1c8>
 8005c8c:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c90:	4b3f      	ldr	r3, [pc, #252]	@ (8005d90 <neai_classification+0x2c8>)
 8005c92:	2100      	movs	r1, #0
 8005c94:	609c      	str	r4, [r3, #8]
 8005c96:	68dc      	ldr	r4, [r3, #12]
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f7fb fa33 	bl	8001104 <__aeabi_fcmplt>
 8005c9e:	b108      	cbz	r0, 8005ca4 <neai_classification+0x1dc>
 8005ca0:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8005d90 <neai_classification+0x2c8>)
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	60dc      	str	r4, [r3, #12]
 8005caa:	691c      	ldr	r4, [r3, #16]
 8005cac:	4620      	mov	r0, r4
 8005cae:	f7fb fa29 	bl	8001104 <__aeabi_fcmplt>
 8005cb2:	b108      	cbz	r0, 8005cb8 <neai_classification+0x1f0>
 8005cb4:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005cb8:	4b35      	ldr	r3, [pc, #212]	@ (8005d90 <neai_classification+0x2c8>)
 8005cba:	2100      	movs	r1, #0
 8005cbc:	611c      	str	r4, [r3, #16]
 8005cbe:	695c      	ldr	r4, [r3, #20]
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	f7fb fa1f 	bl	8001104 <__aeabi_fcmplt>
 8005cc6:	b108      	cbz	r0, 8005ccc <neai_classification+0x204>
 8005cc8:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005ccc:	4b30      	ldr	r3, [pc, #192]	@ (8005d90 <neai_classification+0x2c8>)
 8005cce:	615c      	str	r4, [r3, #20]
 8005cd0:	4b32      	ldr	r3, [pc, #200]	@ (8005d9c <neai_classification+0x2d4>)
 8005cd2:	681e      	ldr	r6, [r3, #0]
 8005cd4:	4b32      	ldr	r3, [pc, #200]	@ (8005da0 <neai_classification+0x2d8>)
 8005cd6:	2e00      	cmp	r6, #0
 8005cd8:	681f      	ldr	r7, [r3, #0]
 8005cda:	f340 8271 	ble.w	80061c0 <neai_classification+0x6f8>
 8005cde:	4b31      	ldr	r3, [pc, #196]	@ (8005da4 <neai_classification+0x2dc>)
 8005ce0:	4d31      	ldr	r5, [pc, #196]	@ (8005da8 <neai_classification+0x2e0>)
 8005ce2:	f8d3 8000 	ldr.w	r8, [r3]
 8005ce6:	4b31      	ldr	r3, [pc, #196]	@ (8005dac <neai_classification+0x2e4>)
 8005ce8:	4c31      	ldr	r4, [pc, #196]	@ (8005db0 <neai_classification+0x2e8>)
 8005cea:	f8d3 b000 	ldr.w	fp, [r3]
 8005cee:	686b      	ldr	r3, [r5, #4]
 8005cf0:	eb04 008b 	add.w	r0, r4, fp, lsl #2
 8005cf4:	1b9b      	subs	r3, r3, r6
 8005cf6:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 8005cfa:	00b3      	lsls	r3, r6, #2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	9304      	str	r3, [sp, #16]
 8005d00:	f001 fe2f 	bl	8007962 <memcpy>
 8005d04:	2f01      	cmp	r7, #1
 8005d06:	f340 81e1 	ble.w	80060cc <neai_classification+0x604>
 8005d0a:	2f03      	cmp	r7, #3
 8005d0c:	bfd8      	it	le
 8005d0e:	2200      	movle	r2, #0
 8005d10:	f8d5 a000 	ldr.w	sl, [r5]
 8005d14:	f340 8133 	ble.w	8005f7e <neai_classification+0x4b6>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	1f3a      	subs	r2, r7, #4
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	f022 0201 	bic.w	r2, r2, #1
 8005d22:	eb06 030a 	add.w	r3, r6, sl
 8005d26:	e9cd 8a06 	strd	r8, sl, [sp, #24]
 8005d2a:	3202      	adds	r2, #2
 8005d2c:	eb08 0983 	add.w	r9, r8, r3, lsl #2
 8005d30:	00f3      	lsls	r3, r6, #3
 8005d32:	9303      	str	r3, [sp, #12]
 8005d34:	eb08 058a 	add.w	r5, r8, sl, lsl #2
 8005d38:	9201      	str	r2, [sp, #4]
 8005d3a:	9708      	str	r7, [sp, #32]
 8005d3c:	9b00      	ldr	r3, [sp, #0]
 8005d3e:	4a14      	ldr	r2, [pc, #80]	@ (8005d90 <neai_classification+0x2c8>)
 8005d40:	6829      	ldr	r1, [r5, #0]
 8005d42:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8005d46:	3204      	adds	r2, #4
 8005d48:	4640      	mov	r0, r8
 8005d4a:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8005d4e:	f7fb f83b 	bl	8000dc8 <__aeabi_fmul>
 8005d52:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 8005d56:	f7fa ff2f 	bl	8000bb8 <__addsf3>
 8005d5a:	4682      	mov	sl, r0
 8005d5c:	f844 a02b 	str.w	sl, [r4, fp, lsl #2]
 8005d60:	f8d9 1000 	ldr.w	r1, [r9]
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7fb f82f 	bl	8000dc8 <__aeabi_fmul>
 8005d6a:	4651      	mov	r1, sl
 8005d6c:	f7fa ff24 	bl	8000bb8 <__addsf3>
 8005d70:	2e01      	cmp	r6, #1
 8005d72:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8005d76:	f000 80f5 	beq.w	8005f64 <neai_classification+0x49c>
 8005d7a:	e01b      	b.n	8005db4 <neai_classification+0x2ec>
 8005d7c:	20000020 	.word	0x20000020
 8005d80:	20000b1c 	.word	0x20000b1c
 8005d84:	2000111c 	.word	0x2000111c
 8005d88:	20001120 	.word	0x20001120
 8005d8c:	2000091c 	.word	0x2000091c
 8005d90:	20001124 	.word	0x20001124
 8005d94:	20000918 	.word	0x20000918
 8005d98:	20000b18 	.word	0x20000b18
 8005d9c:	20000904 	.word	0x20000904
 8005da0:	20000908 	.word	0x20000908
 8005da4:	20000918 	.word	0x20000918
 8005da8:	200008fc 	.word	0x200008fc
 8005dac:	2000090c 	.word	0x2000090c
 8005db0:	200008d8 	.word	0x200008d8
 8005db4:	6869      	ldr	r1, [r5, #4]
 8005db6:	f10b 0a01 	add.w	sl, fp, #1
 8005dba:	4640      	mov	r0, r8
 8005dbc:	f7fb f804 	bl	8000dc8 <__aeabi_fmul>
 8005dc0:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005dc4:	f7fa fef8 	bl	8000bb8 <__addsf3>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005dce:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005dd2:	4638      	mov	r0, r7
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	f7fa fff7 	bl	8000dc8 <__aeabi_fmul>
 8005dda:	9b05      	ldr	r3, [sp, #20]
 8005ddc:	4619      	mov	r1, r3
 8005dde:	f7fa feeb 	bl	8000bb8 <__addsf3>
 8005de2:	2e02      	cmp	r6, #2
 8005de4:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005de8:	f000 80bc 	beq.w	8005f64 <neai_classification+0x49c>
 8005dec:	68a9      	ldr	r1, [r5, #8]
 8005dee:	f10b 0a02 	add.w	sl, fp, #2
 8005df2:	4640      	mov	r0, r8
 8005df4:	f7fa ffe8 	bl	8000dc8 <__aeabi_fmul>
 8005df8:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005dfc:	f7fa fedc 	bl	8000bb8 <__addsf3>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005e06:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8005e0a:	4638      	mov	r0, r7
 8005e0c:	9305      	str	r3, [sp, #20]
 8005e0e:	f7fa ffdb 	bl	8000dc8 <__aeabi_fmul>
 8005e12:	9b05      	ldr	r3, [sp, #20]
 8005e14:	4619      	mov	r1, r3
 8005e16:	f7fa fecf 	bl	8000bb8 <__addsf3>
 8005e1a:	2e03      	cmp	r6, #3
 8005e1c:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005e20:	f000 80a0 	beq.w	8005f64 <neai_classification+0x49c>
 8005e24:	68e9      	ldr	r1, [r5, #12]
 8005e26:	f10b 0a03 	add.w	sl, fp, #3
 8005e2a:	4640      	mov	r0, r8
 8005e2c:	f7fa ffcc 	bl	8000dc8 <__aeabi_fmul>
 8005e30:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005e34:	f7fa fec0 	bl	8000bb8 <__addsf3>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005e3e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005e42:	4638      	mov	r0, r7
 8005e44:	9305      	str	r3, [sp, #20]
 8005e46:	f7fa ffbf 	bl	8000dc8 <__aeabi_fmul>
 8005e4a:	9b05      	ldr	r3, [sp, #20]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	f7fa feb3 	bl	8000bb8 <__addsf3>
 8005e52:	2e04      	cmp	r6, #4
 8005e54:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005e58:	f000 8084 	beq.w	8005f64 <neai_classification+0x49c>
 8005e5c:	6929      	ldr	r1, [r5, #16]
 8005e5e:	f10b 0a04 	add.w	sl, fp, #4
 8005e62:	4640      	mov	r0, r8
 8005e64:	f7fa ffb0 	bl	8000dc8 <__aeabi_fmul>
 8005e68:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005e6c:	f7fa fea4 	bl	8000bb8 <__addsf3>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005e76:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8005e7a:	4638      	mov	r0, r7
 8005e7c:	9305      	str	r3, [sp, #20]
 8005e7e:	f7fa ffa3 	bl	8000dc8 <__aeabi_fmul>
 8005e82:	9b05      	ldr	r3, [sp, #20]
 8005e84:	4619      	mov	r1, r3
 8005e86:	f7fa fe97 	bl	8000bb8 <__addsf3>
 8005e8a:	2e05      	cmp	r6, #5
 8005e8c:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005e90:	d068      	beq.n	8005f64 <neai_classification+0x49c>
 8005e92:	6969      	ldr	r1, [r5, #20]
 8005e94:	f10b 0a05 	add.w	sl, fp, #5
 8005e98:	4640      	mov	r0, r8
 8005e9a:	f7fa ff95 	bl	8000dc8 <__aeabi_fmul>
 8005e9e:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005ea2:	f7fa fe89 	bl	8000bb8 <__addsf3>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005eac:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	9305      	str	r3, [sp, #20]
 8005eb4:	f7fa ff88 	bl	8000dc8 <__aeabi_fmul>
 8005eb8:	9b05      	ldr	r3, [sp, #20]
 8005eba:	4619      	mov	r1, r3
 8005ebc:	f7fa fe7c 	bl	8000bb8 <__addsf3>
 8005ec0:	2e06      	cmp	r6, #6
 8005ec2:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005ec6:	d04d      	beq.n	8005f64 <neai_classification+0x49c>
 8005ec8:	69a9      	ldr	r1, [r5, #24]
 8005eca:	f10b 0a06 	add.w	sl, fp, #6
 8005ece:	4640      	mov	r0, r8
 8005ed0:	f7fa ff7a 	bl	8000dc8 <__aeabi_fmul>
 8005ed4:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005ed8:	f7fa fe6e 	bl	8000bb8 <__addsf3>
 8005edc:	4603      	mov	r3, r0
 8005ede:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005ee2:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8005ee6:	4638      	mov	r0, r7
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	f7fa ff6d 	bl	8000dc8 <__aeabi_fmul>
 8005eee:	9b05      	ldr	r3, [sp, #20]
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f7fa fe61 	bl	8000bb8 <__addsf3>
 8005ef6:	2e07      	cmp	r6, #7
 8005ef8:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005efc:	d032      	beq.n	8005f64 <neai_classification+0x49c>
 8005efe:	69e9      	ldr	r1, [r5, #28]
 8005f00:	f10b 0a07 	add.w	sl, fp, #7
 8005f04:	4640      	mov	r0, r8
 8005f06:	f7fa ff5f 	bl	8000dc8 <__aeabi_fmul>
 8005f0a:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005f0e:	f7fa fe53 	bl	8000bb8 <__addsf3>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005f18:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8005f1c:	4638      	mov	r0, r7
 8005f1e:	9305      	str	r3, [sp, #20]
 8005f20:	f7fa ff52 	bl	8000dc8 <__aeabi_fmul>
 8005f24:	9b05      	ldr	r3, [sp, #20]
 8005f26:	4619      	mov	r1, r3
 8005f28:	f7fa fe46 	bl	8000bb8 <__addsf3>
 8005f2c:	2e08      	cmp	r6, #8
 8005f2e:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005f32:	d017      	beq.n	8005f64 <neai_classification+0x49c>
 8005f34:	6a29      	ldr	r1, [r5, #32]
 8005f36:	4640      	mov	r0, r8
 8005f38:	f10b 0808 	add.w	r8, fp, #8
 8005f3c:	f7fa ff44 	bl	8000dc8 <__aeabi_fmul>
 8005f40:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 8005f44:	f7fa fe38 	bl	8000bb8 <__addsf3>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	461f      	mov	r7, r3
 8005f4e:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
 8005f52:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8005f56:	f7fa ff37 	bl	8000dc8 <__aeabi_fmul>
 8005f5a:	4639      	mov	r1, r7
 8005f5c:	f7fa fe2c 	bl	8000bb8 <__addsf3>
 8005f60:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
 8005f64:	9a03      	ldr	r2, [sp, #12]
 8005f66:	9b00      	ldr	r3, [sp, #0]
 8005f68:	4415      	add	r5, r2
 8005f6a:	4491      	add	r9, r2
 8005f6c:	9a01      	ldr	r2, [sp, #4]
 8005f6e:	3302      	adds	r3, #2
 8005f70:	429a      	cmp	r2, r3
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	f47f aee2 	bne.w	8005d3c <neai_classification+0x274>
 8005f78:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
 8005f7c:	9f08      	ldr	r7, [sp, #32]
 8005f7e:	fb02 a106 	mla	r1, r2, r6, sl
 8005f82:	f10b 0a02 	add.w	sl, fp, #2
 8005f86:	f8cd a000 	str.w	sl, [sp]
 8005f8a:	4692      	mov	sl, r2
 8005f8c:	1e7b      	subs	r3, r7, #1
 8005f8e:	eb08 0581 	add.w	r5, r8, r1, lsl #2
 8005f92:	9306      	str	r3, [sp, #24]
 8005f94:	f102 4880 	add.w	r8, r2, #1073741824	@ 0x40000000
 8005f98:	4bc3      	ldr	r3, [pc, #780]	@ (80062a8 <neai_classification+0x7e0>)
 8005f9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f9e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8005fa2:	f10b 0303 	add.w	r3, fp, #3
 8005fa6:	9301      	str	r3, [sp, #4]
 8005fa8:	f10b 0304 	add.w	r3, fp, #4
 8005fac:	9303      	str	r3, [sp, #12]
 8005fae:	f10b 0305 	add.w	r3, fp, #5
 8005fb2:	9305      	str	r3, [sp, #20]
 8005fb4:	f10b 0306 	add.w	r3, fp, #6
 8005fb8:	9307      	str	r3, [sp, #28]
 8005fba:	f10b 0307 	add.w	r3, fp, #7
 8005fbe:	9308      	str	r3, [sp, #32]
 8005fc0:	f10b 0308 	add.w	r3, fp, #8
 8005fc4:	f10b 0901 	add.w	r9, fp, #1
 8005fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fca:	f858 7f04 	ldr.w	r7, [r8, #4]!
 8005fce:	6829      	ldr	r1, [r5, #0]
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	f7fa fef9 	bl	8000dc8 <__aeabi_fmul>
 8005fd6:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 8005fda:	f7fa fded 	bl	8000bb8 <__addsf3>
 8005fde:	2e01      	cmp	r6, #1
 8005fe0:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8005fe4:	d06a      	beq.n	80060bc <neai_classification+0x5f4>
 8005fe6:	6869      	ldr	r1, [r5, #4]
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f7fa feed 	bl	8000dc8 <__aeabi_fmul>
 8005fee:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8005ff2:	f7fa fde1 	bl	8000bb8 <__addsf3>
 8005ff6:	2e02      	cmp	r6, #2
 8005ff8:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
 8005ffc:	d05e      	beq.n	80060bc <neai_classification+0x5f4>
 8005ffe:	68a9      	ldr	r1, [r5, #8]
 8006000:	4638      	mov	r0, r7
 8006002:	f7fa fee1 	bl	8000dc8 <__aeabi_fmul>
 8006006:	9b00      	ldr	r3, [sp, #0]
 8006008:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800600c:	f7fa fdd4 	bl	8000bb8 <__addsf3>
 8006010:	9b00      	ldr	r3, [sp, #0]
 8006012:	2e03      	cmp	r6, #3
 8006014:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8006018:	d050      	beq.n	80060bc <neai_classification+0x5f4>
 800601a:	68e9      	ldr	r1, [r5, #12]
 800601c:	4638      	mov	r0, r7
 800601e:	f7fa fed3 	bl	8000dc8 <__aeabi_fmul>
 8006022:	9b01      	ldr	r3, [sp, #4]
 8006024:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006028:	f7fa fdc6 	bl	8000bb8 <__addsf3>
 800602c:	9b01      	ldr	r3, [sp, #4]
 800602e:	2e04      	cmp	r6, #4
 8006030:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8006034:	d042      	beq.n	80060bc <neai_classification+0x5f4>
 8006036:	6929      	ldr	r1, [r5, #16]
 8006038:	4638      	mov	r0, r7
 800603a:	f7fa fec5 	bl	8000dc8 <__aeabi_fmul>
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006044:	f7fa fdb8 	bl	8000bb8 <__addsf3>
 8006048:	9b03      	ldr	r3, [sp, #12]
 800604a:	2e05      	cmp	r6, #5
 800604c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8006050:	d034      	beq.n	80060bc <neai_classification+0x5f4>
 8006052:	6969      	ldr	r1, [r5, #20]
 8006054:	4638      	mov	r0, r7
 8006056:	f7fa feb7 	bl	8000dc8 <__aeabi_fmul>
 800605a:	9b05      	ldr	r3, [sp, #20]
 800605c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006060:	f7fa fdaa 	bl	8000bb8 <__addsf3>
 8006064:	9b05      	ldr	r3, [sp, #20]
 8006066:	2e06      	cmp	r6, #6
 8006068:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 800606c:	d026      	beq.n	80060bc <neai_classification+0x5f4>
 800606e:	69a9      	ldr	r1, [r5, #24]
 8006070:	4638      	mov	r0, r7
 8006072:	f7fa fea9 	bl	8000dc8 <__aeabi_fmul>
 8006076:	9b07      	ldr	r3, [sp, #28]
 8006078:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800607c:	f7fa fd9c 	bl	8000bb8 <__addsf3>
 8006080:	9b07      	ldr	r3, [sp, #28]
 8006082:	2e07      	cmp	r6, #7
 8006084:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8006088:	d018      	beq.n	80060bc <neai_classification+0x5f4>
 800608a:	69e9      	ldr	r1, [r5, #28]
 800608c:	4638      	mov	r0, r7
 800608e:	f7fa fe9b 	bl	8000dc8 <__aeabi_fmul>
 8006092:	9b08      	ldr	r3, [sp, #32]
 8006094:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006098:	f7fa fd8e 	bl	8000bb8 <__addsf3>
 800609c:	9b08      	ldr	r3, [sp, #32]
 800609e:	2e08      	cmp	r6, #8
 80060a0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 80060a4:	d00a      	beq.n	80060bc <neai_classification+0x5f4>
 80060a6:	6a29      	ldr	r1, [r5, #32]
 80060a8:	4638      	mov	r0, r7
 80060aa:	f7fa fe8d 	bl	8000dc8 <__aeabi_fmul>
 80060ae:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 80060b0:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 80060b4:	f7fa fd80 	bl	8000bb8 <__addsf3>
 80060b8:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
 80060bc:	9b04      	ldr	r3, [sp, #16]
 80060be:	f10a 0a01 	add.w	sl, sl, #1
 80060c2:	441d      	add	r5, r3
 80060c4:	9b06      	ldr	r3, [sp, #24]
 80060c6:	4553      	cmp	r3, sl
 80060c8:	f73f af7f 	bgt.w	8005fca <neai_classification+0x502>
 80060cc:	f854 002b 	ldr.w	r0, [r4, fp, lsl #2]
 80060d0:	f7fa f9cc 	bl	800046c <__aeabi_f2d>
 80060d4:	f004 fef2 	bl	800aebc <tanh>
 80060d8:	f7fa fd18 	bl	8000b0c <__aeabi_d2f>
 80060dc:	2e01      	cmp	r6, #1
 80060de:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 80060e2:	d06d      	beq.n	80061c0 <neai_classification+0x6f8>
 80060e4:	f10b 0501 	add.w	r5, fp, #1
 80060e8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80060ec:	f7fa f9be 	bl	800046c <__aeabi_f2d>
 80060f0:	f004 fee4 	bl	800aebc <tanh>
 80060f4:	f7fa fd0a 	bl	8000b0c <__aeabi_d2f>
 80060f8:	2e02      	cmp	r6, #2
 80060fa:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 80060fe:	d05f      	beq.n	80061c0 <neai_classification+0x6f8>
 8006100:	f10b 0502 	add.w	r5, fp, #2
 8006104:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006108:	f7fa f9b0 	bl	800046c <__aeabi_f2d>
 800610c:	f004 fed6 	bl	800aebc <tanh>
 8006110:	f7fa fcfc 	bl	8000b0c <__aeabi_d2f>
 8006114:	2e03      	cmp	r6, #3
 8006116:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800611a:	d051      	beq.n	80061c0 <neai_classification+0x6f8>
 800611c:	f10b 0503 	add.w	r5, fp, #3
 8006120:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006124:	f7fa f9a2 	bl	800046c <__aeabi_f2d>
 8006128:	f004 fec8 	bl	800aebc <tanh>
 800612c:	f7fa fcee 	bl	8000b0c <__aeabi_d2f>
 8006130:	2e04      	cmp	r6, #4
 8006132:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8006136:	d043      	beq.n	80061c0 <neai_classification+0x6f8>
 8006138:	f10b 0504 	add.w	r5, fp, #4
 800613c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006140:	f7fa f994 	bl	800046c <__aeabi_f2d>
 8006144:	f004 feba 	bl	800aebc <tanh>
 8006148:	f7fa fce0 	bl	8000b0c <__aeabi_d2f>
 800614c:	2e05      	cmp	r6, #5
 800614e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8006152:	d035      	beq.n	80061c0 <neai_classification+0x6f8>
 8006154:	f10b 0505 	add.w	r5, fp, #5
 8006158:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800615c:	f7fa f986 	bl	800046c <__aeabi_f2d>
 8006160:	f004 feac 	bl	800aebc <tanh>
 8006164:	f7fa fcd2 	bl	8000b0c <__aeabi_d2f>
 8006168:	2e06      	cmp	r6, #6
 800616a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800616e:	d027      	beq.n	80061c0 <neai_classification+0x6f8>
 8006170:	f10b 0506 	add.w	r5, fp, #6
 8006174:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006178:	f7fa f978 	bl	800046c <__aeabi_f2d>
 800617c:	f004 fe9e 	bl	800aebc <tanh>
 8006180:	f7fa fcc4 	bl	8000b0c <__aeabi_d2f>
 8006184:	2e07      	cmp	r6, #7
 8006186:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800618a:	d019      	beq.n	80061c0 <neai_classification+0x6f8>
 800618c:	f10b 0507 	add.w	r5, fp, #7
 8006190:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006194:	f7fa f96a 	bl	800046c <__aeabi_f2d>
 8006198:	f004 fe90 	bl	800aebc <tanh>
 800619c:	f7fa fcb6 	bl	8000b0c <__aeabi_d2f>
 80061a0:	2e08      	cmp	r6, #8
 80061a2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 80061a6:	d00b      	beq.n	80061c0 <neai_classification+0x6f8>
 80061a8:	f10b 0b08 	add.w	fp, fp, #8
 80061ac:	f854 002b 	ldr.w	r0, [r4, fp, lsl #2]
 80061b0:	f7fa f95c 	bl	800046c <__aeabi_f2d>
 80061b4:	f004 fe82 	bl	800aebc <tanh>
 80061b8:	f7fa fca8 	bl	8000b0c <__aeabi_d2f>
 80061bc:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 80061c0:	4a3a      	ldr	r2, [pc, #232]	@ (80062ac <neai_classification+0x7e4>)
 80061c2:	4b3b      	ldr	r3, [pc, #236]	@ (80062b0 <neai_classification+0x7e8>)
 80061c4:	f8d2 9000 	ldr.w	r9, [r2]
 80061c8:	f8d3 8000 	ldr.w	r8, [r3]
 80061cc:	ea4f 0389 	mov.w	r3, r9, lsl #2
 80061d0:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
 80061d4:	9a02      	ldr	r2, [sp, #8]
 80061d6:	3301      	adds	r3, #1
 80061d8:	6017      	str	r7, [r2, #0]
 80061da:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80061de:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80061e2:	6056      	str	r6, [r2, #4]
 80061e4:	685d      	ldr	r5, [r3, #4]
 80061e6:	f1b9 0f00 	cmp.w	r9, #0
 80061ea:	6095      	str	r5, [r2, #8]
 80061ec:	689c      	ldr	r4, [r3, #8]
 80061ee:	60d4      	str	r4, [r2, #12]
 80061f0:	f340 821c 	ble.w	800662c <neai_classification+0xb64>
 80061f4:	4b2f      	ldr	r3, [pc, #188]	@ (80062b4 <neai_classification+0x7ec>)
 80061f6:	f8d8 1000 	ldr.w	r1, [r8]
 80061fa:	f8d3 a000 	ldr.w	sl, [r3]
 80061fe:	4b2e      	ldr	r3, [pc, #184]	@ (80062b8 <neai_classification+0x7f0>)
 8006200:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
 8006204:	4658      	mov	r0, fp
 8006206:	f7fa fddf 	bl	8000dc8 <__aeabi_fmul>
 800620a:	4601      	mov	r1, r0
 800620c:	4638      	mov	r0, r7
 800620e:	f7fa fcd3 	bl	8000bb8 <__addsf3>
 8006212:	4607      	mov	r7, r0
 8006214:	9b02      	ldr	r3, [sp, #8]
 8006216:	4658      	mov	r0, fp
 8006218:	601f      	str	r7, [r3, #0]
 800621a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800621e:	f7fa fdd3 	bl	8000dc8 <__aeabi_fmul>
 8006222:	4601      	mov	r1, r0
 8006224:	4630      	mov	r0, r6
 8006226:	f7fa fcc7 	bl	8000bb8 <__addsf3>
 800622a:	4606      	mov	r6, r0
 800622c:	9b02      	ldr	r3, [sp, #8]
 800622e:	4658      	mov	r0, fp
 8006230:	605e      	str	r6, [r3, #4]
 8006232:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006236:	f7fa fdc7 	bl	8000dc8 <__aeabi_fmul>
 800623a:	4601      	mov	r1, r0
 800623c:	4628      	mov	r0, r5
 800623e:	f7fa fcbb 	bl	8000bb8 <__addsf3>
 8006242:	4605      	mov	r5, r0
 8006244:	4658      	mov	r0, fp
 8006246:	f8dd b008 	ldr.w	fp, [sp, #8]
 800624a:	f8cb 5008 	str.w	r5, [fp, #8]
 800624e:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006252:	f7fa fdb9 	bl	8000dc8 <__aeabi_fmul>
 8006256:	4601      	mov	r1, r0
 8006258:	4620      	mov	r0, r4
 800625a:	f7fa fcad 	bl	8000bb8 <__addsf3>
 800625e:	f1b9 0f01 	cmp.w	r9, #1
 8006262:	4604      	mov	r4, r0
 8006264:	f8cb 000c 	str.w	r0, [fp, #12]
 8006268:	f000 81e0 	beq.w	800662c <neai_classification+0xb64>
 800626c:	4a12      	ldr	r2, [pc, #72]	@ (80062b8 <neai_classification+0x7f0>)
 800626e:	f10a 0301 	add.w	r3, sl, #1
 8006272:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8006276:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800627a:	4658      	mov	r0, fp
 800627c:	f7fa fda4 	bl	8000dc8 <__aeabi_fmul>
 8006280:	4601      	mov	r1, r0
 8006282:	4638      	mov	r0, r7
 8006284:	f7fa fc98 	bl	8000bb8 <__addsf3>
 8006288:	4607      	mov	r7, r0
 800628a:	9b02      	ldr	r3, [sp, #8]
 800628c:	4658      	mov	r0, fp
 800628e:	601f      	str	r7, [r3, #0]
 8006290:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8006294:	f7fa fd98 	bl	8000dc8 <__aeabi_fmul>
 8006298:	4601      	mov	r1, r0
 800629a:	4630      	mov	r0, r6
 800629c:	f7fa fc8c 	bl	8000bb8 <__addsf3>
 80062a0:	4606      	mov	r6, r0
 80062a2:	9b02      	ldr	r3, [sp, #8]
 80062a4:	e00a      	b.n	80062bc <neai_classification+0x7f4>
 80062a6:	bf00      	nop
 80062a8:	20001124 	.word	0x20001124
 80062ac:	20000910 	.word	0x20000910
 80062b0:	20000914 	.word	0x20000914
 80062b4:	2000090c 	.word	0x2000090c
 80062b8:	200008d8 	.word	0x200008d8
 80062bc:	4658      	mov	r0, fp
 80062be:	605e      	str	r6, [r3, #4]
 80062c0:	f8d8 1018 	ldr.w	r1, [r8, #24]
 80062c4:	f7fa fd80 	bl	8000dc8 <__aeabi_fmul>
 80062c8:	4601      	mov	r1, r0
 80062ca:	4628      	mov	r0, r5
 80062cc:	f7fa fc74 	bl	8000bb8 <__addsf3>
 80062d0:	4605      	mov	r5, r0
 80062d2:	4658      	mov	r0, fp
 80062d4:	f8dd b008 	ldr.w	fp, [sp, #8]
 80062d8:	f8cb 5008 	str.w	r5, [fp, #8]
 80062dc:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80062e0:	f7fa fd72 	bl	8000dc8 <__aeabi_fmul>
 80062e4:	4601      	mov	r1, r0
 80062e6:	4620      	mov	r0, r4
 80062e8:	f7fa fc66 	bl	8000bb8 <__addsf3>
 80062ec:	f1b9 0f02 	cmp.w	r9, #2
 80062f0:	4604      	mov	r4, r0
 80062f2:	f8cb 000c 	str.w	r0, [fp, #12]
 80062f6:	f000 8199 	beq.w	800662c <neai_classification+0xb64>
 80062fa:	4ab9      	ldr	r2, [pc, #740]	@ (80065e0 <neai_classification+0xb18>)
 80062fc:	f10a 0302 	add.w	r3, sl, #2
 8006300:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8006304:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8006308:	4658      	mov	r0, fp
 800630a:	f7fa fd5d 	bl	8000dc8 <__aeabi_fmul>
 800630e:	4601      	mov	r1, r0
 8006310:	4638      	mov	r0, r7
 8006312:	f7fa fc51 	bl	8000bb8 <__addsf3>
 8006316:	4607      	mov	r7, r0
 8006318:	9b02      	ldr	r3, [sp, #8]
 800631a:	4658      	mov	r0, fp
 800631c:	601f      	str	r7, [r3, #0]
 800631e:	f8d8 1024 	ldr.w	r1, [r8, #36]	@ 0x24
 8006322:	f7fa fd51 	bl	8000dc8 <__aeabi_fmul>
 8006326:	4601      	mov	r1, r0
 8006328:	4630      	mov	r0, r6
 800632a:	f7fa fc45 	bl	8000bb8 <__addsf3>
 800632e:	4606      	mov	r6, r0
 8006330:	9b02      	ldr	r3, [sp, #8]
 8006332:	4658      	mov	r0, fp
 8006334:	605e      	str	r6, [r3, #4]
 8006336:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800633a:	f7fa fd45 	bl	8000dc8 <__aeabi_fmul>
 800633e:	4601      	mov	r1, r0
 8006340:	4628      	mov	r0, r5
 8006342:	f7fa fc39 	bl	8000bb8 <__addsf3>
 8006346:	4605      	mov	r5, r0
 8006348:	4658      	mov	r0, fp
 800634a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800634e:	f8cb 5008 	str.w	r5, [fp, #8]
 8006352:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8006356:	f7fa fd37 	bl	8000dc8 <__aeabi_fmul>
 800635a:	4601      	mov	r1, r0
 800635c:	4620      	mov	r0, r4
 800635e:	f7fa fc2b 	bl	8000bb8 <__addsf3>
 8006362:	f1b9 0f03 	cmp.w	r9, #3
 8006366:	4604      	mov	r4, r0
 8006368:	f8cb 000c 	str.w	r0, [fp, #12]
 800636c:	f000 815e 	beq.w	800662c <neai_classification+0xb64>
 8006370:	4a9b      	ldr	r2, [pc, #620]	@ (80065e0 <neai_classification+0xb18>)
 8006372:	f10a 0303 	add.w	r3, sl, #3
 8006376:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 800637a:	f8d8 1030 	ldr.w	r1, [r8, #48]	@ 0x30
 800637e:	4658      	mov	r0, fp
 8006380:	f7fa fd22 	bl	8000dc8 <__aeabi_fmul>
 8006384:	4601      	mov	r1, r0
 8006386:	4638      	mov	r0, r7
 8006388:	f7fa fc16 	bl	8000bb8 <__addsf3>
 800638c:	4607      	mov	r7, r0
 800638e:	9b02      	ldr	r3, [sp, #8]
 8006390:	4658      	mov	r0, fp
 8006392:	601f      	str	r7, [r3, #0]
 8006394:	f8d8 1034 	ldr.w	r1, [r8, #52]	@ 0x34
 8006398:	f7fa fd16 	bl	8000dc8 <__aeabi_fmul>
 800639c:	4601      	mov	r1, r0
 800639e:	4630      	mov	r0, r6
 80063a0:	f7fa fc0a 	bl	8000bb8 <__addsf3>
 80063a4:	4606      	mov	r6, r0
 80063a6:	9b02      	ldr	r3, [sp, #8]
 80063a8:	4658      	mov	r0, fp
 80063aa:	605e      	str	r6, [r3, #4]
 80063ac:	f8d8 1038 	ldr.w	r1, [r8, #56]	@ 0x38
 80063b0:	f7fa fd0a 	bl	8000dc8 <__aeabi_fmul>
 80063b4:	4601      	mov	r1, r0
 80063b6:	4628      	mov	r0, r5
 80063b8:	f7fa fbfe 	bl	8000bb8 <__addsf3>
 80063bc:	4605      	mov	r5, r0
 80063be:	4658      	mov	r0, fp
 80063c0:	f8dd b008 	ldr.w	fp, [sp, #8]
 80063c4:	f8cb 5008 	str.w	r5, [fp, #8]
 80063c8:	f8d8 103c 	ldr.w	r1, [r8, #60]	@ 0x3c
 80063cc:	f7fa fcfc 	bl	8000dc8 <__aeabi_fmul>
 80063d0:	4601      	mov	r1, r0
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7fa fbf0 	bl	8000bb8 <__addsf3>
 80063d8:	f1b9 0f04 	cmp.w	r9, #4
 80063dc:	4604      	mov	r4, r0
 80063de:	f8cb 000c 	str.w	r0, [fp, #12]
 80063e2:	f000 8123 	beq.w	800662c <neai_classification+0xb64>
 80063e6:	4a7e      	ldr	r2, [pc, #504]	@ (80065e0 <neai_classification+0xb18>)
 80063e8:	f10a 0304 	add.w	r3, sl, #4
 80063ec:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80063f0:	f8d8 1040 	ldr.w	r1, [r8, #64]	@ 0x40
 80063f4:	4658      	mov	r0, fp
 80063f6:	f7fa fce7 	bl	8000dc8 <__aeabi_fmul>
 80063fa:	4601      	mov	r1, r0
 80063fc:	4638      	mov	r0, r7
 80063fe:	f7fa fbdb 	bl	8000bb8 <__addsf3>
 8006402:	4607      	mov	r7, r0
 8006404:	9b02      	ldr	r3, [sp, #8]
 8006406:	4658      	mov	r0, fp
 8006408:	601f      	str	r7, [r3, #0]
 800640a:	f8d8 1044 	ldr.w	r1, [r8, #68]	@ 0x44
 800640e:	f7fa fcdb 	bl	8000dc8 <__aeabi_fmul>
 8006412:	4601      	mov	r1, r0
 8006414:	4630      	mov	r0, r6
 8006416:	f7fa fbcf 	bl	8000bb8 <__addsf3>
 800641a:	4606      	mov	r6, r0
 800641c:	9b02      	ldr	r3, [sp, #8]
 800641e:	4658      	mov	r0, fp
 8006420:	605e      	str	r6, [r3, #4]
 8006422:	f8d8 1048 	ldr.w	r1, [r8, #72]	@ 0x48
 8006426:	f7fa fccf 	bl	8000dc8 <__aeabi_fmul>
 800642a:	4601      	mov	r1, r0
 800642c:	4628      	mov	r0, r5
 800642e:	f7fa fbc3 	bl	8000bb8 <__addsf3>
 8006432:	4605      	mov	r5, r0
 8006434:	4658      	mov	r0, fp
 8006436:	f8dd b008 	ldr.w	fp, [sp, #8]
 800643a:	f8cb 5008 	str.w	r5, [fp, #8]
 800643e:	f8d8 104c 	ldr.w	r1, [r8, #76]	@ 0x4c
 8006442:	f7fa fcc1 	bl	8000dc8 <__aeabi_fmul>
 8006446:	4601      	mov	r1, r0
 8006448:	4620      	mov	r0, r4
 800644a:	f7fa fbb5 	bl	8000bb8 <__addsf3>
 800644e:	f1b9 0f05 	cmp.w	r9, #5
 8006452:	4604      	mov	r4, r0
 8006454:	f8cb 000c 	str.w	r0, [fp, #12]
 8006458:	f000 80e8 	beq.w	800662c <neai_classification+0xb64>
 800645c:	4a60      	ldr	r2, [pc, #384]	@ (80065e0 <neai_classification+0xb18>)
 800645e:	f10a 0305 	add.w	r3, sl, #5
 8006462:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8006466:	f8d8 1050 	ldr.w	r1, [r8, #80]	@ 0x50
 800646a:	4658      	mov	r0, fp
 800646c:	f7fa fcac 	bl	8000dc8 <__aeabi_fmul>
 8006470:	4601      	mov	r1, r0
 8006472:	4638      	mov	r0, r7
 8006474:	f7fa fba0 	bl	8000bb8 <__addsf3>
 8006478:	4607      	mov	r7, r0
 800647a:	9b02      	ldr	r3, [sp, #8]
 800647c:	4658      	mov	r0, fp
 800647e:	601f      	str	r7, [r3, #0]
 8006480:	f8d8 1054 	ldr.w	r1, [r8, #84]	@ 0x54
 8006484:	f7fa fca0 	bl	8000dc8 <__aeabi_fmul>
 8006488:	4601      	mov	r1, r0
 800648a:	4630      	mov	r0, r6
 800648c:	f7fa fb94 	bl	8000bb8 <__addsf3>
 8006490:	4606      	mov	r6, r0
 8006492:	9b02      	ldr	r3, [sp, #8]
 8006494:	4658      	mov	r0, fp
 8006496:	605e      	str	r6, [r3, #4]
 8006498:	f8d8 1058 	ldr.w	r1, [r8, #88]	@ 0x58
 800649c:	f7fa fc94 	bl	8000dc8 <__aeabi_fmul>
 80064a0:	4601      	mov	r1, r0
 80064a2:	4628      	mov	r0, r5
 80064a4:	f7fa fb88 	bl	8000bb8 <__addsf3>
 80064a8:	4605      	mov	r5, r0
 80064aa:	4658      	mov	r0, fp
 80064ac:	f8dd b008 	ldr.w	fp, [sp, #8]
 80064b0:	f8cb 5008 	str.w	r5, [fp, #8]
 80064b4:	f8d8 105c 	ldr.w	r1, [r8, #92]	@ 0x5c
 80064b8:	f7fa fc86 	bl	8000dc8 <__aeabi_fmul>
 80064bc:	4601      	mov	r1, r0
 80064be:	4620      	mov	r0, r4
 80064c0:	f7fa fb7a 	bl	8000bb8 <__addsf3>
 80064c4:	f1b9 0f06 	cmp.w	r9, #6
 80064c8:	4604      	mov	r4, r0
 80064ca:	f8cb 000c 	str.w	r0, [fp, #12]
 80064ce:	f000 80ad 	beq.w	800662c <neai_classification+0xb64>
 80064d2:	4a43      	ldr	r2, [pc, #268]	@ (80065e0 <neai_classification+0xb18>)
 80064d4:	f10a 0306 	add.w	r3, sl, #6
 80064d8:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80064dc:	f8d8 1060 	ldr.w	r1, [r8, #96]	@ 0x60
 80064e0:	4658      	mov	r0, fp
 80064e2:	f7fa fc71 	bl	8000dc8 <__aeabi_fmul>
 80064e6:	4601      	mov	r1, r0
 80064e8:	4638      	mov	r0, r7
 80064ea:	f7fa fb65 	bl	8000bb8 <__addsf3>
 80064ee:	4607      	mov	r7, r0
 80064f0:	9b02      	ldr	r3, [sp, #8]
 80064f2:	4658      	mov	r0, fp
 80064f4:	601f      	str	r7, [r3, #0]
 80064f6:	f8d8 1064 	ldr.w	r1, [r8, #100]	@ 0x64
 80064fa:	f7fa fc65 	bl	8000dc8 <__aeabi_fmul>
 80064fe:	4601      	mov	r1, r0
 8006500:	4630      	mov	r0, r6
 8006502:	f7fa fb59 	bl	8000bb8 <__addsf3>
 8006506:	4606      	mov	r6, r0
 8006508:	9b02      	ldr	r3, [sp, #8]
 800650a:	4658      	mov	r0, fp
 800650c:	605e      	str	r6, [r3, #4]
 800650e:	f8d8 1068 	ldr.w	r1, [r8, #104]	@ 0x68
 8006512:	f7fa fc59 	bl	8000dc8 <__aeabi_fmul>
 8006516:	4601      	mov	r1, r0
 8006518:	4628      	mov	r0, r5
 800651a:	f7fa fb4d 	bl	8000bb8 <__addsf3>
 800651e:	4605      	mov	r5, r0
 8006520:	4658      	mov	r0, fp
 8006522:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006526:	f8cb 5008 	str.w	r5, [fp, #8]
 800652a:	f8d8 106c 	ldr.w	r1, [r8, #108]	@ 0x6c
 800652e:	f7fa fc4b 	bl	8000dc8 <__aeabi_fmul>
 8006532:	4601      	mov	r1, r0
 8006534:	4620      	mov	r0, r4
 8006536:	f7fa fb3f 	bl	8000bb8 <__addsf3>
 800653a:	f1b9 0f07 	cmp.w	r9, #7
 800653e:	4604      	mov	r4, r0
 8006540:	f8cb 000c 	str.w	r0, [fp, #12]
 8006544:	d072      	beq.n	800662c <neai_classification+0xb64>
 8006546:	4a26      	ldr	r2, [pc, #152]	@ (80065e0 <neai_classification+0xb18>)
 8006548:	f10a 0307 	add.w	r3, sl, #7
 800654c:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8006550:	f8d8 1070 	ldr.w	r1, [r8, #112]	@ 0x70
 8006554:	4658      	mov	r0, fp
 8006556:	f7fa fc37 	bl	8000dc8 <__aeabi_fmul>
 800655a:	4601      	mov	r1, r0
 800655c:	4638      	mov	r0, r7
 800655e:	f7fa fb2b 	bl	8000bb8 <__addsf3>
 8006562:	4607      	mov	r7, r0
 8006564:	9b02      	ldr	r3, [sp, #8]
 8006566:	4658      	mov	r0, fp
 8006568:	601f      	str	r7, [r3, #0]
 800656a:	f8d8 1074 	ldr.w	r1, [r8, #116]	@ 0x74
 800656e:	f7fa fc2b 	bl	8000dc8 <__aeabi_fmul>
 8006572:	4601      	mov	r1, r0
 8006574:	4630      	mov	r0, r6
 8006576:	f7fa fb1f 	bl	8000bb8 <__addsf3>
 800657a:	4606      	mov	r6, r0
 800657c:	9b02      	ldr	r3, [sp, #8]
 800657e:	4658      	mov	r0, fp
 8006580:	605e      	str	r6, [r3, #4]
 8006582:	f8d8 1078 	ldr.w	r1, [r8, #120]	@ 0x78
 8006586:	f7fa fc1f 	bl	8000dc8 <__aeabi_fmul>
 800658a:	4601      	mov	r1, r0
 800658c:	4628      	mov	r0, r5
 800658e:	f7fa fb13 	bl	8000bb8 <__addsf3>
 8006592:	4605      	mov	r5, r0
 8006594:	4658      	mov	r0, fp
 8006596:	f8dd b008 	ldr.w	fp, [sp, #8]
 800659a:	f8cb 5008 	str.w	r5, [fp, #8]
 800659e:	f8d8 107c 	ldr.w	r1, [r8, #124]	@ 0x7c
 80065a2:	f7fa fc11 	bl	8000dc8 <__aeabi_fmul>
 80065a6:	4601      	mov	r1, r0
 80065a8:	4620      	mov	r0, r4
 80065aa:	f7fa fb05 	bl	8000bb8 <__addsf3>
 80065ae:	f1b9 0f08 	cmp.w	r9, #8
 80065b2:	4604      	mov	r4, r0
 80065b4:	f8cb 000c 	str.w	r0, [fp, #12]
 80065b8:	d038      	beq.n	800662c <neai_classification+0xb64>
 80065ba:	4a09      	ldr	r2, [pc, #36]	@ (80065e0 <neai_classification+0xb18>)
 80065bc:	f10a 0308 	add.w	r3, sl, #8
 80065c0:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80065c4:	f8d8 1080 	ldr.w	r1, [r8, #128]	@ 0x80
 80065c8:	4648      	mov	r0, r9
 80065ca:	f7fa fbfd 	bl	8000dc8 <__aeabi_fmul>
 80065ce:	4601      	mov	r1, r0
 80065d0:	4638      	mov	r0, r7
 80065d2:	f7fa faf1 	bl	8000bb8 <__addsf3>
 80065d6:	4607      	mov	r7, r0
 80065d8:	f8cb 7000 	str.w	r7, [fp]
 80065dc:	e002      	b.n	80065e4 <neai_classification+0xb1c>
 80065de:	bf00      	nop
 80065e0:	200008d8 	.word	0x200008d8
 80065e4:	f8d8 1084 	ldr.w	r1, [r8, #132]	@ 0x84
 80065e8:	4648      	mov	r0, r9
 80065ea:	f7fa fbed 	bl	8000dc8 <__aeabi_fmul>
 80065ee:	4601      	mov	r1, r0
 80065f0:	4630      	mov	r0, r6
 80065f2:	f7fa fae1 	bl	8000bb8 <__addsf3>
 80065f6:	4606      	mov	r6, r0
 80065f8:	f8cb 6004 	str.w	r6, [fp, #4]
 80065fc:	f8d8 1088 	ldr.w	r1, [r8, #136]	@ 0x88
 8006600:	4648      	mov	r0, r9
 8006602:	f7fa fbe1 	bl	8000dc8 <__aeabi_fmul>
 8006606:	4601      	mov	r1, r0
 8006608:	4628      	mov	r0, r5
 800660a:	f7fa fad5 	bl	8000bb8 <__addsf3>
 800660e:	4605      	mov	r5, r0
 8006610:	f8cb 5008 	str.w	r5, [fp, #8]
 8006614:	f8d8 108c 	ldr.w	r1, [r8, #140]	@ 0x8c
 8006618:	4648      	mov	r0, r9
 800661a:	f7fa fbd5 	bl	8000dc8 <__aeabi_fmul>
 800661e:	4601      	mov	r1, r0
 8006620:	4620      	mov	r0, r4
 8006622:	f7fa fac9 	bl	8000bb8 <__addsf3>
 8006626:	4604      	mov	r4, r0
 8006628:	f8cb 000c 	str.w	r0, [fp, #12]
 800662c:	4639      	mov	r1, r7
 800662e:	4630      	mov	r0, r6
 8006630:	f7fa fd86 	bl	8001140 <__aeabi_fcmpgt>
 8006634:	b900      	cbnz	r0, 8006638 <neai_classification+0xb70>
 8006636:	463e      	mov	r6, r7
 8006638:	4629      	mov	r1, r5
 800663a:	4630      	mov	r0, r6
 800663c:	f7fa fd62 	bl	8001104 <__aeabi_fcmplt>
 8006640:	b900      	cbnz	r0, 8006644 <neai_classification+0xb7c>
 8006642:	4635      	mov	r5, r6
 8006644:	4621      	mov	r1, r4
 8006646:	4628      	mov	r0, r5
 8006648:	f7fa fd5c 	bl	8001104 <__aeabi_fcmplt>
 800664c:	b900      	cbnz	r0, 8006650 <neai_classification+0xb88>
 800664e:	462c      	mov	r4, r5
 8006650:	2700      	movs	r7, #0
 8006652:	9b02      	ldr	r3, [sp, #8]
 8006654:	4e33      	ldr	r6, [pc, #204]	@ (8006724 <neai_classification+0xc5c>)
 8006656:	f1a3 0804 	sub.w	r8, r3, #4
 800665a:	f103 050c 	add.w	r5, r3, #12
 800665e:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8006662:	4621      	mov	r1, r4
 8006664:	f7fa faa6 	bl	8000bb4 <__aeabi_fsub>
 8006668:	4631      	mov	r1, r6
 800666a:	f7fa fbad 	bl	8000dc8 <__aeabi_fmul>
 800666e:	f004 fcb5 	bl	800afdc <expf>
 8006672:	4601      	mov	r1, r0
 8006674:	4638      	mov	r0, r7
 8006676:	f8c8 1000 	str.w	r1, [r8]
 800667a:	f7fa fa9d 	bl	8000bb8 <__addsf3>
 800667e:	45a8      	cmp	r8, r5
 8006680:	4607      	mov	r7, r0
 8006682:	d1ec      	bne.n	800665e <neai_classification+0xb96>
 8006684:	4601      	mov	r1, r0
 8006686:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800668a:	f7fa fc51 	bl	8000f30 <__aeabi_fdiv>
 800668e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006692:	4606      	mov	r6, r0
 8006694:	f8d8 1000 	ldr.w	r1, [r8]
 8006698:	f7fa fb96 	bl	8000dc8 <__aeabi_fmul>
 800669c:	4607      	mov	r7, r0
 800669e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80066a2:	4630      	mov	r0, r6
 80066a4:	f8c8 7000 	str.w	r7, [r8]
 80066a8:	f7fa fb8e 	bl	8000dc8 <__aeabi_fmul>
 80066ac:	4604      	mov	r4, r0
 80066ae:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80066b2:	4630      	mov	r0, r6
 80066b4:	f8c8 4004 	str.w	r4, [r8, #4]
 80066b8:	f7fa fb86 	bl	8000dc8 <__aeabi_fmul>
 80066bc:	4605      	mov	r5, r0
 80066be:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80066c2:	4630      	mov	r0, r6
 80066c4:	f8c8 5008 	str.w	r5, [r8, #8]
 80066c8:	f7fa fb7e 	bl	8000dc8 <__aeabi_fmul>
 80066cc:	4639      	mov	r1, r7
 80066ce:	4606      	mov	r6, r0
 80066d0:	f8c8 000c 	str.w	r0, [r8, #12]
 80066d4:	4620      	mov	r0, r4
 80066d6:	f7fa fd33 	bl	8001140 <__aeabi_fcmpgt>
 80066da:	bb00      	cbnz	r0, 800671e <neai_classification+0xc56>
 80066dc:	463c      	mov	r4, r7
 80066de:	2701      	movs	r7, #1
 80066e0:	4629      	mov	r1, r5
 80066e2:	4620      	mov	r0, r4
 80066e4:	f7fa fd0e 	bl	8001104 <__aeabi_fcmplt>
 80066e8:	b9b8      	cbnz	r0, 800671a <neai_classification+0xc52>
 80066ea:	4625      	mov	r5, r4
 80066ec:	4631      	mov	r1, r6
 80066ee:	4628      	mov	r0, r5
 80066f0:	f7fa fd08 	bl	8001104 <__aeabi_fcmplt>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	bf18      	it	ne
 80066f8:	2704      	movne	r7, #4
 80066fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066fc:	801f      	strh	r7, [r3, #0]
 80066fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006700:	b00d      	add	sp, #52	@ 0x34
 8006702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006706:	2f02      	cmp	r7, #2
 8006708:	f04f 0b01 	mov.w	fp, #1
 800670c:	f47f aa34 	bne.w	8005b78 <neai_classification+0xb0>
 8006710:	9f06      	ldr	r7, [sp, #24]
 8006712:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 8006716:	f7ff ba96 	b.w	8005c46 <neai_classification+0x17e>
 800671a:	2703      	movs	r7, #3
 800671c:	e7e6      	b.n	80066ec <neai_classification+0xc24>
 800671e:	2702      	movs	r7, #2
 8006720:	e7de      	b.n	80066e0 <neai_classification+0xc18>
 8006722:	bf00      	nop
 8006724:	40a00000 	.word	0x40a00000

08006728 <__cvt>:
 8006728:	2b00      	cmp	r3, #0
 800672a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672e:	461d      	mov	r5, r3
 8006730:	bfbb      	ittet	lt
 8006732:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006736:	461d      	movlt	r5, r3
 8006738:	2300      	movge	r3, #0
 800673a:	232d      	movlt	r3, #45	@ 0x2d
 800673c:	b088      	sub	sp, #32
 800673e:	4614      	mov	r4, r2
 8006740:	bfb8      	it	lt
 8006742:	4614      	movlt	r4, r2
 8006744:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006746:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006748:	7013      	strb	r3, [r2, #0]
 800674a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800674c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006750:	f023 0820 	bic.w	r8, r3, #32
 8006754:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006758:	d005      	beq.n	8006766 <__cvt+0x3e>
 800675a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800675e:	d100      	bne.n	8006762 <__cvt+0x3a>
 8006760:	3601      	adds	r6, #1
 8006762:	2302      	movs	r3, #2
 8006764:	e000      	b.n	8006768 <__cvt+0x40>
 8006766:	2303      	movs	r3, #3
 8006768:	aa07      	add	r2, sp, #28
 800676a:	9204      	str	r2, [sp, #16]
 800676c:	aa06      	add	r2, sp, #24
 800676e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006772:	e9cd 3600 	strd	r3, r6, [sp]
 8006776:	4622      	mov	r2, r4
 8006778:	462b      	mov	r3, r5
 800677a:	f001 f98d 	bl	8007a98 <_dtoa_r>
 800677e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006782:	4607      	mov	r7, r0
 8006784:	d119      	bne.n	80067ba <__cvt+0x92>
 8006786:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006788:	07db      	lsls	r3, r3, #31
 800678a:	d50e      	bpl.n	80067aa <__cvt+0x82>
 800678c:	eb00 0906 	add.w	r9, r0, r6
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	4620      	mov	r0, r4
 8006796:	4629      	mov	r1, r5
 8006798:	f7fa f928 	bl	80009ec <__aeabi_dcmpeq>
 800679c:	b108      	cbz	r0, 80067a2 <__cvt+0x7a>
 800679e:	f8cd 901c 	str.w	r9, [sp, #28]
 80067a2:	2230      	movs	r2, #48	@ 0x30
 80067a4:	9b07      	ldr	r3, [sp, #28]
 80067a6:	454b      	cmp	r3, r9
 80067a8:	d31e      	bcc.n	80067e8 <__cvt+0xc0>
 80067aa:	4638      	mov	r0, r7
 80067ac:	9b07      	ldr	r3, [sp, #28]
 80067ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80067b0:	1bdb      	subs	r3, r3, r7
 80067b2:	6013      	str	r3, [r2, #0]
 80067b4:	b008      	add	sp, #32
 80067b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067be:	eb00 0906 	add.w	r9, r0, r6
 80067c2:	d1e5      	bne.n	8006790 <__cvt+0x68>
 80067c4:	7803      	ldrb	r3, [r0, #0]
 80067c6:	2b30      	cmp	r3, #48	@ 0x30
 80067c8:	d10a      	bne.n	80067e0 <__cvt+0xb8>
 80067ca:	2200      	movs	r2, #0
 80067cc:	2300      	movs	r3, #0
 80067ce:	4620      	mov	r0, r4
 80067d0:	4629      	mov	r1, r5
 80067d2:	f7fa f90b 	bl	80009ec <__aeabi_dcmpeq>
 80067d6:	b918      	cbnz	r0, 80067e0 <__cvt+0xb8>
 80067d8:	f1c6 0601 	rsb	r6, r6, #1
 80067dc:	f8ca 6000 	str.w	r6, [sl]
 80067e0:	f8da 3000 	ldr.w	r3, [sl]
 80067e4:	4499      	add	r9, r3
 80067e6:	e7d3      	b.n	8006790 <__cvt+0x68>
 80067e8:	1c59      	adds	r1, r3, #1
 80067ea:	9107      	str	r1, [sp, #28]
 80067ec:	701a      	strb	r2, [r3, #0]
 80067ee:	e7d9      	b.n	80067a4 <__cvt+0x7c>

080067f0 <__exponent>:
 80067f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f2:	2900      	cmp	r1, #0
 80067f4:	bfb6      	itet	lt
 80067f6:	232d      	movlt	r3, #45	@ 0x2d
 80067f8:	232b      	movge	r3, #43	@ 0x2b
 80067fa:	4249      	neglt	r1, r1
 80067fc:	2909      	cmp	r1, #9
 80067fe:	7002      	strb	r2, [r0, #0]
 8006800:	7043      	strb	r3, [r0, #1]
 8006802:	dd29      	ble.n	8006858 <__exponent+0x68>
 8006804:	f10d 0307 	add.w	r3, sp, #7
 8006808:	461d      	mov	r5, r3
 800680a:	270a      	movs	r7, #10
 800680c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006810:	461a      	mov	r2, r3
 8006812:	fb07 1416 	mls	r4, r7, r6, r1
 8006816:	3430      	adds	r4, #48	@ 0x30
 8006818:	f802 4c01 	strb.w	r4, [r2, #-1]
 800681c:	460c      	mov	r4, r1
 800681e:	2c63      	cmp	r4, #99	@ 0x63
 8006820:	4631      	mov	r1, r6
 8006822:	f103 33ff 	add.w	r3, r3, #4294967295
 8006826:	dcf1      	bgt.n	800680c <__exponent+0x1c>
 8006828:	3130      	adds	r1, #48	@ 0x30
 800682a:	1e94      	subs	r4, r2, #2
 800682c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006830:	4623      	mov	r3, r4
 8006832:	1c41      	adds	r1, r0, #1
 8006834:	42ab      	cmp	r3, r5
 8006836:	d30a      	bcc.n	800684e <__exponent+0x5e>
 8006838:	f10d 0309 	add.w	r3, sp, #9
 800683c:	1a9b      	subs	r3, r3, r2
 800683e:	42ac      	cmp	r4, r5
 8006840:	bf88      	it	hi
 8006842:	2300      	movhi	r3, #0
 8006844:	3302      	adds	r3, #2
 8006846:	4403      	add	r3, r0
 8006848:	1a18      	subs	r0, r3, r0
 800684a:	b003      	add	sp, #12
 800684c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800684e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006852:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006856:	e7ed      	b.n	8006834 <__exponent+0x44>
 8006858:	2330      	movs	r3, #48	@ 0x30
 800685a:	3130      	adds	r1, #48	@ 0x30
 800685c:	7083      	strb	r3, [r0, #2]
 800685e:	70c1      	strb	r1, [r0, #3]
 8006860:	1d03      	adds	r3, r0, #4
 8006862:	e7f1      	b.n	8006848 <__exponent+0x58>

08006864 <_printf_float>:
 8006864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	b091      	sub	sp, #68	@ 0x44
 800686a:	460c      	mov	r4, r1
 800686c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006870:	4616      	mov	r6, r2
 8006872:	461f      	mov	r7, r3
 8006874:	4605      	mov	r5, r0
 8006876:	f000 ffef 	bl	8007858 <_localeconv_r>
 800687a:	6803      	ldr	r3, [r0, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	9308      	str	r3, [sp, #32]
 8006880:	f7f9 fc88 	bl	8000194 <strlen>
 8006884:	2300      	movs	r3, #0
 8006886:	930e      	str	r3, [sp, #56]	@ 0x38
 8006888:	f8d8 3000 	ldr.w	r3, [r8]
 800688c:	9009      	str	r0, [sp, #36]	@ 0x24
 800688e:	3307      	adds	r3, #7
 8006890:	f023 0307 	bic.w	r3, r3, #7
 8006894:	f103 0208 	add.w	r2, r3, #8
 8006898:	f894 a018 	ldrb.w	sl, [r4, #24]
 800689c:	f8d4 b000 	ldr.w	fp, [r4]
 80068a0:	f8c8 2000 	str.w	r2, [r8]
 80068a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80068b2:	f04f 32ff 	mov.w	r2, #4294967295
 80068b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068be:	4b9c      	ldr	r3, [pc, #624]	@ (8006b30 <_printf_float+0x2cc>)
 80068c0:	f7fa f8c6 	bl	8000a50 <__aeabi_dcmpun>
 80068c4:	bb70      	cbnz	r0, 8006924 <_printf_float+0xc0>
 80068c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068ca:	f04f 32ff 	mov.w	r2, #4294967295
 80068ce:	4b98      	ldr	r3, [pc, #608]	@ (8006b30 <_printf_float+0x2cc>)
 80068d0:	f7fa f8a0 	bl	8000a14 <__aeabi_dcmple>
 80068d4:	bb30      	cbnz	r0, 8006924 <_printf_float+0xc0>
 80068d6:	2200      	movs	r2, #0
 80068d8:	2300      	movs	r3, #0
 80068da:	4640      	mov	r0, r8
 80068dc:	4649      	mov	r1, r9
 80068de:	f7fa f88f 	bl	8000a00 <__aeabi_dcmplt>
 80068e2:	b110      	cbz	r0, 80068ea <_printf_float+0x86>
 80068e4:	232d      	movs	r3, #45	@ 0x2d
 80068e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ea:	4a92      	ldr	r2, [pc, #584]	@ (8006b34 <_printf_float+0x2d0>)
 80068ec:	4b92      	ldr	r3, [pc, #584]	@ (8006b38 <_printf_float+0x2d4>)
 80068ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068f2:	bf8c      	ite	hi
 80068f4:	4690      	movhi	r8, r2
 80068f6:	4698      	movls	r8, r3
 80068f8:	2303      	movs	r3, #3
 80068fa:	f04f 0900 	mov.w	r9, #0
 80068fe:	6123      	str	r3, [r4, #16]
 8006900:	f02b 0304 	bic.w	r3, fp, #4
 8006904:	6023      	str	r3, [r4, #0]
 8006906:	4633      	mov	r3, r6
 8006908:	4621      	mov	r1, r4
 800690a:	4628      	mov	r0, r5
 800690c:	9700      	str	r7, [sp, #0]
 800690e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006910:	f000 f9d4 	bl	8006cbc <_printf_common>
 8006914:	3001      	adds	r0, #1
 8006916:	f040 8090 	bne.w	8006a3a <_printf_float+0x1d6>
 800691a:	f04f 30ff 	mov.w	r0, #4294967295
 800691e:	b011      	add	sp, #68	@ 0x44
 8006920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006924:	4642      	mov	r2, r8
 8006926:	464b      	mov	r3, r9
 8006928:	4640      	mov	r0, r8
 800692a:	4649      	mov	r1, r9
 800692c:	f7fa f890 	bl	8000a50 <__aeabi_dcmpun>
 8006930:	b148      	cbz	r0, 8006946 <_printf_float+0xe2>
 8006932:	464b      	mov	r3, r9
 8006934:	2b00      	cmp	r3, #0
 8006936:	bfb8      	it	lt
 8006938:	232d      	movlt	r3, #45	@ 0x2d
 800693a:	4a80      	ldr	r2, [pc, #512]	@ (8006b3c <_printf_float+0x2d8>)
 800693c:	bfb8      	it	lt
 800693e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006942:	4b7f      	ldr	r3, [pc, #508]	@ (8006b40 <_printf_float+0x2dc>)
 8006944:	e7d3      	b.n	80068ee <_printf_float+0x8a>
 8006946:	6863      	ldr	r3, [r4, #4]
 8006948:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	d13f      	bne.n	80069d0 <_printf_float+0x16c>
 8006950:	2306      	movs	r3, #6
 8006952:	6063      	str	r3, [r4, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800695a:	6023      	str	r3, [r4, #0]
 800695c:	9206      	str	r2, [sp, #24]
 800695e:	aa0e      	add	r2, sp, #56	@ 0x38
 8006960:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006964:	aa0d      	add	r2, sp, #52	@ 0x34
 8006966:	9203      	str	r2, [sp, #12]
 8006968:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800696c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	4642      	mov	r2, r8
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	4628      	mov	r0, r5
 8006978:	464b      	mov	r3, r9
 800697a:	910a      	str	r1, [sp, #40]	@ 0x28
 800697c:	f7ff fed4 	bl	8006728 <__cvt>
 8006980:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006982:	4680      	mov	r8, r0
 8006984:	2947      	cmp	r1, #71	@ 0x47
 8006986:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006988:	d128      	bne.n	80069dc <_printf_float+0x178>
 800698a:	1cc8      	adds	r0, r1, #3
 800698c:	db02      	blt.n	8006994 <_printf_float+0x130>
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	4299      	cmp	r1, r3
 8006992:	dd40      	ble.n	8006a16 <_printf_float+0x1b2>
 8006994:	f1aa 0a02 	sub.w	sl, sl, #2
 8006998:	fa5f fa8a 	uxtb.w	sl, sl
 800699c:	4652      	mov	r2, sl
 800699e:	3901      	subs	r1, #1
 80069a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80069a6:	f7ff ff23 	bl	80067f0 <__exponent>
 80069aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069ac:	4681      	mov	r9, r0
 80069ae:	1813      	adds	r3, r2, r0
 80069b0:	2a01      	cmp	r2, #1
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	dc02      	bgt.n	80069bc <_printf_float+0x158>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	07d2      	lsls	r2, r2, #31
 80069ba:	d501      	bpl.n	80069c0 <_printf_float+0x15c>
 80069bc:	3301      	adds	r3, #1
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d09e      	beq.n	8006906 <_printf_float+0xa2>
 80069c8:	232d      	movs	r3, #45	@ 0x2d
 80069ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ce:	e79a      	b.n	8006906 <_printf_float+0xa2>
 80069d0:	2947      	cmp	r1, #71	@ 0x47
 80069d2:	d1bf      	bne.n	8006954 <_printf_float+0xf0>
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1bd      	bne.n	8006954 <_printf_float+0xf0>
 80069d8:	2301      	movs	r3, #1
 80069da:	e7ba      	b.n	8006952 <_printf_float+0xee>
 80069dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069e0:	d9dc      	bls.n	800699c <_printf_float+0x138>
 80069e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069e6:	d118      	bne.n	8006a1a <_printf_float+0x1b6>
 80069e8:	2900      	cmp	r1, #0
 80069ea:	6863      	ldr	r3, [r4, #4]
 80069ec:	dd0b      	ble.n	8006a06 <_printf_float+0x1a2>
 80069ee:	6121      	str	r1, [r4, #16]
 80069f0:	b913      	cbnz	r3, 80069f8 <_printf_float+0x194>
 80069f2:	6822      	ldr	r2, [r4, #0]
 80069f4:	07d0      	lsls	r0, r2, #31
 80069f6:	d502      	bpl.n	80069fe <_printf_float+0x19a>
 80069f8:	3301      	adds	r3, #1
 80069fa:	440b      	add	r3, r1
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	f04f 0900 	mov.w	r9, #0
 8006a02:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a04:	e7dc      	b.n	80069c0 <_printf_float+0x15c>
 8006a06:	b913      	cbnz	r3, 8006a0e <_printf_float+0x1aa>
 8006a08:	6822      	ldr	r2, [r4, #0]
 8006a0a:	07d2      	lsls	r2, r2, #31
 8006a0c:	d501      	bpl.n	8006a12 <_printf_float+0x1ae>
 8006a0e:	3302      	adds	r3, #2
 8006a10:	e7f4      	b.n	80069fc <_printf_float+0x198>
 8006a12:	2301      	movs	r3, #1
 8006a14:	e7f2      	b.n	80069fc <_printf_float+0x198>
 8006a16:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a1c:	4299      	cmp	r1, r3
 8006a1e:	db05      	blt.n	8006a2c <_printf_float+0x1c8>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	6121      	str	r1, [r4, #16]
 8006a24:	07d8      	lsls	r0, r3, #31
 8006a26:	d5ea      	bpl.n	80069fe <_printf_float+0x19a>
 8006a28:	1c4b      	adds	r3, r1, #1
 8006a2a:	e7e7      	b.n	80069fc <_printf_float+0x198>
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	bfcc      	ite	gt
 8006a30:	2201      	movgt	r2, #1
 8006a32:	f1c1 0202 	rsble	r2, r1, #2
 8006a36:	4413      	add	r3, r2
 8006a38:	e7e0      	b.n	80069fc <_printf_float+0x198>
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	055a      	lsls	r2, r3, #21
 8006a3e:	d407      	bmi.n	8006a50 <_printf_float+0x1ec>
 8006a40:	6923      	ldr	r3, [r4, #16]
 8006a42:	4642      	mov	r2, r8
 8006a44:	4631      	mov	r1, r6
 8006a46:	4628      	mov	r0, r5
 8006a48:	47b8      	blx	r7
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d12b      	bne.n	8006aa6 <_printf_float+0x242>
 8006a4e:	e764      	b.n	800691a <_printf_float+0xb6>
 8006a50:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a54:	f240 80dc 	bls.w	8006c10 <_printf_float+0x3ac>
 8006a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	2300      	movs	r3, #0
 8006a60:	f7f9 ffc4 	bl	80009ec <__aeabi_dcmpeq>
 8006a64:	2800      	cmp	r0, #0
 8006a66:	d033      	beq.n	8006ad0 <_printf_float+0x26c>
 8006a68:	2301      	movs	r3, #1
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	4a35      	ldr	r2, [pc, #212]	@ (8006b44 <_printf_float+0x2e0>)
 8006a70:	47b8      	blx	r7
 8006a72:	3001      	adds	r0, #1
 8006a74:	f43f af51 	beq.w	800691a <_printf_float+0xb6>
 8006a78:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006a7c:	4543      	cmp	r3, r8
 8006a7e:	db02      	blt.n	8006a86 <_printf_float+0x222>
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	07d8      	lsls	r0, r3, #31
 8006a84:	d50f      	bpl.n	8006aa6 <_printf_float+0x242>
 8006a86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f af42 	beq.w	800691a <_printf_float+0xb6>
 8006a96:	f04f 0900 	mov.w	r9, #0
 8006a9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a9e:	f104 0a1a 	add.w	sl, r4, #26
 8006aa2:	45c8      	cmp	r8, r9
 8006aa4:	dc09      	bgt.n	8006aba <_printf_float+0x256>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	079b      	lsls	r3, r3, #30
 8006aaa:	f100 8102 	bmi.w	8006cb2 <_printf_float+0x44e>
 8006aae:	68e0      	ldr	r0, [r4, #12]
 8006ab0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ab2:	4298      	cmp	r0, r3
 8006ab4:	bfb8      	it	lt
 8006ab6:	4618      	movlt	r0, r3
 8006ab8:	e731      	b.n	800691e <_printf_float+0xba>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4652      	mov	r2, sl
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f af28 	beq.w	800691a <_printf_float+0xb6>
 8006aca:	f109 0901 	add.w	r9, r9, #1
 8006ace:	e7e8      	b.n	8006aa2 <_printf_float+0x23e>
 8006ad0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	dc38      	bgt.n	8006b48 <_printf_float+0x2e4>
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	4631      	mov	r1, r6
 8006ada:	4628      	mov	r0, r5
 8006adc:	4a19      	ldr	r2, [pc, #100]	@ (8006b44 <_printf_float+0x2e0>)
 8006ade:	47b8      	blx	r7
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	f43f af1a 	beq.w	800691a <_printf_float+0xb6>
 8006ae6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006aea:	ea59 0303 	orrs.w	r3, r9, r3
 8006aee:	d102      	bne.n	8006af6 <_printf_float+0x292>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	07d9      	lsls	r1, r3, #31
 8006af4:	d5d7      	bpl.n	8006aa6 <_printf_float+0x242>
 8006af6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006afa:	4631      	mov	r1, r6
 8006afc:	4628      	mov	r0, r5
 8006afe:	47b8      	blx	r7
 8006b00:	3001      	adds	r0, #1
 8006b02:	f43f af0a 	beq.w	800691a <_printf_float+0xb6>
 8006b06:	f04f 0a00 	mov.w	sl, #0
 8006b0a:	f104 0b1a 	add.w	fp, r4, #26
 8006b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b10:	425b      	negs	r3, r3
 8006b12:	4553      	cmp	r3, sl
 8006b14:	dc01      	bgt.n	8006b1a <_printf_float+0x2b6>
 8006b16:	464b      	mov	r3, r9
 8006b18:	e793      	b.n	8006a42 <_printf_float+0x1de>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	465a      	mov	r2, fp
 8006b1e:	4631      	mov	r1, r6
 8006b20:	4628      	mov	r0, r5
 8006b22:	47b8      	blx	r7
 8006b24:	3001      	adds	r0, #1
 8006b26:	f43f aef8 	beq.w	800691a <_printf_float+0xb6>
 8006b2a:	f10a 0a01 	add.w	sl, sl, #1
 8006b2e:	e7ee      	b.n	8006b0e <_printf_float+0x2aa>
 8006b30:	7fefffff 	.word	0x7fefffff
 8006b34:	0800c64c 	.word	0x0800c64c
 8006b38:	0800c648 	.word	0x0800c648
 8006b3c:	0800c654 	.word	0x0800c654
 8006b40:	0800c650 	.word	0x0800c650
 8006b44:	0800c658 	.word	0x0800c658
 8006b48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b4a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006b4e:	4553      	cmp	r3, sl
 8006b50:	bfa8      	it	ge
 8006b52:	4653      	movge	r3, sl
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	4699      	mov	r9, r3
 8006b58:	dc36      	bgt.n	8006bc8 <_printf_float+0x364>
 8006b5a:	f04f 0b00 	mov.w	fp, #0
 8006b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b62:	f104 021a 	add.w	r2, r4, #26
 8006b66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b6a:	eba3 0309 	sub.w	r3, r3, r9
 8006b6e:	455b      	cmp	r3, fp
 8006b70:	dc31      	bgt.n	8006bd6 <_printf_float+0x372>
 8006b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b74:	459a      	cmp	sl, r3
 8006b76:	dc3a      	bgt.n	8006bee <_printf_float+0x38a>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	07da      	lsls	r2, r3, #31
 8006b7c:	d437      	bmi.n	8006bee <_printf_float+0x38a>
 8006b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b80:	ebaa 0903 	sub.w	r9, sl, r3
 8006b84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b86:	ebaa 0303 	sub.w	r3, sl, r3
 8006b8a:	4599      	cmp	r9, r3
 8006b8c:	bfa8      	it	ge
 8006b8e:	4699      	movge	r9, r3
 8006b90:	f1b9 0f00 	cmp.w	r9, #0
 8006b94:	dc33      	bgt.n	8006bfe <_printf_float+0x39a>
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b9e:	f104 0b1a 	add.w	fp, r4, #26
 8006ba2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ba4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ba8:	eba3 0309 	sub.w	r3, r3, r9
 8006bac:	4543      	cmp	r3, r8
 8006bae:	f77f af7a 	ble.w	8006aa6 <_printf_float+0x242>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	465a      	mov	r2, fp
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f aeac 	beq.w	800691a <_printf_float+0xb6>
 8006bc2:	f108 0801 	add.w	r8, r8, #1
 8006bc6:	e7ec      	b.n	8006ba2 <_printf_float+0x33e>
 8006bc8:	4642      	mov	r2, r8
 8006bca:	4631      	mov	r1, r6
 8006bcc:	4628      	mov	r0, r5
 8006bce:	47b8      	blx	r7
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d1c2      	bne.n	8006b5a <_printf_float+0x2f6>
 8006bd4:	e6a1      	b.n	800691a <_printf_float+0xb6>
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4628      	mov	r0, r5
 8006bdc:	920a      	str	r2, [sp, #40]	@ 0x28
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	f43f ae9a 	beq.w	800691a <_printf_float+0xb6>
 8006be6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006be8:	f10b 0b01 	add.w	fp, fp, #1
 8006bec:	e7bb      	b.n	8006b66 <_printf_float+0x302>
 8006bee:	4631      	mov	r1, r6
 8006bf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	d1c0      	bne.n	8006b7e <_printf_float+0x31a>
 8006bfc:	e68d      	b.n	800691a <_printf_float+0xb6>
 8006bfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006c00:	464b      	mov	r3, r9
 8006c02:	4631      	mov	r1, r6
 8006c04:	4628      	mov	r0, r5
 8006c06:	4442      	add	r2, r8
 8006c08:	47b8      	blx	r7
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d1c3      	bne.n	8006b96 <_printf_float+0x332>
 8006c0e:	e684      	b.n	800691a <_printf_float+0xb6>
 8006c10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006c14:	f1ba 0f01 	cmp.w	sl, #1
 8006c18:	dc01      	bgt.n	8006c1e <_printf_float+0x3ba>
 8006c1a:	07db      	lsls	r3, r3, #31
 8006c1c:	d536      	bpl.n	8006c8c <_printf_float+0x428>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4642      	mov	r2, r8
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	f43f ae76 	beq.w	800691a <_printf_float+0xb6>
 8006c2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c32:	4631      	mov	r1, r6
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b8      	blx	r7
 8006c38:	3001      	adds	r0, #1
 8006c3a:	f43f ae6e 	beq.w	800691a <_printf_float+0xb6>
 8006c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c42:	2200      	movs	r2, #0
 8006c44:	2300      	movs	r3, #0
 8006c46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c4a:	f7f9 fecf 	bl	80009ec <__aeabi_dcmpeq>
 8006c4e:	b9c0      	cbnz	r0, 8006c82 <_printf_float+0x41e>
 8006c50:	4653      	mov	r3, sl
 8006c52:	f108 0201 	add.w	r2, r8, #1
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	d10c      	bne.n	8006c7a <_printf_float+0x416>
 8006c60:	e65b      	b.n	800691a <_printf_float+0xb6>
 8006c62:	2301      	movs	r3, #1
 8006c64:	465a      	mov	r2, fp
 8006c66:	4631      	mov	r1, r6
 8006c68:	4628      	mov	r0, r5
 8006c6a:	47b8      	blx	r7
 8006c6c:	3001      	adds	r0, #1
 8006c6e:	f43f ae54 	beq.w	800691a <_printf_float+0xb6>
 8006c72:	f108 0801 	add.w	r8, r8, #1
 8006c76:	45d0      	cmp	r8, sl
 8006c78:	dbf3      	blt.n	8006c62 <_printf_float+0x3fe>
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c80:	e6e0      	b.n	8006a44 <_printf_float+0x1e0>
 8006c82:	f04f 0800 	mov.w	r8, #0
 8006c86:	f104 0b1a 	add.w	fp, r4, #26
 8006c8a:	e7f4      	b.n	8006c76 <_printf_float+0x412>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	4642      	mov	r2, r8
 8006c90:	e7e1      	b.n	8006c56 <_printf_float+0x3f2>
 8006c92:	2301      	movs	r3, #1
 8006c94:	464a      	mov	r2, r9
 8006c96:	4631      	mov	r1, r6
 8006c98:	4628      	mov	r0, r5
 8006c9a:	47b8      	blx	r7
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	f43f ae3c 	beq.w	800691a <_printf_float+0xb6>
 8006ca2:	f108 0801 	add.w	r8, r8, #1
 8006ca6:	68e3      	ldr	r3, [r4, #12]
 8006ca8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006caa:	1a5b      	subs	r3, r3, r1
 8006cac:	4543      	cmp	r3, r8
 8006cae:	dcf0      	bgt.n	8006c92 <_printf_float+0x42e>
 8006cb0:	e6fd      	b.n	8006aae <_printf_float+0x24a>
 8006cb2:	f04f 0800 	mov.w	r8, #0
 8006cb6:	f104 0919 	add.w	r9, r4, #25
 8006cba:	e7f4      	b.n	8006ca6 <_printf_float+0x442>

08006cbc <_printf_common>:
 8006cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	4698      	mov	r8, r3
 8006cc4:	688a      	ldr	r2, [r1, #8]
 8006cc6:	690b      	ldr	r3, [r1, #16]
 8006cc8:	4607      	mov	r7, r0
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	bfb8      	it	lt
 8006cce:	4613      	movlt	r3, r2
 8006cd0:	6033      	str	r3, [r6, #0]
 8006cd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cdc:	b10a      	cbz	r2, 8006ce2 <_printf_common+0x26>
 8006cde:	3301      	adds	r3, #1
 8006ce0:	6033      	str	r3, [r6, #0]
 8006ce2:	6823      	ldr	r3, [r4, #0]
 8006ce4:	0699      	lsls	r1, r3, #26
 8006ce6:	bf42      	ittt	mi
 8006ce8:	6833      	ldrmi	r3, [r6, #0]
 8006cea:	3302      	addmi	r3, #2
 8006cec:	6033      	strmi	r3, [r6, #0]
 8006cee:	6825      	ldr	r5, [r4, #0]
 8006cf0:	f015 0506 	ands.w	r5, r5, #6
 8006cf4:	d106      	bne.n	8006d04 <_printf_common+0x48>
 8006cf6:	f104 0a19 	add.w	sl, r4, #25
 8006cfa:	68e3      	ldr	r3, [r4, #12]
 8006cfc:	6832      	ldr	r2, [r6, #0]
 8006cfe:	1a9b      	subs	r3, r3, r2
 8006d00:	42ab      	cmp	r3, r5
 8006d02:	dc2b      	bgt.n	8006d5c <_printf_common+0xa0>
 8006d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	3b00      	subs	r3, #0
 8006d0c:	bf18      	it	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	0692      	lsls	r2, r2, #26
 8006d12:	d430      	bmi.n	8006d76 <_printf_common+0xba>
 8006d14:	4641      	mov	r1, r8
 8006d16:	4638      	mov	r0, r7
 8006d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d1c:	47c8      	blx	r9
 8006d1e:	3001      	adds	r0, #1
 8006d20:	d023      	beq.n	8006d6a <_printf_common+0xae>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	6922      	ldr	r2, [r4, #16]
 8006d26:	f003 0306 	and.w	r3, r3, #6
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	bf14      	ite	ne
 8006d2e:	2500      	movne	r5, #0
 8006d30:	6833      	ldreq	r3, [r6, #0]
 8006d32:	f04f 0600 	mov.w	r6, #0
 8006d36:	bf08      	it	eq
 8006d38:	68e5      	ldreq	r5, [r4, #12]
 8006d3a:	f104 041a 	add.w	r4, r4, #26
 8006d3e:	bf08      	it	eq
 8006d40:	1aed      	subeq	r5, r5, r3
 8006d42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d46:	bf08      	it	eq
 8006d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	bfc4      	itt	gt
 8006d50:	1a9b      	subgt	r3, r3, r2
 8006d52:	18ed      	addgt	r5, r5, r3
 8006d54:	42b5      	cmp	r5, r6
 8006d56:	d11a      	bne.n	8006d8e <_printf_common+0xd2>
 8006d58:	2000      	movs	r0, #0
 8006d5a:	e008      	b.n	8006d6e <_printf_common+0xb2>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	4652      	mov	r2, sl
 8006d60:	4641      	mov	r1, r8
 8006d62:	4638      	mov	r0, r7
 8006d64:	47c8      	blx	r9
 8006d66:	3001      	adds	r0, #1
 8006d68:	d103      	bne.n	8006d72 <_printf_common+0xb6>
 8006d6a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d72:	3501      	adds	r5, #1
 8006d74:	e7c1      	b.n	8006cfa <_printf_common+0x3e>
 8006d76:	2030      	movs	r0, #48	@ 0x30
 8006d78:	18e1      	adds	r1, r4, r3
 8006d7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d84:	4422      	add	r2, r4
 8006d86:	3302      	adds	r3, #2
 8006d88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d8c:	e7c2      	b.n	8006d14 <_printf_common+0x58>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4622      	mov	r2, r4
 8006d92:	4641      	mov	r1, r8
 8006d94:	4638      	mov	r0, r7
 8006d96:	47c8      	blx	r9
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d0e6      	beq.n	8006d6a <_printf_common+0xae>
 8006d9c:	3601      	adds	r6, #1
 8006d9e:	e7d9      	b.n	8006d54 <_printf_common+0x98>

08006da0 <_printf_i>:
 8006da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	7e0f      	ldrb	r7, [r1, #24]
 8006da6:	4691      	mov	r9, r2
 8006da8:	2f78      	cmp	r7, #120	@ 0x78
 8006daa:	4680      	mov	r8, r0
 8006dac:	460c      	mov	r4, r1
 8006dae:	469a      	mov	sl, r3
 8006db0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006db2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006db6:	d807      	bhi.n	8006dc8 <_printf_i+0x28>
 8006db8:	2f62      	cmp	r7, #98	@ 0x62
 8006dba:	d80a      	bhi.n	8006dd2 <_printf_i+0x32>
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	f000 80d1 	beq.w	8006f64 <_printf_i+0x1c4>
 8006dc2:	2f58      	cmp	r7, #88	@ 0x58
 8006dc4:	f000 80b8 	beq.w	8006f38 <_printf_i+0x198>
 8006dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dd0:	e03a      	b.n	8006e48 <_printf_i+0xa8>
 8006dd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dd6:	2b15      	cmp	r3, #21
 8006dd8:	d8f6      	bhi.n	8006dc8 <_printf_i+0x28>
 8006dda:	a101      	add	r1, pc, #4	@ (adr r1, 8006de0 <_printf_i+0x40>)
 8006ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006dc9 	.word	0x08006dc9
 8006dec:	08006dc9 	.word	0x08006dc9
 8006df0:	08006dc9 	.word	0x08006dc9
 8006df4:	08006dc9 	.word	0x08006dc9
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006dc9 	.word	0x08006dc9
 8006e00:	08006dc9 	.word	0x08006dc9
 8006e04:	08006dc9 	.word	0x08006dc9
 8006e08:	08006dc9 	.word	0x08006dc9
 8006e0c:	08006f4b 	.word	0x08006f4b
 8006e10:	08006e77 	.word	0x08006e77
 8006e14:	08006f05 	.word	0x08006f05
 8006e18:	08006dc9 	.word	0x08006dc9
 8006e1c:	08006dc9 	.word	0x08006dc9
 8006e20:	08006f6d 	.word	0x08006f6d
 8006e24:	08006dc9 	.word	0x08006dc9
 8006e28:	08006e77 	.word	0x08006e77
 8006e2c:	08006dc9 	.word	0x08006dc9
 8006e30:	08006dc9 	.word	0x08006dc9
 8006e34:	08006f0d 	.word	0x08006f0d
 8006e38:	6833      	ldr	r3, [r6, #0]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	6032      	str	r2, [r6, #0]
 8006e40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e09c      	b.n	8006f86 <_printf_i+0x1e6>
 8006e4c:	6833      	ldr	r3, [r6, #0]
 8006e4e:	6820      	ldr	r0, [r4, #0]
 8006e50:	1d19      	adds	r1, r3, #4
 8006e52:	6031      	str	r1, [r6, #0]
 8006e54:	0606      	lsls	r6, r0, #24
 8006e56:	d501      	bpl.n	8006e5c <_printf_i+0xbc>
 8006e58:	681d      	ldr	r5, [r3, #0]
 8006e5a:	e003      	b.n	8006e64 <_printf_i+0xc4>
 8006e5c:	0645      	lsls	r5, r0, #25
 8006e5e:	d5fb      	bpl.n	8006e58 <_printf_i+0xb8>
 8006e60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e64:	2d00      	cmp	r5, #0
 8006e66:	da03      	bge.n	8006e70 <_printf_i+0xd0>
 8006e68:	232d      	movs	r3, #45	@ 0x2d
 8006e6a:	426d      	negs	r5, r5
 8006e6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e70:	230a      	movs	r3, #10
 8006e72:	4858      	ldr	r0, [pc, #352]	@ (8006fd4 <_printf_i+0x234>)
 8006e74:	e011      	b.n	8006e9a <_printf_i+0xfa>
 8006e76:	6821      	ldr	r1, [r4, #0]
 8006e78:	6833      	ldr	r3, [r6, #0]
 8006e7a:	0608      	lsls	r0, r1, #24
 8006e7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e80:	d402      	bmi.n	8006e88 <_printf_i+0xe8>
 8006e82:	0649      	lsls	r1, r1, #25
 8006e84:	bf48      	it	mi
 8006e86:	b2ad      	uxthmi	r5, r5
 8006e88:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e8a:	6033      	str	r3, [r6, #0]
 8006e8c:	bf14      	ite	ne
 8006e8e:	230a      	movne	r3, #10
 8006e90:	2308      	moveq	r3, #8
 8006e92:	4850      	ldr	r0, [pc, #320]	@ (8006fd4 <_printf_i+0x234>)
 8006e94:	2100      	movs	r1, #0
 8006e96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e9a:	6866      	ldr	r6, [r4, #4]
 8006e9c:	2e00      	cmp	r6, #0
 8006e9e:	60a6      	str	r6, [r4, #8]
 8006ea0:	db05      	blt.n	8006eae <_printf_i+0x10e>
 8006ea2:	6821      	ldr	r1, [r4, #0]
 8006ea4:	432e      	orrs	r6, r5
 8006ea6:	f021 0104 	bic.w	r1, r1, #4
 8006eaa:	6021      	str	r1, [r4, #0]
 8006eac:	d04b      	beq.n	8006f46 <_printf_i+0x1a6>
 8006eae:	4616      	mov	r6, r2
 8006eb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eb4:	fb03 5711 	mls	r7, r3, r1, r5
 8006eb8:	5dc7      	ldrb	r7, [r0, r7]
 8006eba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ebe:	462f      	mov	r7, r5
 8006ec0:	42bb      	cmp	r3, r7
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	d9f4      	bls.n	8006eb0 <_printf_i+0x110>
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	d10b      	bne.n	8006ee2 <_printf_i+0x142>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	07df      	lsls	r7, r3, #31
 8006ece:	d508      	bpl.n	8006ee2 <_printf_i+0x142>
 8006ed0:	6923      	ldr	r3, [r4, #16]
 8006ed2:	6861      	ldr	r1, [r4, #4]
 8006ed4:	4299      	cmp	r1, r3
 8006ed6:	bfde      	ittt	le
 8006ed8:	2330      	movle	r3, #48	@ 0x30
 8006eda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ede:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ee2:	1b92      	subs	r2, r2, r6
 8006ee4:	6122      	str	r2, [r4, #16]
 8006ee6:	464b      	mov	r3, r9
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f8cd a000 	str.w	sl, [sp]
 8006ef0:	aa03      	add	r2, sp, #12
 8006ef2:	f7ff fee3 	bl	8006cbc <_printf_common>
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	d14a      	bne.n	8006f90 <_printf_i+0x1f0>
 8006efa:	f04f 30ff 	mov.w	r0, #4294967295
 8006efe:	b004      	add	sp, #16
 8006f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	f043 0320 	orr.w	r3, r3, #32
 8006f0a:	6023      	str	r3, [r4, #0]
 8006f0c:	2778      	movs	r7, #120	@ 0x78
 8006f0e:	4832      	ldr	r0, [pc, #200]	@ (8006fd8 <_printf_i+0x238>)
 8006f10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f14:	6823      	ldr	r3, [r4, #0]
 8006f16:	6831      	ldr	r1, [r6, #0]
 8006f18:	061f      	lsls	r7, r3, #24
 8006f1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f1e:	d402      	bmi.n	8006f26 <_printf_i+0x186>
 8006f20:	065f      	lsls	r7, r3, #25
 8006f22:	bf48      	it	mi
 8006f24:	b2ad      	uxthmi	r5, r5
 8006f26:	6031      	str	r1, [r6, #0]
 8006f28:	07d9      	lsls	r1, r3, #31
 8006f2a:	bf44      	itt	mi
 8006f2c:	f043 0320 	orrmi.w	r3, r3, #32
 8006f30:	6023      	strmi	r3, [r4, #0]
 8006f32:	b11d      	cbz	r5, 8006f3c <_printf_i+0x19c>
 8006f34:	2310      	movs	r3, #16
 8006f36:	e7ad      	b.n	8006e94 <_printf_i+0xf4>
 8006f38:	4826      	ldr	r0, [pc, #152]	@ (8006fd4 <_printf_i+0x234>)
 8006f3a:	e7e9      	b.n	8006f10 <_printf_i+0x170>
 8006f3c:	6823      	ldr	r3, [r4, #0]
 8006f3e:	f023 0320 	bic.w	r3, r3, #32
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	e7f6      	b.n	8006f34 <_printf_i+0x194>
 8006f46:	4616      	mov	r6, r2
 8006f48:	e7bd      	b.n	8006ec6 <_printf_i+0x126>
 8006f4a:	6833      	ldr	r3, [r6, #0]
 8006f4c:	6825      	ldr	r5, [r4, #0]
 8006f4e:	1d18      	adds	r0, r3, #4
 8006f50:	6961      	ldr	r1, [r4, #20]
 8006f52:	6030      	str	r0, [r6, #0]
 8006f54:	062e      	lsls	r6, r5, #24
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	d501      	bpl.n	8006f5e <_printf_i+0x1be>
 8006f5a:	6019      	str	r1, [r3, #0]
 8006f5c:	e002      	b.n	8006f64 <_printf_i+0x1c4>
 8006f5e:	0668      	lsls	r0, r5, #25
 8006f60:	d5fb      	bpl.n	8006f5a <_printf_i+0x1ba>
 8006f62:	8019      	strh	r1, [r3, #0]
 8006f64:	2300      	movs	r3, #0
 8006f66:	4616      	mov	r6, r2
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	e7bc      	b.n	8006ee6 <_printf_i+0x146>
 8006f6c:	6833      	ldr	r3, [r6, #0]
 8006f6e:	2100      	movs	r1, #0
 8006f70:	1d1a      	adds	r2, r3, #4
 8006f72:	6032      	str	r2, [r6, #0]
 8006f74:	681e      	ldr	r6, [r3, #0]
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	4630      	mov	r0, r6
 8006f7a:	f000 fce4 	bl	8007946 <memchr>
 8006f7e:	b108      	cbz	r0, 8006f84 <_printf_i+0x1e4>
 8006f80:	1b80      	subs	r0, r0, r6
 8006f82:	6060      	str	r0, [r4, #4]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	6123      	str	r3, [r4, #16]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f8e:	e7aa      	b.n	8006ee6 <_printf_i+0x146>
 8006f90:	4632      	mov	r2, r6
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	47d0      	blx	sl
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d0ad      	beq.n	8006efa <_printf_i+0x15a>
 8006f9e:	6823      	ldr	r3, [r4, #0]
 8006fa0:	079b      	lsls	r3, r3, #30
 8006fa2:	d413      	bmi.n	8006fcc <_printf_i+0x22c>
 8006fa4:	68e0      	ldr	r0, [r4, #12]
 8006fa6:	9b03      	ldr	r3, [sp, #12]
 8006fa8:	4298      	cmp	r0, r3
 8006faa:	bfb8      	it	lt
 8006fac:	4618      	movlt	r0, r3
 8006fae:	e7a6      	b.n	8006efe <_printf_i+0x15e>
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	4632      	mov	r2, r6
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	47d0      	blx	sl
 8006fba:	3001      	adds	r0, #1
 8006fbc:	d09d      	beq.n	8006efa <_printf_i+0x15a>
 8006fbe:	3501      	adds	r5, #1
 8006fc0:	68e3      	ldr	r3, [r4, #12]
 8006fc2:	9903      	ldr	r1, [sp, #12]
 8006fc4:	1a5b      	subs	r3, r3, r1
 8006fc6:	42ab      	cmp	r3, r5
 8006fc8:	dcf2      	bgt.n	8006fb0 <_printf_i+0x210>
 8006fca:	e7eb      	b.n	8006fa4 <_printf_i+0x204>
 8006fcc:	2500      	movs	r5, #0
 8006fce:	f104 0619 	add.w	r6, r4, #25
 8006fd2:	e7f5      	b.n	8006fc0 <_printf_i+0x220>
 8006fd4:	0800c65a 	.word	0x0800c65a
 8006fd8:	0800c66b 	.word	0x0800c66b

08006fdc <_scanf_float>:
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	b087      	sub	sp, #28
 8006fe2:	9303      	str	r3, [sp, #12]
 8006fe4:	688b      	ldr	r3, [r1, #8]
 8006fe6:	4691      	mov	r9, r2
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006fee:	bf82      	ittt	hi
 8006ff0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ff4:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ff8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	f04f 0500 	mov.w	r5, #0
 8007002:	bf88      	it	hi
 8007004:	608b      	strhi	r3, [r1, #8]
 8007006:	680b      	ldr	r3, [r1, #0]
 8007008:	4680      	mov	r8, r0
 800700a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800700e:	f842 3b1c 	str.w	r3, [r2], #28
 8007012:	460c      	mov	r4, r1
 8007014:	bf98      	it	ls
 8007016:	f04f 0b00 	movls.w	fp, #0
 800701a:	4616      	mov	r6, r2
 800701c:	46aa      	mov	sl, r5
 800701e:	462f      	mov	r7, r5
 8007020:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007024:	9201      	str	r2, [sp, #4]
 8007026:	9502      	str	r5, [sp, #8]
 8007028:	68a2      	ldr	r2, [r4, #8]
 800702a:	b15a      	cbz	r2, 8007044 <_scanf_float+0x68>
 800702c:	f8d9 3000 	ldr.w	r3, [r9]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b4e      	cmp	r3, #78	@ 0x4e
 8007034:	d862      	bhi.n	80070fc <_scanf_float+0x120>
 8007036:	2b40      	cmp	r3, #64	@ 0x40
 8007038:	d83a      	bhi.n	80070b0 <_scanf_float+0xd4>
 800703a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800703e:	b2c8      	uxtb	r0, r1
 8007040:	280e      	cmp	r0, #14
 8007042:	d938      	bls.n	80070b6 <_scanf_float+0xda>
 8007044:	b11f      	cbz	r7, 800704e <_scanf_float+0x72>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800704c:	6023      	str	r3, [r4, #0]
 800704e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007052:	f1ba 0f01 	cmp.w	sl, #1
 8007056:	f200 8114 	bhi.w	8007282 <_scanf_float+0x2a6>
 800705a:	9b01      	ldr	r3, [sp, #4]
 800705c:	429e      	cmp	r6, r3
 800705e:	f200 8105 	bhi.w	800726c <_scanf_float+0x290>
 8007062:	2001      	movs	r0, #1
 8007064:	b007      	add	sp, #28
 8007066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800706e:	2a0d      	cmp	r2, #13
 8007070:	d8e8      	bhi.n	8007044 <_scanf_float+0x68>
 8007072:	a101      	add	r1, pc, #4	@ (adr r1, 8007078 <_scanf_float+0x9c>)
 8007074:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007078:	080071c1 	.word	0x080071c1
 800707c:	08007045 	.word	0x08007045
 8007080:	08007045 	.word	0x08007045
 8007084:	08007045 	.word	0x08007045
 8007088:	0800721d 	.word	0x0800721d
 800708c:	080071f7 	.word	0x080071f7
 8007090:	08007045 	.word	0x08007045
 8007094:	08007045 	.word	0x08007045
 8007098:	080071cf 	.word	0x080071cf
 800709c:	08007045 	.word	0x08007045
 80070a0:	08007045 	.word	0x08007045
 80070a4:	08007045 	.word	0x08007045
 80070a8:	08007045 	.word	0x08007045
 80070ac:	0800718b 	.word	0x0800718b
 80070b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80070b4:	e7db      	b.n	800706e <_scanf_float+0x92>
 80070b6:	290e      	cmp	r1, #14
 80070b8:	d8c4      	bhi.n	8007044 <_scanf_float+0x68>
 80070ba:	a001      	add	r0, pc, #4	@ (adr r0, 80070c0 <_scanf_float+0xe4>)
 80070bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80070c0:	0800717b 	.word	0x0800717b
 80070c4:	08007045 	.word	0x08007045
 80070c8:	0800717b 	.word	0x0800717b
 80070cc:	0800720b 	.word	0x0800720b
 80070d0:	08007045 	.word	0x08007045
 80070d4:	0800711d 	.word	0x0800711d
 80070d8:	08007161 	.word	0x08007161
 80070dc:	08007161 	.word	0x08007161
 80070e0:	08007161 	.word	0x08007161
 80070e4:	08007161 	.word	0x08007161
 80070e8:	08007161 	.word	0x08007161
 80070ec:	08007161 	.word	0x08007161
 80070f0:	08007161 	.word	0x08007161
 80070f4:	08007161 	.word	0x08007161
 80070f8:	08007161 	.word	0x08007161
 80070fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80070fe:	d809      	bhi.n	8007114 <_scanf_float+0x138>
 8007100:	2b60      	cmp	r3, #96	@ 0x60
 8007102:	d8b2      	bhi.n	800706a <_scanf_float+0x8e>
 8007104:	2b54      	cmp	r3, #84	@ 0x54
 8007106:	d07b      	beq.n	8007200 <_scanf_float+0x224>
 8007108:	2b59      	cmp	r3, #89	@ 0x59
 800710a:	d19b      	bne.n	8007044 <_scanf_float+0x68>
 800710c:	2d07      	cmp	r5, #7
 800710e:	d199      	bne.n	8007044 <_scanf_float+0x68>
 8007110:	2508      	movs	r5, #8
 8007112:	e02f      	b.n	8007174 <_scanf_float+0x198>
 8007114:	2b74      	cmp	r3, #116	@ 0x74
 8007116:	d073      	beq.n	8007200 <_scanf_float+0x224>
 8007118:	2b79      	cmp	r3, #121	@ 0x79
 800711a:	e7f6      	b.n	800710a <_scanf_float+0x12e>
 800711c:	6821      	ldr	r1, [r4, #0]
 800711e:	05c8      	lsls	r0, r1, #23
 8007120:	d51e      	bpl.n	8007160 <_scanf_float+0x184>
 8007122:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007126:	6021      	str	r1, [r4, #0]
 8007128:	3701      	adds	r7, #1
 800712a:	f1bb 0f00 	cmp.w	fp, #0
 800712e:	d003      	beq.n	8007138 <_scanf_float+0x15c>
 8007130:	3201      	adds	r2, #1
 8007132:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007136:	60a2      	str	r2, [r4, #8]
 8007138:	68a3      	ldr	r3, [r4, #8]
 800713a:	3b01      	subs	r3, #1
 800713c:	60a3      	str	r3, [r4, #8]
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	3301      	adds	r3, #1
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8007148:	3b01      	subs	r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	f8c9 3004 	str.w	r3, [r9, #4]
 8007150:	f340 8083 	ble.w	800725a <_scanf_float+0x27e>
 8007154:	f8d9 3000 	ldr.w	r3, [r9]
 8007158:	3301      	adds	r3, #1
 800715a:	f8c9 3000 	str.w	r3, [r9]
 800715e:	e763      	b.n	8007028 <_scanf_float+0x4c>
 8007160:	eb1a 0105 	adds.w	r1, sl, r5
 8007164:	f47f af6e 	bne.w	8007044 <_scanf_float+0x68>
 8007168:	460d      	mov	r5, r1
 800716a:	468a      	mov	sl, r1
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	f806 3b01 	strb.w	r3, [r6], #1
 8007178:	e7de      	b.n	8007138 <_scanf_float+0x15c>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	0610      	lsls	r0, r2, #24
 800717e:	f57f af61 	bpl.w	8007044 <_scanf_float+0x68>
 8007182:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007186:	6022      	str	r2, [r4, #0]
 8007188:	e7f4      	b.n	8007174 <_scanf_float+0x198>
 800718a:	f1ba 0f00 	cmp.w	sl, #0
 800718e:	d10c      	bne.n	80071aa <_scanf_float+0x1ce>
 8007190:	b977      	cbnz	r7, 80071b0 <_scanf_float+0x1d4>
 8007192:	6822      	ldr	r2, [r4, #0]
 8007194:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007198:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800719c:	d108      	bne.n	80071b0 <_scanf_float+0x1d4>
 800719e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071a2:	f04f 0a01 	mov.w	sl, #1
 80071a6:	6022      	str	r2, [r4, #0]
 80071a8:	e7e4      	b.n	8007174 <_scanf_float+0x198>
 80071aa:	f1ba 0f02 	cmp.w	sl, #2
 80071ae:	d051      	beq.n	8007254 <_scanf_float+0x278>
 80071b0:	2d01      	cmp	r5, #1
 80071b2:	d002      	beq.n	80071ba <_scanf_float+0x1de>
 80071b4:	2d04      	cmp	r5, #4
 80071b6:	f47f af45 	bne.w	8007044 <_scanf_float+0x68>
 80071ba:	3501      	adds	r5, #1
 80071bc:	b2ed      	uxtb	r5, r5
 80071be:	e7d9      	b.n	8007174 <_scanf_float+0x198>
 80071c0:	f1ba 0f01 	cmp.w	sl, #1
 80071c4:	f47f af3e 	bne.w	8007044 <_scanf_float+0x68>
 80071c8:	f04f 0a02 	mov.w	sl, #2
 80071cc:	e7d2      	b.n	8007174 <_scanf_float+0x198>
 80071ce:	b975      	cbnz	r5, 80071ee <_scanf_float+0x212>
 80071d0:	2f00      	cmp	r7, #0
 80071d2:	f47f af38 	bne.w	8007046 <_scanf_float+0x6a>
 80071d6:	6822      	ldr	r2, [r4, #0]
 80071d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071e0:	f040 80ff 	bne.w	80073e2 <_scanf_float+0x406>
 80071e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071e8:	2501      	movs	r5, #1
 80071ea:	6022      	str	r2, [r4, #0]
 80071ec:	e7c2      	b.n	8007174 <_scanf_float+0x198>
 80071ee:	2d03      	cmp	r5, #3
 80071f0:	d0e3      	beq.n	80071ba <_scanf_float+0x1de>
 80071f2:	2d05      	cmp	r5, #5
 80071f4:	e7df      	b.n	80071b6 <_scanf_float+0x1da>
 80071f6:	2d02      	cmp	r5, #2
 80071f8:	f47f af24 	bne.w	8007044 <_scanf_float+0x68>
 80071fc:	2503      	movs	r5, #3
 80071fe:	e7b9      	b.n	8007174 <_scanf_float+0x198>
 8007200:	2d06      	cmp	r5, #6
 8007202:	f47f af1f 	bne.w	8007044 <_scanf_float+0x68>
 8007206:	2507      	movs	r5, #7
 8007208:	e7b4      	b.n	8007174 <_scanf_float+0x198>
 800720a:	6822      	ldr	r2, [r4, #0]
 800720c:	0591      	lsls	r1, r2, #22
 800720e:	f57f af19 	bpl.w	8007044 <_scanf_float+0x68>
 8007212:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007216:	6022      	str	r2, [r4, #0]
 8007218:	9702      	str	r7, [sp, #8]
 800721a:	e7ab      	b.n	8007174 <_scanf_float+0x198>
 800721c:	6822      	ldr	r2, [r4, #0]
 800721e:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007222:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007226:	d005      	beq.n	8007234 <_scanf_float+0x258>
 8007228:	0550      	lsls	r0, r2, #21
 800722a:	f57f af0b 	bpl.w	8007044 <_scanf_float+0x68>
 800722e:	2f00      	cmp	r7, #0
 8007230:	f000 80d7 	beq.w	80073e2 <_scanf_float+0x406>
 8007234:	0591      	lsls	r1, r2, #22
 8007236:	bf58      	it	pl
 8007238:	9902      	ldrpl	r1, [sp, #8]
 800723a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800723e:	bf58      	it	pl
 8007240:	1a79      	subpl	r1, r7, r1
 8007242:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007246:	f04f 0700 	mov.w	r7, #0
 800724a:	bf58      	it	pl
 800724c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007250:	6022      	str	r2, [r4, #0]
 8007252:	e78f      	b.n	8007174 <_scanf_float+0x198>
 8007254:	f04f 0a03 	mov.w	sl, #3
 8007258:	e78c      	b.n	8007174 <_scanf_float+0x198>
 800725a:	4649      	mov	r1, r9
 800725c:	4640      	mov	r0, r8
 800725e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007262:	4798      	blx	r3
 8007264:	2800      	cmp	r0, #0
 8007266:	f43f aedf 	beq.w	8007028 <_scanf_float+0x4c>
 800726a:	e6eb      	b.n	8007044 <_scanf_float+0x68>
 800726c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007270:	464a      	mov	r2, r9
 8007272:	4640      	mov	r0, r8
 8007274:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007278:	4798      	blx	r3
 800727a:	6923      	ldr	r3, [r4, #16]
 800727c:	3b01      	subs	r3, #1
 800727e:	6123      	str	r3, [r4, #16]
 8007280:	e6eb      	b.n	800705a <_scanf_float+0x7e>
 8007282:	1e6b      	subs	r3, r5, #1
 8007284:	2b06      	cmp	r3, #6
 8007286:	d824      	bhi.n	80072d2 <_scanf_float+0x2f6>
 8007288:	2d02      	cmp	r5, #2
 800728a:	d836      	bhi.n	80072fa <_scanf_float+0x31e>
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	429e      	cmp	r6, r3
 8007290:	f67f aee7 	bls.w	8007062 <_scanf_float+0x86>
 8007294:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007298:	464a      	mov	r2, r9
 800729a:	4640      	mov	r0, r8
 800729c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072a0:	4798      	blx	r3
 80072a2:	6923      	ldr	r3, [r4, #16]
 80072a4:	3b01      	subs	r3, #1
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	e7f0      	b.n	800728c <_scanf_float+0x2b0>
 80072aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072ae:	464a      	mov	r2, r9
 80072b0:	4640      	mov	r0, r8
 80072b2:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80072b6:	4798      	blx	r3
 80072b8:	6923      	ldr	r3, [r4, #16]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	6123      	str	r3, [r4, #16]
 80072be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80072c2:	fa5f fa8a 	uxtb.w	sl, sl
 80072c6:	f1ba 0f02 	cmp.w	sl, #2
 80072ca:	d1ee      	bne.n	80072aa <_scanf_float+0x2ce>
 80072cc:	3d03      	subs	r5, #3
 80072ce:	b2ed      	uxtb	r5, r5
 80072d0:	1b76      	subs	r6, r6, r5
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	05da      	lsls	r2, r3, #23
 80072d6:	d530      	bpl.n	800733a <_scanf_float+0x35e>
 80072d8:	055b      	lsls	r3, r3, #21
 80072da:	d511      	bpl.n	8007300 <_scanf_float+0x324>
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	429e      	cmp	r6, r3
 80072e0:	f67f aebf 	bls.w	8007062 <_scanf_float+0x86>
 80072e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072e8:	464a      	mov	r2, r9
 80072ea:	4640      	mov	r0, r8
 80072ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072f0:	4798      	blx	r3
 80072f2:	6923      	ldr	r3, [r4, #16]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	6123      	str	r3, [r4, #16]
 80072f8:	e7f0      	b.n	80072dc <_scanf_float+0x300>
 80072fa:	46aa      	mov	sl, r5
 80072fc:	46b3      	mov	fp, r6
 80072fe:	e7de      	b.n	80072be <_scanf_float+0x2e2>
 8007300:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007304:	6923      	ldr	r3, [r4, #16]
 8007306:	2965      	cmp	r1, #101	@ 0x65
 8007308:	f103 33ff 	add.w	r3, r3, #4294967295
 800730c:	f106 35ff 	add.w	r5, r6, #4294967295
 8007310:	6123      	str	r3, [r4, #16]
 8007312:	d00c      	beq.n	800732e <_scanf_float+0x352>
 8007314:	2945      	cmp	r1, #69	@ 0x45
 8007316:	d00a      	beq.n	800732e <_scanf_float+0x352>
 8007318:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800731c:	464a      	mov	r2, r9
 800731e:	4640      	mov	r0, r8
 8007320:	4798      	blx	r3
 8007322:	6923      	ldr	r3, [r4, #16]
 8007324:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007328:	3b01      	subs	r3, #1
 800732a:	1eb5      	subs	r5, r6, #2
 800732c:	6123      	str	r3, [r4, #16]
 800732e:	464a      	mov	r2, r9
 8007330:	4640      	mov	r0, r8
 8007332:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007336:	4798      	blx	r3
 8007338:	462e      	mov	r6, r5
 800733a:	6822      	ldr	r2, [r4, #0]
 800733c:	f012 0210 	ands.w	r2, r2, #16
 8007340:	d001      	beq.n	8007346 <_scanf_float+0x36a>
 8007342:	2000      	movs	r0, #0
 8007344:	e68e      	b.n	8007064 <_scanf_float+0x88>
 8007346:	7032      	strb	r2, [r6, #0]
 8007348:	6823      	ldr	r3, [r4, #0]
 800734a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800734e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007352:	d125      	bne.n	80073a0 <_scanf_float+0x3c4>
 8007354:	9b02      	ldr	r3, [sp, #8]
 8007356:	429f      	cmp	r7, r3
 8007358:	d00a      	beq.n	8007370 <_scanf_float+0x394>
 800735a:	1bda      	subs	r2, r3, r7
 800735c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007360:	429e      	cmp	r6, r3
 8007362:	bf28      	it	cs
 8007364:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007368:	4630      	mov	r0, r6
 800736a:	491f      	ldr	r1, [pc, #124]	@ (80073e8 <_scanf_float+0x40c>)
 800736c:	f000 f972 	bl	8007654 <siprintf>
 8007370:	2200      	movs	r2, #0
 8007372:	4640      	mov	r0, r8
 8007374:	9901      	ldr	r1, [sp, #4]
 8007376:	f002 fcfb 	bl	8009d70 <_strtod_r>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	6825      	ldr	r5, [r4, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f015 0f02 	tst.w	r5, #2
 8007384:	4606      	mov	r6, r0
 8007386:	460f      	mov	r7, r1
 8007388:	f103 0204 	add.w	r2, r3, #4
 800738c:	d015      	beq.n	80073ba <_scanf_float+0x3de>
 800738e:	9903      	ldr	r1, [sp, #12]
 8007390:	600a      	str	r2, [r1, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	e9c3 6700 	strd	r6, r7, [r3]
 8007398:	68e3      	ldr	r3, [r4, #12]
 800739a:	3301      	adds	r3, #1
 800739c:	60e3      	str	r3, [r4, #12]
 800739e:	e7d0      	b.n	8007342 <_scanf_float+0x366>
 80073a0:	9b04      	ldr	r3, [sp, #16]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0e4      	beq.n	8007370 <_scanf_float+0x394>
 80073a6:	9905      	ldr	r1, [sp, #20]
 80073a8:	230a      	movs	r3, #10
 80073aa:	4640      	mov	r0, r8
 80073ac:	3101      	adds	r1, #1
 80073ae:	f002 fd5f 	bl	8009e70 <_strtol_r>
 80073b2:	9b04      	ldr	r3, [sp, #16]
 80073b4:	9e05      	ldr	r6, [sp, #20]
 80073b6:	1ac2      	subs	r2, r0, r3
 80073b8:	e7d0      	b.n	800735c <_scanf_float+0x380>
 80073ba:	076d      	lsls	r5, r5, #29
 80073bc:	d4e7      	bmi.n	800738e <_scanf_float+0x3b2>
 80073be:	9d03      	ldr	r5, [sp, #12]
 80073c0:	602a      	str	r2, [r5, #0]
 80073c2:	681d      	ldr	r5, [r3, #0]
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	f7f9 fb42 	bl	8000a50 <__aeabi_dcmpun>
 80073cc:	b120      	cbz	r0, 80073d8 <_scanf_float+0x3fc>
 80073ce:	4807      	ldr	r0, [pc, #28]	@ (80073ec <_scanf_float+0x410>)
 80073d0:	f000 fad6 	bl	8007980 <nanf>
 80073d4:	6028      	str	r0, [r5, #0]
 80073d6:	e7df      	b.n	8007398 <_scanf_float+0x3bc>
 80073d8:	4630      	mov	r0, r6
 80073da:	4639      	mov	r1, r7
 80073dc:	f7f9 fb96 	bl	8000b0c <__aeabi_d2f>
 80073e0:	e7f8      	b.n	80073d4 <_scanf_float+0x3f8>
 80073e2:	2700      	movs	r7, #0
 80073e4:	e633      	b.n	800704e <_scanf_float+0x72>
 80073e6:	bf00      	nop
 80073e8:	0800c67c 	.word	0x0800c67c
 80073ec:	0800c7bd 	.word	0x0800c7bd

080073f0 <std>:
 80073f0:	2300      	movs	r3, #0
 80073f2:	b510      	push	{r4, lr}
 80073f4:	4604      	mov	r4, r0
 80073f6:	e9c0 3300 	strd	r3, r3, [r0]
 80073fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073fe:	6083      	str	r3, [r0, #8]
 8007400:	8181      	strh	r1, [r0, #12]
 8007402:	6643      	str	r3, [r0, #100]	@ 0x64
 8007404:	81c2      	strh	r2, [r0, #14]
 8007406:	6183      	str	r3, [r0, #24]
 8007408:	4619      	mov	r1, r3
 800740a:	2208      	movs	r2, #8
 800740c:	305c      	adds	r0, #92	@ 0x5c
 800740e:	f000 fa1b 	bl	8007848 <memset>
 8007412:	4b0d      	ldr	r3, [pc, #52]	@ (8007448 <std+0x58>)
 8007414:	6224      	str	r4, [r4, #32]
 8007416:	6263      	str	r3, [r4, #36]	@ 0x24
 8007418:	4b0c      	ldr	r3, [pc, #48]	@ (800744c <std+0x5c>)
 800741a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800741c:	4b0c      	ldr	r3, [pc, #48]	@ (8007450 <std+0x60>)
 800741e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007420:	4b0c      	ldr	r3, [pc, #48]	@ (8007454 <std+0x64>)
 8007422:	6323      	str	r3, [r4, #48]	@ 0x30
 8007424:	4b0c      	ldr	r3, [pc, #48]	@ (8007458 <std+0x68>)
 8007426:	429c      	cmp	r4, r3
 8007428:	d006      	beq.n	8007438 <std+0x48>
 800742a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800742e:	4294      	cmp	r4, r2
 8007430:	d002      	beq.n	8007438 <std+0x48>
 8007432:	33d0      	adds	r3, #208	@ 0xd0
 8007434:	429c      	cmp	r4, r3
 8007436:	d105      	bne.n	8007444 <std+0x54>
 8007438:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800743c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007440:	f000 ba7e 	b.w	8007940 <__retarget_lock_init_recursive>
 8007444:	bd10      	pop	{r4, pc}
 8007446:	bf00      	nop
 8007448:	08007699 	.word	0x08007699
 800744c:	080076bb 	.word	0x080076bb
 8007450:	080076f3 	.word	0x080076f3
 8007454:	08007717 	.word	0x08007717
 8007458:	2000113c 	.word	0x2000113c

0800745c <stdio_exit_handler>:
 800745c:	4a02      	ldr	r2, [pc, #8]	@ (8007468 <stdio_exit_handler+0xc>)
 800745e:	4903      	ldr	r1, [pc, #12]	@ (800746c <stdio_exit_handler+0x10>)
 8007460:	4803      	ldr	r0, [pc, #12]	@ (8007470 <stdio_exit_handler+0x14>)
 8007462:	f000 b869 	b.w	8007538 <_fwalk_sglue>
 8007466:	bf00      	nop
 8007468:	20000024 	.word	0x20000024
 800746c:	0800a4a5 	.word	0x0800a4a5
 8007470:	20000034 	.word	0x20000034

08007474 <cleanup_stdio>:
 8007474:	6841      	ldr	r1, [r0, #4]
 8007476:	4b0c      	ldr	r3, [pc, #48]	@ (80074a8 <cleanup_stdio+0x34>)
 8007478:	b510      	push	{r4, lr}
 800747a:	4299      	cmp	r1, r3
 800747c:	4604      	mov	r4, r0
 800747e:	d001      	beq.n	8007484 <cleanup_stdio+0x10>
 8007480:	f003 f810 	bl	800a4a4 <_fflush_r>
 8007484:	68a1      	ldr	r1, [r4, #8]
 8007486:	4b09      	ldr	r3, [pc, #36]	@ (80074ac <cleanup_stdio+0x38>)
 8007488:	4299      	cmp	r1, r3
 800748a:	d002      	beq.n	8007492 <cleanup_stdio+0x1e>
 800748c:	4620      	mov	r0, r4
 800748e:	f003 f809 	bl	800a4a4 <_fflush_r>
 8007492:	68e1      	ldr	r1, [r4, #12]
 8007494:	4b06      	ldr	r3, [pc, #24]	@ (80074b0 <cleanup_stdio+0x3c>)
 8007496:	4299      	cmp	r1, r3
 8007498:	d004      	beq.n	80074a4 <cleanup_stdio+0x30>
 800749a:	4620      	mov	r0, r4
 800749c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a0:	f003 b800 	b.w	800a4a4 <_fflush_r>
 80074a4:	bd10      	pop	{r4, pc}
 80074a6:	bf00      	nop
 80074a8:	2000113c 	.word	0x2000113c
 80074ac:	200011a4 	.word	0x200011a4
 80074b0:	2000120c 	.word	0x2000120c

080074b4 <global_stdio_init.part.0>:
 80074b4:	b510      	push	{r4, lr}
 80074b6:	4b0b      	ldr	r3, [pc, #44]	@ (80074e4 <global_stdio_init.part.0+0x30>)
 80074b8:	4c0b      	ldr	r4, [pc, #44]	@ (80074e8 <global_stdio_init.part.0+0x34>)
 80074ba:	4a0c      	ldr	r2, [pc, #48]	@ (80074ec <global_stdio_init.part.0+0x38>)
 80074bc:	4620      	mov	r0, r4
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	2104      	movs	r1, #4
 80074c2:	2200      	movs	r2, #0
 80074c4:	f7ff ff94 	bl	80073f0 <std>
 80074c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80074cc:	2201      	movs	r2, #1
 80074ce:	2109      	movs	r1, #9
 80074d0:	f7ff ff8e 	bl	80073f0 <std>
 80074d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80074d8:	2202      	movs	r2, #2
 80074da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074de:	2112      	movs	r1, #18
 80074e0:	f7ff bf86 	b.w	80073f0 <std>
 80074e4:	20001274 	.word	0x20001274
 80074e8:	2000113c 	.word	0x2000113c
 80074ec:	0800745d 	.word	0x0800745d

080074f0 <__sfp_lock_acquire>:
 80074f0:	4801      	ldr	r0, [pc, #4]	@ (80074f8 <__sfp_lock_acquire+0x8>)
 80074f2:	f000 ba26 	b.w	8007942 <__retarget_lock_acquire_recursive>
 80074f6:	bf00      	nop
 80074f8:	2000127d 	.word	0x2000127d

080074fc <__sfp_lock_release>:
 80074fc:	4801      	ldr	r0, [pc, #4]	@ (8007504 <__sfp_lock_release+0x8>)
 80074fe:	f000 ba21 	b.w	8007944 <__retarget_lock_release_recursive>
 8007502:	bf00      	nop
 8007504:	2000127d 	.word	0x2000127d

08007508 <__sinit>:
 8007508:	b510      	push	{r4, lr}
 800750a:	4604      	mov	r4, r0
 800750c:	f7ff fff0 	bl	80074f0 <__sfp_lock_acquire>
 8007510:	6a23      	ldr	r3, [r4, #32]
 8007512:	b11b      	cbz	r3, 800751c <__sinit+0x14>
 8007514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007518:	f7ff bff0 	b.w	80074fc <__sfp_lock_release>
 800751c:	4b04      	ldr	r3, [pc, #16]	@ (8007530 <__sinit+0x28>)
 800751e:	6223      	str	r3, [r4, #32]
 8007520:	4b04      	ldr	r3, [pc, #16]	@ (8007534 <__sinit+0x2c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1f5      	bne.n	8007514 <__sinit+0xc>
 8007528:	f7ff ffc4 	bl	80074b4 <global_stdio_init.part.0>
 800752c:	e7f2      	b.n	8007514 <__sinit+0xc>
 800752e:	bf00      	nop
 8007530:	08007475 	.word	0x08007475
 8007534:	20001274 	.word	0x20001274

08007538 <_fwalk_sglue>:
 8007538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800753c:	4607      	mov	r7, r0
 800753e:	4688      	mov	r8, r1
 8007540:	4614      	mov	r4, r2
 8007542:	2600      	movs	r6, #0
 8007544:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007548:	f1b9 0901 	subs.w	r9, r9, #1
 800754c:	d505      	bpl.n	800755a <_fwalk_sglue+0x22>
 800754e:	6824      	ldr	r4, [r4, #0]
 8007550:	2c00      	cmp	r4, #0
 8007552:	d1f7      	bne.n	8007544 <_fwalk_sglue+0xc>
 8007554:	4630      	mov	r0, r6
 8007556:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800755a:	89ab      	ldrh	r3, [r5, #12]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d907      	bls.n	8007570 <_fwalk_sglue+0x38>
 8007560:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007564:	3301      	adds	r3, #1
 8007566:	d003      	beq.n	8007570 <_fwalk_sglue+0x38>
 8007568:	4629      	mov	r1, r5
 800756a:	4638      	mov	r0, r7
 800756c:	47c0      	blx	r8
 800756e:	4306      	orrs	r6, r0
 8007570:	3568      	adds	r5, #104	@ 0x68
 8007572:	e7e9      	b.n	8007548 <_fwalk_sglue+0x10>

08007574 <iprintf>:
 8007574:	b40f      	push	{r0, r1, r2, r3}
 8007576:	b507      	push	{r0, r1, r2, lr}
 8007578:	4906      	ldr	r1, [pc, #24]	@ (8007594 <iprintf+0x20>)
 800757a:	ab04      	add	r3, sp, #16
 800757c:	6808      	ldr	r0, [r1, #0]
 800757e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007582:	6881      	ldr	r1, [r0, #8]
 8007584:	9301      	str	r3, [sp, #4]
 8007586:	f002 fdf5 	bl	800a174 <_vfiprintf_r>
 800758a:	b003      	add	sp, #12
 800758c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007590:	b004      	add	sp, #16
 8007592:	4770      	bx	lr
 8007594:	20000030 	.word	0x20000030

08007598 <_puts_r>:
 8007598:	6a03      	ldr	r3, [r0, #32]
 800759a:	b570      	push	{r4, r5, r6, lr}
 800759c:	4605      	mov	r5, r0
 800759e:	460e      	mov	r6, r1
 80075a0:	6884      	ldr	r4, [r0, #8]
 80075a2:	b90b      	cbnz	r3, 80075a8 <_puts_r+0x10>
 80075a4:	f7ff ffb0 	bl	8007508 <__sinit>
 80075a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075aa:	07db      	lsls	r3, r3, #31
 80075ac:	d405      	bmi.n	80075ba <_puts_r+0x22>
 80075ae:	89a3      	ldrh	r3, [r4, #12]
 80075b0:	0598      	lsls	r0, r3, #22
 80075b2:	d402      	bmi.n	80075ba <_puts_r+0x22>
 80075b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075b6:	f000 f9c4 	bl	8007942 <__retarget_lock_acquire_recursive>
 80075ba:	89a3      	ldrh	r3, [r4, #12]
 80075bc:	0719      	lsls	r1, r3, #28
 80075be:	d502      	bpl.n	80075c6 <_puts_r+0x2e>
 80075c0:	6923      	ldr	r3, [r4, #16]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d135      	bne.n	8007632 <_puts_r+0x9a>
 80075c6:	4621      	mov	r1, r4
 80075c8:	4628      	mov	r0, r5
 80075ca:	f000 f8e7 	bl	800779c <__swsetup_r>
 80075ce:	b380      	cbz	r0, 8007632 <_puts_r+0x9a>
 80075d0:	f04f 35ff 	mov.w	r5, #4294967295
 80075d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80075d6:	07da      	lsls	r2, r3, #31
 80075d8:	d405      	bmi.n	80075e6 <_puts_r+0x4e>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	059b      	lsls	r3, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_puts_r+0x4e>
 80075e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075e2:	f000 f9af 	bl	8007944 <__retarget_lock_release_recursive>
 80075e6:	4628      	mov	r0, r5
 80075e8:	bd70      	pop	{r4, r5, r6, pc}
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	da04      	bge.n	80075f8 <_puts_r+0x60>
 80075ee:	69a2      	ldr	r2, [r4, #24]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dc17      	bgt.n	8007624 <_puts_r+0x8c>
 80075f4:	290a      	cmp	r1, #10
 80075f6:	d015      	beq.n	8007624 <_puts_r+0x8c>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	1c5a      	adds	r2, r3, #1
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	7019      	strb	r1, [r3, #0]
 8007600:	68a3      	ldr	r3, [r4, #8]
 8007602:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007606:	3b01      	subs	r3, #1
 8007608:	60a3      	str	r3, [r4, #8]
 800760a:	2900      	cmp	r1, #0
 800760c:	d1ed      	bne.n	80075ea <_puts_r+0x52>
 800760e:	2b00      	cmp	r3, #0
 8007610:	da11      	bge.n	8007636 <_puts_r+0x9e>
 8007612:	4622      	mov	r2, r4
 8007614:	210a      	movs	r1, #10
 8007616:	4628      	mov	r0, r5
 8007618:	f000 f881 	bl	800771e <__swbuf_r>
 800761c:	3001      	adds	r0, #1
 800761e:	d0d7      	beq.n	80075d0 <_puts_r+0x38>
 8007620:	250a      	movs	r5, #10
 8007622:	e7d7      	b.n	80075d4 <_puts_r+0x3c>
 8007624:	4622      	mov	r2, r4
 8007626:	4628      	mov	r0, r5
 8007628:	f000 f879 	bl	800771e <__swbuf_r>
 800762c:	3001      	adds	r0, #1
 800762e:	d1e7      	bne.n	8007600 <_puts_r+0x68>
 8007630:	e7ce      	b.n	80075d0 <_puts_r+0x38>
 8007632:	3e01      	subs	r6, #1
 8007634:	e7e4      	b.n	8007600 <_puts_r+0x68>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	6022      	str	r2, [r4, #0]
 800763c:	220a      	movs	r2, #10
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e7ee      	b.n	8007620 <_puts_r+0x88>
	...

08007644 <puts>:
 8007644:	4b02      	ldr	r3, [pc, #8]	@ (8007650 <puts+0xc>)
 8007646:	4601      	mov	r1, r0
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	f7ff bfa5 	b.w	8007598 <_puts_r>
 800764e:	bf00      	nop
 8007650:	20000030 	.word	0x20000030

08007654 <siprintf>:
 8007654:	b40e      	push	{r1, r2, r3}
 8007656:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800765a:	b510      	push	{r4, lr}
 800765c:	2400      	movs	r4, #0
 800765e:	b09d      	sub	sp, #116	@ 0x74
 8007660:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007662:	9002      	str	r0, [sp, #8]
 8007664:	9006      	str	r0, [sp, #24]
 8007666:	9107      	str	r1, [sp, #28]
 8007668:	9104      	str	r1, [sp, #16]
 800766a:	4809      	ldr	r0, [pc, #36]	@ (8007690 <siprintf+0x3c>)
 800766c:	4909      	ldr	r1, [pc, #36]	@ (8007694 <siprintf+0x40>)
 800766e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007672:	9105      	str	r1, [sp, #20]
 8007674:	6800      	ldr	r0, [r0, #0]
 8007676:	a902      	add	r1, sp, #8
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800767c:	f002 fc56 	bl	8009f2c <_svfiprintf_r>
 8007680:	9b02      	ldr	r3, [sp, #8]
 8007682:	701c      	strb	r4, [r3, #0]
 8007684:	b01d      	add	sp, #116	@ 0x74
 8007686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768a:	b003      	add	sp, #12
 800768c:	4770      	bx	lr
 800768e:	bf00      	nop
 8007690:	20000030 	.word	0x20000030
 8007694:	ffff0208 	.word	0xffff0208

08007698 <__sread>:
 8007698:	b510      	push	{r4, lr}
 800769a:	460c      	mov	r4, r1
 800769c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a0:	f000 f900 	bl	80078a4 <_read_r>
 80076a4:	2800      	cmp	r0, #0
 80076a6:	bfab      	itete	ge
 80076a8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80076aa:	89a3      	ldrhlt	r3, [r4, #12]
 80076ac:	181b      	addge	r3, r3, r0
 80076ae:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80076b2:	bfac      	ite	ge
 80076b4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80076b6:	81a3      	strhlt	r3, [r4, #12]
 80076b8:	bd10      	pop	{r4, pc}

080076ba <__swrite>:
 80076ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076be:	461f      	mov	r7, r3
 80076c0:	898b      	ldrh	r3, [r1, #12]
 80076c2:	4605      	mov	r5, r0
 80076c4:	05db      	lsls	r3, r3, #23
 80076c6:	460c      	mov	r4, r1
 80076c8:	4616      	mov	r6, r2
 80076ca:	d505      	bpl.n	80076d8 <__swrite+0x1e>
 80076cc:	2302      	movs	r3, #2
 80076ce:	2200      	movs	r2, #0
 80076d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d4:	f000 f8d4 	bl	8007880 <_lseek_r>
 80076d8:	89a3      	ldrh	r3, [r4, #12]
 80076da:	4632      	mov	r2, r6
 80076dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076e0:	81a3      	strh	r3, [r4, #12]
 80076e2:	4628      	mov	r0, r5
 80076e4:	463b      	mov	r3, r7
 80076e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ee:	f000 b8eb 	b.w	80078c8 <_write_r>

080076f2 <__sseek>:
 80076f2:	b510      	push	{r4, lr}
 80076f4:	460c      	mov	r4, r1
 80076f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fa:	f000 f8c1 	bl	8007880 <_lseek_r>
 80076fe:	1c43      	adds	r3, r0, #1
 8007700:	89a3      	ldrh	r3, [r4, #12]
 8007702:	bf15      	itete	ne
 8007704:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007706:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800770a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800770e:	81a3      	strheq	r3, [r4, #12]
 8007710:	bf18      	it	ne
 8007712:	81a3      	strhne	r3, [r4, #12]
 8007714:	bd10      	pop	{r4, pc}

08007716 <__sclose>:
 8007716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771a:	f000 b8a1 	b.w	8007860 <_close_r>

0800771e <__swbuf_r>:
 800771e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007720:	460e      	mov	r6, r1
 8007722:	4614      	mov	r4, r2
 8007724:	4605      	mov	r5, r0
 8007726:	b118      	cbz	r0, 8007730 <__swbuf_r+0x12>
 8007728:	6a03      	ldr	r3, [r0, #32]
 800772a:	b90b      	cbnz	r3, 8007730 <__swbuf_r+0x12>
 800772c:	f7ff feec 	bl	8007508 <__sinit>
 8007730:	69a3      	ldr	r3, [r4, #24]
 8007732:	60a3      	str	r3, [r4, #8]
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	071a      	lsls	r2, r3, #28
 8007738:	d501      	bpl.n	800773e <__swbuf_r+0x20>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	b943      	cbnz	r3, 8007750 <__swbuf_r+0x32>
 800773e:	4621      	mov	r1, r4
 8007740:	4628      	mov	r0, r5
 8007742:	f000 f82b 	bl	800779c <__swsetup_r>
 8007746:	b118      	cbz	r0, 8007750 <__swbuf_r+0x32>
 8007748:	f04f 37ff 	mov.w	r7, #4294967295
 800774c:	4638      	mov	r0, r7
 800774e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	6922      	ldr	r2, [r4, #16]
 8007754:	b2f6      	uxtb	r6, r6
 8007756:	1a98      	subs	r0, r3, r2
 8007758:	6963      	ldr	r3, [r4, #20]
 800775a:	4637      	mov	r7, r6
 800775c:	4283      	cmp	r3, r0
 800775e:	dc05      	bgt.n	800776c <__swbuf_r+0x4e>
 8007760:	4621      	mov	r1, r4
 8007762:	4628      	mov	r0, r5
 8007764:	f002 fe9e 	bl	800a4a4 <_fflush_r>
 8007768:	2800      	cmp	r0, #0
 800776a:	d1ed      	bne.n	8007748 <__swbuf_r+0x2a>
 800776c:	68a3      	ldr	r3, [r4, #8]
 800776e:	3b01      	subs	r3, #1
 8007770:	60a3      	str	r3, [r4, #8]
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	6022      	str	r2, [r4, #0]
 8007778:	701e      	strb	r6, [r3, #0]
 800777a:	6962      	ldr	r2, [r4, #20]
 800777c:	1c43      	adds	r3, r0, #1
 800777e:	429a      	cmp	r2, r3
 8007780:	d004      	beq.n	800778c <__swbuf_r+0x6e>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	07db      	lsls	r3, r3, #31
 8007786:	d5e1      	bpl.n	800774c <__swbuf_r+0x2e>
 8007788:	2e0a      	cmp	r6, #10
 800778a:	d1df      	bne.n	800774c <__swbuf_r+0x2e>
 800778c:	4621      	mov	r1, r4
 800778e:	4628      	mov	r0, r5
 8007790:	f002 fe88 	bl	800a4a4 <_fflush_r>
 8007794:	2800      	cmp	r0, #0
 8007796:	d0d9      	beq.n	800774c <__swbuf_r+0x2e>
 8007798:	e7d6      	b.n	8007748 <__swbuf_r+0x2a>
	...

0800779c <__swsetup_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4b29      	ldr	r3, [pc, #164]	@ (8007844 <__swsetup_r+0xa8>)
 80077a0:	4605      	mov	r5, r0
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	460c      	mov	r4, r1
 80077a6:	b118      	cbz	r0, 80077b0 <__swsetup_r+0x14>
 80077a8:	6a03      	ldr	r3, [r0, #32]
 80077aa:	b90b      	cbnz	r3, 80077b0 <__swsetup_r+0x14>
 80077ac:	f7ff feac 	bl	8007508 <__sinit>
 80077b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077b4:	0719      	lsls	r1, r3, #28
 80077b6:	d422      	bmi.n	80077fe <__swsetup_r+0x62>
 80077b8:	06da      	lsls	r2, r3, #27
 80077ba:	d407      	bmi.n	80077cc <__swsetup_r+0x30>
 80077bc:	2209      	movs	r2, #9
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077c4:	f04f 30ff 	mov.w	r0, #4294967295
 80077c8:	81a3      	strh	r3, [r4, #12]
 80077ca:	e033      	b.n	8007834 <__swsetup_r+0x98>
 80077cc:	0758      	lsls	r0, r3, #29
 80077ce:	d512      	bpl.n	80077f6 <__swsetup_r+0x5a>
 80077d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80077d2:	b141      	cbz	r1, 80077e6 <__swsetup_r+0x4a>
 80077d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077d8:	4299      	cmp	r1, r3
 80077da:	d002      	beq.n	80077e2 <__swsetup_r+0x46>
 80077dc:	4628      	mov	r0, r5
 80077de:	f000 ff2f 	bl	8008640 <_free_r>
 80077e2:	2300      	movs	r3, #0
 80077e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80077e6:	89a3      	ldrh	r3, [r4, #12]
 80077e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	2300      	movs	r3, #0
 80077f0:	6063      	str	r3, [r4, #4]
 80077f2:	6923      	ldr	r3, [r4, #16]
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	89a3      	ldrh	r3, [r4, #12]
 80077f8:	f043 0308 	orr.w	r3, r3, #8
 80077fc:	81a3      	strh	r3, [r4, #12]
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	b94b      	cbnz	r3, 8007816 <__swsetup_r+0x7a>
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007808:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800780c:	d003      	beq.n	8007816 <__swsetup_r+0x7a>
 800780e:	4621      	mov	r1, r4
 8007810:	4628      	mov	r0, r5
 8007812:	f002 fe94 	bl	800a53e <__smakebuf_r>
 8007816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800781a:	f013 0201 	ands.w	r2, r3, #1
 800781e:	d00a      	beq.n	8007836 <__swsetup_r+0x9a>
 8007820:	2200      	movs	r2, #0
 8007822:	60a2      	str	r2, [r4, #8]
 8007824:	6962      	ldr	r2, [r4, #20]
 8007826:	4252      	negs	r2, r2
 8007828:	61a2      	str	r2, [r4, #24]
 800782a:	6922      	ldr	r2, [r4, #16]
 800782c:	b942      	cbnz	r2, 8007840 <__swsetup_r+0xa4>
 800782e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007832:	d1c5      	bne.n	80077c0 <__swsetup_r+0x24>
 8007834:	bd38      	pop	{r3, r4, r5, pc}
 8007836:	0799      	lsls	r1, r3, #30
 8007838:	bf58      	it	pl
 800783a:	6962      	ldrpl	r2, [r4, #20]
 800783c:	60a2      	str	r2, [r4, #8]
 800783e:	e7f4      	b.n	800782a <__swsetup_r+0x8e>
 8007840:	2000      	movs	r0, #0
 8007842:	e7f7      	b.n	8007834 <__swsetup_r+0x98>
 8007844:	20000030 	.word	0x20000030

08007848 <memset>:
 8007848:	4603      	mov	r3, r0
 800784a:	4402      	add	r2, r0
 800784c:	4293      	cmp	r3, r2
 800784e:	d100      	bne.n	8007852 <memset+0xa>
 8007850:	4770      	bx	lr
 8007852:	f803 1b01 	strb.w	r1, [r3], #1
 8007856:	e7f9      	b.n	800784c <memset+0x4>

08007858 <_localeconv_r>:
 8007858:	4800      	ldr	r0, [pc, #0]	@ (800785c <_localeconv_r+0x4>)
 800785a:	4770      	bx	lr
 800785c:	20000170 	.word	0x20000170

08007860 <_close_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	2300      	movs	r3, #0
 8007864:	4d05      	ldr	r5, [pc, #20]	@ (800787c <_close_r+0x1c>)
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	602b      	str	r3, [r5, #0]
 800786c:	f7fa faba 	bl	8001de4 <_close>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_close_r+0x1a>
 8007874:	682b      	ldr	r3, [r5, #0]
 8007876:	b103      	cbz	r3, 800787a <_close_r+0x1a>
 8007878:	6023      	str	r3, [r4, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	20001278 	.word	0x20001278

08007880 <_lseek_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	2200      	movs	r2, #0
 800788a:	4d05      	ldr	r5, [pc, #20]	@ (80078a0 <_lseek_r+0x20>)
 800788c:	602a      	str	r2, [r5, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	f7fa facc 	bl	8001e2c <_lseek>
 8007894:	1c43      	adds	r3, r0, #1
 8007896:	d102      	bne.n	800789e <_lseek_r+0x1e>
 8007898:	682b      	ldr	r3, [r5, #0]
 800789a:	b103      	cbz	r3, 800789e <_lseek_r+0x1e>
 800789c:	6023      	str	r3, [r4, #0]
 800789e:	bd38      	pop	{r3, r4, r5, pc}
 80078a0:	20001278 	.word	0x20001278

080078a4 <_read_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4604      	mov	r4, r0
 80078a8:	4608      	mov	r0, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	2200      	movs	r2, #0
 80078ae:	4d05      	ldr	r5, [pc, #20]	@ (80078c4 <_read_r+0x20>)
 80078b0:	602a      	str	r2, [r5, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	f7fa fa5d 	bl	8001d72 <_read>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_read_r+0x1e>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_read_r+0x1e>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20001278 	.word	0x20001278

080078c8 <_write_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	4608      	mov	r0, r1
 80078ce:	4611      	mov	r1, r2
 80078d0:	2200      	movs	r2, #0
 80078d2:	4d05      	ldr	r5, [pc, #20]	@ (80078e8 <_write_r+0x20>)
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	f7fa fa68 	bl	8001dac <_write>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_write_r+0x1e>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_write_r+0x1e>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20001278 	.word	0x20001278

080078ec <__errno>:
 80078ec:	4b01      	ldr	r3, [pc, #4]	@ (80078f4 <__errno+0x8>)
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	20000030 	.word	0x20000030

080078f8 <__libc_init_array>:
 80078f8:	b570      	push	{r4, r5, r6, lr}
 80078fa:	2600      	movs	r6, #0
 80078fc:	4d0c      	ldr	r5, [pc, #48]	@ (8007930 <__libc_init_array+0x38>)
 80078fe:	4c0d      	ldr	r4, [pc, #52]	@ (8007934 <__libc_init_array+0x3c>)
 8007900:	1b64      	subs	r4, r4, r5
 8007902:	10a4      	asrs	r4, r4, #2
 8007904:	42a6      	cmp	r6, r4
 8007906:	d109      	bne.n	800791c <__libc_init_array+0x24>
 8007908:	f003 ff26 	bl	800b758 <_init>
 800790c:	2600      	movs	r6, #0
 800790e:	4d0a      	ldr	r5, [pc, #40]	@ (8007938 <__libc_init_array+0x40>)
 8007910:	4c0a      	ldr	r4, [pc, #40]	@ (800793c <__libc_init_array+0x44>)
 8007912:	1b64      	subs	r4, r4, r5
 8007914:	10a4      	asrs	r4, r4, #2
 8007916:	42a6      	cmp	r6, r4
 8007918:	d105      	bne.n	8007926 <__libc_init_array+0x2e>
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007920:	4798      	blx	r3
 8007922:	3601      	adds	r6, #1
 8007924:	e7ee      	b.n	8007904 <__libc_init_array+0xc>
 8007926:	f855 3b04 	ldr.w	r3, [r5], #4
 800792a:	4798      	blx	r3
 800792c:	3601      	adds	r6, #1
 800792e:	e7f2      	b.n	8007916 <__libc_init_array+0x1e>
 8007930:	0800cab0 	.word	0x0800cab0
 8007934:	0800cab0 	.word	0x0800cab0
 8007938:	0800cab0 	.word	0x0800cab0
 800793c:	0800cab4 	.word	0x0800cab4

08007940 <__retarget_lock_init_recursive>:
 8007940:	4770      	bx	lr

08007942 <__retarget_lock_acquire_recursive>:
 8007942:	4770      	bx	lr

08007944 <__retarget_lock_release_recursive>:
 8007944:	4770      	bx	lr

08007946 <memchr>:
 8007946:	4603      	mov	r3, r0
 8007948:	b510      	push	{r4, lr}
 800794a:	b2c9      	uxtb	r1, r1
 800794c:	4402      	add	r2, r0
 800794e:	4293      	cmp	r3, r2
 8007950:	4618      	mov	r0, r3
 8007952:	d101      	bne.n	8007958 <memchr+0x12>
 8007954:	2000      	movs	r0, #0
 8007956:	e003      	b.n	8007960 <memchr+0x1a>
 8007958:	7804      	ldrb	r4, [r0, #0]
 800795a:	3301      	adds	r3, #1
 800795c:	428c      	cmp	r4, r1
 800795e:	d1f6      	bne.n	800794e <memchr+0x8>
 8007960:	bd10      	pop	{r4, pc}

08007962 <memcpy>:
 8007962:	440a      	add	r2, r1
 8007964:	4291      	cmp	r1, r2
 8007966:	f100 33ff 	add.w	r3, r0, #4294967295
 800796a:	d100      	bne.n	800796e <memcpy+0xc>
 800796c:	4770      	bx	lr
 800796e:	b510      	push	{r4, lr}
 8007970:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007974:	4291      	cmp	r1, r2
 8007976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800797a:	d1f9      	bne.n	8007970 <memcpy+0xe>
 800797c:	bd10      	pop	{r4, pc}
	...

08007980 <nanf>:
 8007980:	4800      	ldr	r0, [pc, #0]	@ (8007984 <nanf+0x4>)
 8007982:	4770      	bx	lr
 8007984:	7fc00000 	.word	0x7fc00000

08007988 <quorem>:
 8007988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800798c:	6903      	ldr	r3, [r0, #16]
 800798e:	690c      	ldr	r4, [r1, #16]
 8007990:	4607      	mov	r7, r0
 8007992:	42a3      	cmp	r3, r4
 8007994:	db7e      	blt.n	8007a94 <quorem+0x10c>
 8007996:	3c01      	subs	r4, #1
 8007998:	00a3      	lsls	r3, r4, #2
 800799a:	f100 0514 	add.w	r5, r0, #20
 800799e:	f101 0814 	add.w	r8, r1, #20
 80079a2:	9300      	str	r3, [sp, #0]
 80079a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079a8:	9301      	str	r3, [sp, #4]
 80079aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079b2:	3301      	adds	r3, #1
 80079b4:	429a      	cmp	r2, r3
 80079b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80079ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079be:	d32e      	bcc.n	8007a1e <quorem+0x96>
 80079c0:	f04f 0a00 	mov.w	sl, #0
 80079c4:	46c4      	mov	ip, r8
 80079c6:	46ae      	mov	lr, r5
 80079c8:	46d3      	mov	fp, sl
 80079ca:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079ce:	b298      	uxth	r0, r3
 80079d0:	fb06 a000 	mla	r0, r6, r0, sl
 80079d4:	0c1b      	lsrs	r3, r3, #16
 80079d6:	0c02      	lsrs	r2, r0, #16
 80079d8:	fb06 2303 	mla	r3, r6, r3, r2
 80079dc:	f8de 2000 	ldr.w	r2, [lr]
 80079e0:	b280      	uxth	r0, r0
 80079e2:	b292      	uxth	r2, r2
 80079e4:	1a12      	subs	r2, r2, r0
 80079e6:	445a      	add	r2, fp
 80079e8:	f8de 0000 	ldr.w	r0, [lr]
 80079ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079f6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079fa:	b292      	uxth	r2, r2
 80079fc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a00:	45e1      	cmp	r9, ip
 8007a02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a06:	f84e 2b04 	str.w	r2, [lr], #4
 8007a0a:	d2de      	bcs.n	80079ca <quorem+0x42>
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	58eb      	ldr	r3, [r5, r3]
 8007a10:	b92b      	cbnz	r3, 8007a1e <quorem+0x96>
 8007a12:	9b01      	ldr	r3, [sp, #4]
 8007a14:	3b04      	subs	r3, #4
 8007a16:	429d      	cmp	r5, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	d32f      	bcc.n	8007a7c <quorem+0xf4>
 8007a1c:	613c      	str	r4, [r7, #16]
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f001 f9c8 	bl	8008db4 <__mcmp>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	db25      	blt.n	8007a74 <quorem+0xec>
 8007a28:	4629      	mov	r1, r5
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a30:	f8d1 c000 	ldr.w	ip, [r1]
 8007a34:	fa1f fe82 	uxth.w	lr, r2
 8007a38:	fa1f f38c 	uxth.w	r3, ip
 8007a3c:	eba3 030e 	sub.w	r3, r3, lr
 8007a40:	4403      	add	r3, r0
 8007a42:	0c12      	lsrs	r2, r2, #16
 8007a44:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a48:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a52:	45c1      	cmp	r9, r8
 8007a54:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a58:	f841 3b04 	str.w	r3, [r1], #4
 8007a5c:	d2e6      	bcs.n	8007a2c <quorem+0xa4>
 8007a5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a66:	b922      	cbnz	r2, 8007a72 <quorem+0xea>
 8007a68:	3b04      	subs	r3, #4
 8007a6a:	429d      	cmp	r5, r3
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	d30b      	bcc.n	8007a88 <quorem+0x100>
 8007a70:	613c      	str	r4, [r7, #16]
 8007a72:	3601      	adds	r6, #1
 8007a74:	4630      	mov	r0, r6
 8007a76:	b003      	add	sp, #12
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a7c:	6812      	ldr	r2, [r2, #0]
 8007a7e:	3b04      	subs	r3, #4
 8007a80:	2a00      	cmp	r2, #0
 8007a82:	d1cb      	bne.n	8007a1c <quorem+0x94>
 8007a84:	3c01      	subs	r4, #1
 8007a86:	e7c6      	b.n	8007a16 <quorem+0x8e>
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	3b04      	subs	r3, #4
 8007a8c:	2a00      	cmp	r2, #0
 8007a8e:	d1ef      	bne.n	8007a70 <quorem+0xe8>
 8007a90:	3c01      	subs	r4, #1
 8007a92:	e7ea      	b.n	8007a6a <quorem+0xe2>
 8007a94:	2000      	movs	r0, #0
 8007a96:	e7ee      	b.n	8007a76 <quorem+0xee>

08007a98 <_dtoa_r>:
 8007a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	461d      	mov	r5, r3
 8007aa0:	69c7      	ldr	r7, [r0, #28]
 8007aa2:	b097      	sub	sp, #92	@ 0x5c
 8007aa4:	4681      	mov	r9, r0
 8007aa6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007aaa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007aac:	b97f      	cbnz	r7, 8007ace <_dtoa_r+0x36>
 8007aae:	2010      	movs	r0, #16
 8007ab0:	f000 fe0e 	bl	80086d0 <malloc>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	f8c9 001c 	str.w	r0, [r9, #28]
 8007aba:	b920      	cbnz	r0, 8007ac6 <_dtoa_r+0x2e>
 8007abc:	21ef      	movs	r1, #239	@ 0xef
 8007abe:	4bac      	ldr	r3, [pc, #688]	@ (8007d70 <_dtoa_r+0x2d8>)
 8007ac0:	48ac      	ldr	r0, [pc, #688]	@ (8007d74 <_dtoa_r+0x2dc>)
 8007ac2:	f002 fddd 	bl	800a680 <__assert_func>
 8007ac6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007aca:	6007      	str	r7, [r0, #0]
 8007acc:	60c7      	str	r7, [r0, #12]
 8007ace:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	b159      	cbz	r1, 8007aee <_dtoa_r+0x56>
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4093      	lsls	r3, r2
 8007adc:	604a      	str	r2, [r1, #4]
 8007ade:	608b      	str	r3, [r1, #8]
 8007ae0:	4648      	mov	r0, r9
 8007ae2:	f000 feeb 	bl	80088bc <_Bfree>
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	1e2b      	subs	r3, r5, #0
 8007af0:	bfaf      	iteee	ge
 8007af2:	2300      	movge	r3, #0
 8007af4:	2201      	movlt	r2, #1
 8007af6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007afa:	9307      	strlt	r3, [sp, #28]
 8007afc:	bfa8      	it	ge
 8007afe:	6033      	strge	r3, [r6, #0]
 8007b00:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007b04:	4b9c      	ldr	r3, [pc, #624]	@ (8007d78 <_dtoa_r+0x2e0>)
 8007b06:	bfb8      	it	lt
 8007b08:	6032      	strlt	r2, [r6, #0]
 8007b0a:	ea33 0308 	bics.w	r3, r3, r8
 8007b0e:	d112      	bne.n	8007b36 <_dtoa_r+0x9e>
 8007b10:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b14:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b1c:	4323      	orrs	r3, r4
 8007b1e:	f000 855e 	beq.w	80085de <_dtoa_r+0xb46>
 8007b22:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d7c <_dtoa_r+0x2e4>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 8560 	beq.w	80085ee <_dtoa_r+0xb56>
 8007b2e:	f10a 0303 	add.w	r3, sl, #3
 8007b32:	f000 bd5a 	b.w	80085ea <_dtoa_r+0xb52>
 8007b36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	f7f8 ff51 	bl	80009ec <__aeabi_dcmpeq>
 8007b4a:	4607      	mov	r7, r0
 8007b4c:	b158      	cbz	r0, 8007b66 <_dtoa_r+0xce>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b52:	6013      	str	r3, [r2, #0]
 8007b54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b56:	b113      	cbz	r3, 8007b5e <_dtoa_r+0xc6>
 8007b58:	4b89      	ldr	r3, [pc, #548]	@ (8007d80 <_dtoa_r+0x2e8>)
 8007b5a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007d84 <_dtoa_r+0x2ec>
 8007b62:	f000 bd44 	b.w	80085ee <_dtoa_r+0xb56>
 8007b66:	ab14      	add	r3, sp, #80	@ 0x50
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	ab15      	add	r3, sp, #84	@ 0x54
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	4648      	mov	r0, r9
 8007b70:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b74:	f001 fa36 	bl	8008fe4 <__d2b>
 8007b78:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007b7c:	9003      	str	r0, [sp, #12]
 8007b7e:	2e00      	cmp	r6, #0
 8007b80:	d078      	beq.n	8007c74 <_dtoa_r+0x1dc>
 8007b82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b88:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b90:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b94:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b98:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	4b7a      	ldr	r3, [pc, #488]	@ (8007d88 <_dtoa_r+0x2f0>)
 8007ba0:	f7f8 fb04 	bl	80001ac <__aeabi_dsub>
 8007ba4:	a36c      	add	r3, pc, #432	@ (adr r3, 8007d58 <_dtoa_r+0x2c0>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	f7f8 fcb7 	bl	800051c <__aeabi_dmul>
 8007bae:	a36c      	add	r3, pc, #432	@ (adr r3, 8007d60 <_dtoa_r+0x2c8>)
 8007bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb4:	f7f8 fafc 	bl	80001b0 <__adddf3>
 8007bb8:	4604      	mov	r4, r0
 8007bba:	4630      	mov	r0, r6
 8007bbc:	460d      	mov	r5, r1
 8007bbe:	f7f8 fc43 	bl	8000448 <__aeabi_i2d>
 8007bc2:	a369      	add	r3, pc, #420	@ (adr r3, 8007d68 <_dtoa_r+0x2d0>)
 8007bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc8:	f7f8 fca8 	bl	800051c <__aeabi_dmul>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	f7f8 faec 	bl	80001b0 <__adddf3>
 8007bd8:	4604      	mov	r4, r0
 8007bda:	460d      	mov	r5, r1
 8007bdc:	f7f8 ff4e 	bl	8000a7c <__aeabi_d2iz>
 8007be0:	2200      	movs	r2, #0
 8007be2:	4607      	mov	r7, r0
 8007be4:	2300      	movs	r3, #0
 8007be6:	4620      	mov	r0, r4
 8007be8:	4629      	mov	r1, r5
 8007bea:	f7f8 ff09 	bl	8000a00 <__aeabi_dcmplt>
 8007bee:	b140      	cbz	r0, 8007c02 <_dtoa_r+0x16a>
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7f8 fc29 	bl	8000448 <__aeabi_i2d>
 8007bf6:	4622      	mov	r2, r4
 8007bf8:	462b      	mov	r3, r5
 8007bfa:	f7f8 fef7 	bl	80009ec <__aeabi_dcmpeq>
 8007bfe:	b900      	cbnz	r0, 8007c02 <_dtoa_r+0x16a>
 8007c00:	3f01      	subs	r7, #1
 8007c02:	2f16      	cmp	r7, #22
 8007c04:	d854      	bhi.n	8007cb0 <_dtoa_r+0x218>
 8007c06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c0a:	4b60      	ldr	r3, [pc, #384]	@ (8007d8c <_dtoa_r+0x2f4>)
 8007c0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c14:	f7f8 fef4 	bl	8000a00 <__aeabi_dcmplt>
 8007c18:	2800      	cmp	r0, #0
 8007c1a:	d04b      	beq.n	8007cb4 <_dtoa_r+0x21c>
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	3f01      	subs	r7, #1
 8007c20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c22:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007c24:	1b9b      	subs	r3, r3, r6
 8007c26:	1e5a      	subs	r2, r3, #1
 8007c28:	bf49      	itett	mi
 8007c2a:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c2e:	2300      	movpl	r3, #0
 8007c30:	9304      	strmi	r3, [sp, #16]
 8007c32:	2300      	movmi	r3, #0
 8007c34:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c36:	bf54      	ite	pl
 8007c38:	9304      	strpl	r3, [sp, #16]
 8007c3a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007c3c:	2f00      	cmp	r7, #0
 8007c3e:	db3b      	blt.n	8007cb8 <_dtoa_r+0x220>
 8007c40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c42:	970e      	str	r7, [sp, #56]	@ 0x38
 8007c44:	443b      	add	r3, r7
 8007c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c48:	2300      	movs	r3, #0
 8007c4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c4c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d865      	bhi.n	8007d1e <_dtoa_r+0x286>
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	bfc4      	itt	gt
 8007c56:	3b04      	subgt	r3, #4
 8007c58:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007c5a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c5c:	bfc8      	it	gt
 8007c5e:	2400      	movgt	r4, #0
 8007c60:	f1a3 0302 	sub.w	r3, r3, #2
 8007c64:	bfd8      	it	le
 8007c66:	2401      	movle	r4, #1
 8007c68:	2b03      	cmp	r3, #3
 8007c6a:	d864      	bhi.n	8007d36 <_dtoa_r+0x29e>
 8007c6c:	e8df f003 	tbb	[pc, r3]
 8007c70:	2c385553 	.word	0x2c385553
 8007c74:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c78:	441e      	add	r6, r3
 8007c7a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c7e:	2b20      	cmp	r3, #32
 8007c80:	bfc1      	itttt	gt
 8007c82:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c86:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c8a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c8e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c92:	bfd6      	itet	le
 8007c94:	f1c3 0320 	rsble	r3, r3, #32
 8007c98:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c9c:	fa04 f003 	lslle.w	r0, r4, r3
 8007ca0:	f7f8 fbc2 	bl	8000428 <__aeabi_ui2d>
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007caa:	3e01      	subs	r6, #1
 8007cac:	9212      	str	r2, [sp, #72]	@ 0x48
 8007cae:	e774      	b.n	8007b9a <_dtoa_r+0x102>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e7b5      	b.n	8007c20 <_dtoa_r+0x188>
 8007cb4:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007cb6:	e7b4      	b.n	8007c22 <_dtoa_r+0x18a>
 8007cb8:	9b04      	ldr	r3, [sp, #16]
 8007cba:	1bdb      	subs	r3, r3, r7
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	427b      	negs	r3, r7
 8007cc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007cc6:	e7c1      	b.n	8007c4c <_dtoa_r+0x1b4>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ccc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cce:	eb07 0b03 	add.w	fp, r7, r3
 8007cd2:	f10b 0301 	add.w	r3, fp, #1
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	9308      	str	r3, [sp, #32]
 8007cda:	bfb8      	it	lt
 8007cdc:	2301      	movlt	r3, #1
 8007cde:	e006      	b.n	8007cee <_dtoa_r+0x256>
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ce4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	dd28      	ble.n	8007d3c <_dtoa_r+0x2a4>
 8007cea:	469b      	mov	fp, r3
 8007cec:	9308      	str	r3, [sp, #32]
 8007cee:	2100      	movs	r1, #0
 8007cf0:	2204      	movs	r2, #4
 8007cf2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007cf6:	f102 0514 	add.w	r5, r2, #20
 8007cfa:	429d      	cmp	r5, r3
 8007cfc:	d926      	bls.n	8007d4c <_dtoa_r+0x2b4>
 8007cfe:	6041      	str	r1, [r0, #4]
 8007d00:	4648      	mov	r0, r9
 8007d02:	f000 fd9b 	bl	800883c <_Balloc>
 8007d06:	4682      	mov	sl, r0
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d143      	bne.n	8007d94 <_dtoa_r+0x2fc>
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d12:	4b1f      	ldr	r3, [pc, #124]	@ (8007d90 <_dtoa_r+0x2f8>)
 8007d14:	e6d4      	b.n	8007ac0 <_dtoa_r+0x28>
 8007d16:	2300      	movs	r3, #0
 8007d18:	e7e3      	b.n	8007ce2 <_dtoa_r+0x24a>
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	e7d5      	b.n	8007cca <_dtoa_r+0x232>
 8007d1e:	2401      	movs	r4, #1
 8007d20:	2300      	movs	r3, #0
 8007d22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d24:	9320      	str	r3, [sp, #128]	@ 0x80
 8007d26:	f04f 3bff 	mov.w	fp, #4294967295
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	2312      	movs	r3, #18
 8007d2e:	f8cd b020 	str.w	fp, [sp, #32]
 8007d32:	9221      	str	r2, [sp, #132]	@ 0x84
 8007d34:	e7db      	b.n	8007cee <_dtoa_r+0x256>
 8007d36:	2301      	movs	r3, #1
 8007d38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d3a:	e7f4      	b.n	8007d26 <_dtoa_r+0x28e>
 8007d3c:	f04f 0b01 	mov.w	fp, #1
 8007d40:	465b      	mov	r3, fp
 8007d42:	f8cd b020 	str.w	fp, [sp, #32]
 8007d46:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007d4a:	e7d0      	b.n	8007cee <_dtoa_r+0x256>
 8007d4c:	3101      	adds	r1, #1
 8007d4e:	0052      	lsls	r2, r2, #1
 8007d50:	e7d1      	b.n	8007cf6 <_dtoa_r+0x25e>
 8007d52:	bf00      	nop
 8007d54:	f3af 8000 	nop.w
 8007d58:	636f4361 	.word	0x636f4361
 8007d5c:	3fd287a7 	.word	0x3fd287a7
 8007d60:	8b60c8b3 	.word	0x8b60c8b3
 8007d64:	3fc68a28 	.word	0x3fc68a28
 8007d68:	509f79fb 	.word	0x509f79fb
 8007d6c:	3fd34413 	.word	0x3fd34413
 8007d70:	0800c68e 	.word	0x0800c68e
 8007d74:	0800c6a5 	.word	0x0800c6a5
 8007d78:	7ff00000 	.word	0x7ff00000
 8007d7c:	0800c68a 	.word	0x0800c68a
 8007d80:	0800c659 	.word	0x0800c659
 8007d84:	0800c658 	.word	0x0800c658
 8007d88:	3ff80000 	.word	0x3ff80000
 8007d8c:	0800c858 	.word	0x0800c858
 8007d90:	0800c6fd 	.word	0x0800c6fd
 8007d94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d98:	6018      	str	r0, [r3, #0]
 8007d9a:	9b08      	ldr	r3, [sp, #32]
 8007d9c:	2b0e      	cmp	r3, #14
 8007d9e:	f200 80a1 	bhi.w	8007ee4 <_dtoa_r+0x44c>
 8007da2:	2c00      	cmp	r4, #0
 8007da4:	f000 809e 	beq.w	8007ee4 <_dtoa_r+0x44c>
 8007da8:	2f00      	cmp	r7, #0
 8007daa:	dd33      	ble.n	8007e14 <_dtoa_r+0x37c>
 8007dac:	4b9c      	ldr	r3, [pc, #624]	@ (8008020 <_dtoa_r+0x588>)
 8007dae:	f007 020f 	and.w	r2, r7, #15
 8007db2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007db6:	05f8      	lsls	r0, r7, #23
 8007db8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007dbc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007dc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007dc4:	d516      	bpl.n	8007df4 <_dtoa_r+0x35c>
 8007dc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dca:	4b96      	ldr	r3, [pc, #600]	@ (8008024 <_dtoa_r+0x58c>)
 8007dcc:	2603      	movs	r6, #3
 8007dce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dd2:	f7f8 fccd 	bl	8000770 <__aeabi_ddiv>
 8007dd6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dda:	f004 040f 	and.w	r4, r4, #15
 8007dde:	4d91      	ldr	r5, [pc, #580]	@ (8008024 <_dtoa_r+0x58c>)
 8007de0:	b954      	cbnz	r4, 8007df8 <_dtoa_r+0x360>
 8007de2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007dea:	f7f8 fcc1 	bl	8000770 <__aeabi_ddiv>
 8007dee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007df2:	e028      	b.n	8007e46 <_dtoa_r+0x3ae>
 8007df4:	2602      	movs	r6, #2
 8007df6:	e7f2      	b.n	8007dde <_dtoa_r+0x346>
 8007df8:	07e1      	lsls	r1, r4, #31
 8007dfa:	d508      	bpl.n	8007e0e <_dtoa_r+0x376>
 8007dfc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e04:	f7f8 fb8a 	bl	800051c <__aeabi_dmul>
 8007e08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e0c:	3601      	adds	r6, #1
 8007e0e:	1064      	asrs	r4, r4, #1
 8007e10:	3508      	adds	r5, #8
 8007e12:	e7e5      	b.n	8007de0 <_dtoa_r+0x348>
 8007e14:	f000 80af 	beq.w	8007f76 <_dtoa_r+0x4de>
 8007e18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e1c:	427c      	negs	r4, r7
 8007e1e:	4b80      	ldr	r3, [pc, #512]	@ (8008020 <_dtoa_r+0x588>)
 8007e20:	f004 020f 	and.w	r2, r4, #15
 8007e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 fb76 	bl	800051c <__aeabi_dmul>
 8007e30:	2602      	movs	r6, #2
 8007e32:	2300      	movs	r3, #0
 8007e34:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e38:	4d7a      	ldr	r5, [pc, #488]	@ (8008024 <_dtoa_r+0x58c>)
 8007e3a:	1124      	asrs	r4, r4, #4
 8007e3c:	2c00      	cmp	r4, #0
 8007e3e:	f040 808f 	bne.w	8007f60 <_dtoa_r+0x4c8>
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1d3      	bne.n	8007dee <_dtoa_r+0x356>
 8007e46:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007e4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8094 	beq.w	8007f7a <_dtoa_r+0x4e2>
 8007e52:	2200      	movs	r2, #0
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	4b73      	ldr	r3, [pc, #460]	@ (8008028 <_dtoa_r+0x590>)
 8007e5a:	f7f8 fdd1 	bl	8000a00 <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f000 808b 	beq.w	8007f7a <_dtoa_r+0x4e2>
 8007e64:	9b08      	ldr	r3, [sp, #32]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f000 8087 	beq.w	8007f7a <_dtoa_r+0x4e2>
 8007e6c:	f1bb 0f00 	cmp.w	fp, #0
 8007e70:	dd34      	ble.n	8007edc <_dtoa_r+0x444>
 8007e72:	4620      	mov	r0, r4
 8007e74:	2200      	movs	r2, #0
 8007e76:	4629      	mov	r1, r5
 8007e78:	4b6c      	ldr	r3, [pc, #432]	@ (800802c <_dtoa_r+0x594>)
 8007e7a:	f7f8 fb4f 	bl	800051c <__aeabi_dmul>
 8007e7e:	465c      	mov	r4, fp
 8007e80:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e84:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e88:	3601      	adds	r6, #1
 8007e8a:	4630      	mov	r0, r6
 8007e8c:	f7f8 fadc 	bl	8000448 <__aeabi_i2d>
 8007e90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e94:	f7f8 fb42 	bl	800051c <__aeabi_dmul>
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4b65      	ldr	r3, [pc, #404]	@ (8008030 <_dtoa_r+0x598>)
 8007e9c:	f7f8 f988 	bl	80001b0 <__adddf3>
 8007ea0:	4605      	mov	r5, r0
 8007ea2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ea6:	2c00      	cmp	r4, #0
 8007ea8:	d16a      	bne.n	8007f80 <_dtoa_r+0x4e8>
 8007eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4b60      	ldr	r3, [pc, #384]	@ (8008034 <_dtoa_r+0x59c>)
 8007eb2:	f7f8 f97b 	bl	80001ac <__aeabi_dsub>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	460b      	mov	r3, r1
 8007eba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007ebe:	462a      	mov	r2, r5
 8007ec0:	4633      	mov	r3, r6
 8007ec2:	f7f8 fdbb 	bl	8000a3c <__aeabi_dcmpgt>
 8007ec6:	2800      	cmp	r0, #0
 8007ec8:	f040 8298 	bne.w	80083fc <_dtoa_r+0x964>
 8007ecc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ed0:	462a      	mov	r2, r5
 8007ed2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ed6:	f7f8 fd93 	bl	8000a00 <__aeabi_dcmplt>
 8007eda:	bb38      	cbnz	r0, 8007f2c <_dtoa_r+0x494>
 8007edc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ee0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ee4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f2c0 8157 	blt.w	800819a <_dtoa_r+0x702>
 8007eec:	2f0e      	cmp	r7, #14
 8007eee:	f300 8154 	bgt.w	800819a <_dtoa_r+0x702>
 8007ef2:	4b4b      	ldr	r3, [pc, #300]	@ (8008020 <_dtoa_r+0x588>)
 8007ef4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ef8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007efc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007f00:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f280 80e5 	bge.w	80080d2 <_dtoa_r+0x63a>
 8007f08:	9b08      	ldr	r3, [sp, #32]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f300 80e1 	bgt.w	80080d2 <_dtoa_r+0x63a>
 8007f10:	d10c      	bne.n	8007f2c <_dtoa_r+0x494>
 8007f12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f16:	2200      	movs	r2, #0
 8007f18:	4b46      	ldr	r3, [pc, #280]	@ (8008034 <_dtoa_r+0x59c>)
 8007f1a:	f7f8 faff 	bl	800051c <__aeabi_dmul>
 8007f1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f22:	f7f8 fd81 	bl	8000a28 <__aeabi_dcmpge>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	f000 8266 	beq.w	80083f8 <_dtoa_r+0x960>
 8007f2c:	2400      	movs	r4, #0
 8007f2e:	4625      	mov	r5, r4
 8007f30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f32:	4656      	mov	r6, sl
 8007f34:	ea6f 0803 	mvn.w	r8, r3
 8007f38:	2700      	movs	r7, #0
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4648      	mov	r0, r9
 8007f3e:	f000 fcbd 	bl	80088bc <_Bfree>
 8007f42:	2d00      	cmp	r5, #0
 8007f44:	f000 80bd 	beq.w	80080c2 <_dtoa_r+0x62a>
 8007f48:	b12f      	cbz	r7, 8007f56 <_dtoa_r+0x4be>
 8007f4a:	42af      	cmp	r7, r5
 8007f4c:	d003      	beq.n	8007f56 <_dtoa_r+0x4be>
 8007f4e:	4639      	mov	r1, r7
 8007f50:	4648      	mov	r0, r9
 8007f52:	f000 fcb3 	bl	80088bc <_Bfree>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4648      	mov	r0, r9
 8007f5a:	f000 fcaf 	bl	80088bc <_Bfree>
 8007f5e:	e0b0      	b.n	80080c2 <_dtoa_r+0x62a>
 8007f60:	07e2      	lsls	r2, r4, #31
 8007f62:	d505      	bpl.n	8007f70 <_dtoa_r+0x4d8>
 8007f64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f68:	f7f8 fad8 	bl	800051c <__aeabi_dmul>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	3601      	adds	r6, #1
 8007f70:	1064      	asrs	r4, r4, #1
 8007f72:	3508      	adds	r5, #8
 8007f74:	e762      	b.n	8007e3c <_dtoa_r+0x3a4>
 8007f76:	2602      	movs	r6, #2
 8007f78:	e765      	b.n	8007e46 <_dtoa_r+0x3ae>
 8007f7a:	46b8      	mov	r8, r7
 8007f7c:	9c08      	ldr	r4, [sp, #32]
 8007f7e:	e784      	b.n	8007e8a <_dtoa_r+0x3f2>
 8007f80:	4b27      	ldr	r3, [pc, #156]	@ (8008020 <_dtoa_r+0x588>)
 8007f82:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f8c:	4454      	add	r4, sl
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d054      	beq.n	800803c <_dtoa_r+0x5a4>
 8007f92:	2000      	movs	r0, #0
 8007f94:	4928      	ldr	r1, [pc, #160]	@ (8008038 <_dtoa_r+0x5a0>)
 8007f96:	f7f8 fbeb 	bl	8000770 <__aeabi_ddiv>
 8007f9a:	4633      	mov	r3, r6
 8007f9c:	462a      	mov	r2, r5
 8007f9e:	f7f8 f905 	bl	80001ac <__aeabi_dsub>
 8007fa2:	4656      	mov	r6, sl
 8007fa4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fa8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fac:	f7f8 fd66 	bl	8000a7c <__aeabi_d2iz>
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	f7f8 fa49 	bl	8000448 <__aeabi_i2d>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fbe:	f7f8 f8f5 	bl	80001ac <__aeabi_dsub>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	3530      	adds	r5, #48	@ 0x30
 8007fc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007fcc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fd0:	f806 5b01 	strb.w	r5, [r6], #1
 8007fd4:	f7f8 fd14 	bl	8000a00 <__aeabi_dcmplt>
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d172      	bne.n	80080c2 <_dtoa_r+0x62a>
 8007fdc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	4911      	ldr	r1, [pc, #68]	@ (8008028 <_dtoa_r+0x590>)
 8007fe4:	f7f8 f8e2 	bl	80001ac <__aeabi_dsub>
 8007fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fec:	f7f8 fd08 	bl	8000a00 <__aeabi_dcmplt>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f040 80b4 	bne.w	800815e <_dtoa_r+0x6c6>
 8007ff6:	42a6      	cmp	r6, r4
 8007ff8:	f43f af70 	beq.w	8007edc <_dtoa_r+0x444>
 8007ffc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008000:	2200      	movs	r2, #0
 8008002:	4b0a      	ldr	r3, [pc, #40]	@ (800802c <_dtoa_r+0x594>)
 8008004:	f7f8 fa8a 	bl	800051c <__aeabi_dmul>
 8008008:	2200      	movs	r2, #0
 800800a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800800e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008012:	4b06      	ldr	r3, [pc, #24]	@ (800802c <_dtoa_r+0x594>)
 8008014:	f7f8 fa82 	bl	800051c <__aeabi_dmul>
 8008018:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800801c:	e7c4      	b.n	8007fa8 <_dtoa_r+0x510>
 800801e:	bf00      	nop
 8008020:	0800c858 	.word	0x0800c858
 8008024:	0800c830 	.word	0x0800c830
 8008028:	3ff00000 	.word	0x3ff00000
 800802c:	40240000 	.word	0x40240000
 8008030:	401c0000 	.word	0x401c0000
 8008034:	40140000 	.word	0x40140000
 8008038:	3fe00000 	.word	0x3fe00000
 800803c:	4631      	mov	r1, r6
 800803e:	4628      	mov	r0, r5
 8008040:	f7f8 fa6c 	bl	800051c <__aeabi_dmul>
 8008044:	4656      	mov	r6, sl
 8008046:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800804a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800804c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008050:	f7f8 fd14 	bl	8000a7c <__aeabi_d2iz>
 8008054:	4605      	mov	r5, r0
 8008056:	f7f8 f9f7 	bl	8000448 <__aeabi_i2d>
 800805a:	4602      	mov	r2, r0
 800805c:	460b      	mov	r3, r1
 800805e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008062:	f7f8 f8a3 	bl	80001ac <__aeabi_dsub>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	3530      	adds	r5, #48	@ 0x30
 800806c:	f806 5b01 	strb.w	r5, [r6], #1
 8008070:	42a6      	cmp	r6, r4
 8008072:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008076:	f04f 0200 	mov.w	r2, #0
 800807a:	d124      	bne.n	80080c6 <_dtoa_r+0x62e>
 800807c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008080:	4bae      	ldr	r3, [pc, #696]	@ (800833c <_dtoa_r+0x8a4>)
 8008082:	f7f8 f895 	bl	80001b0 <__adddf3>
 8008086:	4602      	mov	r2, r0
 8008088:	460b      	mov	r3, r1
 800808a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800808e:	f7f8 fcd5 	bl	8000a3c <__aeabi_dcmpgt>
 8008092:	2800      	cmp	r0, #0
 8008094:	d163      	bne.n	800815e <_dtoa_r+0x6c6>
 8008096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800809a:	2000      	movs	r0, #0
 800809c:	49a7      	ldr	r1, [pc, #668]	@ (800833c <_dtoa_r+0x8a4>)
 800809e:	f7f8 f885 	bl	80001ac <__aeabi_dsub>
 80080a2:	4602      	mov	r2, r0
 80080a4:	460b      	mov	r3, r1
 80080a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080aa:	f7f8 fca9 	bl	8000a00 <__aeabi_dcmplt>
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f af14 	beq.w	8007edc <_dtoa_r+0x444>
 80080b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80080b6:	1e73      	subs	r3, r6, #1
 80080b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80080ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80080be:	2b30      	cmp	r3, #48	@ 0x30
 80080c0:	d0f8      	beq.n	80080b4 <_dtoa_r+0x61c>
 80080c2:	4647      	mov	r7, r8
 80080c4:	e03b      	b.n	800813e <_dtoa_r+0x6a6>
 80080c6:	4b9e      	ldr	r3, [pc, #632]	@ (8008340 <_dtoa_r+0x8a8>)
 80080c8:	f7f8 fa28 	bl	800051c <__aeabi_dmul>
 80080cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80080d0:	e7bc      	b.n	800804c <_dtoa_r+0x5b4>
 80080d2:	4656      	mov	r6, sl
 80080d4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80080d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080dc:	4620      	mov	r0, r4
 80080de:	4629      	mov	r1, r5
 80080e0:	f7f8 fb46 	bl	8000770 <__aeabi_ddiv>
 80080e4:	f7f8 fcca 	bl	8000a7c <__aeabi_d2iz>
 80080e8:	4680      	mov	r8, r0
 80080ea:	f7f8 f9ad 	bl	8000448 <__aeabi_i2d>
 80080ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f2:	f7f8 fa13 	bl	800051c <__aeabi_dmul>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4620      	mov	r0, r4
 80080fc:	4629      	mov	r1, r5
 80080fe:	f7f8 f855 	bl	80001ac <__aeabi_dsub>
 8008102:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008106:	9d08      	ldr	r5, [sp, #32]
 8008108:	f806 4b01 	strb.w	r4, [r6], #1
 800810c:	eba6 040a 	sub.w	r4, r6, sl
 8008110:	42a5      	cmp	r5, r4
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	d133      	bne.n	8008180 <_dtoa_r+0x6e8>
 8008118:	f7f8 f84a 	bl	80001b0 <__adddf3>
 800811c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008120:	4604      	mov	r4, r0
 8008122:	460d      	mov	r5, r1
 8008124:	f7f8 fc8a 	bl	8000a3c <__aeabi_dcmpgt>
 8008128:	b9c0      	cbnz	r0, 800815c <_dtoa_r+0x6c4>
 800812a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812e:	4620      	mov	r0, r4
 8008130:	4629      	mov	r1, r5
 8008132:	f7f8 fc5b 	bl	80009ec <__aeabi_dcmpeq>
 8008136:	b110      	cbz	r0, 800813e <_dtoa_r+0x6a6>
 8008138:	f018 0f01 	tst.w	r8, #1
 800813c:	d10e      	bne.n	800815c <_dtoa_r+0x6c4>
 800813e:	4648      	mov	r0, r9
 8008140:	9903      	ldr	r1, [sp, #12]
 8008142:	f000 fbbb 	bl	80088bc <_Bfree>
 8008146:	2300      	movs	r3, #0
 8008148:	7033      	strb	r3, [r6, #0]
 800814a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800814c:	3701      	adds	r7, #1
 800814e:	601f      	str	r7, [r3, #0]
 8008150:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008152:	2b00      	cmp	r3, #0
 8008154:	f000 824b 	beq.w	80085ee <_dtoa_r+0xb56>
 8008158:	601e      	str	r6, [r3, #0]
 800815a:	e248      	b.n	80085ee <_dtoa_r+0xb56>
 800815c:	46b8      	mov	r8, r7
 800815e:	4633      	mov	r3, r6
 8008160:	461e      	mov	r6, r3
 8008162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008166:	2a39      	cmp	r2, #57	@ 0x39
 8008168:	d106      	bne.n	8008178 <_dtoa_r+0x6e0>
 800816a:	459a      	cmp	sl, r3
 800816c:	d1f8      	bne.n	8008160 <_dtoa_r+0x6c8>
 800816e:	2230      	movs	r2, #48	@ 0x30
 8008170:	f108 0801 	add.w	r8, r8, #1
 8008174:	f88a 2000 	strb.w	r2, [sl]
 8008178:	781a      	ldrb	r2, [r3, #0]
 800817a:	3201      	adds	r2, #1
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e7a0      	b.n	80080c2 <_dtoa_r+0x62a>
 8008180:	2200      	movs	r2, #0
 8008182:	4b6f      	ldr	r3, [pc, #444]	@ (8008340 <_dtoa_r+0x8a8>)
 8008184:	f7f8 f9ca 	bl	800051c <__aeabi_dmul>
 8008188:	2200      	movs	r2, #0
 800818a:	2300      	movs	r3, #0
 800818c:	4604      	mov	r4, r0
 800818e:	460d      	mov	r5, r1
 8008190:	f7f8 fc2c 	bl	80009ec <__aeabi_dcmpeq>
 8008194:	2800      	cmp	r0, #0
 8008196:	d09f      	beq.n	80080d8 <_dtoa_r+0x640>
 8008198:	e7d1      	b.n	800813e <_dtoa_r+0x6a6>
 800819a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800819c:	2a00      	cmp	r2, #0
 800819e:	f000 80ea 	beq.w	8008376 <_dtoa_r+0x8de>
 80081a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80081a4:	2a01      	cmp	r2, #1
 80081a6:	f300 80cd 	bgt.w	8008344 <_dtoa_r+0x8ac>
 80081aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	f000 80c1 	beq.w	8008334 <_dtoa_r+0x89c>
 80081b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081b8:	9e04      	ldr	r6, [sp, #16]
 80081ba:	9a04      	ldr	r2, [sp, #16]
 80081bc:	2101      	movs	r1, #1
 80081be:	441a      	add	r2, r3
 80081c0:	9204      	str	r2, [sp, #16]
 80081c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081c4:	4648      	mov	r0, r9
 80081c6:	441a      	add	r2, r3
 80081c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80081ca:	f000 fc75 	bl	8008ab8 <__i2b>
 80081ce:	4605      	mov	r5, r0
 80081d0:	b166      	cbz	r6, 80081ec <_dtoa_r+0x754>
 80081d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dd09      	ble.n	80081ec <_dtoa_r+0x754>
 80081d8:	42b3      	cmp	r3, r6
 80081da:	bfa8      	it	ge
 80081dc:	4633      	movge	r3, r6
 80081de:	9a04      	ldr	r2, [sp, #16]
 80081e0:	1af6      	subs	r6, r6, r3
 80081e2:	1ad2      	subs	r2, r2, r3
 80081e4:	9204      	str	r2, [sp, #16]
 80081e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081ee:	b30b      	cbz	r3, 8008234 <_dtoa_r+0x79c>
 80081f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80c6 	beq.w	8008384 <_dtoa_r+0x8ec>
 80081f8:	2c00      	cmp	r4, #0
 80081fa:	f000 80c0 	beq.w	800837e <_dtoa_r+0x8e6>
 80081fe:	4629      	mov	r1, r5
 8008200:	4622      	mov	r2, r4
 8008202:	4648      	mov	r0, r9
 8008204:	f000 fd10 	bl	8008c28 <__pow5mult>
 8008208:	9a03      	ldr	r2, [sp, #12]
 800820a:	4601      	mov	r1, r0
 800820c:	4605      	mov	r5, r0
 800820e:	4648      	mov	r0, r9
 8008210:	f000 fc68 	bl	8008ae4 <__multiply>
 8008214:	9903      	ldr	r1, [sp, #12]
 8008216:	4680      	mov	r8, r0
 8008218:	4648      	mov	r0, r9
 800821a:	f000 fb4f 	bl	80088bc <_Bfree>
 800821e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008220:	1b1b      	subs	r3, r3, r4
 8008222:	930a      	str	r3, [sp, #40]	@ 0x28
 8008224:	f000 80b1 	beq.w	800838a <_dtoa_r+0x8f2>
 8008228:	4641      	mov	r1, r8
 800822a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800822c:	4648      	mov	r0, r9
 800822e:	f000 fcfb 	bl	8008c28 <__pow5mult>
 8008232:	9003      	str	r0, [sp, #12]
 8008234:	2101      	movs	r1, #1
 8008236:	4648      	mov	r0, r9
 8008238:	f000 fc3e 	bl	8008ab8 <__i2b>
 800823c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823e:	4604      	mov	r4, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	f000 81d8 	beq.w	80085f6 <_dtoa_r+0xb5e>
 8008246:	461a      	mov	r2, r3
 8008248:	4601      	mov	r1, r0
 800824a:	4648      	mov	r0, r9
 800824c:	f000 fcec 	bl	8008c28 <__pow5mult>
 8008250:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008252:	4604      	mov	r4, r0
 8008254:	2b01      	cmp	r3, #1
 8008256:	f300 809f 	bgt.w	8008398 <_dtoa_r+0x900>
 800825a:	9b06      	ldr	r3, [sp, #24]
 800825c:	2b00      	cmp	r3, #0
 800825e:	f040 8097 	bne.w	8008390 <_dtoa_r+0x8f8>
 8008262:	9b07      	ldr	r3, [sp, #28]
 8008264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008268:	2b00      	cmp	r3, #0
 800826a:	f040 8093 	bne.w	8008394 <_dtoa_r+0x8fc>
 800826e:	9b07      	ldr	r3, [sp, #28]
 8008270:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008274:	0d1b      	lsrs	r3, r3, #20
 8008276:	051b      	lsls	r3, r3, #20
 8008278:	b133      	cbz	r3, 8008288 <_dtoa_r+0x7f0>
 800827a:	9b04      	ldr	r3, [sp, #16]
 800827c:	3301      	adds	r3, #1
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008282:	3301      	adds	r3, #1
 8008284:	9309      	str	r3, [sp, #36]	@ 0x24
 8008286:	2301      	movs	r3, #1
 8008288:	930a      	str	r3, [sp, #40]	@ 0x28
 800828a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 81b8 	beq.w	8008602 <_dtoa_r+0xb6a>
 8008292:	6923      	ldr	r3, [r4, #16]
 8008294:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008298:	6918      	ldr	r0, [r3, #16]
 800829a:	f000 fbc1 	bl	8008a20 <__hi0bits>
 800829e:	f1c0 0020 	rsb	r0, r0, #32
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	4418      	add	r0, r3
 80082a6:	f010 001f 	ands.w	r0, r0, #31
 80082aa:	f000 8082 	beq.w	80083b2 <_dtoa_r+0x91a>
 80082ae:	f1c0 0320 	rsb	r3, r0, #32
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	dd73      	ble.n	800839e <_dtoa_r+0x906>
 80082b6:	9b04      	ldr	r3, [sp, #16]
 80082b8:	f1c0 001c 	rsb	r0, r0, #28
 80082bc:	4403      	add	r3, r0
 80082be:	9304      	str	r3, [sp, #16]
 80082c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c2:	4406      	add	r6, r0
 80082c4:	4403      	add	r3, r0
 80082c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80082c8:	9b04      	ldr	r3, [sp, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	dd05      	ble.n	80082da <_dtoa_r+0x842>
 80082ce:	461a      	mov	r2, r3
 80082d0:	4648      	mov	r0, r9
 80082d2:	9903      	ldr	r1, [sp, #12]
 80082d4:	f000 fd02 	bl	8008cdc <__lshift>
 80082d8:	9003      	str	r0, [sp, #12]
 80082da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	dd05      	ble.n	80082ec <_dtoa_r+0x854>
 80082e0:	4621      	mov	r1, r4
 80082e2:	461a      	mov	r2, r3
 80082e4:	4648      	mov	r0, r9
 80082e6:	f000 fcf9 	bl	8008cdc <__lshift>
 80082ea:	4604      	mov	r4, r0
 80082ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d061      	beq.n	80083b6 <_dtoa_r+0x91e>
 80082f2:	4621      	mov	r1, r4
 80082f4:	9803      	ldr	r0, [sp, #12]
 80082f6:	f000 fd5d 	bl	8008db4 <__mcmp>
 80082fa:	2800      	cmp	r0, #0
 80082fc:	da5b      	bge.n	80083b6 <_dtoa_r+0x91e>
 80082fe:	2300      	movs	r3, #0
 8008300:	220a      	movs	r2, #10
 8008302:	4648      	mov	r0, r9
 8008304:	9903      	ldr	r1, [sp, #12]
 8008306:	f000 fafb 	bl	8008900 <__multadd>
 800830a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800830c:	f107 38ff 	add.w	r8, r7, #4294967295
 8008310:	9003      	str	r0, [sp, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 8177 	beq.w	8008606 <_dtoa_r+0xb6e>
 8008318:	4629      	mov	r1, r5
 800831a:	2300      	movs	r3, #0
 800831c:	220a      	movs	r2, #10
 800831e:	4648      	mov	r0, r9
 8008320:	f000 faee 	bl	8008900 <__multadd>
 8008324:	f1bb 0f00 	cmp.w	fp, #0
 8008328:	4605      	mov	r5, r0
 800832a:	dc6f      	bgt.n	800840c <_dtoa_r+0x974>
 800832c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800832e:	2b02      	cmp	r3, #2
 8008330:	dc49      	bgt.n	80083c6 <_dtoa_r+0x92e>
 8008332:	e06b      	b.n	800840c <_dtoa_r+0x974>
 8008334:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008336:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800833a:	e73c      	b.n	80081b6 <_dtoa_r+0x71e>
 800833c:	3fe00000 	.word	0x3fe00000
 8008340:	40240000 	.word	0x40240000
 8008344:	9b08      	ldr	r3, [sp, #32]
 8008346:	1e5c      	subs	r4, r3, #1
 8008348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800834a:	42a3      	cmp	r3, r4
 800834c:	db09      	blt.n	8008362 <_dtoa_r+0x8ca>
 800834e:	1b1c      	subs	r4, r3, r4
 8008350:	9b08      	ldr	r3, [sp, #32]
 8008352:	2b00      	cmp	r3, #0
 8008354:	f6bf af30 	bge.w	80081b8 <_dtoa_r+0x720>
 8008358:	9b04      	ldr	r3, [sp, #16]
 800835a:	9a08      	ldr	r2, [sp, #32]
 800835c:	1a9e      	subs	r6, r3, r2
 800835e:	2300      	movs	r3, #0
 8008360:	e72b      	b.n	80081ba <_dtoa_r+0x722>
 8008362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008364:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008366:	1ae3      	subs	r3, r4, r3
 8008368:	441a      	add	r2, r3
 800836a:	940a      	str	r4, [sp, #40]	@ 0x28
 800836c:	9e04      	ldr	r6, [sp, #16]
 800836e:	2400      	movs	r4, #0
 8008370:	9b08      	ldr	r3, [sp, #32]
 8008372:	920e      	str	r2, [sp, #56]	@ 0x38
 8008374:	e721      	b.n	80081ba <_dtoa_r+0x722>
 8008376:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008378:	9e04      	ldr	r6, [sp, #16]
 800837a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800837c:	e728      	b.n	80081d0 <_dtoa_r+0x738>
 800837e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008382:	e751      	b.n	8008228 <_dtoa_r+0x790>
 8008384:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008386:	9903      	ldr	r1, [sp, #12]
 8008388:	e750      	b.n	800822c <_dtoa_r+0x794>
 800838a:	f8cd 800c 	str.w	r8, [sp, #12]
 800838e:	e751      	b.n	8008234 <_dtoa_r+0x79c>
 8008390:	2300      	movs	r3, #0
 8008392:	e779      	b.n	8008288 <_dtoa_r+0x7f0>
 8008394:	9b06      	ldr	r3, [sp, #24]
 8008396:	e777      	b.n	8008288 <_dtoa_r+0x7f0>
 8008398:	2300      	movs	r3, #0
 800839a:	930a      	str	r3, [sp, #40]	@ 0x28
 800839c:	e779      	b.n	8008292 <_dtoa_r+0x7fa>
 800839e:	d093      	beq.n	80082c8 <_dtoa_r+0x830>
 80083a0:	9a04      	ldr	r2, [sp, #16]
 80083a2:	331c      	adds	r3, #28
 80083a4:	441a      	add	r2, r3
 80083a6:	9204      	str	r2, [sp, #16]
 80083a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083aa:	441e      	add	r6, r3
 80083ac:	441a      	add	r2, r3
 80083ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80083b0:	e78a      	b.n	80082c8 <_dtoa_r+0x830>
 80083b2:	4603      	mov	r3, r0
 80083b4:	e7f4      	b.n	80083a0 <_dtoa_r+0x908>
 80083b6:	9b08      	ldr	r3, [sp, #32]
 80083b8:	46b8      	mov	r8, r7
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	dc20      	bgt.n	8008400 <_dtoa_r+0x968>
 80083be:	469b      	mov	fp, r3
 80083c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	dd1e      	ble.n	8008404 <_dtoa_r+0x96c>
 80083c6:	f1bb 0f00 	cmp.w	fp, #0
 80083ca:	f47f adb1 	bne.w	8007f30 <_dtoa_r+0x498>
 80083ce:	4621      	mov	r1, r4
 80083d0:	465b      	mov	r3, fp
 80083d2:	2205      	movs	r2, #5
 80083d4:	4648      	mov	r0, r9
 80083d6:	f000 fa93 	bl	8008900 <__multadd>
 80083da:	4601      	mov	r1, r0
 80083dc:	4604      	mov	r4, r0
 80083de:	9803      	ldr	r0, [sp, #12]
 80083e0:	f000 fce8 	bl	8008db4 <__mcmp>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	f77f ada3 	ble.w	8007f30 <_dtoa_r+0x498>
 80083ea:	4656      	mov	r6, sl
 80083ec:	2331      	movs	r3, #49	@ 0x31
 80083ee:	f108 0801 	add.w	r8, r8, #1
 80083f2:	f806 3b01 	strb.w	r3, [r6], #1
 80083f6:	e59f      	b.n	8007f38 <_dtoa_r+0x4a0>
 80083f8:	46b8      	mov	r8, r7
 80083fa:	9c08      	ldr	r4, [sp, #32]
 80083fc:	4625      	mov	r5, r4
 80083fe:	e7f4      	b.n	80083ea <_dtoa_r+0x952>
 8008400:	f8dd b020 	ldr.w	fp, [sp, #32]
 8008404:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008406:	2b00      	cmp	r3, #0
 8008408:	f000 8101 	beq.w	800860e <_dtoa_r+0xb76>
 800840c:	2e00      	cmp	r6, #0
 800840e:	dd05      	ble.n	800841c <_dtoa_r+0x984>
 8008410:	4629      	mov	r1, r5
 8008412:	4632      	mov	r2, r6
 8008414:	4648      	mov	r0, r9
 8008416:	f000 fc61 	bl	8008cdc <__lshift>
 800841a:	4605      	mov	r5, r0
 800841c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800841e:	2b00      	cmp	r3, #0
 8008420:	d05c      	beq.n	80084dc <_dtoa_r+0xa44>
 8008422:	4648      	mov	r0, r9
 8008424:	6869      	ldr	r1, [r5, #4]
 8008426:	f000 fa09 	bl	800883c <_Balloc>
 800842a:	4606      	mov	r6, r0
 800842c:	b928      	cbnz	r0, 800843a <_dtoa_r+0x9a2>
 800842e:	4602      	mov	r2, r0
 8008430:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008434:	4b80      	ldr	r3, [pc, #512]	@ (8008638 <_dtoa_r+0xba0>)
 8008436:	f7ff bb43 	b.w	8007ac0 <_dtoa_r+0x28>
 800843a:	692a      	ldr	r2, [r5, #16]
 800843c:	f105 010c 	add.w	r1, r5, #12
 8008440:	3202      	adds	r2, #2
 8008442:	0092      	lsls	r2, r2, #2
 8008444:	300c      	adds	r0, #12
 8008446:	f7ff fa8c 	bl	8007962 <memcpy>
 800844a:	2201      	movs	r2, #1
 800844c:	4631      	mov	r1, r6
 800844e:	4648      	mov	r0, r9
 8008450:	f000 fc44 	bl	8008cdc <__lshift>
 8008454:	462f      	mov	r7, r5
 8008456:	4605      	mov	r5, r0
 8008458:	f10a 0301 	add.w	r3, sl, #1
 800845c:	9304      	str	r3, [sp, #16]
 800845e:	eb0a 030b 	add.w	r3, sl, fp
 8008462:	930a      	str	r3, [sp, #40]	@ 0x28
 8008464:	9b06      	ldr	r3, [sp, #24]
 8008466:	f003 0301 	and.w	r3, r3, #1
 800846a:	9309      	str	r3, [sp, #36]	@ 0x24
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	4621      	mov	r1, r4
 8008470:	9803      	ldr	r0, [sp, #12]
 8008472:	f103 3bff 	add.w	fp, r3, #4294967295
 8008476:	f7ff fa87 	bl	8007988 <quorem>
 800847a:	4603      	mov	r3, r0
 800847c:	4639      	mov	r1, r7
 800847e:	3330      	adds	r3, #48	@ 0x30
 8008480:	9006      	str	r0, [sp, #24]
 8008482:	9803      	ldr	r0, [sp, #12]
 8008484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008486:	f000 fc95 	bl	8008db4 <__mcmp>
 800848a:	462a      	mov	r2, r5
 800848c:	9008      	str	r0, [sp, #32]
 800848e:	4621      	mov	r1, r4
 8008490:	4648      	mov	r0, r9
 8008492:	f000 fcab 	bl	8008dec <__mdiff>
 8008496:	68c2      	ldr	r2, [r0, #12]
 8008498:	4606      	mov	r6, r0
 800849a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800849c:	bb02      	cbnz	r2, 80084e0 <_dtoa_r+0xa48>
 800849e:	4601      	mov	r1, r0
 80084a0:	9803      	ldr	r0, [sp, #12]
 80084a2:	f000 fc87 	bl	8008db4 <__mcmp>
 80084a6:	4602      	mov	r2, r0
 80084a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084aa:	4631      	mov	r1, r6
 80084ac:	4648      	mov	r0, r9
 80084ae:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80084b2:	f000 fa03 	bl	80088bc <_Bfree>
 80084b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80084b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80084ba:	9e04      	ldr	r6, [sp, #16]
 80084bc:	ea42 0103 	orr.w	r1, r2, r3
 80084c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c2:	4319      	orrs	r1, r3
 80084c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084c6:	d10d      	bne.n	80084e4 <_dtoa_r+0xa4c>
 80084c8:	2b39      	cmp	r3, #57	@ 0x39
 80084ca:	d027      	beq.n	800851c <_dtoa_r+0xa84>
 80084cc:	9a08      	ldr	r2, [sp, #32]
 80084ce:	2a00      	cmp	r2, #0
 80084d0:	dd01      	ble.n	80084d6 <_dtoa_r+0xa3e>
 80084d2:	9b06      	ldr	r3, [sp, #24]
 80084d4:	3331      	adds	r3, #49	@ 0x31
 80084d6:	f88b 3000 	strb.w	r3, [fp]
 80084da:	e52e      	b.n	8007f3a <_dtoa_r+0x4a2>
 80084dc:	4628      	mov	r0, r5
 80084de:	e7b9      	b.n	8008454 <_dtoa_r+0x9bc>
 80084e0:	2201      	movs	r2, #1
 80084e2:	e7e2      	b.n	80084aa <_dtoa_r+0xa12>
 80084e4:	9908      	ldr	r1, [sp, #32]
 80084e6:	2900      	cmp	r1, #0
 80084e8:	db04      	blt.n	80084f4 <_dtoa_r+0xa5c>
 80084ea:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80084ec:	4301      	orrs	r1, r0
 80084ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084f0:	4301      	orrs	r1, r0
 80084f2:	d120      	bne.n	8008536 <_dtoa_r+0xa9e>
 80084f4:	2a00      	cmp	r2, #0
 80084f6:	ddee      	ble.n	80084d6 <_dtoa_r+0xa3e>
 80084f8:	2201      	movs	r2, #1
 80084fa:	9903      	ldr	r1, [sp, #12]
 80084fc:	4648      	mov	r0, r9
 80084fe:	9304      	str	r3, [sp, #16]
 8008500:	f000 fbec 	bl	8008cdc <__lshift>
 8008504:	4621      	mov	r1, r4
 8008506:	9003      	str	r0, [sp, #12]
 8008508:	f000 fc54 	bl	8008db4 <__mcmp>
 800850c:	2800      	cmp	r0, #0
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	dc02      	bgt.n	8008518 <_dtoa_r+0xa80>
 8008512:	d1e0      	bne.n	80084d6 <_dtoa_r+0xa3e>
 8008514:	07da      	lsls	r2, r3, #31
 8008516:	d5de      	bpl.n	80084d6 <_dtoa_r+0xa3e>
 8008518:	2b39      	cmp	r3, #57	@ 0x39
 800851a:	d1da      	bne.n	80084d2 <_dtoa_r+0xa3a>
 800851c:	2339      	movs	r3, #57	@ 0x39
 800851e:	f88b 3000 	strb.w	r3, [fp]
 8008522:	4633      	mov	r3, r6
 8008524:	461e      	mov	r6, r3
 8008526:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800852a:	3b01      	subs	r3, #1
 800852c:	2a39      	cmp	r2, #57	@ 0x39
 800852e:	d04e      	beq.n	80085ce <_dtoa_r+0xb36>
 8008530:	3201      	adds	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]
 8008534:	e501      	b.n	8007f3a <_dtoa_r+0x4a2>
 8008536:	2a00      	cmp	r2, #0
 8008538:	dd03      	ble.n	8008542 <_dtoa_r+0xaaa>
 800853a:	2b39      	cmp	r3, #57	@ 0x39
 800853c:	d0ee      	beq.n	800851c <_dtoa_r+0xa84>
 800853e:	3301      	adds	r3, #1
 8008540:	e7c9      	b.n	80084d6 <_dtoa_r+0xa3e>
 8008542:	9a04      	ldr	r2, [sp, #16]
 8008544:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008546:	f802 3c01 	strb.w	r3, [r2, #-1]
 800854a:	428a      	cmp	r2, r1
 800854c:	d028      	beq.n	80085a0 <_dtoa_r+0xb08>
 800854e:	2300      	movs	r3, #0
 8008550:	220a      	movs	r2, #10
 8008552:	9903      	ldr	r1, [sp, #12]
 8008554:	4648      	mov	r0, r9
 8008556:	f000 f9d3 	bl	8008900 <__multadd>
 800855a:	42af      	cmp	r7, r5
 800855c:	9003      	str	r0, [sp, #12]
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	f04f 020a 	mov.w	r2, #10
 8008566:	4639      	mov	r1, r7
 8008568:	4648      	mov	r0, r9
 800856a:	d107      	bne.n	800857c <_dtoa_r+0xae4>
 800856c:	f000 f9c8 	bl	8008900 <__multadd>
 8008570:	4607      	mov	r7, r0
 8008572:	4605      	mov	r5, r0
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	3301      	adds	r3, #1
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	e777      	b.n	800846c <_dtoa_r+0x9d4>
 800857c:	f000 f9c0 	bl	8008900 <__multadd>
 8008580:	4629      	mov	r1, r5
 8008582:	4607      	mov	r7, r0
 8008584:	2300      	movs	r3, #0
 8008586:	220a      	movs	r2, #10
 8008588:	4648      	mov	r0, r9
 800858a:	f000 f9b9 	bl	8008900 <__multadd>
 800858e:	4605      	mov	r5, r0
 8008590:	e7f0      	b.n	8008574 <_dtoa_r+0xadc>
 8008592:	f1bb 0f00 	cmp.w	fp, #0
 8008596:	bfcc      	ite	gt
 8008598:	465e      	movgt	r6, fp
 800859a:	2601      	movle	r6, #1
 800859c:	2700      	movs	r7, #0
 800859e:	4456      	add	r6, sl
 80085a0:	2201      	movs	r2, #1
 80085a2:	9903      	ldr	r1, [sp, #12]
 80085a4:	4648      	mov	r0, r9
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	f000 fb98 	bl	8008cdc <__lshift>
 80085ac:	4621      	mov	r1, r4
 80085ae:	9003      	str	r0, [sp, #12]
 80085b0:	f000 fc00 	bl	8008db4 <__mcmp>
 80085b4:	2800      	cmp	r0, #0
 80085b6:	dcb4      	bgt.n	8008522 <_dtoa_r+0xa8a>
 80085b8:	d102      	bne.n	80085c0 <_dtoa_r+0xb28>
 80085ba:	9b04      	ldr	r3, [sp, #16]
 80085bc:	07db      	lsls	r3, r3, #31
 80085be:	d4b0      	bmi.n	8008522 <_dtoa_r+0xa8a>
 80085c0:	4633      	mov	r3, r6
 80085c2:	461e      	mov	r6, r3
 80085c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085c8:	2a30      	cmp	r2, #48	@ 0x30
 80085ca:	d0fa      	beq.n	80085c2 <_dtoa_r+0xb2a>
 80085cc:	e4b5      	b.n	8007f3a <_dtoa_r+0x4a2>
 80085ce:	459a      	cmp	sl, r3
 80085d0:	d1a8      	bne.n	8008524 <_dtoa_r+0xa8c>
 80085d2:	2331      	movs	r3, #49	@ 0x31
 80085d4:	f108 0801 	add.w	r8, r8, #1
 80085d8:	f88a 3000 	strb.w	r3, [sl]
 80085dc:	e4ad      	b.n	8007f3a <_dtoa_r+0x4a2>
 80085de:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800863c <_dtoa_r+0xba4>
 80085e4:	b11b      	cbz	r3, 80085ee <_dtoa_r+0xb56>
 80085e6:	f10a 0308 	add.w	r3, sl, #8
 80085ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085ec:	6013      	str	r3, [r2, #0]
 80085ee:	4650      	mov	r0, sl
 80085f0:	b017      	add	sp, #92	@ 0x5c
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	f77f ae2e 	ble.w	800825a <_dtoa_r+0x7c2>
 80085fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008600:	930a      	str	r3, [sp, #40]	@ 0x28
 8008602:	2001      	movs	r0, #1
 8008604:	e64d      	b.n	80082a2 <_dtoa_r+0x80a>
 8008606:	f1bb 0f00 	cmp.w	fp, #0
 800860a:	f77f aed9 	ble.w	80083c0 <_dtoa_r+0x928>
 800860e:	4656      	mov	r6, sl
 8008610:	4621      	mov	r1, r4
 8008612:	9803      	ldr	r0, [sp, #12]
 8008614:	f7ff f9b8 	bl	8007988 <quorem>
 8008618:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800861c:	f806 3b01 	strb.w	r3, [r6], #1
 8008620:	eba6 020a 	sub.w	r2, r6, sl
 8008624:	4593      	cmp	fp, r2
 8008626:	ddb4      	ble.n	8008592 <_dtoa_r+0xafa>
 8008628:	2300      	movs	r3, #0
 800862a:	220a      	movs	r2, #10
 800862c:	4648      	mov	r0, r9
 800862e:	9903      	ldr	r1, [sp, #12]
 8008630:	f000 f966 	bl	8008900 <__multadd>
 8008634:	9003      	str	r0, [sp, #12]
 8008636:	e7eb      	b.n	8008610 <_dtoa_r+0xb78>
 8008638:	0800c6fd 	.word	0x0800c6fd
 800863c:	0800c681 	.word	0x0800c681

08008640 <_free_r>:
 8008640:	b538      	push	{r3, r4, r5, lr}
 8008642:	4605      	mov	r5, r0
 8008644:	2900      	cmp	r1, #0
 8008646:	d040      	beq.n	80086ca <_free_r+0x8a>
 8008648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800864c:	1f0c      	subs	r4, r1, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	bfb8      	it	lt
 8008652:	18e4      	addlt	r4, r4, r3
 8008654:	f000 f8e6 	bl	8008824 <__malloc_lock>
 8008658:	4a1c      	ldr	r2, [pc, #112]	@ (80086cc <_free_r+0x8c>)
 800865a:	6813      	ldr	r3, [r2, #0]
 800865c:	b933      	cbnz	r3, 800866c <_free_r+0x2c>
 800865e:	6063      	str	r3, [r4, #4]
 8008660:	6014      	str	r4, [r2, #0]
 8008662:	4628      	mov	r0, r5
 8008664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008668:	f000 b8e2 	b.w	8008830 <__malloc_unlock>
 800866c:	42a3      	cmp	r3, r4
 800866e:	d908      	bls.n	8008682 <_free_r+0x42>
 8008670:	6820      	ldr	r0, [r4, #0]
 8008672:	1821      	adds	r1, r4, r0
 8008674:	428b      	cmp	r3, r1
 8008676:	bf01      	itttt	eq
 8008678:	6819      	ldreq	r1, [r3, #0]
 800867a:	685b      	ldreq	r3, [r3, #4]
 800867c:	1809      	addeq	r1, r1, r0
 800867e:	6021      	streq	r1, [r4, #0]
 8008680:	e7ed      	b.n	800865e <_free_r+0x1e>
 8008682:	461a      	mov	r2, r3
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	b10b      	cbz	r3, 800868c <_free_r+0x4c>
 8008688:	42a3      	cmp	r3, r4
 800868a:	d9fa      	bls.n	8008682 <_free_r+0x42>
 800868c:	6811      	ldr	r1, [r2, #0]
 800868e:	1850      	adds	r0, r2, r1
 8008690:	42a0      	cmp	r0, r4
 8008692:	d10b      	bne.n	80086ac <_free_r+0x6c>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	4401      	add	r1, r0
 8008698:	1850      	adds	r0, r2, r1
 800869a:	4283      	cmp	r3, r0
 800869c:	6011      	str	r1, [r2, #0]
 800869e:	d1e0      	bne.n	8008662 <_free_r+0x22>
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	4408      	add	r0, r1
 80086a6:	6010      	str	r0, [r2, #0]
 80086a8:	6053      	str	r3, [r2, #4]
 80086aa:	e7da      	b.n	8008662 <_free_r+0x22>
 80086ac:	d902      	bls.n	80086b4 <_free_r+0x74>
 80086ae:	230c      	movs	r3, #12
 80086b0:	602b      	str	r3, [r5, #0]
 80086b2:	e7d6      	b.n	8008662 <_free_r+0x22>
 80086b4:	6820      	ldr	r0, [r4, #0]
 80086b6:	1821      	adds	r1, r4, r0
 80086b8:	428b      	cmp	r3, r1
 80086ba:	bf01      	itttt	eq
 80086bc:	6819      	ldreq	r1, [r3, #0]
 80086be:	685b      	ldreq	r3, [r3, #4]
 80086c0:	1809      	addeq	r1, r1, r0
 80086c2:	6021      	streq	r1, [r4, #0]
 80086c4:	6063      	str	r3, [r4, #4]
 80086c6:	6054      	str	r4, [r2, #4]
 80086c8:	e7cb      	b.n	8008662 <_free_r+0x22>
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20001284 	.word	0x20001284

080086d0 <malloc>:
 80086d0:	4b02      	ldr	r3, [pc, #8]	@ (80086dc <malloc+0xc>)
 80086d2:	4601      	mov	r1, r0
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	f000 b825 	b.w	8008724 <_malloc_r>
 80086da:	bf00      	nop
 80086dc:	20000030 	.word	0x20000030

080086e0 <sbrk_aligned>:
 80086e0:	b570      	push	{r4, r5, r6, lr}
 80086e2:	4e0f      	ldr	r6, [pc, #60]	@ (8008720 <sbrk_aligned+0x40>)
 80086e4:	460c      	mov	r4, r1
 80086e6:	6831      	ldr	r1, [r6, #0]
 80086e8:	4605      	mov	r5, r0
 80086ea:	b911      	cbnz	r1, 80086f2 <sbrk_aligned+0x12>
 80086ec:	f001 ffb2 	bl	800a654 <_sbrk_r>
 80086f0:	6030      	str	r0, [r6, #0]
 80086f2:	4621      	mov	r1, r4
 80086f4:	4628      	mov	r0, r5
 80086f6:	f001 ffad 	bl	800a654 <_sbrk_r>
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	d103      	bne.n	8008706 <sbrk_aligned+0x26>
 80086fe:	f04f 34ff 	mov.w	r4, #4294967295
 8008702:	4620      	mov	r0, r4
 8008704:	bd70      	pop	{r4, r5, r6, pc}
 8008706:	1cc4      	adds	r4, r0, #3
 8008708:	f024 0403 	bic.w	r4, r4, #3
 800870c:	42a0      	cmp	r0, r4
 800870e:	d0f8      	beq.n	8008702 <sbrk_aligned+0x22>
 8008710:	1a21      	subs	r1, r4, r0
 8008712:	4628      	mov	r0, r5
 8008714:	f001 ff9e 	bl	800a654 <_sbrk_r>
 8008718:	3001      	adds	r0, #1
 800871a:	d1f2      	bne.n	8008702 <sbrk_aligned+0x22>
 800871c:	e7ef      	b.n	80086fe <sbrk_aligned+0x1e>
 800871e:	bf00      	nop
 8008720:	20001280 	.word	0x20001280

08008724 <_malloc_r>:
 8008724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008728:	1ccd      	adds	r5, r1, #3
 800872a:	f025 0503 	bic.w	r5, r5, #3
 800872e:	3508      	adds	r5, #8
 8008730:	2d0c      	cmp	r5, #12
 8008732:	bf38      	it	cc
 8008734:	250c      	movcc	r5, #12
 8008736:	2d00      	cmp	r5, #0
 8008738:	4606      	mov	r6, r0
 800873a:	db01      	blt.n	8008740 <_malloc_r+0x1c>
 800873c:	42a9      	cmp	r1, r5
 800873e:	d904      	bls.n	800874a <_malloc_r+0x26>
 8008740:	230c      	movs	r3, #12
 8008742:	6033      	str	r3, [r6, #0]
 8008744:	2000      	movs	r0, #0
 8008746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800874a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008820 <_malloc_r+0xfc>
 800874e:	f000 f869 	bl	8008824 <__malloc_lock>
 8008752:	f8d8 3000 	ldr.w	r3, [r8]
 8008756:	461c      	mov	r4, r3
 8008758:	bb44      	cbnz	r4, 80087ac <_malloc_r+0x88>
 800875a:	4629      	mov	r1, r5
 800875c:	4630      	mov	r0, r6
 800875e:	f7ff ffbf 	bl	80086e0 <sbrk_aligned>
 8008762:	1c43      	adds	r3, r0, #1
 8008764:	4604      	mov	r4, r0
 8008766:	d158      	bne.n	800881a <_malloc_r+0xf6>
 8008768:	f8d8 4000 	ldr.w	r4, [r8]
 800876c:	4627      	mov	r7, r4
 800876e:	2f00      	cmp	r7, #0
 8008770:	d143      	bne.n	80087fa <_malloc_r+0xd6>
 8008772:	2c00      	cmp	r4, #0
 8008774:	d04b      	beq.n	800880e <_malloc_r+0xea>
 8008776:	6823      	ldr	r3, [r4, #0]
 8008778:	4639      	mov	r1, r7
 800877a:	4630      	mov	r0, r6
 800877c:	eb04 0903 	add.w	r9, r4, r3
 8008780:	f001 ff68 	bl	800a654 <_sbrk_r>
 8008784:	4581      	cmp	r9, r0
 8008786:	d142      	bne.n	800880e <_malloc_r+0xea>
 8008788:	6821      	ldr	r1, [r4, #0]
 800878a:	4630      	mov	r0, r6
 800878c:	1a6d      	subs	r5, r5, r1
 800878e:	4629      	mov	r1, r5
 8008790:	f7ff ffa6 	bl	80086e0 <sbrk_aligned>
 8008794:	3001      	adds	r0, #1
 8008796:	d03a      	beq.n	800880e <_malloc_r+0xea>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	442b      	add	r3, r5
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	f8d8 3000 	ldr.w	r3, [r8]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	bb62      	cbnz	r2, 8008800 <_malloc_r+0xdc>
 80087a6:	f8c8 7000 	str.w	r7, [r8]
 80087aa:	e00f      	b.n	80087cc <_malloc_r+0xa8>
 80087ac:	6822      	ldr	r2, [r4, #0]
 80087ae:	1b52      	subs	r2, r2, r5
 80087b0:	d420      	bmi.n	80087f4 <_malloc_r+0xd0>
 80087b2:	2a0b      	cmp	r2, #11
 80087b4:	d917      	bls.n	80087e6 <_malloc_r+0xc2>
 80087b6:	1961      	adds	r1, r4, r5
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	6025      	str	r5, [r4, #0]
 80087bc:	bf18      	it	ne
 80087be:	6059      	strne	r1, [r3, #4]
 80087c0:	6863      	ldr	r3, [r4, #4]
 80087c2:	bf08      	it	eq
 80087c4:	f8c8 1000 	streq.w	r1, [r8]
 80087c8:	5162      	str	r2, [r4, r5]
 80087ca:	604b      	str	r3, [r1, #4]
 80087cc:	4630      	mov	r0, r6
 80087ce:	f000 f82f 	bl	8008830 <__malloc_unlock>
 80087d2:	f104 000b 	add.w	r0, r4, #11
 80087d6:	1d23      	adds	r3, r4, #4
 80087d8:	f020 0007 	bic.w	r0, r0, #7
 80087dc:	1ac2      	subs	r2, r0, r3
 80087de:	bf1c      	itt	ne
 80087e0:	1a1b      	subne	r3, r3, r0
 80087e2:	50a3      	strne	r3, [r4, r2]
 80087e4:	e7af      	b.n	8008746 <_malloc_r+0x22>
 80087e6:	6862      	ldr	r2, [r4, #4]
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	bf0c      	ite	eq
 80087ec:	f8c8 2000 	streq.w	r2, [r8]
 80087f0:	605a      	strne	r2, [r3, #4]
 80087f2:	e7eb      	b.n	80087cc <_malloc_r+0xa8>
 80087f4:	4623      	mov	r3, r4
 80087f6:	6864      	ldr	r4, [r4, #4]
 80087f8:	e7ae      	b.n	8008758 <_malloc_r+0x34>
 80087fa:	463c      	mov	r4, r7
 80087fc:	687f      	ldr	r7, [r7, #4]
 80087fe:	e7b6      	b.n	800876e <_malloc_r+0x4a>
 8008800:	461a      	mov	r2, r3
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	42a3      	cmp	r3, r4
 8008806:	d1fb      	bne.n	8008800 <_malloc_r+0xdc>
 8008808:	2300      	movs	r3, #0
 800880a:	6053      	str	r3, [r2, #4]
 800880c:	e7de      	b.n	80087cc <_malloc_r+0xa8>
 800880e:	230c      	movs	r3, #12
 8008810:	4630      	mov	r0, r6
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	f000 f80c 	bl	8008830 <__malloc_unlock>
 8008818:	e794      	b.n	8008744 <_malloc_r+0x20>
 800881a:	6005      	str	r5, [r0, #0]
 800881c:	e7d6      	b.n	80087cc <_malloc_r+0xa8>
 800881e:	bf00      	nop
 8008820:	20001284 	.word	0x20001284

08008824 <__malloc_lock>:
 8008824:	4801      	ldr	r0, [pc, #4]	@ (800882c <__malloc_lock+0x8>)
 8008826:	f7ff b88c 	b.w	8007942 <__retarget_lock_acquire_recursive>
 800882a:	bf00      	nop
 800882c:	2000127c 	.word	0x2000127c

08008830 <__malloc_unlock>:
 8008830:	4801      	ldr	r0, [pc, #4]	@ (8008838 <__malloc_unlock+0x8>)
 8008832:	f7ff b887 	b.w	8007944 <__retarget_lock_release_recursive>
 8008836:	bf00      	nop
 8008838:	2000127c 	.word	0x2000127c

0800883c <_Balloc>:
 800883c:	b570      	push	{r4, r5, r6, lr}
 800883e:	69c6      	ldr	r6, [r0, #28]
 8008840:	4604      	mov	r4, r0
 8008842:	460d      	mov	r5, r1
 8008844:	b976      	cbnz	r6, 8008864 <_Balloc+0x28>
 8008846:	2010      	movs	r0, #16
 8008848:	f7ff ff42 	bl	80086d0 <malloc>
 800884c:	4602      	mov	r2, r0
 800884e:	61e0      	str	r0, [r4, #28]
 8008850:	b920      	cbnz	r0, 800885c <_Balloc+0x20>
 8008852:	216b      	movs	r1, #107	@ 0x6b
 8008854:	4b17      	ldr	r3, [pc, #92]	@ (80088b4 <_Balloc+0x78>)
 8008856:	4818      	ldr	r0, [pc, #96]	@ (80088b8 <_Balloc+0x7c>)
 8008858:	f001 ff12 	bl	800a680 <__assert_func>
 800885c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008860:	6006      	str	r6, [r0, #0]
 8008862:	60c6      	str	r6, [r0, #12]
 8008864:	69e6      	ldr	r6, [r4, #28]
 8008866:	68f3      	ldr	r3, [r6, #12]
 8008868:	b183      	cbz	r3, 800888c <_Balloc+0x50>
 800886a:	69e3      	ldr	r3, [r4, #28]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008872:	b9b8      	cbnz	r0, 80088a4 <_Balloc+0x68>
 8008874:	2101      	movs	r1, #1
 8008876:	fa01 f605 	lsl.w	r6, r1, r5
 800887a:	1d72      	adds	r2, r6, #5
 800887c:	4620      	mov	r0, r4
 800887e:	0092      	lsls	r2, r2, #2
 8008880:	f001 ff1c 	bl	800a6bc <_calloc_r>
 8008884:	b160      	cbz	r0, 80088a0 <_Balloc+0x64>
 8008886:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800888a:	e00e      	b.n	80088aa <_Balloc+0x6e>
 800888c:	2221      	movs	r2, #33	@ 0x21
 800888e:	2104      	movs	r1, #4
 8008890:	4620      	mov	r0, r4
 8008892:	f001 ff13 	bl	800a6bc <_calloc_r>
 8008896:	69e3      	ldr	r3, [r4, #28]
 8008898:	60f0      	str	r0, [r6, #12]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e4      	bne.n	800886a <_Balloc+0x2e>
 80088a0:	2000      	movs	r0, #0
 80088a2:	bd70      	pop	{r4, r5, r6, pc}
 80088a4:	6802      	ldr	r2, [r0, #0]
 80088a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088aa:	2300      	movs	r3, #0
 80088ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088b0:	e7f7      	b.n	80088a2 <_Balloc+0x66>
 80088b2:	bf00      	nop
 80088b4:	0800c68e 	.word	0x0800c68e
 80088b8:	0800c70e 	.word	0x0800c70e

080088bc <_Bfree>:
 80088bc:	b570      	push	{r4, r5, r6, lr}
 80088be:	69c6      	ldr	r6, [r0, #28]
 80088c0:	4605      	mov	r5, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	b976      	cbnz	r6, 80088e4 <_Bfree+0x28>
 80088c6:	2010      	movs	r0, #16
 80088c8:	f7ff ff02 	bl	80086d0 <malloc>
 80088cc:	4602      	mov	r2, r0
 80088ce:	61e8      	str	r0, [r5, #28]
 80088d0:	b920      	cbnz	r0, 80088dc <_Bfree+0x20>
 80088d2:	218f      	movs	r1, #143	@ 0x8f
 80088d4:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <_Bfree+0x3c>)
 80088d6:	4809      	ldr	r0, [pc, #36]	@ (80088fc <_Bfree+0x40>)
 80088d8:	f001 fed2 	bl	800a680 <__assert_func>
 80088dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088e0:	6006      	str	r6, [r0, #0]
 80088e2:	60c6      	str	r6, [r0, #12]
 80088e4:	b13c      	cbz	r4, 80088f6 <_Bfree+0x3a>
 80088e6:	69eb      	ldr	r3, [r5, #28]
 80088e8:	6862      	ldr	r2, [r4, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088f0:	6021      	str	r1, [r4, #0]
 80088f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
 80088f8:	0800c68e 	.word	0x0800c68e
 80088fc:	0800c70e 	.word	0x0800c70e

08008900 <__multadd>:
 8008900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008904:	4607      	mov	r7, r0
 8008906:	460c      	mov	r4, r1
 8008908:	461e      	mov	r6, r3
 800890a:	2000      	movs	r0, #0
 800890c:	690d      	ldr	r5, [r1, #16]
 800890e:	f101 0c14 	add.w	ip, r1, #20
 8008912:	f8dc 3000 	ldr.w	r3, [ip]
 8008916:	3001      	adds	r0, #1
 8008918:	b299      	uxth	r1, r3
 800891a:	fb02 6101 	mla	r1, r2, r1, r6
 800891e:	0c1e      	lsrs	r6, r3, #16
 8008920:	0c0b      	lsrs	r3, r1, #16
 8008922:	fb02 3306 	mla	r3, r2, r6, r3
 8008926:	b289      	uxth	r1, r1
 8008928:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800892c:	4285      	cmp	r5, r0
 800892e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008932:	f84c 1b04 	str.w	r1, [ip], #4
 8008936:	dcec      	bgt.n	8008912 <__multadd+0x12>
 8008938:	b30e      	cbz	r6, 800897e <__multadd+0x7e>
 800893a:	68a3      	ldr	r3, [r4, #8]
 800893c:	42ab      	cmp	r3, r5
 800893e:	dc19      	bgt.n	8008974 <__multadd+0x74>
 8008940:	6861      	ldr	r1, [r4, #4]
 8008942:	4638      	mov	r0, r7
 8008944:	3101      	adds	r1, #1
 8008946:	f7ff ff79 	bl	800883c <_Balloc>
 800894a:	4680      	mov	r8, r0
 800894c:	b928      	cbnz	r0, 800895a <__multadd+0x5a>
 800894e:	4602      	mov	r2, r0
 8008950:	21ba      	movs	r1, #186	@ 0xba
 8008952:	4b0c      	ldr	r3, [pc, #48]	@ (8008984 <__multadd+0x84>)
 8008954:	480c      	ldr	r0, [pc, #48]	@ (8008988 <__multadd+0x88>)
 8008956:	f001 fe93 	bl	800a680 <__assert_func>
 800895a:	6922      	ldr	r2, [r4, #16]
 800895c:	f104 010c 	add.w	r1, r4, #12
 8008960:	3202      	adds	r2, #2
 8008962:	0092      	lsls	r2, r2, #2
 8008964:	300c      	adds	r0, #12
 8008966:	f7fe fffc 	bl	8007962 <memcpy>
 800896a:	4621      	mov	r1, r4
 800896c:	4638      	mov	r0, r7
 800896e:	f7ff ffa5 	bl	80088bc <_Bfree>
 8008972:	4644      	mov	r4, r8
 8008974:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008978:	3501      	adds	r5, #1
 800897a:	615e      	str	r6, [r3, #20]
 800897c:	6125      	str	r5, [r4, #16]
 800897e:	4620      	mov	r0, r4
 8008980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008984:	0800c6fd 	.word	0x0800c6fd
 8008988:	0800c70e 	.word	0x0800c70e

0800898c <__s2b>:
 800898c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008990:	4615      	mov	r5, r2
 8008992:	2209      	movs	r2, #9
 8008994:	461f      	mov	r7, r3
 8008996:	3308      	adds	r3, #8
 8008998:	460c      	mov	r4, r1
 800899a:	fb93 f3f2 	sdiv	r3, r3, r2
 800899e:	4606      	mov	r6, r0
 80089a0:	2201      	movs	r2, #1
 80089a2:	2100      	movs	r1, #0
 80089a4:	429a      	cmp	r2, r3
 80089a6:	db09      	blt.n	80089bc <__s2b+0x30>
 80089a8:	4630      	mov	r0, r6
 80089aa:	f7ff ff47 	bl	800883c <_Balloc>
 80089ae:	b940      	cbnz	r0, 80089c2 <__s2b+0x36>
 80089b0:	4602      	mov	r2, r0
 80089b2:	21d3      	movs	r1, #211	@ 0xd3
 80089b4:	4b18      	ldr	r3, [pc, #96]	@ (8008a18 <__s2b+0x8c>)
 80089b6:	4819      	ldr	r0, [pc, #100]	@ (8008a1c <__s2b+0x90>)
 80089b8:	f001 fe62 	bl	800a680 <__assert_func>
 80089bc:	0052      	lsls	r2, r2, #1
 80089be:	3101      	adds	r1, #1
 80089c0:	e7f0      	b.n	80089a4 <__s2b+0x18>
 80089c2:	9b08      	ldr	r3, [sp, #32]
 80089c4:	2d09      	cmp	r5, #9
 80089c6:	6143      	str	r3, [r0, #20]
 80089c8:	f04f 0301 	mov.w	r3, #1
 80089cc:	6103      	str	r3, [r0, #16]
 80089ce:	dd16      	ble.n	80089fe <__s2b+0x72>
 80089d0:	f104 0909 	add.w	r9, r4, #9
 80089d4:	46c8      	mov	r8, r9
 80089d6:	442c      	add	r4, r5
 80089d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089dc:	4601      	mov	r1, r0
 80089de:	220a      	movs	r2, #10
 80089e0:	4630      	mov	r0, r6
 80089e2:	3b30      	subs	r3, #48	@ 0x30
 80089e4:	f7ff ff8c 	bl	8008900 <__multadd>
 80089e8:	45a0      	cmp	r8, r4
 80089ea:	d1f5      	bne.n	80089d8 <__s2b+0x4c>
 80089ec:	f1a5 0408 	sub.w	r4, r5, #8
 80089f0:	444c      	add	r4, r9
 80089f2:	1b2d      	subs	r5, r5, r4
 80089f4:	1963      	adds	r3, r4, r5
 80089f6:	42bb      	cmp	r3, r7
 80089f8:	db04      	blt.n	8008a04 <__s2b+0x78>
 80089fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089fe:	2509      	movs	r5, #9
 8008a00:	340a      	adds	r4, #10
 8008a02:	e7f6      	b.n	80089f2 <__s2b+0x66>
 8008a04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a08:	4601      	mov	r1, r0
 8008a0a:	220a      	movs	r2, #10
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	3b30      	subs	r3, #48	@ 0x30
 8008a10:	f7ff ff76 	bl	8008900 <__multadd>
 8008a14:	e7ee      	b.n	80089f4 <__s2b+0x68>
 8008a16:	bf00      	nop
 8008a18:	0800c6fd 	.word	0x0800c6fd
 8008a1c:	0800c70e 	.word	0x0800c70e

08008a20 <__hi0bits>:
 8008a20:	4603      	mov	r3, r0
 8008a22:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a26:	bf3a      	itte	cc
 8008a28:	0403      	lslcc	r3, r0, #16
 8008a2a:	2010      	movcc	r0, #16
 8008a2c:	2000      	movcs	r0, #0
 8008a2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a32:	bf3c      	itt	cc
 8008a34:	021b      	lslcc	r3, r3, #8
 8008a36:	3008      	addcc	r0, #8
 8008a38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a3c:	bf3c      	itt	cc
 8008a3e:	011b      	lslcc	r3, r3, #4
 8008a40:	3004      	addcc	r0, #4
 8008a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a46:	bf3c      	itt	cc
 8008a48:	009b      	lslcc	r3, r3, #2
 8008a4a:	3002      	addcc	r0, #2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	db05      	blt.n	8008a5c <__hi0bits+0x3c>
 8008a50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a54:	f100 0001 	add.w	r0, r0, #1
 8008a58:	bf08      	it	eq
 8008a5a:	2020      	moveq	r0, #32
 8008a5c:	4770      	bx	lr

08008a5e <__lo0bits>:
 8008a5e:	6803      	ldr	r3, [r0, #0]
 8008a60:	4602      	mov	r2, r0
 8008a62:	f013 0007 	ands.w	r0, r3, #7
 8008a66:	d00b      	beq.n	8008a80 <__lo0bits+0x22>
 8008a68:	07d9      	lsls	r1, r3, #31
 8008a6a:	d421      	bmi.n	8008ab0 <__lo0bits+0x52>
 8008a6c:	0798      	lsls	r0, r3, #30
 8008a6e:	bf49      	itett	mi
 8008a70:	085b      	lsrmi	r3, r3, #1
 8008a72:	089b      	lsrpl	r3, r3, #2
 8008a74:	2001      	movmi	r0, #1
 8008a76:	6013      	strmi	r3, [r2, #0]
 8008a78:	bf5c      	itt	pl
 8008a7a:	2002      	movpl	r0, #2
 8008a7c:	6013      	strpl	r3, [r2, #0]
 8008a7e:	4770      	bx	lr
 8008a80:	b299      	uxth	r1, r3
 8008a82:	b909      	cbnz	r1, 8008a88 <__lo0bits+0x2a>
 8008a84:	2010      	movs	r0, #16
 8008a86:	0c1b      	lsrs	r3, r3, #16
 8008a88:	b2d9      	uxtb	r1, r3
 8008a8a:	b909      	cbnz	r1, 8008a90 <__lo0bits+0x32>
 8008a8c:	3008      	adds	r0, #8
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	0719      	lsls	r1, r3, #28
 8008a92:	bf04      	itt	eq
 8008a94:	091b      	lsreq	r3, r3, #4
 8008a96:	3004      	addeq	r0, #4
 8008a98:	0799      	lsls	r1, r3, #30
 8008a9a:	bf04      	itt	eq
 8008a9c:	089b      	lsreq	r3, r3, #2
 8008a9e:	3002      	addeq	r0, #2
 8008aa0:	07d9      	lsls	r1, r3, #31
 8008aa2:	d403      	bmi.n	8008aac <__lo0bits+0x4e>
 8008aa4:	085b      	lsrs	r3, r3, #1
 8008aa6:	f100 0001 	add.w	r0, r0, #1
 8008aaa:	d003      	beq.n	8008ab4 <__lo0bits+0x56>
 8008aac:	6013      	str	r3, [r2, #0]
 8008aae:	4770      	bx	lr
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4770      	bx	lr
 8008ab4:	2020      	movs	r0, #32
 8008ab6:	4770      	bx	lr

08008ab8 <__i2b>:
 8008ab8:	b510      	push	{r4, lr}
 8008aba:	460c      	mov	r4, r1
 8008abc:	2101      	movs	r1, #1
 8008abe:	f7ff febd 	bl	800883c <_Balloc>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	b928      	cbnz	r0, 8008ad2 <__i2b+0x1a>
 8008ac6:	f240 1145 	movw	r1, #325	@ 0x145
 8008aca:	4b04      	ldr	r3, [pc, #16]	@ (8008adc <__i2b+0x24>)
 8008acc:	4804      	ldr	r0, [pc, #16]	@ (8008ae0 <__i2b+0x28>)
 8008ace:	f001 fdd7 	bl	800a680 <__assert_func>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	6144      	str	r4, [r0, #20]
 8008ad6:	6103      	str	r3, [r0, #16]
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	bf00      	nop
 8008adc:	0800c6fd 	.word	0x0800c6fd
 8008ae0:	0800c70e 	.word	0x0800c70e

08008ae4 <__multiply>:
 8008ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ae8:	4617      	mov	r7, r2
 8008aea:	690a      	ldr	r2, [r1, #16]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4689      	mov	r9, r1
 8008af0:	429a      	cmp	r2, r3
 8008af2:	bfa2      	ittt	ge
 8008af4:	463b      	movge	r3, r7
 8008af6:	460f      	movge	r7, r1
 8008af8:	4699      	movge	r9, r3
 8008afa:	693d      	ldr	r5, [r7, #16]
 8008afc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	6879      	ldr	r1, [r7, #4]
 8008b04:	eb05 060a 	add.w	r6, r5, sl
 8008b08:	42b3      	cmp	r3, r6
 8008b0a:	b085      	sub	sp, #20
 8008b0c:	bfb8      	it	lt
 8008b0e:	3101      	addlt	r1, #1
 8008b10:	f7ff fe94 	bl	800883c <_Balloc>
 8008b14:	b930      	cbnz	r0, 8008b24 <__multiply+0x40>
 8008b16:	4602      	mov	r2, r0
 8008b18:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b1c:	4b40      	ldr	r3, [pc, #256]	@ (8008c20 <__multiply+0x13c>)
 8008b1e:	4841      	ldr	r0, [pc, #260]	@ (8008c24 <__multiply+0x140>)
 8008b20:	f001 fdae 	bl	800a680 <__assert_func>
 8008b24:	f100 0414 	add.w	r4, r0, #20
 8008b28:	4623      	mov	r3, r4
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008b30:	4573      	cmp	r3, lr
 8008b32:	d320      	bcc.n	8008b76 <__multiply+0x92>
 8008b34:	f107 0814 	add.w	r8, r7, #20
 8008b38:	f109 0114 	add.w	r1, r9, #20
 8008b3c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b40:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b44:	9302      	str	r3, [sp, #8]
 8008b46:	1beb      	subs	r3, r5, r7
 8008b48:	3b15      	subs	r3, #21
 8008b4a:	f023 0303 	bic.w	r3, r3, #3
 8008b4e:	3304      	adds	r3, #4
 8008b50:	3715      	adds	r7, #21
 8008b52:	42bd      	cmp	r5, r7
 8008b54:	bf38      	it	cc
 8008b56:	2304      	movcc	r3, #4
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	9103      	str	r1, [sp, #12]
 8008b5e:	428b      	cmp	r3, r1
 8008b60:	d80c      	bhi.n	8008b7c <__multiply+0x98>
 8008b62:	2e00      	cmp	r6, #0
 8008b64:	dd03      	ble.n	8008b6e <__multiply+0x8a>
 8008b66:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d055      	beq.n	8008c1a <__multiply+0x136>
 8008b6e:	6106      	str	r6, [r0, #16]
 8008b70:	b005      	add	sp, #20
 8008b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b76:	f843 2b04 	str.w	r2, [r3], #4
 8008b7a:	e7d9      	b.n	8008b30 <__multiply+0x4c>
 8008b7c:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b80:	f1ba 0f00 	cmp.w	sl, #0
 8008b84:	d01f      	beq.n	8008bc6 <__multiply+0xe2>
 8008b86:	46c4      	mov	ip, r8
 8008b88:	46a1      	mov	r9, r4
 8008b8a:	2700      	movs	r7, #0
 8008b8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b90:	f8d9 3000 	ldr.w	r3, [r9]
 8008b94:	fa1f fb82 	uxth.w	fp, r2
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b9e:	443b      	add	r3, r7
 8008ba0:	f8d9 7000 	ldr.w	r7, [r9]
 8008ba4:	0c12      	lsrs	r2, r2, #16
 8008ba6:	0c3f      	lsrs	r7, r7, #16
 8008ba8:	fb0a 7202 	mla	r2, sl, r2, r7
 8008bac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bb6:	4565      	cmp	r5, ip
 8008bb8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008bbc:	f849 3b04 	str.w	r3, [r9], #4
 8008bc0:	d8e4      	bhi.n	8008b8c <__multiply+0xa8>
 8008bc2:	9b01      	ldr	r3, [sp, #4]
 8008bc4:	50e7      	str	r7, [r4, r3]
 8008bc6:	9b03      	ldr	r3, [sp, #12]
 8008bc8:	3104      	adds	r1, #4
 8008bca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008bce:	f1b9 0f00 	cmp.w	r9, #0
 8008bd2:	d020      	beq.n	8008c16 <__multiply+0x132>
 8008bd4:	4647      	mov	r7, r8
 8008bd6:	46a4      	mov	ip, r4
 8008bd8:	f04f 0a00 	mov.w	sl, #0
 8008bdc:	6823      	ldr	r3, [r4, #0]
 8008bde:	f8b7 b000 	ldrh.w	fp, [r7]
 8008be2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	fb09 220b 	mla	r2, r9, fp, r2
 8008bec:	4452      	add	r2, sl
 8008bee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8008bf6:	f857 3b04 	ldr.w	r3, [r7], #4
 8008bfa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bfe:	f8bc 3000 	ldrh.w	r3, [ip]
 8008c02:	42bd      	cmp	r5, r7
 8008c04:	fb09 330a 	mla	r3, r9, sl, r3
 8008c08:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008c0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c10:	d8e5      	bhi.n	8008bde <__multiply+0xfa>
 8008c12:	9a01      	ldr	r2, [sp, #4]
 8008c14:	50a3      	str	r3, [r4, r2]
 8008c16:	3404      	adds	r4, #4
 8008c18:	e79f      	b.n	8008b5a <__multiply+0x76>
 8008c1a:	3e01      	subs	r6, #1
 8008c1c:	e7a1      	b.n	8008b62 <__multiply+0x7e>
 8008c1e:	bf00      	nop
 8008c20:	0800c6fd 	.word	0x0800c6fd
 8008c24:	0800c70e 	.word	0x0800c70e

08008c28 <__pow5mult>:
 8008c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c2c:	4615      	mov	r5, r2
 8008c2e:	f012 0203 	ands.w	r2, r2, #3
 8008c32:	4607      	mov	r7, r0
 8008c34:	460e      	mov	r6, r1
 8008c36:	d007      	beq.n	8008c48 <__pow5mult+0x20>
 8008c38:	4c25      	ldr	r4, [pc, #148]	@ (8008cd0 <__pow5mult+0xa8>)
 8008c3a:	3a01      	subs	r2, #1
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c42:	f7ff fe5d 	bl	8008900 <__multadd>
 8008c46:	4606      	mov	r6, r0
 8008c48:	10ad      	asrs	r5, r5, #2
 8008c4a:	d03d      	beq.n	8008cc8 <__pow5mult+0xa0>
 8008c4c:	69fc      	ldr	r4, [r7, #28]
 8008c4e:	b97c      	cbnz	r4, 8008c70 <__pow5mult+0x48>
 8008c50:	2010      	movs	r0, #16
 8008c52:	f7ff fd3d 	bl	80086d0 <malloc>
 8008c56:	4602      	mov	r2, r0
 8008c58:	61f8      	str	r0, [r7, #28]
 8008c5a:	b928      	cbnz	r0, 8008c68 <__pow5mult+0x40>
 8008c5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c60:	4b1c      	ldr	r3, [pc, #112]	@ (8008cd4 <__pow5mult+0xac>)
 8008c62:	481d      	ldr	r0, [pc, #116]	@ (8008cd8 <__pow5mult+0xb0>)
 8008c64:	f001 fd0c 	bl	800a680 <__assert_func>
 8008c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c6c:	6004      	str	r4, [r0, #0]
 8008c6e:	60c4      	str	r4, [r0, #12]
 8008c70:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c74:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c78:	b94c      	cbnz	r4, 8008c8e <__pow5mult+0x66>
 8008c7a:	f240 2171 	movw	r1, #625	@ 0x271
 8008c7e:	4638      	mov	r0, r7
 8008c80:	f7ff ff1a 	bl	8008ab8 <__i2b>
 8008c84:	2300      	movs	r3, #0
 8008c86:	4604      	mov	r4, r0
 8008c88:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c8c:	6003      	str	r3, [r0, #0]
 8008c8e:	f04f 0900 	mov.w	r9, #0
 8008c92:	07eb      	lsls	r3, r5, #31
 8008c94:	d50a      	bpl.n	8008cac <__pow5mult+0x84>
 8008c96:	4631      	mov	r1, r6
 8008c98:	4622      	mov	r2, r4
 8008c9a:	4638      	mov	r0, r7
 8008c9c:	f7ff ff22 	bl	8008ae4 <__multiply>
 8008ca0:	4680      	mov	r8, r0
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4638      	mov	r0, r7
 8008ca6:	f7ff fe09 	bl	80088bc <_Bfree>
 8008caa:	4646      	mov	r6, r8
 8008cac:	106d      	asrs	r5, r5, #1
 8008cae:	d00b      	beq.n	8008cc8 <__pow5mult+0xa0>
 8008cb0:	6820      	ldr	r0, [r4, #0]
 8008cb2:	b938      	cbnz	r0, 8008cc4 <__pow5mult+0x9c>
 8008cb4:	4622      	mov	r2, r4
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	4638      	mov	r0, r7
 8008cba:	f7ff ff13 	bl	8008ae4 <__multiply>
 8008cbe:	6020      	str	r0, [r4, #0]
 8008cc0:	f8c0 9000 	str.w	r9, [r0]
 8008cc4:	4604      	mov	r4, r0
 8008cc6:	e7e4      	b.n	8008c92 <__pow5mult+0x6a>
 8008cc8:	4630      	mov	r0, r6
 8008cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cce:	bf00      	nop
 8008cd0:	0800c820 	.word	0x0800c820
 8008cd4:	0800c68e 	.word	0x0800c68e
 8008cd8:	0800c70e 	.word	0x0800c70e

08008cdc <__lshift>:
 8008cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	4607      	mov	r7, r0
 8008ce4:	4691      	mov	r9, r2
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	6849      	ldr	r1, [r1, #4]
 8008cea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cee:	68a3      	ldr	r3, [r4, #8]
 8008cf0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cf4:	f108 0601 	add.w	r6, r8, #1
 8008cf8:	42b3      	cmp	r3, r6
 8008cfa:	db0b      	blt.n	8008d14 <__lshift+0x38>
 8008cfc:	4638      	mov	r0, r7
 8008cfe:	f7ff fd9d 	bl	800883c <_Balloc>
 8008d02:	4605      	mov	r5, r0
 8008d04:	b948      	cbnz	r0, 8008d1a <__lshift+0x3e>
 8008d06:	4602      	mov	r2, r0
 8008d08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d0c:	4b27      	ldr	r3, [pc, #156]	@ (8008dac <__lshift+0xd0>)
 8008d0e:	4828      	ldr	r0, [pc, #160]	@ (8008db0 <__lshift+0xd4>)
 8008d10:	f001 fcb6 	bl	800a680 <__assert_func>
 8008d14:	3101      	adds	r1, #1
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	e7ee      	b.n	8008cf8 <__lshift+0x1c>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f100 0114 	add.w	r1, r0, #20
 8008d20:	f100 0210 	add.w	r2, r0, #16
 8008d24:	4618      	mov	r0, r3
 8008d26:	4553      	cmp	r3, sl
 8008d28:	db33      	blt.n	8008d92 <__lshift+0xb6>
 8008d2a:	6920      	ldr	r0, [r4, #16]
 8008d2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d30:	f104 0314 	add.w	r3, r4, #20
 8008d34:	f019 091f 	ands.w	r9, r9, #31
 8008d38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d40:	d02b      	beq.n	8008d9a <__lshift+0xbe>
 8008d42:	468a      	mov	sl, r1
 8008d44:	2200      	movs	r2, #0
 8008d46:	f1c9 0e20 	rsb	lr, r9, #32
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	fa00 f009 	lsl.w	r0, r0, r9
 8008d50:	4310      	orrs	r0, r2
 8008d52:	f84a 0b04 	str.w	r0, [sl], #4
 8008d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5a:	459c      	cmp	ip, r3
 8008d5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d60:	d8f3      	bhi.n	8008d4a <__lshift+0x6e>
 8008d62:	ebac 0304 	sub.w	r3, ip, r4
 8008d66:	3b15      	subs	r3, #21
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	f104 0015 	add.w	r0, r4, #21
 8008d72:	4560      	cmp	r0, ip
 8008d74:	bf88      	it	hi
 8008d76:	2304      	movhi	r3, #4
 8008d78:	50ca      	str	r2, [r1, r3]
 8008d7a:	b10a      	cbz	r2, 8008d80 <__lshift+0xa4>
 8008d7c:	f108 0602 	add.w	r6, r8, #2
 8008d80:	3e01      	subs	r6, #1
 8008d82:	4638      	mov	r0, r7
 8008d84:	4621      	mov	r1, r4
 8008d86:	612e      	str	r6, [r5, #16]
 8008d88:	f7ff fd98 	bl	80088bc <_Bfree>
 8008d8c:	4628      	mov	r0, r5
 8008d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d92:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d96:	3301      	adds	r3, #1
 8008d98:	e7c5      	b.n	8008d26 <__lshift+0x4a>
 8008d9a:	3904      	subs	r1, #4
 8008d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008da0:	459c      	cmp	ip, r3
 8008da2:	f841 2f04 	str.w	r2, [r1, #4]!
 8008da6:	d8f9      	bhi.n	8008d9c <__lshift+0xc0>
 8008da8:	e7ea      	b.n	8008d80 <__lshift+0xa4>
 8008daa:	bf00      	nop
 8008dac:	0800c6fd 	.word	0x0800c6fd
 8008db0:	0800c70e 	.word	0x0800c70e

08008db4 <__mcmp>:
 8008db4:	4603      	mov	r3, r0
 8008db6:	690a      	ldr	r2, [r1, #16]
 8008db8:	6900      	ldr	r0, [r0, #16]
 8008dba:	b530      	push	{r4, r5, lr}
 8008dbc:	1a80      	subs	r0, r0, r2
 8008dbe:	d10e      	bne.n	8008dde <__mcmp+0x2a>
 8008dc0:	3314      	adds	r3, #20
 8008dc2:	3114      	adds	r1, #20
 8008dc4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dc8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008dcc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008dd0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008dd4:	4295      	cmp	r5, r2
 8008dd6:	d003      	beq.n	8008de0 <__mcmp+0x2c>
 8008dd8:	d205      	bcs.n	8008de6 <__mcmp+0x32>
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	bd30      	pop	{r4, r5, pc}
 8008de0:	42a3      	cmp	r3, r4
 8008de2:	d3f3      	bcc.n	8008dcc <__mcmp+0x18>
 8008de4:	e7fb      	b.n	8008dde <__mcmp+0x2a>
 8008de6:	2001      	movs	r0, #1
 8008de8:	e7f9      	b.n	8008dde <__mcmp+0x2a>
	...

08008dec <__mdiff>:
 8008dec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df0:	4689      	mov	r9, r1
 8008df2:	4606      	mov	r6, r0
 8008df4:	4611      	mov	r1, r2
 8008df6:	4648      	mov	r0, r9
 8008df8:	4614      	mov	r4, r2
 8008dfa:	f7ff ffdb 	bl	8008db4 <__mcmp>
 8008dfe:	1e05      	subs	r5, r0, #0
 8008e00:	d112      	bne.n	8008e28 <__mdiff+0x3c>
 8008e02:	4629      	mov	r1, r5
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fd19 	bl	800883c <_Balloc>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	b928      	cbnz	r0, 8008e1a <__mdiff+0x2e>
 8008e0e:	f240 2137 	movw	r1, #567	@ 0x237
 8008e12:	4b3e      	ldr	r3, [pc, #248]	@ (8008f0c <__mdiff+0x120>)
 8008e14:	483e      	ldr	r0, [pc, #248]	@ (8008f10 <__mdiff+0x124>)
 8008e16:	f001 fc33 	bl	800a680 <__assert_func>
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e20:	4610      	mov	r0, r2
 8008e22:	b003      	add	sp, #12
 8008e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e28:	bfbc      	itt	lt
 8008e2a:	464b      	movlt	r3, r9
 8008e2c:	46a1      	movlt	r9, r4
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e34:	bfba      	itte	lt
 8008e36:	461c      	movlt	r4, r3
 8008e38:	2501      	movlt	r5, #1
 8008e3a:	2500      	movge	r5, #0
 8008e3c:	f7ff fcfe 	bl	800883c <_Balloc>
 8008e40:	4602      	mov	r2, r0
 8008e42:	b918      	cbnz	r0, 8008e4c <__mdiff+0x60>
 8008e44:	f240 2145 	movw	r1, #581	@ 0x245
 8008e48:	4b30      	ldr	r3, [pc, #192]	@ (8008f0c <__mdiff+0x120>)
 8008e4a:	e7e3      	b.n	8008e14 <__mdiff+0x28>
 8008e4c:	f100 0b14 	add.w	fp, r0, #20
 8008e50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e54:	f109 0310 	add.w	r3, r9, #16
 8008e58:	60c5      	str	r5, [r0, #12]
 8008e5a:	f04f 0c00 	mov.w	ip, #0
 8008e5e:	f109 0514 	add.w	r5, r9, #20
 8008e62:	46d9      	mov	r9, fp
 8008e64:	6926      	ldr	r6, [r4, #16]
 8008e66:	f104 0e14 	add.w	lr, r4, #20
 8008e6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e72:	9301      	str	r3, [sp, #4]
 8008e74:	9b01      	ldr	r3, [sp, #4]
 8008e76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e7e:	b281      	uxth	r1, r0
 8008e80:	9301      	str	r3, [sp, #4]
 8008e82:	fa1f f38a 	uxth.w	r3, sl
 8008e86:	1a5b      	subs	r3, r3, r1
 8008e88:	0c00      	lsrs	r0, r0, #16
 8008e8a:	4463      	add	r3, ip
 8008e8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e9a:	4576      	cmp	r6, lr
 8008e9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ea0:	f849 3b04 	str.w	r3, [r9], #4
 8008ea4:	d8e6      	bhi.n	8008e74 <__mdiff+0x88>
 8008ea6:	1b33      	subs	r3, r6, r4
 8008ea8:	3b15      	subs	r3, #21
 8008eaa:	f023 0303 	bic.w	r3, r3, #3
 8008eae:	3415      	adds	r4, #21
 8008eb0:	3304      	adds	r3, #4
 8008eb2:	42a6      	cmp	r6, r4
 8008eb4:	bf38      	it	cc
 8008eb6:	2304      	movcc	r3, #4
 8008eb8:	441d      	add	r5, r3
 8008eba:	445b      	add	r3, fp
 8008ebc:	461e      	mov	r6, r3
 8008ebe:	462c      	mov	r4, r5
 8008ec0:	4544      	cmp	r4, r8
 8008ec2:	d30e      	bcc.n	8008ee2 <__mdiff+0xf6>
 8008ec4:	f108 0103 	add.w	r1, r8, #3
 8008ec8:	1b49      	subs	r1, r1, r5
 8008eca:	f021 0103 	bic.w	r1, r1, #3
 8008ece:	3d03      	subs	r5, #3
 8008ed0:	45a8      	cmp	r8, r5
 8008ed2:	bf38      	it	cc
 8008ed4:	2100      	movcc	r1, #0
 8008ed6:	440b      	add	r3, r1
 8008ed8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008edc:	b199      	cbz	r1, 8008f06 <__mdiff+0x11a>
 8008ede:	6117      	str	r7, [r2, #16]
 8008ee0:	e79e      	b.n	8008e20 <__mdiff+0x34>
 8008ee2:	46e6      	mov	lr, ip
 8008ee4:	f854 1b04 	ldr.w	r1, [r4], #4
 8008ee8:	fa1f fc81 	uxth.w	ip, r1
 8008eec:	44f4      	add	ip, lr
 8008eee:	0c08      	lsrs	r0, r1, #16
 8008ef0:	4471      	add	r1, lr
 8008ef2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ef6:	b289      	uxth	r1, r1
 8008ef8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008efc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f00:	f846 1b04 	str.w	r1, [r6], #4
 8008f04:	e7dc      	b.n	8008ec0 <__mdiff+0xd4>
 8008f06:	3f01      	subs	r7, #1
 8008f08:	e7e6      	b.n	8008ed8 <__mdiff+0xec>
 8008f0a:	bf00      	nop
 8008f0c:	0800c6fd 	.word	0x0800c6fd
 8008f10:	0800c70e 	.word	0x0800c70e

08008f14 <__ulp>:
 8008f14:	4b0e      	ldr	r3, [pc, #56]	@ (8008f50 <__ulp+0x3c>)
 8008f16:	400b      	ands	r3, r1
 8008f18:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	dc08      	bgt.n	8008f32 <__ulp+0x1e>
 8008f20:	425b      	negs	r3, r3
 8008f22:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f26:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f2a:	da04      	bge.n	8008f36 <__ulp+0x22>
 8008f2c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f30:	4113      	asrs	r3, r2
 8008f32:	2200      	movs	r2, #0
 8008f34:	e008      	b.n	8008f48 <__ulp+0x34>
 8008f36:	f1a2 0314 	sub.w	r3, r2, #20
 8008f3a:	2b1e      	cmp	r3, #30
 8008f3c:	bfd6      	itet	le
 8008f3e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f42:	2201      	movgt	r2, #1
 8008f44:	40da      	lsrle	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	4619      	mov	r1, r3
 8008f4a:	4610      	mov	r0, r2
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	7ff00000 	.word	0x7ff00000

08008f54 <__b2d>:
 8008f54:	6902      	ldr	r2, [r0, #16]
 8008f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f58:	f100 0614 	add.w	r6, r0, #20
 8008f5c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008f60:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008f64:	4f1e      	ldr	r7, [pc, #120]	@ (8008fe0 <__b2d+0x8c>)
 8008f66:	4620      	mov	r0, r4
 8008f68:	f7ff fd5a 	bl	8008a20 <__hi0bits>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	f1c0 0020 	rsb	r0, r0, #32
 8008f72:	2b0a      	cmp	r3, #10
 8008f74:	f1a2 0504 	sub.w	r5, r2, #4
 8008f78:	6008      	str	r0, [r1, #0]
 8008f7a:	dc12      	bgt.n	8008fa2 <__b2d+0x4e>
 8008f7c:	42ae      	cmp	r6, r5
 8008f7e:	bf2c      	ite	cs
 8008f80:	2200      	movcs	r2, #0
 8008f82:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f86:	f1c3 0c0b 	rsb	ip, r3, #11
 8008f8a:	3315      	adds	r3, #21
 8008f8c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008f90:	fa04 f303 	lsl.w	r3, r4, r3
 8008f94:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f98:	ea4e 0107 	orr.w	r1, lr, r7
 8008f9c:	431a      	orrs	r2, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fa2:	42ae      	cmp	r6, r5
 8008fa4:	bf36      	itet	cc
 8008fa6:	f1a2 0508 	subcc.w	r5, r2, #8
 8008faa:	2200      	movcs	r2, #0
 8008fac:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008fb0:	3b0b      	subs	r3, #11
 8008fb2:	d012      	beq.n	8008fda <__b2d+0x86>
 8008fb4:	f1c3 0720 	rsb	r7, r3, #32
 8008fb8:	fa22 f107 	lsr.w	r1, r2, r7
 8008fbc:	409c      	lsls	r4, r3
 8008fbe:	430c      	orrs	r4, r1
 8008fc0:	42b5      	cmp	r5, r6
 8008fc2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008fc6:	bf94      	ite	ls
 8008fc8:	2400      	movls	r4, #0
 8008fca:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008fce:	409a      	lsls	r2, r3
 8008fd0:	40fc      	lsrs	r4, r7
 8008fd2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008fd6:	4322      	orrs	r2, r4
 8008fd8:	e7e1      	b.n	8008f9e <__b2d+0x4a>
 8008fda:	ea44 0107 	orr.w	r1, r4, r7
 8008fde:	e7de      	b.n	8008f9e <__b2d+0x4a>
 8008fe0:	3ff00000 	.word	0x3ff00000

08008fe4 <__d2b>:
 8008fe4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008fe8:	2101      	movs	r1, #1
 8008fea:	4690      	mov	r8, r2
 8008fec:	4699      	mov	r9, r3
 8008fee:	9e08      	ldr	r6, [sp, #32]
 8008ff0:	f7ff fc24 	bl	800883c <_Balloc>
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	b930      	cbnz	r0, 8009006 <__d2b+0x22>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	f240 310f 	movw	r1, #783	@ 0x30f
 8008ffe:	4b23      	ldr	r3, [pc, #140]	@ (800908c <__d2b+0xa8>)
 8009000:	4823      	ldr	r0, [pc, #140]	@ (8009090 <__d2b+0xac>)
 8009002:	f001 fb3d 	bl	800a680 <__assert_func>
 8009006:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800900a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800900e:	b10d      	cbz	r5, 8009014 <__d2b+0x30>
 8009010:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	f1b8 0300 	subs.w	r3, r8, #0
 800901a:	d024      	beq.n	8009066 <__d2b+0x82>
 800901c:	4668      	mov	r0, sp
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	f7ff fd1d 	bl	8008a5e <__lo0bits>
 8009024:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009028:	b1d8      	cbz	r0, 8009062 <__d2b+0x7e>
 800902a:	f1c0 0320 	rsb	r3, r0, #32
 800902e:	fa02 f303 	lsl.w	r3, r2, r3
 8009032:	430b      	orrs	r3, r1
 8009034:	40c2      	lsrs	r2, r0
 8009036:	6163      	str	r3, [r4, #20]
 8009038:	9201      	str	r2, [sp, #4]
 800903a:	9b01      	ldr	r3, [sp, #4]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bf0c      	ite	eq
 8009040:	2201      	moveq	r2, #1
 8009042:	2202      	movne	r2, #2
 8009044:	61a3      	str	r3, [r4, #24]
 8009046:	6122      	str	r2, [r4, #16]
 8009048:	b1ad      	cbz	r5, 8009076 <__d2b+0x92>
 800904a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800904e:	4405      	add	r5, r0
 8009050:	6035      	str	r5, [r6, #0]
 8009052:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009058:	6018      	str	r0, [r3, #0]
 800905a:	4620      	mov	r0, r4
 800905c:	b002      	add	sp, #8
 800905e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009062:	6161      	str	r1, [r4, #20]
 8009064:	e7e9      	b.n	800903a <__d2b+0x56>
 8009066:	a801      	add	r0, sp, #4
 8009068:	f7ff fcf9 	bl	8008a5e <__lo0bits>
 800906c:	9b01      	ldr	r3, [sp, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	6163      	str	r3, [r4, #20]
 8009072:	3020      	adds	r0, #32
 8009074:	e7e7      	b.n	8009046 <__d2b+0x62>
 8009076:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800907a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800907e:	6030      	str	r0, [r6, #0]
 8009080:	6918      	ldr	r0, [r3, #16]
 8009082:	f7ff fccd 	bl	8008a20 <__hi0bits>
 8009086:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800908a:	e7e4      	b.n	8009056 <__d2b+0x72>
 800908c:	0800c6fd 	.word	0x0800c6fd
 8009090:	0800c70e 	.word	0x0800c70e

08009094 <__ratio>:
 8009094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	b085      	sub	sp, #20
 800909a:	e9cd 1000 	strd	r1, r0, [sp]
 800909e:	a902      	add	r1, sp, #8
 80090a0:	f7ff ff58 	bl	8008f54 <__b2d>
 80090a4:	468b      	mov	fp, r1
 80090a6:	4606      	mov	r6, r0
 80090a8:	460f      	mov	r7, r1
 80090aa:	9800      	ldr	r0, [sp, #0]
 80090ac:	a903      	add	r1, sp, #12
 80090ae:	f7ff ff51 	bl	8008f54 <__b2d>
 80090b2:	460d      	mov	r5, r1
 80090b4:	9b01      	ldr	r3, [sp, #4]
 80090b6:	4689      	mov	r9, r1
 80090b8:	6919      	ldr	r1, [r3, #16]
 80090ba:	9b00      	ldr	r3, [sp, #0]
 80090bc:	4604      	mov	r4, r0
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	4630      	mov	r0, r6
 80090c2:	1ac9      	subs	r1, r1, r3
 80090c4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80090c8:	1a9b      	subs	r3, r3, r2
 80090ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	bfcd      	iteet	gt
 80090d2:	463a      	movgt	r2, r7
 80090d4:	462a      	movle	r2, r5
 80090d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090da:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80090de:	bfd8      	it	le
 80090e0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090e4:	464b      	mov	r3, r9
 80090e6:	4622      	mov	r2, r4
 80090e8:	4659      	mov	r1, fp
 80090ea:	f7f7 fb41 	bl	8000770 <__aeabi_ddiv>
 80090ee:	b005      	add	sp, #20
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090f4 <__copybits>:
 80090f4:	3901      	subs	r1, #1
 80090f6:	b570      	push	{r4, r5, r6, lr}
 80090f8:	1149      	asrs	r1, r1, #5
 80090fa:	6914      	ldr	r4, [r2, #16]
 80090fc:	3101      	adds	r1, #1
 80090fe:	f102 0314 	add.w	r3, r2, #20
 8009102:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009106:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800910a:	1f05      	subs	r5, r0, #4
 800910c:	42a3      	cmp	r3, r4
 800910e:	d30c      	bcc.n	800912a <__copybits+0x36>
 8009110:	1aa3      	subs	r3, r4, r2
 8009112:	3b11      	subs	r3, #17
 8009114:	f023 0303 	bic.w	r3, r3, #3
 8009118:	3211      	adds	r2, #17
 800911a:	42a2      	cmp	r2, r4
 800911c:	bf88      	it	hi
 800911e:	2300      	movhi	r3, #0
 8009120:	4418      	add	r0, r3
 8009122:	2300      	movs	r3, #0
 8009124:	4288      	cmp	r0, r1
 8009126:	d305      	bcc.n	8009134 <__copybits+0x40>
 8009128:	bd70      	pop	{r4, r5, r6, pc}
 800912a:	f853 6b04 	ldr.w	r6, [r3], #4
 800912e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009132:	e7eb      	b.n	800910c <__copybits+0x18>
 8009134:	f840 3b04 	str.w	r3, [r0], #4
 8009138:	e7f4      	b.n	8009124 <__copybits+0x30>

0800913a <__any_on>:
 800913a:	f100 0214 	add.w	r2, r0, #20
 800913e:	6900      	ldr	r0, [r0, #16]
 8009140:	114b      	asrs	r3, r1, #5
 8009142:	4298      	cmp	r0, r3
 8009144:	b510      	push	{r4, lr}
 8009146:	db11      	blt.n	800916c <__any_on+0x32>
 8009148:	dd0a      	ble.n	8009160 <__any_on+0x26>
 800914a:	f011 011f 	ands.w	r1, r1, #31
 800914e:	d007      	beq.n	8009160 <__any_on+0x26>
 8009150:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009154:	fa24 f001 	lsr.w	r0, r4, r1
 8009158:	fa00 f101 	lsl.w	r1, r0, r1
 800915c:	428c      	cmp	r4, r1
 800915e:	d10b      	bne.n	8009178 <__any_on+0x3e>
 8009160:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009164:	4293      	cmp	r3, r2
 8009166:	d803      	bhi.n	8009170 <__any_on+0x36>
 8009168:	2000      	movs	r0, #0
 800916a:	bd10      	pop	{r4, pc}
 800916c:	4603      	mov	r3, r0
 800916e:	e7f7      	b.n	8009160 <__any_on+0x26>
 8009170:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009174:	2900      	cmp	r1, #0
 8009176:	d0f5      	beq.n	8009164 <__any_on+0x2a>
 8009178:	2001      	movs	r0, #1
 800917a:	e7f6      	b.n	800916a <__any_on+0x30>

0800917c <sulp>:
 800917c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009180:	460f      	mov	r7, r1
 8009182:	4690      	mov	r8, r2
 8009184:	f7ff fec6 	bl	8008f14 <__ulp>
 8009188:	4604      	mov	r4, r0
 800918a:	460d      	mov	r5, r1
 800918c:	f1b8 0f00 	cmp.w	r8, #0
 8009190:	d011      	beq.n	80091b6 <sulp+0x3a>
 8009192:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009196:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800919a:	2b00      	cmp	r3, #0
 800919c:	dd0b      	ble.n	80091b6 <sulp+0x3a>
 800919e:	2400      	movs	r4, #0
 80091a0:	051b      	lsls	r3, r3, #20
 80091a2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80091a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80091aa:	4622      	mov	r2, r4
 80091ac:	462b      	mov	r3, r5
 80091ae:	f7f7 f9b5 	bl	800051c <__aeabi_dmul>
 80091b2:	4604      	mov	r4, r0
 80091b4:	460d      	mov	r5, r1
 80091b6:	4620      	mov	r0, r4
 80091b8:	4629      	mov	r1, r5
 80091ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080091c0 <_strtod_l>:
 80091c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c4:	b09f      	sub	sp, #124	@ 0x7c
 80091c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80091c8:	2200      	movs	r2, #0
 80091ca:	460c      	mov	r4, r1
 80091cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80091ce:	f04f 0a00 	mov.w	sl, #0
 80091d2:	f04f 0b00 	mov.w	fp, #0
 80091d6:	460a      	mov	r2, r1
 80091d8:	9005      	str	r0, [sp, #20]
 80091da:	9219      	str	r2, [sp, #100]	@ 0x64
 80091dc:	7811      	ldrb	r1, [r2, #0]
 80091de:	292b      	cmp	r1, #43	@ 0x2b
 80091e0:	d048      	beq.n	8009274 <_strtod_l+0xb4>
 80091e2:	d836      	bhi.n	8009252 <_strtod_l+0x92>
 80091e4:	290d      	cmp	r1, #13
 80091e6:	d830      	bhi.n	800924a <_strtod_l+0x8a>
 80091e8:	2908      	cmp	r1, #8
 80091ea:	d830      	bhi.n	800924e <_strtod_l+0x8e>
 80091ec:	2900      	cmp	r1, #0
 80091ee:	d039      	beq.n	8009264 <_strtod_l+0xa4>
 80091f0:	2200      	movs	r2, #0
 80091f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80091f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091f6:	782a      	ldrb	r2, [r5, #0]
 80091f8:	2a30      	cmp	r2, #48	@ 0x30
 80091fa:	f040 80b0 	bne.w	800935e <_strtod_l+0x19e>
 80091fe:	786a      	ldrb	r2, [r5, #1]
 8009200:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009204:	2a58      	cmp	r2, #88	@ 0x58
 8009206:	d16c      	bne.n	80092e2 <_strtod_l+0x122>
 8009208:	9302      	str	r3, [sp, #8]
 800920a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800920c:	4a8f      	ldr	r2, [pc, #572]	@ (800944c <_strtod_l+0x28c>)
 800920e:	9301      	str	r3, [sp, #4]
 8009210:	ab1a      	add	r3, sp, #104	@ 0x68
 8009212:	9300      	str	r3, [sp, #0]
 8009214:	9805      	ldr	r0, [sp, #20]
 8009216:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009218:	a919      	add	r1, sp, #100	@ 0x64
 800921a:	f001 facb 	bl	800a7b4 <__gethex>
 800921e:	f010 060f 	ands.w	r6, r0, #15
 8009222:	4604      	mov	r4, r0
 8009224:	d005      	beq.n	8009232 <_strtod_l+0x72>
 8009226:	2e06      	cmp	r6, #6
 8009228:	d126      	bne.n	8009278 <_strtod_l+0xb8>
 800922a:	2300      	movs	r3, #0
 800922c:	3501      	adds	r5, #1
 800922e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009230:	930e      	str	r3, [sp, #56]	@ 0x38
 8009232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009234:	2b00      	cmp	r3, #0
 8009236:	f040 8582 	bne.w	8009d3e <_strtod_l+0xb7e>
 800923a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800923c:	b1bb      	cbz	r3, 800926e <_strtod_l+0xae>
 800923e:	4650      	mov	r0, sl
 8009240:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8009244:	b01f      	add	sp, #124	@ 0x7c
 8009246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924a:	2920      	cmp	r1, #32
 800924c:	d1d0      	bne.n	80091f0 <_strtod_l+0x30>
 800924e:	3201      	adds	r2, #1
 8009250:	e7c3      	b.n	80091da <_strtod_l+0x1a>
 8009252:	292d      	cmp	r1, #45	@ 0x2d
 8009254:	d1cc      	bne.n	80091f0 <_strtod_l+0x30>
 8009256:	2101      	movs	r1, #1
 8009258:	910e      	str	r1, [sp, #56]	@ 0x38
 800925a:	1c51      	adds	r1, r2, #1
 800925c:	9119      	str	r1, [sp, #100]	@ 0x64
 800925e:	7852      	ldrb	r2, [r2, #1]
 8009260:	2a00      	cmp	r2, #0
 8009262:	d1c7      	bne.n	80091f4 <_strtod_l+0x34>
 8009264:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009266:	9419      	str	r4, [sp, #100]	@ 0x64
 8009268:	2b00      	cmp	r3, #0
 800926a:	f040 8566 	bne.w	8009d3a <_strtod_l+0xb7a>
 800926e:	4650      	mov	r0, sl
 8009270:	4659      	mov	r1, fp
 8009272:	e7e7      	b.n	8009244 <_strtod_l+0x84>
 8009274:	2100      	movs	r1, #0
 8009276:	e7ef      	b.n	8009258 <_strtod_l+0x98>
 8009278:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800927a:	b13a      	cbz	r2, 800928c <_strtod_l+0xcc>
 800927c:	2135      	movs	r1, #53	@ 0x35
 800927e:	a81c      	add	r0, sp, #112	@ 0x70
 8009280:	f7ff ff38 	bl	80090f4 <__copybits>
 8009284:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009286:	9805      	ldr	r0, [sp, #20]
 8009288:	f7ff fb18 	bl	80088bc <_Bfree>
 800928c:	3e01      	subs	r6, #1
 800928e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009290:	2e04      	cmp	r6, #4
 8009292:	d806      	bhi.n	80092a2 <_strtod_l+0xe2>
 8009294:	e8df f006 	tbb	[pc, r6]
 8009298:	201d0314 	.word	0x201d0314
 800929c:	14          	.byte	0x14
 800929d:	00          	.byte	0x00
 800929e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80092a2:	05e1      	lsls	r1, r4, #23
 80092a4:	bf48      	it	mi
 80092a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80092aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092ae:	0d1b      	lsrs	r3, r3, #20
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1bd      	bne.n	8009232 <_strtod_l+0x72>
 80092b6:	f7fe fb19 	bl	80078ec <__errno>
 80092ba:	2322      	movs	r3, #34	@ 0x22
 80092bc:	6003      	str	r3, [r0, #0]
 80092be:	e7b8      	b.n	8009232 <_strtod_l+0x72>
 80092c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80092c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80092c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80092cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80092d0:	e7e7      	b.n	80092a2 <_strtod_l+0xe2>
 80092d2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009450 <_strtod_l+0x290>
 80092d6:	e7e4      	b.n	80092a2 <_strtod_l+0xe2>
 80092d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092dc:	f04f 3aff 	mov.w	sl, #4294967295
 80092e0:	e7df      	b.n	80092a2 <_strtod_l+0xe2>
 80092e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80092e8:	785b      	ldrb	r3, [r3, #1]
 80092ea:	2b30      	cmp	r3, #48	@ 0x30
 80092ec:	d0f9      	beq.n	80092e2 <_strtod_l+0x122>
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d09f      	beq.n	8009232 <_strtod_l+0x72>
 80092f2:	2301      	movs	r3, #1
 80092f4:	2700      	movs	r7, #0
 80092f6:	220a      	movs	r2, #10
 80092f8:	46b9      	mov	r9, r7
 80092fa:	9308      	str	r3, [sp, #32]
 80092fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092fe:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009300:	930c      	str	r3, [sp, #48]	@ 0x30
 8009302:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009304:	7805      	ldrb	r5, [r0, #0]
 8009306:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800930a:	b2d9      	uxtb	r1, r3
 800930c:	2909      	cmp	r1, #9
 800930e:	d928      	bls.n	8009362 <_strtod_l+0x1a2>
 8009310:	2201      	movs	r2, #1
 8009312:	4950      	ldr	r1, [pc, #320]	@ (8009454 <_strtod_l+0x294>)
 8009314:	f001 f969 	bl	800a5ea <strncmp>
 8009318:	2800      	cmp	r0, #0
 800931a:	d032      	beq.n	8009382 <_strtod_l+0x1c2>
 800931c:	2000      	movs	r0, #0
 800931e:	462a      	mov	r2, r5
 8009320:	4603      	mov	r3, r0
 8009322:	464d      	mov	r5, r9
 8009324:	900a      	str	r0, [sp, #40]	@ 0x28
 8009326:	2a65      	cmp	r2, #101	@ 0x65
 8009328:	d001      	beq.n	800932e <_strtod_l+0x16e>
 800932a:	2a45      	cmp	r2, #69	@ 0x45
 800932c:	d114      	bne.n	8009358 <_strtod_l+0x198>
 800932e:	b91d      	cbnz	r5, 8009338 <_strtod_l+0x178>
 8009330:	9a08      	ldr	r2, [sp, #32]
 8009332:	4302      	orrs	r2, r0
 8009334:	d096      	beq.n	8009264 <_strtod_l+0xa4>
 8009336:	2500      	movs	r5, #0
 8009338:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800933a:	1c62      	adds	r2, r4, #1
 800933c:	9219      	str	r2, [sp, #100]	@ 0x64
 800933e:	7862      	ldrb	r2, [r4, #1]
 8009340:	2a2b      	cmp	r2, #43	@ 0x2b
 8009342:	d07a      	beq.n	800943a <_strtod_l+0x27a>
 8009344:	2a2d      	cmp	r2, #45	@ 0x2d
 8009346:	d07e      	beq.n	8009446 <_strtod_l+0x286>
 8009348:	f04f 0c00 	mov.w	ip, #0
 800934c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009350:	2909      	cmp	r1, #9
 8009352:	f240 8085 	bls.w	8009460 <_strtod_l+0x2a0>
 8009356:	9419      	str	r4, [sp, #100]	@ 0x64
 8009358:	f04f 0800 	mov.w	r8, #0
 800935c:	e0a5      	b.n	80094aa <_strtod_l+0x2ea>
 800935e:	2300      	movs	r3, #0
 8009360:	e7c8      	b.n	80092f4 <_strtod_l+0x134>
 8009362:	f1b9 0f08 	cmp.w	r9, #8
 8009366:	bfd8      	it	le
 8009368:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800936a:	f100 0001 	add.w	r0, r0, #1
 800936e:	bfd6      	itet	le
 8009370:	fb02 3301 	mlale	r3, r2, r1, r3
 8009374:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009378:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800937a:	f109 0901 	add.w	r9, r9, #1
 800937e:	9019      	str	r0, [sp, #100]	@ 0x64
 8009380:	e7bf      	b.n	8009302 <_strtod_l+0x142>
 8009382:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	9219      	str	r2, [sp, #100]	@ 0x64
 8009388:	785a      	ldrb	r2, [r3, #1]
 800938a:	f1b9 0f00 	cmp.w	r9, #0
 800938e:	d03b      	beq.n	8009408 <_strtod_l+0x248>
 8009390:	464d      	mov	r5, r9
 8009392:	900a      	str	r0, [sp, #40]	@ 0x28
 8009394:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009398:	2b09      	cmp	r3, #9
 800939a:	d912      	bls.n	80093c2 <_strtod_l+0x202>
 800939c:	2301      	movs	r3, #1
 800939e:	e7c2      	b.n	8009326 <_strtod_l+0x166>
 80093a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093a2:	3001      	adds	r0, #1
 80093a4:	1c5a      	adds	r2, r3, #1
 80093a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80093a8:	785a      	ldrb	r2, [r3, #1]
 80093aa:	2a30      	cmp	r2, #48	@ 0x30
 80093ac:	d0f8      	beq.n	80093a0 <_strtod_l+0x1e0>
 80093ae:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80093b2:	2b08      	cmp	r3, #8
 80093b4:	f200 84c8 	bhi.w	8009d48 <_strtod_l+0xb88>
 80093b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80093ba:	2000      	movs	r0, #0
 80093bc:	4605      	mov	r5, r0
 80093be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80093c2:	3a30      	subs	r2, #48	@ 0x30
 80093c4:	f100 0301 	add.w	r3, r0, #1
 80093c8:	d018      	beq.n	80093fc <_strtod_l+0x23c>
 80093ca:	462e      	mov	r6, r5
 80093cc:	f04f 0e0a 	mov.w	lr, #10
 80093d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093d2:	4419      	add	r1, r3
 80093d4:	910a      	str	r1, [sp, #40]	@ 0x28
 80093d6:	1c71      	adds	r1, r6, #1
 80093d8:	eba1 0c05 	sub.w	ip, r1, r5
 80093dc:	4563      	cmp	r3, ip
 80093de:	dc15      	bgt.n	800940c <_strtod_l+0x24c>
 80093e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80093e4:	182b      	adds	r3, r5, r0
 80093e6:	2b08      	cmp	r3, #8
 80093e8:	f105 0501 	add.w	r5, r5, #1
 80093ec:	4405      	add	r5, r0
 80093ee:	dc1a      	bgt.n	8009426 <_strtod_l+0x266>
 80093f0:	230a      	movs	r3, #10
 80093f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093f4:	fb03 2301 	mla	r3, r3, r1, r2
 80093f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093fa:	2300      	movs	r3, #0
 80093fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093fe:	4618      	mov	r0, r3
 8009400:	1c51      	adds	r1, r2, #1
 8009402:	9119      	str	r1, [sp, #100]	@ 0x64
 8009404:	7852      	ldrb	r2, [r2, #1]
 8009406:	e7c5      	b.n	8009394 <_strtod_l+0x1d4>
 8009408:	4648      	mov	r0, r9
 800940a:	e7ce      	b.n	80093aa <_strtod_l+0x1ea>
 800940c:	2e08      	cmp	r6, #8
 800940e:	dc05      	bgt.n	800941c <_strtod_l+0x25c>
 8009410:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009412:	fb0e f606 	mul.w	r6, lr, r6
 8009416:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009418:	460e      	mov	r6, r1
 800941a:	e7dc      	b.n	80093d6 <_strtod_l+0x216>
 800941c:	2910      	cmp	r1, #16
 800941e:	bfd8      	it	le
 8009420:	fb0e f707 	mulle.w	r7, lr, r7
 8009424:	e7f8      	b.n	8009418 <_strtod_l+0x258>
 8009426:	2b0f      	cmp	r3, #15
 8009428:	bfdc      	itt	le
 800942a:	230a      	movle	r3, #10
 800942c:	fb03 2707 	mlale	r7, r3, r7, r2
 8009430:	e7e3      	b.n	80093fa <_strtod_l+0x23a>
 8009432:	2300      	movs	r3, #0
 8009434:	930a      	str	r3, [sp, #40]	@ 0x28
 8009436:	2301      	movs	r3, #1
 8009438:	e77a      	b.n	8009330 <_strtod_l+0x170>
 800943a:	f04f 0c00 	mov.w	ip, #0
 800943e:	1ca2      	adds	r2, r4, #2
 8009440:	9219      	str	r2, [sp, #100]	@ 0x64
 8009442:	78a2      	ldrb	r2, [r4, #2]
 8009444:	e782      	b.n	800934c <_strtod_l+0x18c>
 8009446:	f04f 0c01 	mov.w	ip, #1
 800944a:	e7f8      	b.n	800943e <_strtod_l+0x27e>
 800944c:	0800c934 	.word	0x0800c934
 8009450:	7ff00000 	.word	0x7ff00000
 8009454:	0800c767 	.word	0x0800c767
 8009458:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800945a:	1c51      	adds	r1, r2, #1
 800945c:	9119      	str	r1, [sp, #100]	@ 0x64
 800945e:	7852      	ldrb	r2, [r2, #1]
 8009460:	2a30      	cmp	r2, #48	@ 0x30
 8009462:	d0f9      	beq.n	8009458 <_strtod_l+0x298>
 8009464:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009468:	2908      	cmp	r1, #8
 800946a:	f63f af75 	bhi.w	8009358 <_strtod_l+0x198>
 800946e:	f04f 080a 	mov.w	r8, #10
 8009472:	3a30      	subs	r2, #48	@ 0x30
 8009474:	9209      	str	r2, [sp, #36]	@ 0x24
 8009476:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009478:	920f      	str	r2, [sp, #60]	@ 0x3c
 800947a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800947c:	1c56      	adds	r6, r2, #1
 800947e:	9619      	str	r6, [sp, #100]	@ 0x64
 8009480:	7852      	ldrb	r2, [r2, #1]
 8009482:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009486:	f1be 0f09 	cmp.w	lr, #9
 800948a:	d939      	bls.n	8009500 <_strtod_l+0x340>
 800948c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800948e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009492:	1a76      	subs	r6, r6, r1
 8009494:	2e08      	cmp	r6, #8
 8009496:	dc03      	bgt.n	80094a0 <_strtod_l+0x2e0>
 8009498:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800949a:	4588      	cmp	r8, r1
 800949c:	bfa8      	it	ge
 800949e:	4688      	movge	r8, r1
 80094a0:	f1bc 0f00 	cmp.w	ip, #0
 80094a4:	d001      	beq.n	80094aa <_strtod_l+0x2ea>
 80094a6:	f1c8 0800 	rsb	r8, r8, #0
 80094aa:	2d00      	cmp	r5, #0
 80094ac:	d14e      	bne.n	800954c <_strtod_l+0x38c>
 80094ae:	9908      	ldr	r1, [sp, #32]
 80094b0:	4308      	orrs	r0, r1
 80094b2:	f47f aebe 	bne.w	8009232 <_strtod_l+0x72>
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f47f aed4 	bne.w	8009264 <_strtod_l+0xa4>
 80094bc:	2a69      	cmp	r2, #105	@ 0x69
 80094be:	d028      	beq.n	8009512 <_strtod_l+0x352>
 80094c0:	dc25      	bgt.n	800950e <_strtod_l+0x34e>
 80094c2:	2a49      	cmp	r2, #73	@ 0x49
 80094c4:	d025      	beq.n	8009512 <_strtod_l+0x352>
 80094c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80094c8:	f47f aecc 	bne.w	8009264 <_strtod_l+0xa4>
 80094cc:	4999      	ldr	r1, [pc, #612]	@ (8009734 <_strtod_l+0x574>)
 80094ce:	a819      	add	r0, sp, #100	@ 0x64
 80094d0:	f001 fb92 	bl	800abf8 <__match>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f aec5 	beq.w	8009264 <_strtod_l+0xa4>
 80094da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	2b28      	cmp	r3, #40	@ 0x28
 80094e0:	d12e      	bne.n	8009540 <_strtod_l+0x380>
 80094e2:	4995      	ldr	r1, [pc, #596]	@ (8009738 <_strtod_l+0x578>)
 80094e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80094e6:	a819      	add	r0, sp, #100	@ 0x64
 80094e8:	f001 fb9a 	bl	800ac20 <__hexnan>
 80094ec:	2805      	cmp	r0, #5
 80094ee:	d127      	bne.n	8009540 <_strtod_l+0x380>
 80094f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094fe:	e698      	b.n	8009232 <_strtod_l+0x72>
 8009500:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009502:	fb08 2101 	mla	r1, r8, r1, r2
 8009506:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800950a:	9209      	str	r2, [sp, #36]	@ 0x24
 800950c:	e7b5      	b.n	800947a <_strtod_l+0x2ba>
 800950e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009510:	e7da      	b.n	80094c8 <_strtod_l+0x308>
 8009512:	498a      	ldr	r1, [pc, #552]	@ (800973c <_strtod_l+0x57c>)
 8009514:	a819      	add	r0, sp, #100	@ 0x64
 8009516:	f001 fb6f 	bl	800abf8 <__match>
 800951a:	2800      	cmp	r0, #0
 800951c:	f43f aea2 	beq.w	8009264 <_strtod_l+0xa4>
 8009520:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009522:	4987      	ldr	r1, [pc, #540]	@ (8009740 <_strtod_l+0x580>)
 8009524:	3b01      	subs	r3, #1
 8009526:	a819      	add	r0, sp, #100	@ 0x64
 8009528:	9319      	str	r3, [sp, #100]	@ 0x64
 800952a:	f001 fb65 	bl	800abf8 <__match>
 800952e:	b910      	cbnz	r0, 8009536 <_strtod_l+0x376>
 8009530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009532:	3301      	adds	r3, #1
 8009534:	9319      	str	r3, [sp, #100]	@ 0x64
 8009536:	f04f 0a00 	mov.w	sl, #0
 800953a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8009744 <_strtod_l+0x584>
 800953e:	e678      	b.n	8009232 <_strtod_l+0x72>
 8009540:	4881      	ldr	r0, [pc, #516]	@ (8009748 <_strtod_l+0x588>)
 8009542:	f001 f897 	bl	800a674 <nan>
 8009546:	4682      	mov	sl, r0
 8009548:	468b      	mov	fp, r1
 800954a:	e672      	b.n	8009232 <_strtod_l+0x72>
 800954c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800954e:	f1b9 0f00 	cmp.w	r9, #0
 8009552:	bf08      	it	eq
 8009554:	46a9      	moveq	r9, r5
 8009556:	eba8 0303 	sub.w	r3, r8, r3
 800955a:	2d10      	cmp	r5, #16
 800955c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800955e:	462c      	mov	r4, r5
 8009560:	9309      	str	r3, [sp, #36]	@ 0x24
 8009562:	bfa8      	it	ge
 8009564:	2410      	movge	r4, #16
 8009566:	f7f6 ff5f 	bl	8000428 <__aeabi_ui2d>
 800956a:	2d09      	cmp	r5, #9
 800956c:	4682      	mov	sl, r0
 800956e:	468b      	mov	fp, r1
 8009570:	dc11      	bgt.n	8009596 <_strtod_l+0x3d6>
 8009572:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	f43f ae5c 	beq.w	8009232 <_strtod_l+0x72>
 800957a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800957c:	dd76      	ble.n	800966c <_strtod_l+0x4ac>
 800957e:	2b16      	cmp	r3, #22
 8009580:	dc5d      	bgt.n	800963e <_strtod_l+0x47e>
 8009582:	4972      	ldr	r1, [pc, #456]	@ (800974c <_strtod_l+0x58c>)
 8009584:	4652      	mov	r2, sl
 8009586:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800958a:	465b      	mov	r3, fp
 800958c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009590:	f7f6 ffc4 	bl	800051c <__aeabi_dmul>
 8009594:	e7d7      	b.n	8009546 <_strtod_l+0x386>
 8009596:	4b6d      	ldr	r3, [pc, #436]	@ (800974c <_strtod_l+0x58c>)
 8009598:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800959c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80095a0:	f7f6 ffbc 	bl	800051c <__aeabi_dmul>
 80095a4:	4682      	mov	sl, r0
 80095a6:	4638      	mov	r0, r7
 80095a8:	468b      	mov	fp, r1
 80095aa:	f7f6 ff3d 	bl	8000428 <__aeabi_ui2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	4650      	mov	r0, sl
 80095b4:	4659      	mov	r1, fp
 80095b6:	f7f6 fdfb 	bl	80001b0 <__adddf3>
 80095ba:	2d0f      	cmp	r5, #15
 80095bc:	4682      	mov	sl, r0
 80095be:	468b      	mov	fp, r1
 80095c0:	ddd7      	ble.n	8009572 <_strtod_l+0x3b2>
 80095c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c4:	1b2c      	subs	r4, r5, r4
 80095c6:	441c      	add	r4, r3
 80095c8:	2c00      	cmp	r4, #0
 80095ca:	f340 8093 	ble.w	80096f4 <_strtod_l+0x534>
 80095ce:	f014 030f 	ands.w	r3, r4, #15
 80095d2:	d00a      	beq.n	80095ea <_strtod_l+0x42a>
 80095d4:	495d      	ldr	r1, [pc, #372]	@ (800974c <_strtod_l+0x58c>)
 80095d6:	4652      	mov	r2, sl
 80095d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095e0:	465b      	mov	r3, fp
 80095e2:	f7f6 ff9b 	bl	800051c <__aeabi_dmul>
 80095e6:	4682      	mov	sl, r0
 80095e8:	468b      	mov	fp, r1
 80095ea:	f034 040f 	bics.w	r4, r4, #15
 80095ee:	d073      	beq.n	80096d8 <_strtod_l+0x518>
 80095f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095f4:	dd49      	ble.n	800968a <_strtod_l+0x4ca>
 80095f6:	2400      	movs	r4, #0
 80095f8:	46a0      	mov	r8, r4
 80095fa:	46a1      	mov	r9, r4
 80095fc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095fe:	2322      	movs	r3, #34	@ 0x22
 8009600:	f04f 0a00 	mov.w	sl, #0
 8009604:	9a05      	ldr	r2, [sp, #20]
 8009606:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8009744 <_strtod_l+0x584>
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800960e:	2b00      	cmp	r3, #0
 8009610:	f43f ae0f 	beq.w	8009232 <_strtod_l+0x72>
 8009614:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009616:	9805      	ldr	r0, [sp, #20]
 8009618:	f7ff f950 	bl	80088bc <_Bfree>
 800961c:	4649      	mov	r1, r9
 800961e:	9805      	ldr	r0, [sp, #20]
 8009620:	f7ff f94c 	bl	80088bc <_Bfree>
 8009624:	4641      	mov	r1, r8
 8009626:	9805      	ldr	r0, [sp, #20]
 8009628:	f7ff f948 	bl	80088bc <_Bfree>
 800962c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800962e:	9805      	ldr	r0, [sp, #20]
 8009630:	f7ff f944 	bl	80088bc <_Bfree>
 8009634:	4621      	mov	r1, r4
 8009636:	9805      	ldr	r0, [sp, #20]
 8009638:	f7ff f940 	bl	80088bc <_Bfree>
 800963c:	e5f9      	b.n	8009232 <_strtod_l+0x72>
 800963e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009640:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009644:	4293      	cmp	r3, r2
 8009646:	dbbc      	blt.n	80095c2 <_strtod_l+0x402>
 8009648:	4c40      	ldr	r4, [pc, #256]	@ (800974c <_strtod_l+0x58c>)
 800964a:	f1c5 050f 	rsb	r5, r5, #15
 800964e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009652:	4652      	mov	r2, sl
 8009654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009658:	465b      	mov	r3, fp
 800965a:	f7f6 ff5f 	bl	800051c <__aeabi_dmul>
 800965e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009660:	1b5d      	subs	r5, r3, r5
 8009662:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009666:	e9d4 2300 	ldrd	r2, r3, [r4]
 800966a:	e791      	b.n	8009590 <_strtod_l+0x3d0>
 800966c:	3316      	adds	r3, #22
 800966e:	dba8      	blt.n	80095c2 <_strtod_l+0x402>
 8009670:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009672:	4650      	mov	r0, sl
 8009674:	eba3 0808 	sub.w	r8, r3, r8
 8009678:	4b34      	ldr	r3, [pc, #208]	@ (800974c <_strtod_l+0x58c>)
 800967a:	4659      	mov	r1, fp
 800967c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009680:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009684:	f7f7 f874 	bl	8000770 <__aeabi_ddiv>
 8009688:	e75d      	b.n	8009546 <_strtod_l+0x386>
 800968a:	2300      	movs	r3, #0
 800968c:	4650      	mov	r0, sl
 800968e:	4659      	mov	r1, fp
 8009690:	461e      	mov	r6, r3
 8009692:	4f2f      	ldr	r7, [pc, #188]	@ (8009750 <_strtod_l+0x590>)
 8009694:	1124      	asrs	r4, r4, #4
 8009696:	2c01      	cmp	r4, #1
 8009698:	dc21      	bgt.n	80096de <_strtod_l+0x51e>
 800969a:	b10b      	cbz	r3, 80096a0 <_strtod_l+0x4e0>
 800969c:	4682      	mov	sl, r0
 800969e:	468b      	mov	fp, r1
 80096a0:	492b      	ldr	r1, [pc, #172]	@ (8009750 <_strtod_l+0x590>)
 80096a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80096a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80096aa:	4652      	mov	r2, sl
 80096ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096b0:	465b      	mov	r3, fp
 80096b2:	f7f6 ff33 	bl	800051c <__aeabi_dmul>
 80096b6:	4b23      	ldr	r3, [pc, #140]	@ (8009744 <_strtod_l+0x584>)
 80096b8:	460a      	mov	r2, r1
 80096ba:	400b      	ands	r3, r1
 80096bc:	4925      	ldr	r1, [pc, #148]	@ (8009754 <_strtod_l+0x594>)
 80096be:	4682      	mov	sl, r0
 80096c0:	428b      	cmp	r3, r1
 80096c2:	d898      	bhi.n	80095f6 <_strtod_l+0x436>
 80096c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80096c8:	428b      	cmp	r3, r1
 80096ca:	bf86      	itte	hi
 80096cc:	f04f 3aff 	movhi.w	sl, #4294967295
 80096d0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009758 <_strtod_l+0x598>
 80096d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80096d8:	2300      	movs	r3, #0
 80096da:	9308      	str	r3, [sp, #32]
 80096dc:	e076      	b.n	80097cc <_strtod_l+0x60c>
 80096de:	07e2      	lsls	r2, r4, #31
 80096e0:	d504      	bpl.n	80096ec <_strtod_l+0x52c>
 80096e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096e6:	f7f6 ff19 	bl	800051c <__aeabi_dmul>
 80096ea:	2301      	movs	r3, #1
 80096ec:	3601      	adds	r6, #1
 80096ee:	1064      	asrs	r4, r4, #1
 80096f0:	3708      	adds	r7, #8
 80096f2:	e7d0      	b.n	8009696 <_strtod_l+0x4d6>
 80096f4:	d0f0      	beq.n	80096d8 <_strtod_l+0x518>
 80096f6:	4264      	negs	r4, r4
 80096f8:	f014 020f 	ands.w	r2, r4, #15
 80096fc:	d00a      	beq.n	8009714 <_strtod_l+0x554>
 80096fe:	4b13      	ldr	r3, [pc, #76]	@ (800974c <_strtod_l+0x58c>)
 8009700:	4650      	mov	r0, sl
 8009702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009706:	4659      	mov	r1, fp
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f7 f830 	bl	8000770 <__aeabi_ddiv>
 8009710:	4682      	mov	sl, r0
 8009712:	468b      	mov	fp, r1
 8009714:	1124      	asrs	r4, r4, #4
 8009716:	d0df      	beq.n	80096d8 <_strtod_l+0x518>
 8009718:	2c1f      	cmp	r4, #31
 800971a:	dd1f      	ble.n	800975c <_strtod_l+0x59c>
 800971c:	2400      	movs	r4, #0
 800971e:	46a0      	mov	r8, r4
 8009720:	46a1      	mov	r9, r4
 8009722:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009724:	2322      	movs	r3, #34	@ 0x22
 8009726:	9a05      	ldr	r2, [sp, #20]
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	f04f 0b00 	mov.w	fp, #0
 8009730:	6013      	str	r3, [r2, #0]
 8009732:	e76b      	b.n	800960c <_strtod_l+0x44c>
 8009734:	0800c655 	.word	0x0800c655
 8009738:	0800c920 	.word	0x0800c920
 800973c:	0800c64d 	.word	0x0800c64d
 8009740:	0800c684 	.word	0x0800c684
 8009744:	7ff00000 	.word	0x7ff00000
 8009748:	0800c7bd 	.word	0x0800c7bd
 800974c:	0800c858 	.word	0x0800c858
 8009750:	0800c830 	.word	0x0800c830
 8009754:	7ca00000 	.word	0x7ca00000
 8009758:	7fefffff 	.word	0x7fefffff
 800975c:	f014 0310 	ands.w	r3, r4, #16
 8009760:	bf18      	it	ne
 8009762:	236a      	movne	r3, #106	@ 0x6a
 8009764:	4650      	mov	r0, sl
 8009766:	9308      	str	r3, [sp, #32]
 8009768:	4659      	mov	r1, fp
 800976a:	2300      	movs	r3, #0
 800976c:	4e77      	ldr	r6, [pc, #476]	@ (800994c <_strtod_l+0x78c>)
 800976e:	07e7      	lsls	r7, r4, #31
 8009770:	d504      	bpl.n	800977c <_strtod_l+0x5bc>
 8009772:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009776:	f7f6 fed1 	bl	800051c <__aeabi_dmul>
 800977a:	2301      	movs	r3, #1
 800977c:	1064      	asrs	r4, r4, #1
 800977e:	f106 0608 	add.w	r6, r6, #8
 8009782:	d1f4      	bne.n	800976e <_strtod_l+0x5ae>
 8009784:	b10b      	cbz	r3, 800978a <_strtod_l+0x5ca>
 8009786:	4682      	mov	sl, r0
 8009788:	468b      	mov	fp, r1
 800978a:	9b08      	ldr	r3, [sp, #32]
 800978c:	b1b3      	cbz	r3, 80097bc <_strtod_l+0x5fc>
 800978e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009792:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009796:	2b00      	cmp	r3, #0
 8009798:	4659      	mov	r1, fp
 800979a:	dd0f      	ble.n	80097bc <_strtod_l+0x5fc>
 800979c:	2b1f      	cmp	r3, #31
 800979e:	dd58      	ble.n	8009852 <_strtod_l+0x692>
 80097a0:	2b34      	cmp	r3, #52	@ 0x34
 80097a2:	bfd8      	it	le
 80097a4:	f04f 33ff 	movle.w	r3, #4294967295
 80097a8:	f04f 0a00 	mov.w	sl, #0
 80097ac:	bfcf      	iteee	gt
 80097ae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80097b2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80097b6:	4093      	lslle	r3, r2
 80097b8:	ea03 0b01 	andle.w	fp, r3, r1
 80097bc:	2200      	movs	r2, #0
 80097be:	2300      	movs	r3, #0
 80097c0:	4650      	mov	r0, sl
 80097c2:	4659      	mov	r1, fp
 80097c4:	f7f7 f912 	bl	80009ec <__aeabi_dcmpeq>
 80097c8:	2800      	cmp	r0, #0
 80097ca:	d1a7      	bne.n	800971c <_strtod_l+0x55c>
 80097cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097ce:	464a      	mov	r2, r9
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80097d4:	462b      	mov	r3, r5
 80097d6:	9805      	ldr	r0, [sp, #20]
 80097d8:	f7ff f8d8 	bl	800898c <__s2b>
 80097dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 80097de:	2800      	cmp	r0, #0
 80097e0:	f43f af09 	beq.w	80095f6 <_strtod_l+0x436>
 80097e4:	2400      	movs	r4, #0
 80097e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097ea:	2a00      	cmp	r2, #0
 80097ec:	eba3 0308 	sub.w	r3, r3, r8
 80097f0:	bfa8      	it	ge
 80097f2:	2300      	movge	r3, #0
 80097f4:	46a0      	mov	r8, r4
 80097f6:	9312      	str	r3, [sp, #72]	@ 0x48
 80097f8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097fc:	9316      	str	r3, [sp, #88]	@ 0x58
 80097fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009800:	9805      	ldr	r0, [sp, #20]
 8009802:	6859      	ldr	r1, [r3, #4]
 8009804:	f7ff f81a 	bl	800883c <_Balloc>
 8009808:	4681      	mov	r9, r0
 800980a:	2800      	cmp	r0, #0
 800980c:	f43f aef7 	beq.w	80095fe <_strtod_l+0x43e>
 8009810:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009812:	300c      	adds	r0, #12
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	f103 010c 	add.w	r1, r3, #12
 800981a:	3202      	adds	r2, #2
 800981c:	0092      	lsls	r2, r2, #2
 800981e:	f7fe f8a0 	bl	8007962 <memcpy>
 8009822:	ab1c      	add	r3, sp, #112	@ 0x70
 8009824:	9301      	str	r3, [sp, #4]
 8009826:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009828:	9300      	str	r3, [sp, #0]
 800982a:	4652      	mov	r2, sl
 800982c:	465b      	mov	r3, fp
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009834:	f7ff fbd6 	bl	8008fe4 <__d2b>
 8009838:	901a      	str	r0, [sp, #104]	@ 0x68
 800983a:	2800      	cmp	r0, #0
 800983c:	f43f aedf 	beq.w	80095fe <_strtod_l+0x43e>
 8009840:	2101      	movs	r1, #1
 8009842:	9805      	ldr	r0, [sp, #20]
 8009844:	f7ff f938 	bl	8008ab8 <__i2b>
 8009848:	4680      	mov	r8, r0
 800984a:	b948      	cbnz	r0, 8009860 <_strtod_l+0x6a0>
 800984c:	f04f 0800 	mov.w	r8, #0
 8009850:	e6d5      	b.n	80095fe <_strtod_l+0x43e>
 8009852:	f04f 32ff 	mov.w	r2, #4294967295
 8009856:	fa02 f303 	lsl.w	r3, r2, r3
 800985a:	ea03 0a0a 	and.w	sl, r3, sl
 800985e:	e7ad      	b.n	80097bc <_strtod_l+0x5fc>
 8009860:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009862:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009864:	2d00      	cmp	r5, #0
 8009866:	bfab      	itete	ge
 8009868:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800986a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800986c:	18ef      	addge	r7, r5, r3
 800986e:	1b5e      	sublt	r6, r3, r5
 8009870:	9b08      	ldr	r3, [sp, #32]
 8009872:	bfa8      	it	ge
 8009874:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009876:	eba5 0503 	sub.w	r5, r5, r3
 800987a:	4415      	add	r5, r2
 800987c:	4b34      	ldr	r3, [pc, #208]	@ (8009950 <_strtod_l+0x790>)
 800987e:	f105 35ff 	add.w	r5, r5, #4294967295
 8009882:	bfb8      	it	lt
 8009884:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009886:	429d      	cmp	r5, r3
 8009888:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800988c:	da50      	bge.n	8009930 <_strtod_l+0x770>
 800988e:	1b5b      	subs	r3, r3, r5
 8009890:	2b1f      	cmp	r3, #31
 8009892:	f04f 0101 	mov.w	r1, #1
 8009896:	eba2 0203 	sub.w	r2, r2, r3
 800989a:	dc3d      	bgt.n	8009918 <_strtod_l+0x758>
 800989c:	fa01 f303 	lsl.w	r3, r1, r3
 80098a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098a2:	2300      	movs	r3, #0
 80098a4:	9310      	str	r3, [sp, #64]	@ 0x40
 80098a6:	18bd      	adds	r5, r7, r2
 80098a8:	9b08      	ldr	r3, [sp, #32]
 80098aa:	42af      	cmp	r7, r5
 80098ac:	4416      	add	r6, r2
 80098ae:	441e      	add	r6, r3
 80098b0:	463b      	mov	r3, r7
 80098b2:	bfa8      	it	ge
 80098b4:	462b      	movge	r3, r5
 80098b6:	42b3      	cmp	r3, r6
 80098b8:	bfa8      	it	ge
 80098ba:	4633      	movge	r3, r6
 80098bc:	2b00      	cmp	r3, #0
 80098be:	bfc2      	ittt	gt
 80098c0:	1aed      	subgt	r5, r5, r3
 80098c2:	1af6      	subgt	r6, r6, r3
 80098c4:	1aff      	subgt	r7, r7, r3
 80098c6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dd16      	ble.n	80098fa <_strtod_l+0x73a>
 80098cc:	4641      	mov	r1, r8
 80098ce:	461a      	mov	r2, r3
 80098d0:	9805      	ldr	r0, [sp, #20]
 80098d2:	f7ff f9a9 	bl	8008c28 <__pow5mult>
 80098d6:	4680      	mov	r8, r0
 80098d8:	2800      	cmp	r0, #0
 80098da:	d0b7      	beq.n	800984c <_strtod_l+0x68c>
 80098dc:	4601      	mov	r1, r0
 80098de:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098e0:	9805      	ldr	r0, [sp, #20]
 80098e2:	f7ff f8ff 	bl	8008ae4 <__multiply>
 80098e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80098e8:	2800      	cmp	r0, #0
 80098ea:	f43f ae88 	beq.w	80095fe <_strtod_l+0x43e>
 80098ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f0:	9805      	ldr	r0, [sp, #20]
 80098f2:	f7fe ffe3 	bl	80088bc <_Bfree>
 80098f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80098fa:	2d00      	cmp	r5, #0
 80098fc:	dc1d      	bgt.n	800993a <_strtod_l+0x77a>
 80098fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009900:	2b00      	cmp	r3, #0
 8009902:	dd27      	ble.n	8009954 <_strtod_l+0x794>
 8009904:	4649      	mov	r1, r9
 8009906:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009908:	9805      	ldr	r0, [sp, #20]
 800990a:	f7ff f98d 	bl	8008c28 <__pow5mult>
 800990e:	4681      	mov	r9, r0
 8009910:	bb00      	cbnz	r0, 8009954 <_strtod_l+0x794>
 8009912:	f04f 0900 	mov.w	r9, #0
 8009916:	e672      	b.n	80095fe <_strtod_l+0x43e>
 8009918:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800991c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009920:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009924:	35e2      	adds	r5, #226	@ 0xe2
 8009926:	fa01 f305 	lsl.w	r3, r1, r5
 800992a:	9310      	str	r3, [sp, #64]	@ 0x40
 800992c:	9113      	str	r1, [sp, #76]	@ 0x4c
 800992e:	e7ba      	b.n	80098a6 <_strtod_l+0x6e6>
 8009930:	2300      	movs	r3, #0
 8009932:	9310      	str	r3, [sp, #64]	@ 0x40
 8009934:	2301      	movs	r3, #1
 8009936:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009938:	e7b5      	b.n	80098a6 <_strtod_l+0x6e6>
 800993a:	462a      	mov	r2, r5
 800993c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800993e:	9805      	ldr	r0, [sp, #20]
 8009940:	f7ff f9cc 	bl	8008cdc <__lshift>
 8009944:	901a      	str	r0, [sp, #104]	@ 0x68
 8009946:	2800      	cmp	r0, #0
 8009948:	d1d9      	bne.n	80098fe <_strtod_l+0x73e>
 800994a:	e658      	b.n	80095fe <_strtod_l+0x43e>
 800994c:	0800c948 	.word	0x0800c948
 8009950:	fffffc02 	.word	0xfffffc02
 8009954:	2e00      	cmp	r6, #0
 8009956:	dd07      	ble.n	8009968 <_strtod_l+0x7a8>
 8009958:	4649      	mov	r1, r9
 800995a:	4632      	mov	r2, r6
 800995c:	9805      	ldr	r0, [sp, #20]
 800995e:	f7ff f9bd 	bl	8008cdc <__lshift>
 8009962:	4681      	mov	r9, r0
 8009964:	2800      	cmp	r0, #0
 8009966:	d0d4      	beq.n	8009912 <_strtod_l+0x752>
 8009968:	2f00      	cmp	r7, #0
 800996a:	dd08      	ble.n	800997e <_strtod_l+0x7be>
 800996c:	4641      	mov	r1, r8
 800996e:	463a      	mov	r2, r7
 8009970:	9805      	ldr	r0, [sp, #20]
 8009972:	f7ff f9b3 	bl	8008cdc <__lshift>
 8009976:	4680      	mov	r8, r0
 8009978:	2800      	cmp	r0, #0
 800997a:	f43f ae40 	beq.w	80095fe <_strtod_l+0x43e>
 800997e:	464a      	mov	r2, r9
 8009980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009982:	9805      	ldr	r0, [sp, #20]
 8009984:	f7ff fa32 	bl	8008dec <__mdiff>
 8009988:	4604      	mov	r4, r0
 800998a:	2800      	cmp	r0, #0
 800998c:	f43f ae37 	beq.w	80095fe <_strtod_l+0x43e>
 8009990:	68c3      	ldr	r3, [r0, #12]
 8009992:	4641      	mov	r1, r8
 8009994:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009996:	2300      	movs	r3, #0
 8009998:	60c3      	str	r3, [r0, #12]
 800999a:	f7ff fa0b 	bl	8008db4 <__mcmp>
 800999e:	2800      	cmp	r0, #0
 80099a0:	da3d      	bge.n	8009a1e <_strtod_l+0x85e>
 80099a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099a4:	ea53 030a 	orrs.w	r3, r3, sl
 80099a8:	d163      	bne.n	8009a72 <_strtod_l+0x8b2>
 80099aa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d15f      	bne.n	8009a72 <_strtod_l+0x8b2>
 80099b2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099b6:	0d1b      	lsrs	r3, r3, #20
 80099b8:	051b      	lsls	r3, r3, #20
 80099ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099be:	d958      	bls.n	8009a72 <_strtod_l+0x8b2>
 80099c0:	6963      	ldr	r3, [r4, #20]
 80099c2:	b913      	cbnz	r3, 80099ca <_strtod_l+0x80a>
 80099c4:	6923      	ldr	r3, [r4, #16]
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	dd53      	ble.n	8009a72 <_strtod_l+0x8b2>
 80099ca:	4621      	mov	r1, r4
 80099cc:	2201      	movs	r2, #1
 80099ce:	9805      	ldr	r0, [sp, #20]
 80099d0:	f7ff f984 	bl	8008cdc <__lshift>
 80099d4:	4641      	mov	r1, r8
 80099d6:	4604      	mov	r4, r0
 80099d8:	f7ff f9ec 	bl	8008db4 <__mcmp>
 80099dc:	2800      	cmp	r0, #0
 80099de:	dd48      	ble.n	8009a72 <_strtod_l+0x8b2>
 80099e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099e4:	9a08      	ldr	r2, [sp, #32]
 80099e6:	0d1b      	lsrs	r3, r3, #20
 80099e8:	051b      	lsls	r3, r3, #20
 80099ea:	2a00      	cmp	r2, #0
 80099ec:	d062      	beq.n	8009ab4 <_strtod_l+0x8f4>
 80099ee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099f2:	d85f      	bhi.n	8009ab4 <_strtod_l+0x8f4>
 80099f4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099f8:	f67f ae94 	bls.w	8009724 <_strtod_l+0x564>
 80099fc:	4650      	mov	r0, sl
 80099fe:	4659      	mov	r1, fp
 8009a00:	4ba3      	ldr	r3, [pc, #652]	@ (8009c90 <_strtod_l+0xad0>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	f7f6 fd8a 	bl	800051c <__aeabi_dmul>
 8009a08:	4ba2      	ldr	r3, [pc, #648]	@ (8009c94 <_strtod_l+0xad4>)
 8009a0a:	4682      	mov	sl, r0
 8009a0c:	400b      	ands	r3, r1
 8009a0e:	468b      	mov	fp, r1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f47f adff 	bne.w	8009614 <_strtod_l+0x454>
 8009a16:	2322      	movs	r3, #34	@ 0x22
 8009a18:	9a05      	ldr	r2, [sp, #20]
 8009a1a:	6013      	str	r3, [r2, #0]
 8009a1c:	e5fa      	b.n	8009614 <_strtod_l+0x454>
 8009a1e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009a22:	d165      	bne.n	8009af0 <_strtod_l+0x930>
 8009a24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a2a:	b35a      	cbz	r2, 8009a84 <_strtod_l+0x8c4>
 8009a2c:	4a9a      	ldr	r2, [pc, #616]	@ (8009c98 <_strtod_l+0xad8>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d12b      	bne.n	8009a8a <_strtod_l+0x8ca>
 8009a32:	9b08      	ldr	r3, [sp, #32]
 8009a34:	4651      	mov	r1, sl
 8009a36:	b303      	cbz	r3, 8009a7a <_strtod_l+0x8ba>
 8009a38:	465a      	mov	r2, fp
 8009a3a:	4b96      	ldr	r3, [pc, #600]	@ (8009c94 <_strtod_l+0xad4>)
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a42:	f04f 32ff 	mov.w	r2, #4294967295
 8009a46:	d81b      	bhi.n	8009a80 <_strtod_l+0x8c0>
 8009a48:	0d1b      	lsrs	r3, r3, #20
 8009a4a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a52:	4299      	cmp	r1, r3
 8009a54:	d119      	bne.n	8009a8a <_strtod_l+0x8ca>
 8009a56:	4b91      	ldr	r3, [pc, #580]	@ (8009c9c <_strtod_l+0xadc>)
 8009a58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a5a:	429a      	cmp	r2, r3
 8009a5c:	d102      	bne.n	8009a64 <_strtod_l+0x8a4>
 8009a5e:	3101      	adds	r1, #1
 8009a60:	f43f adcd 	beq.w	80095fe <_strtod_l+0x43e>
 8009a64:	f04f 0a00 	mov.w	sl, #0
 8009a68:	4b8a      	ldr	r3, [pc, #552]	@ (8009c94 <_strtod_l+0xad4>)
 8009a6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a6c:	401a      	ands	r2, r3
 8009a6e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a72:	9b08      	ldr	r3, [sp, #32]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d1c1      	bne.n	80099fc <_strtod_l+0x83c>
 8009a78:	e5cc      	b.n	8009614 <_strtod_l+0x454>
 8009a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7e:	e7e8      	b.n	8009a52 <_strtod_l+0x892>
 8009a80:	4613      	mov	r3, r2
 8009a82:	e7e6      	b.n	8009a52 <_strtod_l+0x892>
 8009a84:	ea53 030a 	orrs.w	r3, r3, sl
 8009a88:	d0aa      	beq.n	80099e0 <_strtod_l+0x820>
 8009a8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a8c:	b1db      	cbz	r3, 8009ac6 <_strtod_l+0x906>
 8009a8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a90:	4213      	tst	r3, r2
 8009a92:	d0ee      	beq.n	8009a72 <_strtod_l+0x8b2>
 8009a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a96:	4650      	mov	r0, sl
 8009a98:	4659      	mov	r1, fp
 8009a9a:	9a08      	ldr	r2, [sp, #32]
 8009a9c:	b1bb      	cbz	r3, 8009ace <_strtod_l+0x90e>
 8009a9e:	f7ff fb6d 	bl	800917c <sulp>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aaa:	f7f6 fb81 	bl	80001b0 <__adddf3>
 8009aae:	4682      	mov	sl, r0
 8009ab0:	468b      	mov	fp, r1
 8009ab2:	e7de      	b.n	8009a72 <_strtod_l+0x8b2>
 8009ab4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009ab8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009abc:	f04f 3aff 	mov.w	sl, #4294967295
 8009ac0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009ac4:	e7d5      	b.n	8009a72 <_strtod_l+0x8b2>
 8009ac6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ac8:	ea13 0f0a 	tst.w	r3, sl
 8009acc:	e7e1      	b.n	8009a92 <_strtod_l+0x8d2>
 8009ace:	f7ff fb55 	bl	800917c <sulp>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009ada:	f7f6 fb67 	bl	80001ac <__aeabi_dsub>
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	4682      	mov	sl, r0
 8009ae4:	468b      	mov	fp, r1
 8009ae6:	f7f6 ff81 	bl	80009ec <__aeabi_dcmpeq>
 8009aea:	2800      	cmp	r0, #0
 8009aec:	d0c1      	beq.n	8009a72 <_strtod_l+0x8b2>
 8009aee:	e619      	b.n	8009724 <_strtod_l+0x564>
 8009af0:	4641      	mov	r1, r8
 8009af2:	4620      	mov	r0, r4
 8009af4:	f7ff face 	bl	8009094 <__ratio>
 8009af8:	2200      	movs	r2, #0
 8009afa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	f7f6 ff87 	bl	8000a14 <__aeabi_dcmple>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d06d      	beq.n	8009be6 <_strtod_l+0xa26>
 8009b0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d178      	bne.n	8009c02 <_strtod_l+0xa42>
 8009b10:	f1ba 0f00 	cmp.w	sl, #0
 8009b14:	d156      	bne.n	8009bc4 <_strtod_l+0xa04>
 8009b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d158      	bne.n	8009bd2 <_strtod_l+0xa12>
 8009b20:	2200      	movs	r2, #0
 8009b22:	4630      	mov	r0, r6
 8009b24:	4639      	mov	r1, r7
 8009b26:	4b5e      	ldr	r3, [pc, #376]	@ (8009ca0 <_strtod_l+0xae0>)
 8009b28:	f7f6 ff6a 	bl	8000a00 <__aeabi_dcmplt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d157      	bne.n	8009be0 <_strtod_l+0xa20>
 8009b30:	4630      	mov	r0, r6
 8009b32:	4639      	mov	r1, r7
 8009b34:	2200      	movs	r2, #0
 8009b36:	4b5b      	ldr	r3, [pc, #364]	@ (8009ca4 <_strtod_l+0xae4>)
 8009b38:	f7f6 fcf0 	bl	800051c <__aeabi_dmul>
 8009b3c:	4606      	mov	r6, r0
 8009b3e:	460f      	mov	r7, r1
 8009b40:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b44:	9606      	str	r6, [sp, #24]
 8009b46:	9307      	str	r3, [sp, #28]
 8009b48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b4c:	4d51      	ldr	r5, [pc, #324]	@ (8009c94 <_strtod_l+0xad4>)
 8009b4e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b54:	401d      	ands	r5, r3
 8009b56:	4b54      	ldr	r3, [pc, #336]	@ (8009ca8 <_strtod_l+0xae8>)
 8009b58:	429d      	cmp	r5, r3
 8009b5a:	f040 80ab 	bne.w	8009cb4 <_strtod_l+0xaf4>
 8009b5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b60:	4650      	mov	r0, sl
 8009b62:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b66:	4659      	mov	r1, fp
 8009b68:	f7ff f9d4 	bl	8008f14 <__ulp>
 8009b6c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b70:	f7f6 fcd4 	bl	800051c <__aeabi_dmul>
 8009b74:	4652      	mov	r2, sl
 8009b76:	465b      	mov	r3, fp
 8009b78:	f7f6 fb1a 	bl	80001b0 <__adddf3>
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4945      	ldr	r1, [pc, #276]	@ (8009c94 <_strtod_l+0xad4>)
 8009b80:	4a4a      	ldr	r2, [pc, #296]	@ (8009cac <_strtod_l+0xaec>)
 8009b82:	4019      	ands	r1, r3
 8009b84:	4291      	cmp	r1, r2
 8009b86:	4682      	mov	sl, r0
 8009b88:	d942      	bls.n	8009c10 <_strtod_l+0xa50>
 8009b8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b8c:	4b43      	ldr	r3, [pc, #268]	@ (8009c9c <_strtod_l+0xadc>)
 8009b8e:	429a      	cmp	r2, r3
 8009b90:	d103      	bne.n	8009b9a <_strtod_l+0x9da>
 8009b92:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b94:	3301      	adds	r3, #1
 8009b96:	f43f ad32 	beq.w	80095fe <_strtod_l+0x43e>
 8009b9a:	f04f 3aff 	mov.w	sl, #4294967295
 8009b9e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009c9c <_strtod_l+0xadc>
 8009ba2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ba4:	9805      	ldr	r0, [sp, #20]
 8009ba6:	f7fe fe89 	bl	80088bc <_Bfree>
 8009baa:	4649      	mov	r1, r9
 8009bac:	9805      	ldr	r0, [sp, #20]
 8009bae:	f7fe fe85 	bl	80088bc <_Bfree>
 8009bb2:	4641      	mov	r1, r8
 8009bb4:	9805      	ldr	r0, [sp, #20]
 8009bb6:	f7fe fe81 	bl	80088bc <_Bfree>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	9805      	ldr	r0, [sp, #20]
 8009bbe:	f7fe fe7d 	bl	80088bc <_Bfree>
 8009bc2:	e61c      	b.n	80097fe <_strtod_l+0x63e>
 8009bc4:	f1ba 0f01 	cmp.w	sl, #1
 8009bc8:	d103      	bne.n	8009bd2 <_strtod_l+0xa12>
 8009bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f43f ada9 	beq.w	8009724 <_strtod_l+0x564>
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4b36      	ldr	r3, [pc, #216]	@ (8009cb0 <_strtod_l+0xaf0>)
 8009bd6:	2600      	movs	r6, #0
 8009bd8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bdc:	4f30      	ldr	r7, [pc, #192]	@ (8009ca0 <_strtod_l+0xae0>)
 8009bde:	e7b3      	b.n	8009b48 <_strtod_l+0x988>
 8009be0:	2600      	movs	r6, #0
 8009be2:	4f30      	ldr	r7, [pc, #192]	@ (8009ca4 <_strtod_l+0xae4>)
 8009be4:	e7ac      	b.n	8009b40 <_strtod_l+0x980>
 8009be6:	4630      	mov	r0, r6
 8009be8:	4639      	mov	r1, r7
 8009bea:	4b2e      	ldr	r3, [pc, #184]	@ (8009ca4 <_strtod_l+0xae4>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	f7f6 fc95 	bl	800051c <__aeabi_dmul>
 8009bf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	460f      	mov	r7, r1
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0a1      	beq.n	8009b40 <_strtod_l+0x980>
 8009bfc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c00:	e7a2      	b.n	8009b48 <_strtod_l+0x988>
 8009c02:	2200      	movs	r2, #0
 8009c04:	4b26      	ldr	r3, [pc, #152]	@ (8009ca0 <_strtod_l+0xae0>)
 8009c06:	4616      	mov	r6, r2
 8009c08:	461f      	mov	r7, r3
 8009c0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c0e:	e79b      	b.n	8009b48 <_strtod_l+0x988>
 8009c10:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c14:	9b08      	ldr	r3, [sp, #32]
 8009c16:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1c1      	bne.n	8009ba2 <_strtod_l+0x9e2>
 8009c1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c22:	0d1b      	lsrs	r3, r3, #20
 8009c24:	051b      	lsls	r3, r3, #20
 8009c26:	429d      	cmp	r5, r3
 8009c28:	d1bb      	bne.n	8009ba2 <_strtod_l+0x9e2>
 8009c2a:	4630      	mov	r0, r6
 8009c2c:	4639      	mov	r1, r7
 8009c2e:	f7f7 facf 	bl	80011d0 <__aeabi_d2lz>
 8009c32:	f7f6 fc45 	bl	80004c0 <__aeabi_l2d>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	4639      	mov	r1, r7
 8009c3e:	f7f6 fab5 	bl	80001ac <__aeabi_dsub>
 8009c42:	460b      	mov	r3, r1
 8009c44:	4602      	mov	r2, r0
 8009c46:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c4a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c50:	ea46 060a 	orr.w	r6, r6, sl
 8009c54:	431e      	orrs	r6, r3
 8009c56:	d06a      	beq.n	8009d2e <_strtod_l+0xb6e>
 8009c58:	a309      	add	r3, pc, #36	@ (adr r3, 8009c80 <_strtod_l+0xac0>)
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f6 fecf 	bl	8000a00 <__aeabi_dcmplt>
 8009c62:	2800      	cmp	r0, #0
 8009c64:	f47f acd6 	bne.w	8009614 <_strtod_l+0x454>
 8009c68:	a307      	add	r3, pc, #28	@ (adr r3, 8009c88 <_strtod_l+0xac8>)
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c72:	f7f6 fee3 	bl	8000a3c <__aeabi_dcmpgt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	d093      	beq.n	8009ba2 <_strtod_l+0x9e2>
 8009c7a:	e4cb      	b.n	8009614 <_strtod_l+0x454>
 8009c7c:	f3af 8000 	nop.w
 8009c80:	94a03595 	.word	0x94a03595
 8009c84:	3fdfffff 	.word	0x3fdfffff
 8009c88:	35afe535 	.word	0x35afe535
 8009c8c:	3fe00000 	.word	0x3fe00000
 8009c90:	39500000 	.word	0x39500000
 8009c94:	7ff00000 	.word	0x7ff00000
 8009c98:	000fffff 	.word	0x000fffff
 8009c9c:	7fefffff 	.word	0x7fefffff
 8009ca0:	3ff00000 	.word	0x3ff00000
 8009ca4:	3fe00000 	.word	0x3fe00000
 8009ca8:	7fe00000 	.word	0x7fe00000
 8009cac:	7c9fffff 	.word	0x7c9fffff
 8009cb0:	bff00000 	.word	0xbff00000
 8009cb4:	9b08      	ldr	r3, [sp, #32]
 8009cb6:	b323      	cbz	r3, 8009d02 <_strtod_l+0xb42>
 8009cb8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009cbc:	d821      	bhi.n	8009d02 <_strtod_l+0xb42>
 8009cbe:	a328      	add	r3, pc, #160	@ (adr r3, 8009d60 <_strtod_l+0xba0>)
 8009cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc4:	4630      	mov	r0, r6
 8009cc6:	4639      	mov	r1, r7
 8009cc8:	f7f6 fea4 	bl	8000a14 <__aeabi_dcmple>
 8009ccc:	b1a0      	cbz	r0, 8009cf8 <_strtod_l+0xb38>
 8009cce:	4639      	mov	r1, r7
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f7f6 fefb 	bl	8000acc <__aeabi_d2uiz>
 8009cd6:	2801      	cmp	r0, #1
 8009cd8:	bf38      	it	cc
 8009cda:	2001      	movcc	r0, #1
 8009cdc:	f7f6 fba4 	bl	8000428 <__aeabi_ui2d>
 8009ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ce2:	4606      	mov	r6, r0
 8009ce4:	460f      	mov	r7, r1
 8009ce6:	b9fb      	cbnz	r3, 8009d28 <_strtod_l+0xb68>
 8009ce8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cec:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cee:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cf0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009cf4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cfa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009cfe:	1b5b      	subs	r3, r3, r5
 8009d00:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009d06:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d0a:	f7ff f903 	bl	8008f14 <__ulp>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	4650      	mov	r0, sl
 8009d14:	4659      	mov	r1, fp
 8009d16:	f7f6 fc01 	bl	800051c <__aeabi_dmul>
 8009d1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d1e:	f7f6 fa47 	bl	80001b0 <__adddf3>
 8009d22:	4682      	mov	sl, r0
 8009d24:	468b      	mov	fp, r1
 8009d26:	e775      	b.n	8009c14 <_strtod_l+0xa54>
 8009d28:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d2c:	e7e0      	b.n	8009cf0 <_strtod_l+0xb30>
 8009d2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d68 <_strtod_l+0xba8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fe64 	bl	8000a00 <__aeabi_dcmplt>
 8009d38:	e79d      	b.n	8009c76 <_strtod_l+0xab6>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d40:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d42:	6013      	str	r3, [r2, #0]
 8009d44:	f7ff ba79 	b.w	800923a <_strtod_l+0x7a>
 8009d48:	2a65      	cmp	r2, #101	@ 0x65
 8009d4a:	f43f ab72 	beq.w	8009432 <_strtod_l+0x272>
 8009d4e:	2a45      	cmp	r2, #69	@ 0x45
 8009d50:	f43f ab6f 	beq.w	8009432 <_strtod_l+0x272>
 8009d54:	2301      	movs	r3, #1
 8009d56:	f7ff bbaa 	b.w	80094ae <_strtod_l+0x2ee>
 8009d5a:	bf00      	nop
 8009d5c:	f3af 8000 	nop.w
 8009d60:	ffc00000 	.word	0xffc00000
 8009d64:	41dfffff 	.word	0x41dfffff
 8009d68:	94a03595 	.word	0x94a03595
 8009d6c:	3fcfffff 	.word	0x3fcfffff

08009d70 <_strtod_r>:
 8009d70:	4b01      	ldr	r3, [pc, #4]	@ (8009d78 <_strtod_r+0x8>)
 8009d72:	f7ff ba25 	b.w	80091c0 <_strtod_l>
 8009d76:	bf00      	nop
 8009d78:	20000080 	.word	0x20000080

08009d7c <_strtol_l.isra.0>:
 8009d7c:	2b24      	cmp	r3, #36	@ 0x24
 8009d7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d82:	4686      	mov	lr, r0
 8009d84:	4690      	mov	r8, r2
 8009d86:	d801      	bhi.n	8009d8c <_strtol_l.isra.0+0x10>
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d106      	bne.n	8009d9a <_strtol_l.isra.0+0x1e>
 8009d8c:	f7fd fdae 	bl	80078ec <__errno>
 8009d90:	2316      	movs	r3, #22
 8009d92:	6003      	str	r3, [r0, #0]
 8009d94:	2000      	movs	r0, #0
 8009d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d9a:	460d      	mov	r5, r1
 8009d9c:	4833      	ldr	r0, [pc, #204]	@ (8009e6c <_strtol_l.isra.0+0xf0>)
 8009d9e:	462a      	mov	r2, r5
 8009da0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009da4:	5d06      	ldrb	r6, [r0, r4]
 8009da6:	f016 0608 	ands.w	r6, r6, #8
 8009daa:	d1f8      	bne.n	8009d9e <_strtol_l.isra.0+0x22>
 8009dac:	2c2d      	cmp	r4, #45	@ 0x2d
 8009dae:	d110      	bne.n	8009dd2 <_strtol_l.isra.0+0x56>
 8009db0:	2601      	movs	r6, #1
 8009db2:	782c      	ldrb	r4, [r5, #0]
 8009db4:	1c95      	adds	r5, r2, #2
 8009db6:	f033 0210 	bics.w	r2, r3, #16
 8009dba:	d115      	bne.n	8009de8 <_strtol_l.isra.0+0x6c>
 8009dbc:	2c30      	cmp	r4, #48	@ 0x30
 8009dbe:	d10d      	bne.n	8009ddc <_strtol_l.isra.0+0x60>
 8009dc0:	782a      	ldrb	r2, [r5, #0]
 8009dc2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009dc6:	2a58      	cmp	r2, #88	@ 0x58
 8009dc8:	d108      	bne.n	8009ddc <_strtol_l.isra.0+0x60>
 8009dca:	786c      	ldrb	r4, [r5, #1]
 8009dcc:	3502      	adds	r5, #2
 8009dce:	2310      	movs	r3, #16
 8009dd0:	e00a      	b.n	8009de8 <_strtol_l.isra.0+0x6c>
 8009dd2:	2c2b      	cmp	r4, #43	@ 0x2b
 8009dd4:	bf04      	itt	eq
 8009dd6:	782c      	ldrbeq	r4, [r5, #0]
 8009dd8:	1c95      	addeq	r5, r2, #2
 8009dda:	e7ec      	b.n	8009db6 <_strtol_l.isra.0+0x3a>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1f6      	bne.n	8009dce <_strtol_l.isra.0+0x52>
 8009de0:	2c30      	cmp	r4, #48	@ 0x30
 8009de2:	bf14      	ite	ne
 8009de4:	230a      	movne	r3, #10
 8009de6:	2308      	moveq	r3, #8
 8009de8:	2200      	movs	r2, #0
 8009dea:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009dee:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009df2:	fbbc f9f3 	udiv	r9, ip, r3
 8009df6:	4610      	mov	r0, r2
 8009df8:	fb03 ca19 	mls	sl, r3, r9, ip
 8009dfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e00:	2f09      	cmp	r7, #9
 8009e02:	d80f      	bhi.n	8009e24 <_strtol_l.isra.0+0xa8>
 8009e04:	463c      	mov	r4, r7
 8009e06:	42a3      	cmp	r3, r4
 8009e08:	dd1b      	ble.n	8009e42 <_strtol_l.isra.0+0xc6>
 8009e0a:	1c57      	adds	r7, r2, #1
 8009e0c:	d007      	beq.n	8009e1e <_strtol_l.isra.0+0xa2>
 8009e0e:	4581      	cmp	r9, r0
 8009e10:	d314      	bcc.n	8009e3c <_strtol_l.isra.0+0xc0>
 8009e12:	d101      	bne.n	8009e18 <_strtol_l.isra.0+0x9c>
 8009e14:	45a2      	cmp	sl, r4
 8009e16:	db11      	blt.n	8009e3c <_strtol_l.isra.0+0xc0>
 8009e18:	2201      	movs	r2, #1
 8009e1a:	fb00 4003 	mla	r0, r0, r3, r4
 8009e1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e22:	e7eb      	b.n	8009dfc <_strtol_l.isra.0+0x80>
 8009e24:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e28:	2f19      	cmp	r7, #25
 8009e2a:	d801      	bhi.n	8009e30 <_strtol_l.isra.0+0xb4>
 8009e2c:	3c37      	subs	r4, #55	@ 0x37
 8009e2e:	e7ea      	b.n	8009e06 <_strtol_l.isra.0+0x8a>
 8009e30:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e34:	2f19      	cmp	r7, #25
 8009e36:	d804      	bhi.n	8009e42 <_strtol_l.isra.0+0xc6>
 8009e38:	3c57      	subs	r4, #87	@ 0x57
 8009e3a:	e7e4      	b.n	8009e06 <_strtol_l.isra.0+0x8a>
 8009e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e40:	e7ed      	b.n	8009e1e <_strtol_l.isra.0+0xa2>
 8009e42:	1c53      	adds	r3, r2, #1
 8009e44:	d108      	bne.n	8009e58 <_strtol_l.isra.0+0xdc>
 8009e46:	2322      	movs	r3, #34	@ 0x22
 8009e48:	4660      	mov	r0, ip
 8009e4a:	f8ce 3000 	str.w	r3, [lr]
 8009e4e:	f1b8 0f00 	cmp.w	r8, #0
 8009e52:	d0a0      	beq.n	8009d96 <_strtol_l.isra.0+0x1a>
 8009e54:	1e69      	subs	r1, r5, #1
 8009e56:	e006      	b.n	8009e66 <_strtol_l.isra.0+0xea>
 8009e58:	b106      	cbz	r6, 8009e5c <_strtol_l.isra.0+0xe0>
 8009e5a:	4240      	negs	r0, r0
 8009e5c:	f1b8 0f00 	cmp.w	r8, #0
 8009e60:	d099      	beq.n	8009d96 <_strtol_l.isra.0+0x1a>
 8009e62:	2a00      	cmp	r2, #0
 8009e64:	d1f6      	bne.n	8009e54 <_strtol_l.isra.0+0xd8>
 8009e66:	f8c8 1000 	str.w	r1, [r8]
 8009e6a:	e794      	b.n	8009d96 <_strtol_l.isra.0+0x1a>
 8009e6c:	0800c971 	.word	0x0800c971

08009e70 <_strtol_r>:
 8009e70:	f7ff bf84 	b.w	8009d7c <_strtol_l.isra.0>

08009e74 <__ssputs_r>:
 8009e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e78:	461f      	mov	r7, r3
 8009e7a:	688e      	ldr	r6, [r1, #8]
 8009e7c:	4682      	mov	sl, r0
 8009e7e:	42be      	cmp	r6, r7
 8009e80:	460c      	mov	r4, r1
 8009e82:	4690      	mov	r8, r2
 8009e84:	680b      	ldr	r3, [r1, #0]
 8009e86:	d82d      	bhi.n	8009ee4 <__ssputs_r+0x70>
 8009e88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e8c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e90:	d026      	beq.n	8009ee0 <__ssputs_r+0x6c>
 8009e92:	6965      	ldr	r5, [r4, #20]
 8009e94:	6909      	ldr	r1, [r1, #16]
 8009e96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e9a:	eba3 0901 	sub.w	r9, r3, r1
 8009e9e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ea2:	1c7b      	adds	r3, r7, #1
 8009ea4:	444b      	add	r3, r9
 8009ea6:	106d      	asrs	r5, r5, #1
 8009ea8:	429d      	cmp	r5, r3
 8009eaa:	bf38      	it	cc
 8009eac:	461d      	movcc	r5, r3
 8009eae:	0553      	lsls	r3, r2, #21
 8009eb0:	d527      	bpl.n	8009f02 <__ssputs_r+0x8e>
 8009eb2:	4629      	mov	r1, r5
 8009eb4:	f7fe fc36 	bl	8008724 <_malloc_r>
 8009eb8:	4606      	mov	r6, r0
 8009eba:	b360      	cbz	r0, 8009f16 <__ssputs_r+0xa2>
 8009ebc:	464a      	mov	r2, r9
 8009ebe:	6921      	ldr	r1, [r4, #16]
 8009ec0:	f7fd fd4f 	bl	8007962 <memcpy>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	6126      	str	r6, [r4, #16]
 8009ed2:	444e      	add	r6, r9
 8009ed4:	6026      	str	r6, [r4, #0]
 8009ed6:	463e      	mov	r6, r7
 8009ed8:	6165      	str	r5, [r4, #20]
 8009eda:	eba5 0509 	sub.w	r5, r5, r9
 8009ede:	60a5      	str	r5, [r4, #8]
 8009ee0:	42be      	cmp	r6, r7
 8009ee2:	d900      	bls.n	8009ee6 <__ssputs_r+0x72>
 8009ee4:	463e      	mov	r6, r7
 8009ee6:	4632      	mov	r2, r6
 8009ee8:	4641      	mov	r1, r8
 8009eea:	6820      	ldr	r0, [r4, #0]
 8009eec:	f000 fb63 	bl	800a5b6 <memmove>
 8009ef0:	2000      	movs	r0, #0
 8009ef2:	68a3      	ldr	r3, [r4, #8]
 8009ef4:	1b9b      	subs	r3, r3, r6
 8009ef6:	60a3      	str	r3, [r4, #8]
 8009ef8:	6823      	ldr	r3, [r4, #0]
 8009efa:	4433      	add	r3, r6
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f02:	462a      	mov	r2, r5
 8009f04:	f000 ff39 	bl	800ad7a <_realloc_r>
 8009f08:	4606      	mov	r6, r0
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	d1e0      	bne.n	8009ed0 <__ssputs_r+0x5c>
 8009f0e:	4650      	mov	r0, sl
 8009f10:	6921      	ldr	r1, [r4, #16]
 8009f12:	f7fe fb95 	bl	8008640 <_free_r>
 8009f16:	230c      	movs	r3, #12
 8009f18:	f8ca 3000 	str.w	r3, [sl]
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f26:	81a3      	strh	r3, [r4, #12]
 8009f28:	e7e9      	b.n	8009efe <__ssputs_r+0x8a>
	...

08009f2c <_svfiprintf_r>:
 8009f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f30:	4698      	mov	r8, r3
 8009f32:	898b      	ldrh	r3, [r1, #12]
 8009f34:	4607      	mov	r7, r0
 8009f36:	061b      	lsls	r3, r3, #24
 8009f38:	460d      	mov	r5, r1
 8009f3a:	4614      	mov	r4, r2
 8009f3c:	b09d      	sub	sp, #116	@ 0x74
 8009f3e:	d510      	bpl.n	8009f62 <_svfiprintf_r+0x36>
 8009f40:	690b      	ldr	r3, [r1, #16]
 8009f42:	b973      	cbnz	r3, 8009f62 <_svfiprintf_r+0x36>
 8009f44:	2140      	movs	r1, #64	@ 0x40
 8009f46:	f7fe fbed 	bl	8008724 <_malloc_r>
 8009f4a:	6028      	str	r0, [r5, #0]
 8009f4c:	6128      	str	r0, [r5, #16]
 8009f4e:	b930      	cbnz	r0, 8009f5e <_svfiprintf_r+0x32>
 8009f50:	230c      	movs	r3, #12
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	f04f 30ff 	mov.w	r0, #4294967295
 8009f58:	b01d      	add	sp, #116	@ 0x74
 8009f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f5e:	2340      	movs	r3, #64	@ 0x40
 8009f60:	616b      	str	r3, [r5, #20]
 8009f62:	2300      	movs	r3, #0
 8009f64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f66:	2320      	movs	r3, #32
 8009f68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f6c:	2330      	movs	r3, #48	@ 0x30
 8009f6e:	f04f 0901 	mov.w	r9, #1
 8009f72:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f76:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a110 <_svfiprintf_r+0x1e4>
 8009f7a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f7e:	4623      	mov	r3, r4
 8009f80:	469a      	mov	sl, r3
 8009f82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f86:	b10a      	cbz	r2, 8009f8c <_svfiprintf_r+0x60>
 8009f88:	2a25      	cmp	r2, #37	@ 0x25
 8009f8a:	d1f9      	bne.n	8009f80 <_svfiprintf_r+0x54>
 8009f8c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f90:	d00b      	beq.n	8009faa <_svfiprintf_r+0x7e>
 8009f92:	465b      	mov	r3, fp
 8009f94:	4622      	mov	r2, r4
 8009f96:	4629      	mov	r1, r5
 8009f98:	4638      	mov	r0, r7
 8009f9a:	f7ff ff6b 	bl	8009e74 <__ssputs_r>
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	f000 80a7 	beq.w	800a0f2 <_svfiprintf_r+0x1c6>
 8009fa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fa6:	445a      	add	r2, fp
 8009fa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009faa:	f89a 3000 	ldrb.w	r3, [sl]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	f000 809f 	beq.w	800a0f2 <_svfiprintf_r+0x1c6>
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8009fba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fbe:	f10a 0a01 	add.w	sl, sl, #1
 8009fc2:	9304      	str	r3, [sp, #16]
 8009fc4:	9307      	str	r3, [sp, #28]
 8009fc6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009fca:	931a      	str	r3, [sp, #104]	@ 0x68
 8009fcc:	4654      	mov	r4, sl
 8009fce:	2205      	movs	r2, #5
 8009fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd4:	484e      	ldr	r0, [pc, #312]	@ (800a110 <_svfiprintf_r+0x1e4>)
 8009fd6:	f7fd fcb6 	bl	8007946 <memchr>
 8009fda:	9a04      	ldr	r2, [sp, #16]
 8009fdc:	b9d8      	cbnz	r0, 800a016 <_svfiprintf_r+0xea>
 8009fde:	06d0      	lsls	r0, r2, #27
 8009fe0:	bf44      	itt	mi
 8009fe2:	2320      	movmi	r3, #32
 8009fe4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fe8:	0711      	lsls	r1, r2, #28
 8009fea:	bf44      	itt	mi
 8009fec:	232b      	movmi	r3, #43	@ 0x2b
 8009fee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ff8:	d015      	beq.n	800a026 <_svfiprintf_r+0xfa>
 8009ffa:	4654      	mov	r4, sl
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	f04f 0c0a 	mov.w	ip, #10
 800a002:	9a07      	ldr	r2, [sp, #28]
 800a004:	4621      	mov	r1, r4
 800a006:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a00a:	3b30      	subs	r3, #48	@ 0x30
 800a00c:	2b09      	cmp	r3, #9
 800a00e:	d94b      	bls.n	800a0a8 <_svfiprintf_r+0x17c>
 800a010:	b1b0      	cbz	r0, 800a040 <_svfiprintf_r+0x114>
 800a012:	9207      	str	r2, [sp, #28]
 800a014:	e014      	b.n	800a040 <_svfiprintf_r+0x114>
 800a016:	eba0 0308 	sub.w	r3, r0, r8
 800a01a:	fa09 f303 	lsl.w	r3, r9, r3
 800a01e:	4313      	orrs	r3, r2
 800a020:	46a2      	mov	sl, r4
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	e7d2      	b.n	8009fcc <_svfiprintf_r+0xa0>
 800a026:	9b03      	ldr	r3, [sp, #12]
 800a028:	1d19      	adds	r1, r3, #4
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	9103      	str	r1, [sp, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	bfbb      	ittet	lt
 800a032:	425b      	neglt	r3, r3
 800a034:	f042 0202 	orrlt.w	r2, r2, #2
 800a038:	9307      	strge	r3, [sp, #28]
 800a03a:	9307      	strlt	r3, [sp, #28]
 800a03c:	bfb8      	it	lt
 800a03e:	9204      	strlt	r2, [sp, #16]
 800a040:	7823      	ldrb	r3, [r4, #0]
 800a042:	2b2e      	cmp	r3, #46	@ 0x2e
 800a044:	d10a      	bne.n	800a05c <_svfiprintf_r+0x130>
 800a046:	7863      	ldrb	r3, [r4, #1]
 800a048:	2b2a      	cmp	r3, #42	@ 0x2a
 800a04a:	d132      	bne.n	800a0b2 <_svfiprintf_r+0x186>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	3402      	adds	r4, #2
 800a050:	1d1a      	adds	r2, r3, #4
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	9203      	str	r2, [sp, #12]
 800a056:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a05a:	9305      	str	r3, [sp, #20]
 800a05c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a114 <_svfiprintf_r+0x1e8>
 800a060:	2203      	movs	r2, #3
 800a062:	4650      	mov	r0, sl
 800a064:	7821      	ldrb	r1, [r4, #0]
 800a066:	f7fd fc6e 	bl	8007946 <memchr>
 800a06a:	b138      	cbz	r0, 800a07c <_svfiprintf_r+0x150>
 800a06c:	2240      	movs	r2, #64	@ 0x40
 800a06e:	9b04      	ldr	r3, [sp, #16]
 800a070:	eba0 000a 	sub.w	r0, r0, sl
 800a074:	4082      	lsls	r2, r0
 800a076:	4313      	orrs	r3, r2
 800a078:	3401      	adds	r4, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a080:	2206      	movs	r2, #6
 800a082:	4825      	ldr	r0, [pc, #148]	@ (800a118 <_svfiprintf_r+0x1ec>)
 800a084:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a088:	f7fd fc5d 	bl	8007946 <memchr>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d036      	beq.n	800a0fe <_svfiprintf_r+0x1d2>
 800a090:	4b22      	ldr	r3, [pc, #136]	@ (800a11c <_svfiprintf_r+0x1f0>)
 800a092:	bb1b      	cbnz	r3, 800a0dc <_svfiprintf_r+0x1b0>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	3307      	adds	r3, #7
 800a098:	f023 0307 	bic.w	r3, r3, #7
 800a09c:	3308      	adds	r3, #8
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a2:	4433      	add	r3, r6
 800a0a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0a6:	e76a      	b.n	8009f7e <_svfiprintf_r+0x52>
 800a0a8:	460c      	mov	r4, r1
 800a0aa:	2001      	movs	r0, #1
 800a0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b0:	e7a8      	b.n	800a004 <_svfiprintf_r+0xd8>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f04f 0c0a 	mov.w	ip, #10
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	3401      	adds	r4, #1
 800a0bc:	9305      	str	r3, [sp, #20]
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c4:	3a30      	subs	r2, #48	@ 0x30
 800a0c6:	2a09      	cmp	r2, #9
 800a0c8:	d903      	bls.n	800a0d2 <_svfiprintf_r+0x1a6>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0c6      	beq.n	800a05c <_svfiprintf_r+0x130>
 800a0ce:	9105      	str	r1, [sp, #20]
 800a0d0:	e7c4      	b.n	800a05c <_svfiprintf_r+0x130>
 800a0d2:	4604      	mov	r4, r0
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0da:	e7f0      	b.n	800a0be <_svfiprintf_r+0x192>
 800a0dc:	ab03      	add	r3, sp, #12
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	4b0e      	ldr	r3, [pc, #56]	@ (800a120 <_svfiprintf_r+0x1f4>)
 800a0e6:	a904      	add	r1, sp, #16
 800a0e8:	f7fc fbbc 	bl	8006864 <_printf_float>
 800a0ec:	1c42      	adds	r2, r0, #1
 800a0ee:	4606      	mov	r6, r0
 800a0f0:	d1d6      	bne.n	800a0a0 <_svfiprintf_r+0x174>
 800a0f2:	89ab      	ldrh	r3, [r5, #12]
 800a0f4:	065b      	lsls	r3, r3, #25
 800a0f6:	f53f af2d 	bmi.w	8009f54 <_svfiprintf_r+0x28>
 800a0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0fc:	e72c      	b.n	8009f58 <_svfiprintf_r+0x2c>
 800a0fe:	ab03      	add	r3, sp, #12
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	462a      	mov	r2, r5
 800a104:	4638      	mov	r0, r7
 800a106:	4b06      	ldr	r3, [pc, #24]	@ (800a120 <_svfiprintf_r+0x1f4>)
 800a108:	a904      	add	r1, sp, #16
 800a10a:	f7fc fe49 	bl	8006da0 <_printf_i>
 800a10e:	e7ed      	b.n	800a0ec <_svfiprintf_r+0x1c0>
 800a110:	0800c769 	.word	0x0800c769
 800a114:	0800c76f 	.word	0x0800c76f
 800a118:	0800c773 	.word	0x0800c773
 800a11c:	08006865 	.word	0x08006865
 800a120:	08009e75 	.word	0x08009e75

0800a124 <__sfputc_r>:
 800a124:	6893      	ldr	r3, [r2, #8]
 800a126:	b410      	push	{r4}
 800a128:	3b01      	subs	r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	6093      	str	r3, [r2, #8]
 800a12e:	da07      	bge.n	800a140 <__sfputc_r+0x1c>
 800a130:	6994      	ldr	r4, [r2, #24]
 800a132:	42a3      	cmp	r3, r4
 800a134:	db01      	blt.n	800a13a <__sfputc_r+0x16>
 800a136:	290a      	cmp	r1, #10
 800a138:	d102      	bne.n	800a140 <__sfputc_r+0x1c>
 800a13a:	bc10      	pop	{r4}
 800a13c:	f7fd baef 	b.w	800771e <__swbuf_r>
 800a140:	6813      	ldr	r3, [r2, #0]
 800a142:	1c58      	adds	r0, r3, #1
 800a144:	6010      	str	r0, [r2, #0]
 800a146:	7019      	strb	r1, [r3, #0]
 800a148:	4608      	mov	r0, r1
 800a14a:	bc10      	pop	{r4}
 800a14c:	4770      	bx	lr

0800a14e <__sfputs_r>:
 800a14e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a150:	4606      	mov	r6, r0
 800a152:	460f      	mov	r7, r1
 800a154:	4614      	mov	r4, r2
 800a156:	18d5      	adds	r5, r2, r3
 800a158:	42ac      	cmp	r4, r5
 800a15a:	d101      	bne.n	800a160 <__sfputs_r+0x12>
 800a15c:	2000      	movs	r0, #0
 800a15e:	e007      	b.n	800a170 <__sfputs_r+0x22>
 800a160:	463a      	mov	r2, r7
 800a162:	4630      	mov	r0, r6
 800a164:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a168:	f7ff ffdc 	bl	800a124 <__sfputc_r>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d1f3      	bne.n	800a158 <__sfputs_r+0xa>
 800a170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a174 <_vfiprintf_r>:
 800a174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a178:	460d      	mov	r5, r1
 800a17a:	4614      	mov	r4, r2
 800a17c:	4698      	mov	r8, r3
 800a17e:	4606      	mov	r6, r0
 800a180:	b09d      	sub	sp, #116	@ 0x74
 800a182:	b118      	cbz	r0, 800a18c <_vfiprintf_r+0x18>
 800a184:	6a03      	ldr	r3, [r0, #32]
 800a186:	b90b      	cbnz	r3, 800a18c <_vfiprintf_r+0x18>
 800a188:	f7fd f9be 	bl	8007508 <__sinit>
 800a18c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a18e:	07d9      	lsls	r1, r3, #31
 800a190:	d405      	bmi.n	800a19e <_vfiprintf_r+0x2a>
 800a192:	89ab      	ldrh	r3, [r5, #12]
 800a194:	059a      	lsls	r2, r3, #22
 800a196:	d402      	bmi.n	800a19e <_vfiprintf_r+0x2a>
 800a198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a19a:	f7fd fbd2 	bl	8007942 <__retarget_lock_acquire_recursive>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	071b      	lsls	r3, r3, #28
 800a1a2:	d501      	bpl.n	800a1a8 <_vfiprintf_r+0x34>
 800a1a4:	692b      	ldr	r3, [r5, #16]
 800a1a6:	b99b      	cbnz	r3, 800a1d0 <_vfiprintf_r+0x5c>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	f7fd faf6 	bl	800779c <__swsetup_r>
 800a1b0:	b170      	cbz	r0, 800a1d0 <_vfiprintf_r+0x5c>
 800a1b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1b4:	07dc      	lsls	r4, r3, #31
 800a1b6:	d504      	bpl.n	800a1c2 <_vfiprintf_r+0x4e>
 800a1b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1bc:	b01d      	add	sp, #116	@ 0x74
 800a1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c2:	89ab      	ldrh	r3, [r5, #12]
 800a1c4:	0598      	lsls	r0, r3, #22
 800a1c6:	d4f7      	bmi.n	800a1b8 <_vfiprintf_r+0x44>
 800a1c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1ca:	f7fd fbbb 	bl	8007944 <__retarget_lock_release_recursive>
 800a1ce:	e7f3      	b.n	800a1b8 <_vfiprintf_r+0x44>
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1d4:	2320      	movs	r3, #32
 800a1d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1da:	2330      	movs	r3, #48	@ 0x30
 800a1dc:	f04f 0901 	mov.w	r9, #1
 800a1e0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a390 <_vfiprintf_r+0x21c>
 800a1e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1ec:	4623      	mov	r3, r4
 800a1ee:	469a      	mov	sl, r3
 800a1f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1f4:	b10a      	cbz	r2, 800a1fa <_vfiprintf_r+0x86>
 800a1f6:	2a25      	cmp	r2, #37	@ 0x25
 800a1f8:	d1f9      	bne.n	800a1ee <_vfiprintf_r+0x7a>
 800a1fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a1fe:	d00b      	beq.n	800a218 <_vfiprintf_r+0xa4>
 800a200:	465b      	mov	r3, fp
 800a202:	4622      	mov	r2, r4
 800a204:	4629      	mov	r1, r5
 800a206:	4630      	mov	r0, r6
 800a208:	f7ff ffa1 	bl	800a14e <__sfputs_r>
 800a20c:	3001      	adds	r0, #1
 800a20e:	f000 80a7 	beq.w	800a360 <_vfiprintf_r+0x1ec>
 800a212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a214:	445a      	add	r2, fp
 800a216:	9209      	str	r2, [sp, #36]	@ 0x24
 800a218:	f89a 3000 	ldrb.w	r3, [sl]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 809f 	beq.w	800a360 <_vfiprintf_r+0x1ec>
 800a222:	2300      	movs	r3, #0
 800a224:	f04f 32ff 	mov.w	r2, #4294967295
 800a228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a22c:	f10a 0a01 	add.w	sl, sl, #1
 800a230:	9304      	str	r3, [sp, #16]
 800a232:	9307      	str	r3, [sp, #28]
 800a234:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a238:	931a      	str	r3, [sp, #104]	@ 0x68
 800a23a:	4654      	mov	r4, sl
 800a23c:	2205      	movs	r2, #5
 800a23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a242:	4853      	ldr	r0, [pc, #332]	@ (800a390 <_vfiprintf_r+0x21c>)
 800a244:	f7fd fb7f 	bl	8007946 <memchr>
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	b9d8      	cbnz	r0, 800a284 <_vfiprintf_r+0x110>
 800a24c:	06d1      	lsls	r1, r2, #27
 800a24e:	bf44      	itt	mi
 800a250:	2320      	movmi	r3, #32
 800a252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a256:	0713      	lsls	r3, r2, #28
 800a258:	bf44      	itt	mi
 800a25a:	232b      	movmi	r3, #43	@ 0x2b
 800a25c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a260:	f89a 3000 	ldrb.w	r3, [sl]
 800a264:	2b2a      	cmp	r3, #42	@ 0x2a
 800a266:	d015      	beq.n	800a294 <_vfiprintf_r+0x120>
 800a268:	4654      	mov	r4, sl
 800a26a:	2000      	movs	r0, #0
 800a26c:	f04f 0c0a 	mov.w	ip, #10
 800a270:	9a07      	ldr	r2, [sp, #28]
 800a272:	4621      	mov	r1, r4
 800a274:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a278:	3b30      	subs	r3, #48	@ 0x30
 800a27a:	2b09      	cmp	r3, #9
 800a27c:	d94b      	bls.n	800a316 <_vfiprintf_r+0x1a2>
 800a27e:	b1b0      	cbz	r0, 800a2ae <_vfiprintf_r+0x13a>
 800a280:	9207      	str	r2, [sp, #28]
 800a282:	e014      	b.n	800a2ae <_vfiprintf_r+0x13a>
 800a284:	eba0 0308 	sub.w	r3, r0, r8
 800a288:	fa09 f303 	lsl.w	r3, r9, r3
 800a28c:	4313      	orrs	r3, r2
 800a28e:	46a2      	mov	sl, r4
 800a290:	9304      	str	r3, [sp, #16]
 800a292:	e7d2      	b.n	800a23a <_vfiprintf_r+0xc6>
 800a294:	9b03      	ldr	r3, [sp, #12]
 800a296:	1d19      	adds	r1, r3, #4
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	9103      	str	r1, [sp, #12]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	bfbb      	ittet	lt
 800a2a0:	425b      	neglt	r3, r3
 800a2a2:	f042 0202 	orrlt.w	r2, r2, #2
 800a2a6:	9307      	strge	r3, [sp, #28]
 800a2a8:	9307      	strlt	r3, [sp, #28]
 800a2aa:	bfb8      	it	lt
 800a2ac:	9204      	strlt	r2, [sp, #16]
 800a2ae:	7823      	ldrb	r3, [r4, #0]
 800a2b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2b2:	d10a      	bne.n	800a2ca <_vfiprintf_r+0x156>
 800a2b4:	7863      	ldrb	r3, [r4, #1]
 800a2b6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2b8:	d132      	bne.n	800a320 <_vfiprintf_r+0x1ac>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	3402      	adds	r4, #2
 800a2be:	1d1a      	adds	r2, r3, #4
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	9203      	str	r2, [sp, #12]
 800a2c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a2c8:	9305      	str	r3, [sp, #20]
 800a2ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a394 <_vfiprintf_r+0x220>
 800a2ce:	2203      	movs	r2, #3
 800a2d0:	4650      	mov	r0, sl
 800a2d2:	7821      	ldrb	r1, [r4, #0]
 800a2d4:	f7fd fb37 	bl	8007946 <memchr>
 800a2d8:	b138      	cbz	r0, 800a2ea <_vfiprintf_r+0x176>
 800a2da:	2240      	movs	r2, #64	@ 0x40
 800a2dc:	9b04      	ldr	r3, [sp, #16]
 800a2de:	eba0 000a 	sub.w	r0, r0, sl
 800a2e2:	4082      	lsls	r2, r0
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	3401      	adds	r4, #1
 800a2e8:	9304      	str	r3, [sp, #16]
 800a2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2ee:	2206      	movs	r2, #6
 800a2f0:	4829      	ldr	r0, [pc, #164]	@ (800a398 <_vfiprintf_r+0x224>)
 800a2f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2f6:	f7fd fb26 	bl	8007946 <memchr>
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	d03f      	beq.n	800a37e <_vfiprintf_r+0x20a>
 800a2fe:	4b27      	ldr	r3, [pc, #156]	@ (800a39c <_vfiprintf_r+0x228>)
 800a300:	bb1b      	cbnz	r3, 800a34a <_vfiprintf_r+0x1d6>
 800a302:	9b03      	ldr	r3, [sp, #12]
 800a304:	3307      	adds	r3, #7
 800a306:	f023 0307 	bic.w	r3, r3, #7
 800a30a:	3308      	adds	r3, #8
 800a30c:	9303      	str	r3, [sp, #12]
 800a30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a310:	443b      	add	r3, r7
 800a312:	9309      	str	r3, [sp, #36]	@ 0x24
 800a314:	e76a      	b.n	800a1ec <_vfiprintf_r+0x78>
 800a316:	460c      	mov	r4, r1
 800a318:	2001      	movs	r0, #1
 800a31a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a31e:	e7a8      	b.n	800a272 <_vfiprintf_r+0xfe>
 800a320:	2300      	movs	r3, #0
 800a322:	f04f 0c0a 	mov.w	ip, #10
 800a326:	4619      	mov	r1, r3
 800a328:	3401      	adds	r4, #1
 800a32a:	9305      	str	r3, [sp, #20]
 800a32c:	4620      	mov	r0, r4
 800a32e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a332:	3a30      	subs	r2, #48	@ 0x30
 800a334:	2a09      	cmp	r2, #9
 800a336:	d903      	bls.n	800a340 <_vfiprintf_r+0x1cc>
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d0c6      	beq.n	800a2ca <_vfiprintf_r+0x156>
 800a33c:	9105      	str	r1, [sp, #20]
 800a33e:	e7c4      	b.n	800a2ca <_vfiprintf_r+0x156>
 800a340:	4604      	mov	r4, r0
 800a342:	2301      	movs	r3, #1
 800a344:	fb0c 2101 	mla	r1, ip, r1, r2
 800a348:	e7f0      	b.n	800a32c <_vfiprintf_r+0x1b8>
 800a34a:	ab03      	add	r3, sp, #12
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	462a      	mov	r2, r5
 800a350:	4630      	mov	r0, r6
 800a352:	4b13      	ldr	r3, [pc, #76]	@ (800a3a0 <_vfiprintf_r+0x22c>)
 800a354:	a904      	add	r1, sp, #16
 800a356:	f7fc fa85 	bl	8006864 <_printf_float>
 800a35a:	4607      	mov	r7, r0
 800a35c:	1c78      	adds	r0, r7, #1
 800a35e:	d1d6      	bne.n	800a30e <_vfiprintf_r+0x19a>
 800a360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a362:	07d9      	lsls	r1, r3, #31
 800a364:	d405      	bmi.n	800a372 <_vfiprintf_r+0x1fe>
 800a366:	89ab      	ldrh	r3, [r5, #12]
 800a368:	059a      	lsls	r2, r3, #22
 800a36a:	d402      	bmi.n	800a372 <_vfiprintf_r+0x1fe>
 800a36c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a36e:	f7fd fae9 	bl	8007944 <__retarget_lock_release_recursive>
 800a372:	89ab      	ldrh	r3, [r5, #12]
 800a374:	065b      	lsls	r3, r3, #25
 800a376:	f53f af1f 	bmi.w	800a1b8 <_vfiprintf_r+0x44>
 800a37a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a37c:	e71e      	b.n	800a1bc <_vfiprintf_r+0x48>
 800a37e:	ab03      	add	r3, sp, #12
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	462a      	mov	r2, r5
 800a384:	4630      	mov	r0, r6
 800a386:	4b06      	ldr	r3, [pc, #24]	@ (800a3a0 <_vfiprintf_r+0x22c>)
 800a388:	a904      	add	r1, sp, #16
 800a38a:	f7fc fd09 	bl	8006da0 <_printf_i>
 800a38e:	e7e4      	b.n	800a35a <_vfiprintf_r+0x1e6>
 800a390:	0800c769 	.word	0x0800c769
 800a394:	0800c76f 	.word	0x0800c76f
 800a398:	0800c773 	.word	0x0800c773
 800a39c:	08006865 	.word	0x08006865
 800a3a0:	0800a14f 	.word	0x0800a14f

0800a3a4 <__sflush_r>:
 800a3a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	0716      	lsls	r6, r2, #28
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	d454      	bmi.n	800a45c <__sflush_r+0xb8>
 800a3b2:	684b      	ldr	r3, [r1, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	dc02      	bgt.n	800a3be <__sflush_r+0x1a>
 800a3b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	dd48      	ble.n	800a450 <__sflush_r+0xac>
 800a3be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3c0:	2e00      	cmp	r6, #0
 800a3c2:	d045      	beq.n	800a450 <__sflush_r+0xac>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a3ca:	682f      	ldr	r7, [r5, #0]
 800a3cc:	6a21      	ldr	r1, [r4, #32]
 800a3ce:	602b      	str	r3, [r5, #0]
 800a3d0:	d030      	beq.n	800a434 <__sflush_r+0x90>
 800a3d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	0759      	lsls	r1, r3, #29
 800a3d8:	d505      	bpl.n	800a3e6 <__sflush_r+0x42>
 800a3da:	6863      	ldr	r3, [r4, #4]
 800a3dc:	1ad2      	subs	r2, r2, r3
 800a3de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3e0:	b10b      	cbz	r3, 800a3e6 <__sflush_r+0x42>
 800a3e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3e4:	1ad2      	subs	r2, r2, r3
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	4628      	mov	r0, r5
 800a3ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3ec:	6a21      	ldr	r1, [r4, #32]
 800a3ee:	47b0      	blx	r6
 800a3f0:	1c43      	adds	r3, r0, #1
 800a3f2:	89a3      	ldrh	r3, [r4, #12]
 800a3f4:	d106      	bne.n	800a404 <__sflush_r+0x60>
 800a3f6:	6829      	ldr	r1, [r5, #0]
 800a3f8:	291d      	cmp	r1, #29
 800a3fa:	d82b      	bhi.n	800a454 <__sflush_r+0xb0>
 800a3fc:	4a28      	ldr	r2, [pc, #160]	@ (800a4a0 <__sflush_r+0xfc>)
 800a3fe:	40ca      	lsrs	r2, r1
 800a400:	07d6      	lsls	r6, r2, #31
 800a402:	d527      	bpl.n	800a454 <__sflush_r+0xb0>
 800a404:	2200      	movs	r2, #0
 800a406:	6062      	str	r2, [r4, #4]
 800a408:	6922      	ldr	r2, [r4, #16]
 800a40a:	04d9      	lsls	r1, r3, #19
 800a40c:	6022      	str	r2, [r4, #0]
 800a40e:	d504      	bpl.n	800a41a <__sflush_r+0x76>
 800a410:	1c42      	adds	r2, r0, #1
 800a412:	d101      	bne.n	800a418 <__sflush_r+0x74>
 800a414:	682b      	ldr	r3, [r5, #0]
 800a416:	b903      	cbnz	r3, 800a41a <__sflush_r+0x76>
 800a418:	6560      	str	r0, [r4, #84]	@ 0x54
 800a41a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a41c:	602f      	str	r7, [r5, #0]
 800a41e:	b1b9      	cbz	r1, 800a450 <__sflush_r+0xac>
 800a420:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a424:	4299      	cmp	r1, r3
 800a426:	d002      	beq.n	800a42e <__sflush_r+0x8a>
 800a428:	4628      	mov	r0, r5
 800a42a:	f7fe f909 	bl	8008640 <_free_r>
 800a42e:	2300      	movs	r3, #0
 800a430:	6363      	str	r3, [r4, #52]	@ 0x34
 800a432:	e00d      	b.n	800a450 <__sflush_r+0xac>
 800a434:	2301      	movs	r3, #1
 800a436:	4628      	mov	r0, r5
 800a438:	47b0      	blx	r6
 800a43a:	4602      	mov	r2, r0
 800a43c:	1c50      	adds	r0, r2, #1
 800a43e:	d1c9      	bne.n	800a3d4 <__sflush_r+0x30>
 800a440:	682b      	ldr	r3, [r5, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d0c6      	beq.n	800a3d4 <__sflush_r+0x30>
 800a446:	2b1d      	cmp	r3, #29
 800a448:	d001      	beq.n	800a44e <__sflush_r+0xaa>
 800a44a:	2b16      	cmp	r3, #22
 800a44c:	d11d      	bne.n	800a48a <__sflush_r+0xe6>
 800a44e:	602f      	str	r7, [r5, #0]
 800a450:	2000      	movs	r0, #0
 800a452:	e021      	b.n	800a498 <__sflush_r+0xf4>
 800a454:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a458:	b21b      	sxth	r3, r3
 800a45a:	e01a      	b.n	800a492 <__sflush_r+0xee>
 800a45c:	690f      	ldr	r7, [r1, #16]
 800a45e:	2f00      	cmp	r7, #0
 800a460:	d0f6      	beq.n	800a450 <__sflush_r+0xac>
 800a462:	0793      	lsls	r3, r2, #30
 800a464:	bf18      	it	ne
 800a466:	2300      	movne	r3, #0
 800a468:	680e      	ldr	r6, [r1, #0]
 800a46a:	bf08      	it	eq
 800a46c:	694b      	ldreq	r3, [r1, #20]
 800a46e:	1bf6      	subs	r6, r6, r7
 800a470:	600f      	str	r7, [r1, #0]
 800a472:	608b      	str	r3, [r1, #8]
 800a474:	2e00      	cmp	r6, #0
 800a476:	ddeb      	ble.n	800a450 <__sflush_r+0xac>
 800a478:	4633      	mov	r3, r6
 800a47a:	463a      	mov	r2, r7
 800a47c:	4628      	mov	r0, r5
 800a47e:	6a21      	ldr	r1, [r4, #32]
 800a480:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a484:	47e0      	blx	ip
 800a486:	2800      	cmp	r0, #0
 800a488:	dc07      	bgt.n	800a49a <__sflush_r+0xf6>
 800a48a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a48e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a492:	f04f 30ff 	mov.w	r0, #4294967295
 800a496:	81a3      	strh	r3, [r4, #12]
 800a498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a49a:	4407      	add	r7, r0
 800a49c:	1a36      	subs	r6, r6, r0
 800a49e:	e7e9      	b.n	800a474 <__sflush_r+0xd0>
 800a4a0:	20400001 	.word	0x20400001

0800a4a4 <_fflush_r>:
 800a4a4:	b538      	push	{r3, r4, r5, lr}
 800a4a6:	690b      	ldr	r3, [r1, #16]
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	b913      	cbnz	r3, 800a4b4 <_fflush_r+0x10>
 800a4ae:	2500      	movs	r5, #0
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	bd38      	pop	{r3, r4, r5, pc}
 800a4b4:	b118      	cbz	r0, 800a4be <_fflush_r+0x1a>
 800a4b6:	6a03      	ldr	r3, [r0, #32]
 800a4b8:	b90b      	cbnz	r3, 800a4be <_fflush_r+0x1a>
 800a4ba:	f7fd f825 	bl	8007508 <__sinit>
 800a4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d0f3      	beq.n	800a4ae <_fflush_r+0xa>
 800a4c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a4c8:	07d0      	lsls	r0, r2, #31
 800a4ca:	d404      	bmi.n	800a4d6 <_fflush_r+0x32>
 800a4cc:	0599      	lsls	r1, r3, #22
 800a4ce:	d402      	bmi.n	800a4d6 <_fflush_r+0x32>
 800a4d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4d2:	f7fd fa36 	bl	8007942 <__retarget_lock_acquire_recursive>
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	4621      	mov	r1, r4
 800a4da:	f7ff ff63 	bl	800a3a4 <__sflush_r>
 800a4de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	07da      	lsls	r2, r3, #31
 800a4e4:	d4e4      	bmi.n	800a4b0 <_fflush_r+0xc>
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	059b      	lsls	r3, r3, #22
 800a4ea:	d4e1      	bmi.n	800a4b0 <_fflush_r+0xc>
 800a4ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4ee:	f7fd fa29 	bl	8007944 <__retarget_lock_release_recursive>
 800a4f2:	e7dd      	b.n	800a4b0 <_fflush_r+0xc>

0800a4f4 <__swhatbuf_r>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	460c      	mov	r4, r1
 800a4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4fc:	4615      	mov	r5, r2
 800a4fe:	2900      	cmp	r1, #0
 800a500:	461e      	mov	r6, r3
 800a502:	b096      	sub	sp, #88	@ 0x58
 800a504:	da0c      	bge.n	800a520 <__swhatbuf_r+0x2c>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	2100      	movs	r1, #0
 800a50a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a50e:	bf14      	ite	ne
 800a510:	2340      	movne	r3, #64	@ 0x40
 800a512:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a516:	2000      	movs	r0, #0
 800a518:	6031      	str	r1, [r6, #0]
 800a51a:	602b      	str	r3, [r5, #0]
 800a51c:	b016      	add	sp, #88	@ 0x58
 800a51e:	bd70      	pop	{r4, r5, r6, pc}
 800a520:	466a      	mov	r2, sp
 800a522:	f000 f875 	bl	800a610 <_fstat_r>
 800a526:	2800      	cmp	r0, #0
 800a528:	dbed      	blt.n	800a506 <__swhatbuf_r+0x12>
 800a52a:	9901      	ldr	r1, [sp, #4]
 800a52c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a530:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a534:	4259      	negs	r1, r3
 800a536:	4159      	adcs	r1, r3
 800a538:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a53c:	e7eb      	b.n	800a516 <__swhatbuf_r+0x22>

0800a53e <__smakebuf_r>:
 800a53e:	898b      	ldrh	r3, [r1, #12]
 800a540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a542:	079d      	lsls	r5, r3, #30
 800a544:	4606      	mov	r6, r0
 800a546:	460c      	mov	r4, r1
 800a548:	d507      	bpl.n	800a55a <__smakebuf_r+0x1c>
 800a54a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a54e:	6023      	str	r3, [r4, #0]
 800a550:	6123      	str	r3, [r4, #16]
 800a552:	2301      	movs	r3, #1
 800a554:	6163      	str	r3, [r4, #20]
 800a556:	b003      	add	sp, #12
 800a558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a55a:	466a      	mov	r2, sp
 800a55c:	ab01      	add	r3, sp, #4
 800a55e:	f7ff ffc9 	bl	800a4f4 <__swhatbuf_r>
 800a562:	9f00      	ldr	r7, [sp, #0]
 800a564:	4605      	mov	r5, r0
 800a566:	4639      	mov	r1, r7
 800a568:	4630      	mov	r0, r6
 800a56a:	f7fe f8db 	bl	8008724 <_malloc_r>
 800a56e:	b948      	cbnz	r0, 800a584 <__smakebuf_r+0x46>
 800a570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a574:	059a      	lsls	r2, r3, #22
 800a576:	d4ee      	bmi.n	800a556 <__smakebuf_r+0x18>
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	f043 0302 	orr.w	r3, r3, #2
 800a580:	81a3      	strh	r3, [r4, #12]
 800a582:	e7e2      	b.n	800a54a <__smakebuf_r+0xc>
 800a584:	89a3      	ldrh	r3, [r4, #12]
 800a586:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a58a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a58e:	81a3      	strh	r3, [r4, #12]
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	6020      	str	r0, [r4, #0]
 800a594:	b15b      	cbz	r3, 800a5ae <__smakebuf_r+0x70>
 800a596:	4630      	mov	r0, r6
 800a598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a59c:	f000 f84a 	bl	800a634 <_isatty_r>
 800a5a0:	b128      	cbz	r0, 800a5ae <__smakebuf_r+0x70>
 800a5a2:	89a3      	ldrh	r3, [r4, #12]
 800a5a4:	f023 0303 	bic.w	r3, r3, #3
 800a5a8:	f043 0301 	orr.w	r3, r3, #1
 800a5ac:	81a3      	strh	r3, [r4, #12]
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	431d      	orrs	r5, r3
 800a5b2:	81a5      	strh	r5, [r4, #12]
 800a5b4:	e7cf      	b.n	800a556 <__smakebuf_r+0x18>

0800a5b6 <memmove>:
 800a5b6:	4288      	cmp	r0, r1
 800a5b8:	b510      	push	{r4, lr}
 800a5ba:	eb01 0402 	add.w	r4, r1, r2
 800a5be:	d902      	bls.n	800a5c6 <memmove+0x10>
 800a5c0:	4284      	cmp	r4, r0
 800a5c2:	4623      	mov	r3, r4
 800a5c4:	d807      	bhi.n	800a5d6 <memmove+0x20>
 800a5c6:	1e43      	subs	r3, r0, #1
 800a5c8:	42a1      	cmp	r1, r4
 800a5ca:	d008      	beq.n	800a5de <memmove+0x28>
 800a5cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5d4:	e7f8      	b.n	800a5c8 <memmove+0x12>
 800a5d6:	4601      	mov	r1, r0
 800a5d8:	4402      	add	r2, r0
 800a5da:	428a      	cmp	r2, r1
 800a5dc:	d100      	bne.n	800a5e0 <memmove+0x2a>
 800a5de:	bd10      	pop	{r4, pc}
 800a5e0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5e4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5e8:	e7f7      	b.n	800a5da <memmove+0x24>

0800a5ea <strncmp>:
 800a5ea:	b510      	push	{r4, lr}
 800a5ec:	b16a      	cbz	r2, 800a60a <strncmp+0x20>
 800a5ee:	3901      	subs	r1, #1
 800a5f0:	1884      	adds	r4, r0, r2
 800a5f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d103      	bne.n	800a606 <strncmp+0x1c>
 800a5fe:	42a0      	cmp	r0, r4
 800a600:	d001      	beq.n	800a606 <strncmp+0x1c>
 800a602:	2a00      	cmp	r2, #0
 800a604:	d1f5      	bne.n	800a5f2 <strncmp+0x8>
 800a606:	1ad0      	subs	r0, r2, r3
 800a608:	bd10      	pop	{r4, pc}
 800a60a:	4610      	mov	r0, r2
 800a60c:	e7fc      	b.n	800a608 <strncmp+0x1e>
	...

0800a610 <_fstat_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	2300      	movs	r3, #0
 800a614:	4d06      	ldr	r5, [pc, #24]	@ (800a630 <_fstat_r+0x20>)
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	4611      	mov	r1, r2
 800a61c:	602b      	str	r3, [r5, #0]
 800a61e:	f7f7 fbec 	bl	8001dfa <_fstat>
 800a622:	1c43      	adds	r3, r0, #1
 800a624:	d102      	bne.n	800a62c <_fstat_r+0x1c>
 800a626:	682b      	ldr	r3, [r5, #0]
 800a628:	b103      	cbz	r3, 800a62c <_fstat_r+0x1c>
 800a62a:	6023      	str	r3, [r4, #0]
 800a62c:	bd38      	pop	{r3, r4, r5, pc}
 800a62e:	bf00      	nop
 800a630:	20001278 	.word	0x20001278

0800a634 <_isatty_r>:
 800a634:	b538      	push	{r3, r4, r5, lr}
 800a636:	2300      	movs	r3, #0
 800a638:	4d05      	ldr	r5, [pc, #20]	@ (800a650 <_isatty_r+0x1c>)
 800a63a:	4604      	mov	r4, r0
 800a63c:	4608      	mov	r0, r1
 800a63e:	602b      	str	r3, [r5, #0]
 800a640:	f7f7 fbea 	bl	8001e18 <_isatty>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_isatty_r+0x1a>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_isatty_r+0x1a>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20001278 	.word	0x20001278

0800a654 <_sbrk_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	2300      	movs	r3, #0
 800a658:	4d05      	ldr	r5, [pc, #20]	@ (800a670 <_sbrk_r+0x1c>)
 800a65a:	4604      	mov	r4, r0
 800a65c:	4608      	mov	r0, r1
 800a65e:	602b      	str	r3, [r5, #0]
 800a660:	f7f7 fbf0 	bl	8001e44 <_sbrk>
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d102      	bne.n	800a66e <_sbrk_r+0x1a>
 800a668:	682b      	ldr	r3, [r5, #0]
 800a66a:	b103      	cbz	r3, 800a66e <_sbrk_r+0x1a>
 800a66c:	6023      	str	r3, [r4, #0]
 800a66e:	bd38      	pop	{r3, r4, r5, pc}
 800a670:	20001278 	.word	0x20001278

0800a674 <nan>:
 800a674:	2000      	movs	r0, #0
 800a676:	4901      	ldr	r1, [pc, #4]	@ (800a67c <nan+0x8>)
 800a678:	4770      	bx	lr
 800a67a:	bf00      	nop
 800a67c:	7ff80000 	.word	0x7ff80000

0800a680 <__assert_func>:
 800a680:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a682:	4614      	mov	r4, r2
 800a684:	461a      	mov	r2, r3
 800a686:	4b09      	ldr	r3, [pc, #36]	@ (800a6ac <__assert_func+0x2c>)
 800a688:	4605      	mov	r5, r0
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68d8      	ldr	r0, [r3, #12]
 800a68e:	b14c      	cbz	r4, 800a6a4 <__assert_func+0x24>
 800a690:	4b07      	ldr	r3, [pc, #28]	@ (800a6b0 <__assert_func+0x30>)
 800a692:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a696:	9100      	str	r1, [sp, #0]
 800a698:	462b      	mov	r3, r5
 800a69a:	4906      	ldr	r1, [pc, #24]	@ (800a6b4 <__assert_func+0x34>)
 800a69c:	f000 fba8 	bl	800adf0 <fiprintf>
 800a6a0:	f000 fbb8 	bl	800ae14 <abort>
 800a6a4:	4b04      	ldr	r3, [pc, #16]	@ (800a6b8 <__assert_func+0x38>)
 800a6a6:	461c      	mov	r4, r3
 800a6a8:	e7f3      	b.n	800a692 <__assert_func+0x12>
 800a6aa:	bf00      	nop
 800a6ac:	20000030 	.word	0x20000030
 800a6b0:	0800c782 	.word	0x0800c782
 800a6b4:	0800c78f 	.word	0x0800c78f
 800a6b8:	0800c7bd 	.word	0x0800c7bd

0800a6bc <_calloc_r>:
 800a6bc:	b570      	push	{r4, r5, r6, lr}
 800a6be:	fba1 5402 	umull	r5, r4, r1, r2
 800a6c2:	b934      	cbnz	r4, 800a6d2 <_calloc_r+0x16>
 800a6c4:	4629      	mov	r1, r5
 800a6c6:	f7fe f82d 	bl	8008724 <_malloc_r>
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	b928      	cbnz	r0, 800a6da <_calloc_r+0x1e>
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	bd70      	pop	{r4, r5, r6, pc}
 800a6d2:	220c      	movs	r2, #12
 800a6d4:	2600      	movs	r6, #0
 800a6d6:	6002      	str	r2, [r0, #0]
 800a6d8:	e7f9      	b.n	800a6ce <_calloc_r+0x12>
 800a6da:	462a      	mov	r2, r5
 800a6dc:	4621      	mov	r1, r4
 800a6de:	f7fd f8b3 	bl	8007848 <memset>
 800a6e2:	e7f4      	b.n	800a6ce <_calloc_r+0x12>

0800a6e4 <rshift>:
 800a6e4:	6903      	ldr	r3, [r0, #16]
 800a6e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6ea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6ee:	f100 0414 	add.w	r4, r0, #20
 800a6f2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6f6:	dd46      	ble.n	800a786 <rshift+0xa2>
 800a6f8:	f011 011f 	ands.w	r1, r1, #31
 800a6fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a700:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a704:	d10c      	bne.n	800a720 <rshift+0x3c>
 800a706:	4629      	mov	r1, r5
 800a708:	f100 0710 	add.w	r7, r0, #16
 800a70c:	42b1      	cmp	r1, r6
 800a70e:	d335      	bcc.n	800a77c <rshift+0x98>
 800a710:	1a9b      	subs	r3, r3, r2
 800a712:	009b      	lsls	r3, r3, #2
 800a714:	1eea      	subs	r2, r5, #3
 800a716:	4296      	cmp	r6, r2
 800a718:	bf38      	it	cc
 800a71a:	2300      	movcc	r3, #0
 800a71c:	4423      	add	r3, r4
 800a71e:	e015      	b.n	800a74c <rshift+0x68>
 800a720:	46a1      	mov	r9, r4
 800a722:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a726:	f1c1 0820 	rsb	r8, r1, #32
 800a72a:	40cf      	lsrs	r7, r1
 800a72c:	f105 0e04 	add.w	lr, r5, #4
 800a730:	4576      	cmp	r6, lr
 800a732:	46f4      	mov	ip, lr
 800a734:	d816      	bhi.n	800a764 <rshift+0x80>
 800a736:	1a9a      	subs	r2, r3, r2
 800a738:	0092      	lsls	r2, r2, #2
 800a73a:	3a04      	subs	r2, #4
 800a73c:	3501      	adds	r5, #1
 800a73e:	42ae      	cmp	r6, r5
 800a740:	bf38      	it	cc
 800a742:	2200      	movcc	r2, #0
 800a744:	18a3      	adds	r3, r4, r2
 800a746:	50a7      	str	r7, [r4, r2]
 800a748:	b107      	cbz	r7, 800a74c <rshift+0x68>
 800a74a:	3304      	adds	r3, #4
 800a74c:	42a3      	cmp	r3, r4
 800a74e:	eba3 0204 	sub.w	r2, r3, r4
 800a752:	bf08      	it	eq
 800a754:	2300      	moveq	r3, #0
 800a756:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a75a:	6102      	str	r2, [r0, #16]
 800a75c:	bf08      	it	eq
 800a75e:	6143      	streq	r3, [r0, #20]
 800a760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a764:	f8dc c000 	ldr.w	ip, [ip]
 800a768:	fa0c fc08 	lsl.w	ip, ip, r8
 800a76c:	ea4c 0707 	orr.w	r7, ip, r7
 800a770:	f849 7b04 	str.w	r7, [r9], #4
 800a774:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a778:	40cf      	lsrs	r7, r1
 800a77a:	e7d9      	b.n	800a730 <rshift+0x4c>
 800a77c:	f851 cb04 	ldr.w	ip, [r1], #4
 800a780:	f847 cf04 	str.w	ip, [r7, #4]!
 800a784:	e7c2      	b.n	800a70c <rshift+0x28>
 800a786:	4623      	mov	r3, r4
 800a788:	e7e0      	b.n	800a74c <rshift+0x68>

0800a78a <__hexdig_fun>:
 800a78a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a78e:	2b09      	cmp	r3, #9
 800a790:	d802      	bhi.n	800a798 <__hexdig_fun+0xe>
 800a792:	3820      	subs	r0, #32
 800a794:	b2c0      	uxtb	r0, r0
 800a796:	4770      	bx	lr
 800a798:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a79c:	2b05      	cmp	r3, #5
 800a79e:	d801      	bhi.n	800a7a4 <__hexdig_fun+0x1a>
 800a7a0:	3847      	subs	r0, #71	@ 0x47
 800a7a2:	e7f7      	b.n	800a794 <__hexdig_fun+0xa>
 800a7a4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a7a8:	2b05      	cmp	r3, #5
 800a7aa:	d801      	bhi.n	800a7b0 <__hexdig_fun+0x26>
 800a7ac:	3827      	subs	r0, #39	@ 0x27
 800a7ae:	e7f1      	b.n	800a794 <__hexdig_fun+0xa>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	4770      	bx	lr

0800a7b4 <__gethex>:
 800a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b8:	468a      	mov	sl, r1
 800a7ba:	4690      	mov	r8, r2
 800a7bc:	b085      	sub	sp, #20
 800a7be:	9302      	str	r3, [sp, #8]
 800a7c0:	680b      	ldr	r3, [r1, #0]
 800a7c2:	9001      	str	r0, [sp, #4]
 800a7c4:	1c9c      	adds	r4, r3, #2
 800a7c6:	46a1      	mov	r9, r4
 800a7c8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a7cc:	2830      	cmp	r0, #48	@ 0x30
 800a7ce:	d0fa      	beq.n	800a7c6 <__gethex+0x12>
 800a7d0:	eba9 0303 	sub.w	r3, r9, r3
 800a7d4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a7d8:	f7ff ffd7 	bl	800a78a <__hexdig_fun>
 800a7dc:	4605      	mov	r5, r0
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d168      	bne.n	800a8b4 <__gethex+0x100>
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	4648      	mov	r0, r9
 800a7e6:	499f      	ldr	r1, [pc, #636]	@ (800aa64 <__gethex+0x2b0>)
 800a7e8:	f7ff feff 	bl	800a5ea <strncmp>
 800a7ec:	4607      	mov	r7, r0
 800a7ee:	2800      	cmp	r0, #0
 800a7f0:	d167      	bne.n	800a8c2 <__gethex+0x10e>
 800a7f2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a7f6:	4626      	mov	r6, r4
 800a7f8:	f7ff ffc7 	bl	800a78a <__hexdig_fun>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	d062      	beq.n	800a8c6 <__gethex+0x112>
 800a800:	4623      	mov	r3, r4
 800a802:	7818      	ldrb	r0, [r3, #0]
 800a804:	4699      	mov	r9, r3
 800a806:	2830      	cmp	r0, #48	@ 0x30
 800a808:	f103 0301 	add.w	r3, r3, #1
 800a80c:	d0f9      	beq.n	800a802 <__gethex+0x4e>
 800a80e:	f7ff ffbc 	bl	800a78a <__hexdig_fun>
 800a812:	fab0 f580 	clz	r5, r0
 800a816:	f04f 0b01 	mov.w	fp, #1
 800a81a:	096d      	lsrs	r5, r5, #5
 800a81c:	464a      	mov	r2, r9
 800a81e:	4616      	mov	r6, r2
 800a820:	7830      	ldrb	r0, [r6, #0]
 800a822:	3201      	adds	r2, #1
 800a824:	f7ff ffb1 	bl	800a78a <__hexdig_fun>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d1f8      	bne.n	800a81e <__gethex+0x6a>
 800a82c:	2201      	movs	r2, #1
 800a82e:	4630      	mov	r0, r6
 800a830:	498c      	ldr	r1, [pc, #560]	@ (800aa64 <__gethex+0x2b0>)
 800a832:	f7ff feda 	bl	800a5ea <strncmp>
 800a836:	2800      	cmp	r0, #0
 800a838:	d13f      	bne.n	800a8ba <__gethex+0x106>
 800a83a:	b944      	cbnz	r4, 800a84e <__gethex+0x9a>
 800a83c:	1c74      	adds	r4, r6, #1
 800a83e:	4622      	mov	r2, r4
 800a840:	4616      	mov	r6, r2
 800a842:	7830      	ldrb	r0, [r6, #0]
 800a844:	3201      	adds	r2, #1
 800a846:	f7ff ffa0 	bl	800a78a <__hexdig_fun>
 800a84a:	2800      	cmp	r0, #0
 800a84c:	d1f8      	bne.n	800a840 <__gethex+0x8c>
 800a84e:	1ba4      	subs	r4, r4, r6
 800a850:	00a7      	lsls	r7, r4, #2
 800a852:	7833      	ldrb	r3, [r6, #0]
 800a854:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a858:	2b50      	cmp	r3, #80	@ 0x50
 800a85a:	d13e      	bne.n	800a8da <__gethex+0x126>
 800a85c:	7873      	ldrb	r3, [r6, #1]
 800a85e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a860:	d033      	beq.n	800a8ca <__gethex+0x116>
 800a862:	2b2d      	cmp	r3, #45	@ 0x2d
 800a864:	d034      	beq.n	800a8d0 <__gethex+0x11c>
 800a866:	2400      	movs	r4, #0
 800a868:	1c71      	adds	r1, r6, #1
 800a86a:	7808      	ldrb	r0, [r1, #0]
 800a86c:	f7ff ff8d 	bl	800a78a <__hexdig_fun>
 800a870:	1e43      	subs	r3, r0, #1
 800a872:	b2db      	uxtb	r3, r3
 800a874:	2b18      	cmp	r3, #24
 800a876:	d830      	bhi.n	800a8da <__gethex+0x126>
 800a878:	f1a0 0210 	sub.w	r2, r0, #16
 800a87c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a880:	f7ff ff83 	bl	800a78a <__hexdig_fun>
 800a884:	f100 3cff 	add.w	ip, r0, #4294967295
 800a888:	fa5f fc8c 	uxtb.w	ip, ip
 800a88c:	f1bc 0f18 	cmp.w	ip, #24
 800a890:	f04f 030a 	mov.w	r3, #10
 800a894:	d91e      	bls.n	800a8d4 <__gethex+0x120>
 800a896:	b104      	cbz	r4, 800a89a <__gethex+0xe6>
 800a898:	4252      	negs	r2, r2
 800a89a:	4417      	add	r7, r2
 800a89c:	f8ca 1000 	str.w	r1, [sl]
 800a8a0:	b1ed      	cbz	r5, 800a8de <__gethex+0x12a>
 800a8a2:	f1bb 0f00 	cmp.w	fp, #0
 800a8a6:	bf0c      	ite	eq
 800a8a8:	2506      	moveq	r5, #6
 800a8aa:	2500      	movne	r5, #0
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	b005      	add	sp, #20
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	2500      	movs	r5, #0
 800a8b6:	462c      	mov	r4, r5
 800a8b8:	e7b0      	b.n	800a81c <__gethex+0x68>
 800a8ba:	2c00      	cmp	r4, #0
 800a8bc:	d1c7      	bne.n	800a84e <__gethex+0x9a>
 800a8be:	4627      	mov	r7, r4
 800a8c0:	e7c7      	b.n	800a852 <__gethex+0x9e>
 800a8c2:	464e      	mov	r6, r9
 800a8c4:	462f      	mov	r7, r5
 800a8c6:	2501      	movs	r5, #1
 800a8c8:	e7c3      	b.n	800a852 <__gethex+0x9e>
 800a8ca:	2400      	movs	r4, #0
 800a8cc:	1cb1      	adds	r1, r6, #2
 800a8ce:	e7cc      	b.n	800a86a <__gethex+0xb6>
 800a8d0:	2401      	movs	r4, #1
 800a8d2:	e7fb      	b.n	800a8cc <__gethex+0x118>
 800a8d4:	fb03 0002 	mla	r0, r3, r2, r0
 800a8d8:	e7ce      	b.n	800a878 <__gethex+0xc4>
 800a8da:	4631      	mov	r1, r6
 800a8dc:	e7de      	b.n	800a89c <__gethex+0xe8>
 800a8de:	4629      	mov	r1, r5
 800a8e0:	eba6 0309 	sub.w	r3, r6, r9
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	2b07      	cmp	r3, #7
 800a8e8:	dc0a      	bgt.n	800a900 <__gethex+0x14c>
 800a8ea:	9801      	ldr	r0, [sp, #4]
 800a8ec:	f7fd ffa6 	bl	800883c <_Balloc>
 800a8f0:	4604      	mov	r4, r0
 800a8f2:	b940      	cbnz	r0, 800a906 <__gethex+0x152>
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	21e4      	movs	r1, #228	@ 0xe4
 800a8f8:	4b5b      	ldr	r3, [pc, #364]	@ (800aa68 <__gethex+0x2b4>)
 800a8fa:	485c      	ldr	r0, [pc, #368]	@ (800aa6c <__gethex+0x2b8>)
 800a8fc:	f7ff fec0 	bl	800a680 <__assert_func>
 800a900:	3101      	adds	r1, #1
 800a902:	105b      	asrs	r3, r3, #1
 800a904:	e7ef      	b.n	800a8e6 <__gethex+0x132>
 800a906:	2300      	movs	r3, #0
 800a908:	f100 0a14 	add.w	sl, r0, #20
 800a90c:	4655      	mov	r5, sl
 800a90e:	469b      	mov	fp, r3
 800a910:	45b1      	cmp	r9, r6
 800a912:	d337      	bcc.n	800a984 <__gethex+0x1d0>
 800a914:	f845 bb04 	str.w	fp, [r5], #4
 800a918:	eba5 050a 	sub.w	r5, r5, sl
 800a91c:	10ad      	asrs	r5, r5, #2
 800a91e:	6125      	str	r5, [r4, #16]
 800a920:	4658      	mov	r0, fp
 800a922:	f7fe f87d 	bl	8008a20 <__hi0bits>
 800a926:	016d      	lsls	r5, r5, #5
 800a928:	f8d8 6000 	ldr.w	r6, [r8]
 800a92c:	1a2d      	subs	r5, r5, r0
 800a92e:	42b5      	cmp	r5, r6
 800a930:	dd54      	ble.n	800a9dc <__gethex+0x228>
 800a932:	1bad      	subs	r5, r5, r6
 800a934:	4629      	mov	r1, r5
 800a936:	4620      	mov	r0, r4
 800a938:	f7fe fbff 	bl	800913a <__any_on>
 800a93c:	4681      	mov	r9, r0
 800a93e:	b178      	cbz	r0, 800a960 <__gethex+0x1ac>
 800a940:	f04f 0901 	mov.w	r9, #1
 800a944:	1e6b      	subs	r3, r5, #1
 800a946:	1159      	asrs	r1, r3, #5
 800a948:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a94c:	f003 021f 	and.w	r2, r3, #31
 800a950:	fa09 f202 	lsl.w	r2, r9, r2
 800a954:	420a      	tst	r2, r1
 800a956:	d003      	beq.n	800a960 <__gethex+0x1ac>
 800a958:	454b      	cmp	r3, r9
 800a95a:	dc36      	bgt.n	800a9ca <__gethex+0x216>
 800a95c:	f04f 0902 	mov.w	r9, #2
 800a960:	4629      	mov	r1, r5
 800a962:	4620      	mov	r0, r4
 800a964:	f7ff febe 	bl	800a6e4 <rshift>
 800a968:	442f      	add	r7, r5
 800a96a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a96e:	42bb      	cmp	r3, r7
 800a970:	da42      	bge.n	800a9f8 <__gethex+0x244>
 800a972:	4621      	mov	r1, r4
 800a974:	9801      	ldr	r0, [sp, #4]
 800a976:	f7fd ffa1 	bl	80088bc <_Bfree>
 800a97a:	2300      	movs	r3, #0
 800a97c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a97e:	25a3      	movs	r5, #163	@ 0xa3
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	e793      	b.n	800a8ac <__gethex+0xf8>
 800a984:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a988:	2a2e      	cmp	r2, #46	@ 0x2e
 800a98a:	d012      	beq.n	800a9b2 <__gethex+0x1fe>
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	d104      	bne.n	800a99a <__gethex+0x1e6>
 800a990:	f845 bb04 	str.w	fp, [r5], #4
 800a994:	f04f 0b00 	mov.w	fp, #0
 800a998:	465b      	mov	r3, fp
 800a99a:	7830      	ldrb	r0, [r6, #0]
 800a99c:	9303      	str	r3, [sp, #12]
 800a99e:	f7ff fef4 	bl	800a78a <__hexdig_fun>
 800a9a2:	9b03      	ldr	r3, [sp, #12]
 800a9a4:	f000 000f 	and.w	r0, r0, #15
 800a9a8:	4098      	lsls	r0, r3
 800a9aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	e7ae      	b.n	800a910 <__gethex+0x15c>
 800a9b2:	45b1      	cmp	r9, r6
 800a9b4:	d8ea      	bhi.n	800a98c <__gethex+0x1d8>
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	492a      	ldr	r1, [pc, #168]	@ (800aa64 <__gethex+0x2b0>)
 800a9bc:	9303      	str	r3, [sp, #12]
 800a9be:	f7ff fe14 	bl	800a5ea <strncmp>
 800a9c2:	9b03      	ldr	r3, [sp, #12]
 800a9c4:	2800      	cmp	r0, #0
 800a9c6:	d1e1      	bne.n	800a98c <__gethex+0x1d8>
 800a9c8:	e7a2      	b.n	800a910 <__gethex+0x15c>
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	1ea9      	subs	r1, r5, #2
 800a9ce:	f7fe fbb4 	bl	800913a <__any_on>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d0c2      	beq.n	800a95c <__gethex+0x1a8>
 800a9d6:	f04f 0903 	mov.w	r9, #3
 800a9da:	e7c1      	b.n	800a960 <__gethex+0x1ac>
 800a9dc:	da09      	bge.n	800a9f2 <__gethex+0x23e>
 800a9de:	1b75      	subs	r5, r6, r5
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	9801      	ldr	r0, [sp, #4]
 800a9e6:	f7fe f979 	bl	8008cdc <__lshift>
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	1b7f      	subs	r7, r7, r5
 800a9ee:	f100 0a14 	add.w	sl, r0, #20
 800a9f2:	f04f 0900 	mov.w	r9, #0
 800a9f6:	e7b8      	b.n	800a96a <__gethex+0x1b6>
 800a9f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a9fc:	42bd      	cmp	r5, r7
 800a9fe:	dd6f      	ble.n	800aae0 <__gethex+0x32c>
 800aa00:	1bed      	subs	r5, r5, r7
 800aa02:	42ae      	cmp	r6, r5
 800aa04:	dc34      	bgt.n	800aa70 <__gethex+0x2bc>
 800aa06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d022      	beq.n	800aa54 <__gethex+0x2a0>
 800aa0e:	2b03      	cmp	r3, #3
 800aa10:	d024      	beq.n	800aa5c <__gethex+0x2a8>
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d115      	bne.n	800aa42 <__gethex+0x28e>
 800aa16:	42ae      	cmp	r6, r5
 800aa18:	d113      	bne.n	800aa42 <__gethex+0x28e>
 800aa1a:	2e01      	cmp	r6, #1
 800aa1c:	d10b      	bne.n	800aa36 <__gethex+0x282>
 800aa1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aa22:	9a02      	ldr	r2, [sp, #8]
 800aa24:	2562      	movs	r5, #98	@ 0x62
 800aa26:	6013      	str	r3, [r2, #0]
 800aa28:	2301      	movs	r3, #1
 800aa2a:	6123      	str	r3, [r4, #16]
 800aa2c:	f8ca 3000 	str.w	r3, [sl]
 800aa30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa32:	601c      	str	r4, [r3, #0]
 800aa34:	e73a      	b.n	800a8ac <__gethex+0xf8>
 800aa36:	4620      	mov	r0, r4
 800aa38:	1e71      	subs	r1, r6, #1
 800aa3a:	f7fe fb7e 	bl	800913a <__any_on>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d1ed      	bne.n	800aa1e <__gethex+0x26a>
 800aa42:	4621      	mov	r1, r4
 800aa44:	9801      	ldr	r0, [sp, #4]
 800aa46:	f7fd ff39 	bl	80088bc <_Bfree>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa4e:	2550      	movs	r5, #80	@ 0x50
 800aa50:	6013      	str	r3, [r2, #0]
 800aa52:	e72b      	b.n	800a8ac <__gethex+0xf8>
 800aa54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d1f3      	bne.n	800aa42 <__gethex+0x28e>
 800aa5a:	e7e0      	b.n	800aa1e <__gethex+0x26a>
 800aa5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d1dd      	bne.n	800aa1e <__gethex+0x26a>
 800aa62:	e7ee      	b.n	800aa42 <__gethex+0x28e>
 800aa64:	0800c767 	.word	0x0800c767
 800aa68:	0800c6fd 	.word	0x0800c6fd
 800aa6c:	0800c7be 	.word	0x0800c7be
 800aa70:	1e6f      	subs	r7, r5, #1
 800aa72:	f1b9 0f00 	cmp.w	r9, #0
 800aa76:	d130      	bne.n	800aada <__gethex+0x326>
 800aa78:	b127      	cbz	r7, 800aa84 <__gethex+0x2d0>
 800aa7a:	4639      	mov	r1, r7
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f7fe fb5c 	bl	800913a <__any_on>
 800aa82:	4681      	mov	r9, r0
 800aa84:	2301      	movs	r3, #1
 800aa86:	4629      	mov	r1, r5
 800aa88:	1b76      	subs	r6, r6, r5
 800aa8a:	2502      	movs	r5, #2
 800aa8c:	117a      	asrs	r2, r7, #5
 800aa8e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aa92:	f007 071f 	and.w	r7, r7, #31
 800aa96:	40bb      	lsls	r3, r7
 800aa98:	4213      	tst	r3, r2
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	bf18      	it	ne
 800aa9e:	f049 0902 	orrne.w	r9, r9, #2
 800aaa2:	f7ff fe1f 	bl	800a6e4 <rshift>
 800aaa6:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aaaa:	f1b9 0f00 	cmp.w	r9, #0
 800aaae:	d047      	beq.n	800ab40 <__gethex+0x38c>
 800aab0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d015      	beq.n	800aae4 <__gethex+0x330>
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d017      	beq.n	800aaec <__gethex+0x338>
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d109      	bne.n	800aad4 <__gethex+0x320>
 800aac0:	f019 0f02 	tst.w	r9, #2
 800aac4:	d006      	beq.n	800aad4 <__gethex+0x320>
 800aac6:	f8da 3000 	ldr.w	r3, [sl]
 800aaca:	ea49 0903 	orr.w	r9, r9, r3
 800aace:	f019 0f01 	tst.w	r9, #1
 800aad2:	d10e      	bne.n	800aaf2 <__gethex+0x33e>
 800aad4:	f045 0510 	orr.w	r5, r5, #16
 800aad8:	e032      	b.n	800ab40 <__gethex+0x38c>
 800aada:	f04f 0901 	mov.w	r9, #1
 800aade:	e7d1      	b.n	800aa84 <__gethex+0x2d0>
 800aae0:	2501      	movs	r5, #1
 800aae2:	e7e2      	b.n	800aaaa <__gethex+0x2f6>
 800aae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aae6:	f1c3 0301 	rsb	r3, r3, #1
 800aaea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aaec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d0f0      	beq.n	800aad4 <__gethex+0x320>
 800aaf2:	f04f 0c00 	mov.w	ip, #0
 800aaf6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aafa:	f104 0314 	add.w	r3, r4, #20
 800aafe:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ab02:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ab06:	4618      	mov	r0, r3
 800ab08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab0c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ab10:	d01b      	beq.n	800ab4a <__gethex+0x396>
 800ab12:	3201      	adds	r2, #1
 800ab14:	6002      	str	r2, [r0, #0]
 800ab16:	2d02      	cmp	r5, #2
 800ab18:	f104 0314 	add.w	r3, r4, #20
 800ab1c:	d13c      	bne.n	800ab98 <__gethex+0x3e4>
 800ab1e:	f8d8 2000 	ldr.w	r2, [r8]
 800ab22:	3a01      	subs	r2, #1
 800ab24:	42b2      	cmp	r2, r6
 800ab26:	d109      	bne.n	800ab3c <__gethex+0x388>
 800ab28:	2201      	movs	r2, #1
 800ab2a:	1171      	asrs	r1, r6, #5
 800ab2c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ab30:	f006 061f 	and.w	r6, r6, #31
 800ab34:	fa02 f606 	lsl.w	r6, r2, r6
 800ab38:	421e      	tst	r6, r3
 800ab3a:	d13a      	bne.n	800abb2 <__gethex+0x3fe>
 800ab3c:	f045 0520 	orr.w	r5, r5, #32
 800ab40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab42:	601c      	str	r4, [r3, #0]
 800ab44:	9b02      	ldr	r3, [sp, #8]
 800ab46:	601f      	str	r7, [r3, #0]
 800ab48:	e6b0      	b.n	800a8ac <__gethex+0xf8>
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab50:	d8d9      	bhi.n	800ab06 <__gethex+0x352>
 800ab52:	68a3      	ldr	r3, [r4, #8]
 800ab54:	459b      	cmp	fp, r3
 800ab56:	db17      	blt.n	800ab88 <__gethex+0x3d4>
 800ab58:	6861      	ldr	r1, [r4, #4]
 800ab5a:	9801      	ldr	r0, [sp, #4]
 800ab5c:	3101      	adds	r1, #1
 800ab5e:	f7fd fe6d 	bl	800883c <_Balloc>
 800ab62:	4681      	mov	r9, r0
 800ab64:	b918      	cbnz	r0, 800ab6e <__gethex+0x3ba>
 800ab66:	4602      	mov	r2, r0
 800ab68:	2184      	movs	r1, #132	@ 0x84
 800ab6a:	4b19      	ldr	r3, [pc, #100]	@ (800abd0 <__gethex+0x41c>)
 800ab6c:	e6c5      	b.n	800a8fa <__gethex+0x146>
 800ab6e:	6922      	ldr	r2, [r4, #16]
 800ab70:	f104 010c 	add.w	r1, r4, #12
 800ab74:	3202      	adds	r2, #2
 800ab76:	0092      	lsls	r2, r2, #2
 800ab78:	300c      	adds	r0, #12
 800ab7a:	f7fc fef2 	bl	8007962 <memcpy>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	9801      	ldr	r0, [sp, #4]
 800ab82:	f7fd fe9b 	bl	80088bc <_Bfree>
 800ab86:	464c      	mov	r4, r9
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	1c5a      	adds	r2, r3, #1
 800ab8c:	6122      	str	r2, [r4, #16]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab94:	615a      	str	r2, [r3, #20]
 800ab96:	e7be      	b.n	800ab16 <__gethex+0x362>
 800ab98:	6922      	ldr	r2, [r4, #16]
 800ab9a:	455a      	cmp	r2, fp
 800ab9c:	dd0b      	ble.n	800abb6 <__gethex+0x402>
 800ab9e:	2101      	movs	r1, #1
 800aba0:	4620      	mov	r0, r4
 800aba2:	f7ff fd9f 	bl	800a6e4 <rshift>
 800aba6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800abaa:	3701      	adds	r7, #1
 800abac:	42bb      	cmp	r3, r7
 800abae:	f6ff aee0 	blt.w	800a972 <__gethex+0x1be>
 800abb2:	2501      	movs	r5, #1
 800abb4:	e7c2      	b.n	800ab3c <__gethex+0x388>
 800abb6:	f016 061f 	ands.w	r6, r6, #31
 800abba:	d0fa      	beq.n	800abb2 <__gethex+0x3fe>
 800abbc:	4453      	add	r3, sl
 800abbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800abc2:	f7fd ff2d 	bl	8008a20 <__hi0bits>
 800abc6:	f1c6 0620 	rsb	r6, r6, #32
 800abca:	42b0      	cmp	r0, r6
 800abcc:	dbe7      	blt.n	800ab9e <__gethex+0x3ea>
 800abce:	e7f0      	b.n	800abb2 <__gethex+0x3fe>
 800abd0:	0800c6fd 	.word	0x0800c6fd

0800abd4 <L_shift>:
 800abd4:	f1c2 0208 	rsb	r2, r2, #8
 800abd8:	0092      	lsls	r2, r2, #2
 800abda:	b570      	push	{r4, r5, r6, lr}
 800abdc:	f1c2 0620 	rsb	r6, r2, #32
 800abe0:	6843      	ldr	r3, [r0, #4]
 800abe2:	6804      	ldr	r4, [r0, #0]
 800abe4:	fa03 f506 	lsl.w	r5, r3, r6
 800abe8:	432c      	orrs	r4, r5
 800abea:	40d3      	lsrs	r3, r2
 800abec:	6004      	str	r4, [r0, #0]
 800abee:	f840 3f04 	str.w	r3, [r0, #4]!
 800abf2:	4288      	cmp	r0, r1
 800abf4:	d3f4      	bcc.n	800abe0 <L_shift+0xc>
 800abf6:	bd70      	pop	{r4, r5, r6, pc}

0800abf8 <__match>:
 800abf8:	b530      	push	{r4, r5, lr}
 800abfa:	6803      	ldr	r3, [r0, #0]
 800abfc:	3301      	adds	r3, #1
 800abfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac02:	b914      	cbnz	r4, 800ac0a <__match+0x12>
 800ac04:	6003      	str	r3, [r0, #0]
 800ac06:	2001      	movs	r0, #1
 800ac08:	bd30      	pop	{r4, r5, pc}
 800ac0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac0e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800ac12:	2d19      	cmp	r5, #25
 800ac14:	bf98      	it	ls
 800ac16:	3220      	addls	r2, #32
 800ac18:	42a2      	cmp	r2, r4
 800ac1a:	d0f0      	beq.n	800abfe <__match+0x6>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7f3      	b.n	800ac08 <__match+0x10>

0800ac20 <__hexnan>:
 800ac20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	2500      	movs	r5, #0
 800ac26:	680b      	ldr	r3, [r1, #0]
 800ac28:	4682      	mov	sl, r0
 800ac2a:	115e      	asrs	r6, r3, #5
 800ac2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ac30:	f013 031f 	ands.w	r3, r3, #31
 800ac34:	bf18      	it	ne
 800ac36:	3604      	addne	r6, #4
 800ac38:	1f37      	subs	r7, r6, #4
 800ac3a:	4690      	mov	r8, r2
 800ac3c:	46b9      	mov	r9, r7
 800ac3e:	463c      	mov	r4, r7
 800ac40:	46ab      	mov	fp, r5
 800ac42:	b087      	sub	sp, #28
 800ac44:	6801      	ldr	r1, [r0, #0]
 800ac46:	9301      	str	r3, [sp, #4]
 800ac48:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac4c:	9502      	str	r5, [sp, #8]
 800ac4e:	784a      	ldrb	r2, [r1, #1]
 800ac50:	1c4b      	adds	r3, r1, #1
 800ac52:	9303      	str	r3, [sp, #12]
 800ac54:	b342      	cbz	r2, 800aca8 <__hexnan+0x88>
 800ac56:	4610      	mov	r0, r2
 800ac58:	9105      	str	r1, [sp, #20]
 800ac5a:	9204      	str	r2, [sp, #16]
 800ac5c:	f7ff fd95 	bl	800a78a <__hexdig_fun>
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d151      	bne.n	800ad08 <__hexnan+0xe8>
 800ac64:	9a04      	ldr	r2, [sp, #16]
 800ac66:	9905      	ldr	r1, [sp, #20]
 800ac68:	2a20      	cmp	r2, #32
 800ac6a:	d818      	bhi.n	800ac9e <__hexnan+0x7e>
 800ac6c:	9b02      	ldr	r3, [sp, #8]
 800ac6e:	459b      	cmp	fp, r3
 800ac70:	dd13      	ble.n	800ac9a <__hexnan+0x7a>
 800ac72:	454c      	cmp	r4, r9
 800ac74:	d206      	bcs.n	800ac84 <__hexnan+0x64>
 800ac76:	2d07      	cmp	r5, #7
 800ac78:	dc04      	bgt.n	800ac84 <__hexnan+0x64>
 800ac7a:	462a      	mov	r2, r5
 800ac7c:	4649      	mov	r1, r9
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f7ff ffa8 	bl	800abd4 <L_shift>
 800ac84:	4544      	cmp	r4, r8
 800ac86:	d952      	bls.n	800ad2e <__hexnan+0x10e>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f1a4 0904 	sub.w	r9, r4, #4
 800ac8e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac92:	461d      	mov	r5, r3
 800ac94:	464c      	mov	r4, r9
 800ac96:	f8cd b008 	str.w	fp, [sp, #8]
 800ac9a:	9903      	ldr	r1, [sp, #12]
 800ac9c:	e7d7      	b.n	800ac4e <__hexnan+0x2e>
 800ac9e:	2a29      	cmp	r2, #41	@ 0x29
 800aca0:	d157      	bne.n	800ad52 <__hexnan+0x132>
 800aca2:	3102      	adds	r1, #2
 800aca4:	f8ca 1000 	str.w	r1, [sl]
 800aca8:	f1bb 0f00 	cmp.w	fp, #0
 800acac:	d051      	beq.n	800ad52 <__hexnan+0x132>
 800acae:	454c      	cmp	r4, r9
 800acb0:	d206      	bcs.n	800acc0 <__hexnan+0xa0>
 800acb2:	2d07      	cmp	r5, #7
 800acb4:	dc04      	bgt.n	800acc0 <__hexnan+0xa0>
 800acb6:	462a      	mov	r2, r5
 800acb8:	4649      	mov	r1, r9
 800acba:	4620      	mov	r0, r4
 800acbc:	f7ff ff8a 	bl	800abd4 <L_shift>
 800acc0:	4544      	cmp	r4, r8
 800acc2:	d936      	bls.n	800ad32 <__hexnan+0x112>
 800acc4:	4623      	mov	r3, r4
 800acc6:	f1a8 0204 	sub.w	r2, r8, #4
 800acca:	f853 1b04 	ldr.w	r1, [r3], #4
 800acce:	429f      	cmp	r7, r3
 800acd0:	f842 1f04 	str.w	r1, [r2, #4]!
 800acd4:	d2f9      	bcs.n	800acca <__hexnan+0xaa>
 800acd6:	1b3b      	subs	r3, r7, r4
 800acd8:	f023 0303 	bic.w	r3, r3, #3
 800acdc:	3304      	adds	r3, #4
 800acde:	3401      	adds	r4, #1
 800ace0:	3e03      	subs	r6, #3
 800ace2:	42b4      	cmp	r4, r6
 800ace4:	bf88      	it	hi
 800ace6:	2304      	movhi	r3, #4
 800ace8:	2200      	movs	r2, #0
 800acea:	4443      	add	r3, r8
 800acec:	f843 2b04 	str.w	r2, [r3], #4
 800acf0:	429f      	cmp	r7, r3
 800acf2:	d2fb      	bcs.n	800acec <__hexnan+0xcc>
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	b91b      	cbnz	r3, 800ad00 <__hexnan+0xe0>
 800acf8:	4547      	cmp	r7, r8
 800acfa:	d128      	bne.n	800ad4e <__hexnan+0x12e>
 800acfc:	2301      	movs	r3, #1
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	2005      	movs	r0, #5
 800ad02:	b007      	add	sp, #28
 800ad04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad08:	3501      	adds	r5, #1
 800ad0a:	2d08      	cmp	r5, #8
 800ad0c:	f10b 0b01 	add.w	fp, fp, #1
 800ad10:	dd06      	ble.n	800ad20 <__hexnan+0x100>
 800ad12:	4544      	cmp	r4, r8
 800ad14:	d9c1      	bls.n	800ac9a <__hexnan+0x7a>
 800ad16:	2300      	movs	r3, #0
 800ad18:	2501      	movs	r5, #1
 800ad1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad1e:	3c04      	subs	r4, #4
 800ad20:	6822      	ldr	r2, [r4, #0]
 800ad22:	f000 000f 	and.w	r0, r0, #15
 800ad26:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ad2a:	6020      	str	r0, [r4, #0]
 800ad2c:	e7b5      	b.n	800ac9a <__hexnan+0x7a>
 800ad2e:	2508      	movs	r5, #8
 800ad30:	e7b3      	b.n	800ac9a <__hexnan+0x7a>
 800ad32:	9b01      	ldr	r3, [sp, #4]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d0dd      	beq.n	800acf4 <__hexnan+0xd4>
 800ad38:	f04f 32ff 	mov.w	r2, #4294967295
 800ad3c:	f1c3 0320 	rsb	r3, r3, #32
 800ad40:	40da      	lsrs	r2, r3
 800ad42:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad46:	4013      	ands	r3, r2
 800ad48:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad4c:	e7d2      	b.n	800acf4 <__hexnan+0xd4>
 800ad4e:	3f04      	subs	r7, #4
 800ad50:	e7d0      	b.n	800acf4 <__hexnan+0xd4>
 800ad52:	2004      	movs	r0, #4
 800ad54:	e7d5      	b.n	800ad02 <__hexnan+0xe2>

0800ad56 <__ascii_mbtowc>:
 800ad56:	b082      	sub	sp, #8
 800ad58:	b901      	cbnz	r1, 800ad5c <__ascii_mbtowc+0x6>
 800ad5a:	a901      	add	r1, sp, #4
 800ad5c:	b142      	cbz	r2, 800ad70 <__ascii_mbtowc+0x1a>
 800ad5e:	b14b      	cbz	r3, 800ad74 <__ascii_mbtowc+0x1e>
 800ad60:	7813      	ldrb	r3, [r2, #0]
 800ad62:	600b      	str	r3, [r1, #0]
 800ad64:	7812      	ldrb	r2, [r2, #0]
 800ad66:	1e10      	subs	r0, r2, #0
 800ad68:	bf18      	it	ne
 800ad6a:	2001      	movne	r0, #1
 800ad6c:	b002      	add	sp, #8
 800ad6e:	4770      	bx	lr
 800ad70:	4610      	mov	r0, r2
 800ad72:	e7fb      	b.n	800ad6c <__ascii_mbtowc+0x16>
 800ad74:	f06f 0001 	mvn.w	r0, #1
 800ad78:	e7f8      	b.n	800ad6c <__ascii_mbtowc+0x16>

0800ad7a <_realloc_r>:
 800ad7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad7e:	4607      	mov	r7, r0
 800ad80:	4614      	mov	r4, r2
 800ad82:	460d      	mov	r5, r1
 800ad84:	b921      	cbnz	r1, 800ad90 <_realloc_r+0x16>
 800ad86:	4611      	mov	r1, r2
 800ad88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	f7fd bcca 	b.w	8008724 <_malloc_r>
 800ad90:	b92a      	cbnz	r2, 800ad9e <_realloc_r+0x24>
 800ad92:	f7fd fc55 	bl	8008640 <_free_r>
 800ad96:	4625      	mov	r5, r4
 800ad98:	4628      	mov	r0, r5
 800ad9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad9e:	f000 f840 	bl	800ae22 <_malloc_usable_size_r>
 800ada2:	4284      	cmp	r4, r0
 800ada4:	4606      	mov	r6, r0
 800ada6:	d802      	bhi.n	800adae <_realloc_r+0x34>
 800ada8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adac:	d8f4      	bhi.n	800ad98 <_realloc_r+0x1e>
 800adae:	4621      	mov	r1, r4
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7fd fcb7 	bl	8008724 <_malloc_r>
 800adb6:	4680      	mov	r8, r0
 800adb8:	b908      	cbnz	r0, 800adbe <_realloc_r+0x44>
 800adba:	4645      	mov	r5, r8
 800adbc:	e7ec      	b.n	800ad98 <_realloc_r+0x1e>
 800adbe:	42b4      	cmp	r4, r6
 800adc0:	4622      	mov	r2, r4
 800adc2:	4629      	mov	r1, r5
 800adc4:	bf28      	it	cs
 800adc6:	4632      	movcs	r2, r6
 800adc8:	f7fc fdcb 	bl	8007962 <memcpy>
 800adcc:	4629      	mov	r1, r5
 800adce:	4638      	mov	r0, r7
 800add0:	f7fd fc36 	bl	8008640 <_free_r>
 800add4:	e7f1      	b.n	800adba <_realloc_r+0x40>

0800add6 <__ascii_wctomb>:
 800add6:	4603      	mov	r3, r0
 800add8:	4608      	mov	r0, r1
 800adda:	b141      	cbz	r1, 800adee <__ascii_wctomb+0x18>
 800addc:	2aff      	cmp	r2, #255	@ 0xff
 800adde:	d904      	bls.n	800adea <__ascii_wctomb+0x14>
 800ade0:	228a      	movs	r2, #138	@ 0x8a
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	4770      	bx	lr
 800adea:	2001      	movs	r0, #1
 800adec:	700a      	strb	r2, [r1, #0]
 800adee:	4770      	bx	lr

0800adf0 <fiprintf>:
 800adf0:	b40e      	push	{r1, r2, r3}
 800adf2:	b503      	push	{r0, r1, lr}
 800adf4:	4601      	mov	r1, r0
 800adf6:	ab03      	add	r3, sp, #12
 800adf8:	4805      	ldr	r0, [pc, #20]	@ (800ae10 <fiprintf+0x20>)
 800adfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800adfe:	6800      	ldr	r0, [r0, #0]
 800ae00:	9301      	str	r3, [sp, #4]
 800ae02:	f7ff f9b7 	bl	800a174 <_vfiprintf_r>
 800ae06:	b002      	add	sp, #8
 800ae08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae0c:	b003      	add	sp, #12
 800ae0e:	4770      	bx	lr
 800ae10:	20000030 	.word	0x20000030

0800ae14 <abort>:
 800ae14:	2006      	movs	r0, #6
 800ae16:	b508      	push	{r3, lr}
 800ae18:	f000 f834 	bl	800ae84 <raise>
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	f7f6 ff9d 	bl	8001d5c <_exit>

0800ae22 <_malloc_usable_size_r>:
 800ae22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae26:	1f18      	subs	r0, r3, #4
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfbc      	itt	lt
 800ae2c:	580b      	ldrlt	r3, [r1, r0]
 800ae2e:	18c0      	addlt	r0, r0, r3
 800ae30:	4770      	bx	lr

0800ae32 <_raise_r>:
 800ae32:	291f      	cmp	r1, #31
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4605      	mov	r5, r0
 800ae38:	460c      	mov	r4, r1
 800ae3a:	d904      	bls.n	800ae46 <_raise_r+0x14>
 800ae3c:	2316      	movs	r3, #22
 800ae3e:	6003      	str	r3, [r0, #0]
 800ae40:	f04f 30ff 	mov.w	r0, #4294967295
 800ae44:	bd38      	pop	{r3, r4, r5, pc}
 800ae46:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae48:	b112      	cbz	r2, 800ae50 <_raise_r+0x1e>
 800ae4a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae4e:	b94b      	cbnz	r3, 800ae64 <_raise_r+0x32>
 800ae50:	4628      	mov	r0, r5
 800ae52:	f000 f831 	bl	800aeb8 <_getpid_r>
 800ae56:	4622      	mov	r2, r4
 800ae58:	4601      	mov	r1, r0
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae60:	f000 b818 	b.w	800ae94 <_kill_r>
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d00a      	beq.n	800ae7e <_raise_r+0x4c>
 800ae68:	1c59      	adds	r1, r3, #1
 800ae6a:	d103      	bne.n	800ae74 <_raise_r+0x42>
 800ae6c:	2316      	movs	r3, #22
 800ae6e:	6003      	str	r3, [r0, #0]
 800ae70:	2001      	movs	r0, #1
 800ae72:	e7e7      	b.n	800ae44 <_raise_r+0x12>
 800ae74:	2100      	movs	r1, #0
 800ae76:	4620      	mov	r0, r4
 800ae78:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae7c:	4798      	blx	r3
 800ae7e:	2000      	movs	r0, #0
 800ae80:	e7e0      	b.n	800ae44 <_raise_r+0x12>
	...

0800ae84 <raise>:
 800ae84:	4b02      	ldr	r3, [pc, #8]	@ (800ae90 <raise+0xc>)
 800ae86:	4601      	mov	r1, r0
 800ae88:	6818      	ldr	r0, [r3, #0]
 800ae8a:	f7ff bfd2 	b.w	800ae32 <_raise_r>
 800ae8e:	bf00      	nop
 800ae90:	20000030 	.word	0x20000030

0800ae94 <_kill_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	2300      	movs	r3, #0
 800ae98:	4d06      	ldr	r5, [pc, #24]	@ (800aeb4 <_kill_r+0x20>)
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	f7f6 ff4b 	bl	8001d3c <_kill>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	d102      	bne.n	800aeb0 <_kill_r+0x1c>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b103      	cbz	r3, 800aeb0 <_kill_r+0x1c>
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
 800aeb2:	bf00      	nop
 800aeb4:	20001278 	.word	0x20001278

0800aeb8 <_getpid_r>:
 800aeb8:	f7f6 bf39 	b.w	8001d2e <_getpid>

0800aebc <tanh>:
 800aebc:	4a41      	ldr	r2, [pc, #260]	@ (800afc4 <tanh+0x108>)
 800aebe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aec2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800aec6:	4293      	cmp	r3, r2
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	460c      	mov	r4, r1
 800aece:	d917      	bls.n	800af00 <tanh+0x44>
 800aed0:	4b3d      	ldr	r3, [pc, #244]	@ (800afc8 <tanh+0x10c>)
 800aed2:	2900      	cmp	r1, #0
 800aed4:	4632      	mov	r2, r6
 800aed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aeda:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aede:	463b      	mov	r3, r7
 800aee0:	db07      	blt.n	800aef2 <tanh+0x36>
 800aee2:	f7f5 fc45 	bl	8000770 <__aeabi_ddiv>
 800aee6:	4622      	mov	r2, r4
 800aee8:	462b      	mov	r3, r5
 800aeea:	f7f5 f961 	bl	80001b0 <__adddf3>
 800aeee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aef2:	f7f5 fc3d 	bl	8000770 <__aeabi_ddiv>
 800aef6:	4622      	mov	r2, r4
 800aef8:	462b      	mov	r3, r5
 800aefa:	f7f5 f957 	bl	80001ac <__aeabi_dsub>
 800aefe:	e7f6      	b.n	800aeee <tanh+0x32>
 800af00:	4a32      	ldr	r2, [pc, #200]	@ (800afcc <tanh+0x110>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d856      	bhi.n	800afb4 <tanh+0xf8>
 800af06:	f1b3 5f72 	cmp.w	r3, #1015021568	@ 0x3c800000
 800af0a:	d20b      	bcs.n	800af24 <tanh+0x68>
 800af0c:	460b      	mov	r3, r1
 800af0e:	492e      	ldr	r1, [pc, #184]	@ (800afc8 <tanh+0x10c>)
 800af10:	4602      	mov	r2, r0
 800af12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af16:	f7f5 f94b 	bl	80001b0 <__adddf3>
 800af1a:	4632      	mov	r2, r6
 800af1c:	463b      	mov	r3, r7
 800af1e:	f7f5 fafd 	bl	800051c <__aeabi_dmul>
 800af22:	e7e4      	b.n	800aeee <tanh+0x32>
 800af24:	4a2a      	ldr	r2, [pc, #168]	@ (800afd0 <tanh+0x114>)
 800af26:	4d2b      	ldr	r5, [pc, #172]	@ (800afd4 <tanh+0x118>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d91f      	bls.n	800af6c <tanh+0xb0>
 800af2c:	f000 fafa 	bl	800b524 <fabs>
 800af30:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af34:	f7f5 faf2 	bl	800051c <__aeabi_dmul>
 800af38:	f000 f876 	bl	800b028 <expm1>
 800af3c:	460b      	mov	r3, r1
 800af3e:	4922      	ldr	r1, [pc, #136]	@ (800afc8 <tanh+0x10c>)
 800af40:	4602      	mov	r2, r0
 800af42:	e9d1 6700 	ldrd	r6, r7, [r1]
 800af46:	e9d5 8900 	ldrd	r8, r9, [r5]
 800af4a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800af4e:	f7f5 f92f 	bl	80001b0 <__adddf3>
 800af52:	4602      	mov	r2, r0
 800af54:	460b      	mov	r3, r1
 800af56:	4640      	mov	r0, r8
 800af58:	4649      	mov	r1, r9
 800af5a:	f7f5 fc09 	bl	8000770 <__aeabi_ddiv>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4630      	mov	r0, r6
 800af64:	4639      	mov	r1, r7
 800af66:	f7f5 f921 	bl	80001ac <__aeabi_dsub>
 800af6a:	e01b      	b.n	800afa4 <tanh+0xe8>
 800af6c:	e9d5 6700 	ldrd	r6, r7, [r5]
 800af70:	f000 fad8 	bl	800b524 <fabs>
 800af74:	4602      	mov	r2, r0
 800af76:	460b      	mov	r3, r1
 800af78:	4630      	mov	r0, r6
 800af7a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800af7e:	f7f5 facd 	bl	800051c <__aeabi_dmul>
 800af82:	f000 f851 	bl	800b028 <expm1>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4606      	mov	r6, r0
 800af8c:	f101 4700 	add.w	r7, r1, #2147483648	@ 0x80000000
 800af90:	e9d5 0100 	ldrd	r0, r1, [r5]
 800af94:	f7f5 f90c 	bl	80001b0 <__adddf3>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4630      	mov	r0, r6
 800af9e:	4639      	mov	r1, r7
 800afa0:	f7f5 fbe6 	bl	8000770 <__aeabi_ddiv>
 800afa4:	2c00      	cmp	r4, #0
 800afa6:	bfbf      	itttt	lt
 800afa8:	4602      	movlt	r2, r0
 800afaa:	f101 4300 	addlt.w	r3, r1, #2147483648	@ 0x80000000
 800afae:	4610      	movlt	r0, r2
 800afb0:	4619      	movlt	r1, r3
 800afb2:	e79c      	b.n	800aeee <tanh+0x32>
 800afb4:	4b04      	ldr	r3, [pc, #16]	@ (800afc8 <tanh+0x10c>)
 800afb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800afba:	4b07      	ldr	r3, [pc, #28]	@ (800afd8 <tanh+0x11c>)
 800afbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc0:	e7d1      	b.n	800af66 <tanh+0xaa>
 800afc2:	bf00      	nop
 800afc4:	7fefffff 	.word	0x7fefffff
 800afc8:	0800ca88 	.word	0x0800ca88
 800afcc:	4035ffff 	.word	0x4035ffff
 800afd0:	3fefffff 	.word	0x3fefffff
 800afd4:	0800ca80 	.word	0x0800ca80
 800afd8:	0800ca78 	.word	0x0800ca78

0800afdc <expf>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4605      	mov	r5, r0
 800afe0:	f000 faa4 	bl	800b52c <__ieee754_expf>
 800afe4:	4604      	mov	r4, r0
 800afe6:	4628      	mov	r0, r5
 800afe8:	f000 fa64 	bl	800b4b4 <finitef>
 800afec:	b150      	cbz	r0, 800b004 <expf+0x28>
 800afee:	4628      	mov	r0, r5
 800aff0:	490b      	ldr	r1, [pc, #44]	@ (800b020 <expf+0x44>)
 800aff2:	f7f6 f8a5 	bl	8001140 <__aeabi_fcmpgt>
 800aff6:	b138      	cbz	r0, 800b008 <expf+0x2c>
 800aff8:	f7fc fc78 	bl	80078ec <__errno>
 800affc:	2322      	movs	r3, #34	@ 0x22
 800affe:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800b002:	6003      	str	r3, [r0, #0]
 800b004:	4620      	mov	r0, r4
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	4628      	mov	r0, r5
 800b00a:	4906      	ldr	r1, [pc, #24]	@ (800b024 <expf+0x48>)
 800b00c:	f7f6 f87a 	bl	8001104 <__aeabi_fcmplt>
 800b010:	2800      	cmp	r0, #0
 800b012:	d0f7      	beq.n	800b004 <expf+0x28>
 800b014:	f7fc fc6a 	bl	80078ec <__errno>
 800b018:	2322      	movs	r3, #34	@ 0x22
 800b01a:	2400      	movs	r4, #0
 800b01c:	6003      	str	r3, [r0, #0]
 800b01e:	e7f1      	b.n	800b004 <expf+0x28>
 800b020:	42b17217 	.word	0x42b17217
 800b024:	c2cff1b5 	.word	0xc2cff1b5

0800b028 <expm1>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	4dcc      	ldr	r5, [pc, #816]	@ (800b360 <expm1+0x338>)
 800b02e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b032:	42ab      	cmp	r3, r5
 800b034:	4682      	mov	sl, r0
 800b036:	468b      	mov	fp, r1
 800b038:	b085      	sub	sp, #20
 800b03a:	f001 4400 	and.w	r4, r1, #2147483648	@ 0x80000000
 800b03e:	d93e      	bls.n	800b0be <expm1+0x96>
 800b040:	4dc8      	ldr	r5, [pc, #800]	@ (800b364 <expm1+0x33c>)
 800b042:	42ab      	cmp	r3, r5
 800b044:	d91f      	bls.n	800b086 <expm1+0x5e>
 800b046:	4dc8      	ldr	r5, [pc, #800]	@ (800b368 <expm1+0x340>)
 800b048:	42ab      	cmp	r3, r5
 800b04a:	d910      	bls.n	800b06e <expm1+0x46>
 800b04c:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b050:	4302      	orrs	r2, r0
 800b052:	d004      	beq.n	800b05e <expm1+0x36>
 800b054:	4602      	mov	r2, r0
 800b056:	460b      	mov	r3, r1
 800b058:	f7f5 f8aa 	bl	80001b0 <__adddf3>
 800b05c:	e123      	b.n	800b2a6 <expm1+0x27e>
 800b05e:	2c00      	cmp	r4, #0
 800b060:	f000 8123 	beq.w	800b2aa <expm1+0x282>
 800b064:	f04f 0a00 	mov.w	sl, #0
 800b068:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800b36c <expm1+0x344>
 800b06c:	e11d      	b.n	800b2aa <expm1+0x282>
 800b06e:	a3a4      	add	r3, pc, #656	@ (adr r3, 800b300 <expm1+0x2d8>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	f7f5 fce2 	bl	8000a3c <__aeabi_dcmpgt>
 800b078:	b128      	cbz	r0, 800b086 <expm1+0x5e>
 800b07a:	2000      	movs	r0, #0
 800b07c:	b005      	add	sp, #20
 800b07e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b082:	f000 ba12 	b.w	800b4aa <__math_oflow>
 800b086:	2c00      	cmp	r4, #0
 800b088:	f000 80c5 	beq.w	800b216 <expm1+0x1ee>
 800b08c:	a39e      	add	r3, pc, #632	@ (adr r3, 800b308 <expm1+0x2e0>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	4650      	mov	r0, sl
 800b094:	4659      	mov	r1, fp
 800b096:	f7f5 f88b 	bl	80001b0 <__adddf3>
 800b09a:	2200      	movs	r2, #0
 800b09c:	2300      	movs	r3, #0
 800b09e:	f7f5 fcaf 	bl	8000a00 <__aeabi_dcmplt>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d1de      	bne.n	800b064 <expm1+0x3c>
 800b0a6:	a39a      	add	r3, pc, #616	@ (adr r3, 800b310 <expm1+0x2e8>)
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	4650      	mov	r0, sl
 800b0ae:	4659      	mov	r1, fp
 800b0b0:	f7f5 fa34 	bl	800051c <__aeabi_dmul>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	2000      	movs	r0, #0
 800b0ba:	49ad      	ldr	r1, [pc, #692]	@ (800b370 <expm1+0x348>)
 800b0bc:	e0b6      	b.n	800b22c <expm1+0x204>
 800b0be:	4aad      	ldr	r2, [pc, #692]	@ (800b374 <expm1+0x34c>)
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	f240 80de 	bls.w	800b282 <expm1+0x25a>
 800b0c6:	4aac      	ldr	r2, [pc, #688]	@ (800b378 <expm1+0x350>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	f200 80cf 	bhi.w	800b26c <expm1+0x244>
 800b0ce:	a392      	add	r3, pc, #584	@ (adr r3, 800b318 <expm1+0x2f0>)
 800b0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0d4:	2c00      	cmp	r4, #0
 800b0d6:	f040 8093 	bne.w	800b200 <expm1+0x1d8>
 800b0da:	f20f 2944 	addw	r9, pc, #580	@ 0x244
 800b0de:	e9d9 8900 	ldrd	r8, r9, [r9]
 800b0e2:	f7f5 f863 	bl	80001ac <__aeabi_dsub>
 800b0e6:	2401      	movs	r4, #1
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	460f      	mov	r7, r1
 800b0ec:	4642      	mov	r2, r8
 800b0ee:	464b      	mov	r3, r9
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 f85a 	bl	80001ac <__aeabi_dsub>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4682      	mov	sl, r0
 800b0fe:	468b      	mov	fp, r1
 800b100:	4630      	mov	r0, r6
 800b102:	4639      	mov	r1, r7
 800b104:	f7f5 f852 	bl	80001ac <__aeabi_dsub>
 800b108:	4642      	mov	r2, r8
 800b10a:	464b      	mov	r3, r9
 800b10c:	f7f5 f84e 	bl	80001ac <__aeabi_dsub>
 800b110:	e9cd 0100 	strd	r0, r1, [sp]
 800b114:	2200      	movs	r2, #0
 800b116:	4b99      	ldr	r3, [pc, #612]	@ (800b37c <expm1+0x354>)
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 f9fe 	bl	800051c <__aeabi_dmul>
 800b120:	4606      	mov	r6, r0
 800b122:	460f      	mov	r7, r1
 800b124:	4602      	mov	r2, r0
 800b126:	460b      	mov	r3, r1
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	f7f5 f9f6 	bl	800051c <__aeabi_dmul>
 800b130:	a37d      	add	r3, pc, #500	@ (adr r3, 800b328 <expm1+0x300>)
 800b132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b136:	4680      	mov	r8, r0
 800b138:	4689      	mov	r9, r1
 800b13a:	f7f5 f9ef 	bl	800051c <__aeabi_dmul>
 800b13e:	a37c      	add	r3, pc, #496	@ (adr r3, 800b330 <expm1+0x308>)
 800b140:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b144:	f7f5 f834 	bl	80001b0 <__adddf3>
 800b148:	4642      	mov	r2, r8
 800b14a:	464b      	mov	r3, r9
 800b14c:	f7f5 f9e6 	bl	800051c <__aeabi_dmul>
 800b150:	a379      	add	r3, pc, #484	@ (adr r3, 800b338 <expm1+0x310>)
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	f7f5 f829 	bl	80001ac <__aeabi_dsub>
 800b15a:	4642      	mov	r2, r8
 800b15c:	464b      	mov	r3, r9
 800b15e:	f7f5 f9dd 	bl	800051c <__aeabi_dmul>
 800b162:	a377      	add	r3, pc, #476	@ (adr r3, 800b340 <expm1+0x318>)
 800b164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b168:	f7f5 f822 	bl	80001b0 <__adddf3>
 800b16c:	4642      	mov	r2, r8
 800b16e:	464b      	mov	r3, r9
 800b170:	f7f5 f9d4 	bl	800051c <__aeabi_dmul>
 800b174:	a374      	add	r3, pc, #464	@ (adr r3, 800b348 <expm1+0x320>)
 800b176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b17a:	f7f5 f817 	bl	80001ac <__aeabi_dsub>
 800b17e:	4642      	mov	r2, r8
 800b180:	464b      	mov	r3, r9
 800b182:	f7f5 f9cb 	bl	800051c <__aeabi_dmul>
 800b186:	2200      	movs	r2, #0
 800b188:	4b7d      	ldr	r3, [pc, #500]	@ (800b380 <expm1+0x358>)
 800b18a:	f7f5 f811 	bl	80001b0 <__adddf3>
 800b18e:	4602      	mov	r2, r0
 800b190:	460b      	mov	r3, r1
 800b192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b196:	4630      	mov	r0, r6
 800b198:	4639      	mov	r1, r7
 800b19a:	f7f5 f9bf 	bl	800051c <__aeabi_dmul>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	2000      	movs	r0, #0
 800b1a4:	4977      	ldr	r1, [pc, #476]	@ (800b384 <expm1+0x35c>)
 800b1a6:	f7f5 f801 	bl	80001ac <__aeabi_dsub>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460f      	mov	r7, r1
 800b1b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b6:	f7f4 fff9 	bl	80001ac <__aeabi_dsub>
 800b1ba:	4632      	mov	r2, r6
 800b1bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1c0:	463b      	mov	r3, r7
 800b1c2:	4650      	mov	r0, sl
 800b1c4:	4659      	mov	r1, fp
 800b1c6:	f7f5 f9a9 	bl	800051c <__aeabi_dmul>
 800b1ca:	4602      	mov	r2, r0
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	2000      	movs	r0, #0
 800b1d0:	496d      	ldr	r1, [pc, #436]	@ (800b388 <expm1+0x360>)
 800b1d2:	f7f4 ffeb 	bl	80001ac <__aeabi_dsub>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	460b      	mov	r3, r1
 800b1da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1de:	f7f5 fac7 	bl	8000770 <__aeabi_ddiv>
 800b1e2:	4642      	mov	r2, r8
 800b1e4:	464b      	mov	r3, r9
 800b1e6:	f7f5 f999 	bl	800051c <__aeabi_dmul>
 800b1ea:	4602      	mov	r2, r0
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	2c00      	cmp	r4, #0
 800b1f0:	d162      	bne.n	800b2b8 <expm1+0x290>
 800b1f2:	4650      	mov	r0, sl
 800b1f4:	4659      	mov	r1, fp
 800b1f6:	f7f5 f991 	bl	800051c <__aeabi_dmul>
 800b1fa:	4642      	mov	r2, r8
 800b1fc:	464b      	mov	r3, r9
 800b1fe:	e04a      	b.n	800b296 <expm1+0x26e>
 800b200:	f7f4 ffd6 	bl	80001b0 <__adddf3>
 800b204:	f20f 1948 	addw	r9, pc, #328	@ 0x148
 800b208:	e9d9 8900 	ldrd	r8, r9, [r9]
 800b20c:	4606      	mov	r6, r0
 800b20e:	460f      	mov	r7, r1
 800b210:	f04f 34ff 	mov.w	r4, #4294967295
 800b214:	e76a      	b.n	800b0ec <expm1+0xc4>
 800b216:	a33e      	add	r3, pc, #248	@ (adr r3, 800b310 <expm1+0x2e8>)
 800b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21c:	4650      	mov	r0, sl
 800b21e:	4659      	mov	r1, fp
 800b220:	f7f5 f97c 	bl	800051c <__aeabi_dmul>
 800b224:	4602      	mov	r2, r0
 800b226:	460b      	mov	r3, r1
 800b228:	2000      	movs	r0, #0
 800b22a:	4954      	ldr	r1, [pc, #336]	@ (800b37c <expm1+0x354>)
 800b22c:	f7f4 ffc0 	bl	80001b0 <__adddf3>
 800b230:	f7f5 fc24 	bl	8000a7c <__aeabi_d2iz>
 800b234:	4604      	mov	r4, r0
 800b236:	f7f5 f907 	bl	8000448 <__aeabi_i2d>
 800b23a:	a337      	add	r3, pc, #220	@ (adr r3, 800b318 <expm1+0x2f0>)
 800b23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b240:	4680      	mov	r8, r0
 800b242:	4689      	mov	r9, r1
 800b244:	f7f5 f96a 	bl	800051c <__aeabi_dmul>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4650      	mov	r0, sl
 800b24e:	4659      	mov	r1, fp
 800b250:	f7f4 ffac 	bl	80001ac <__aeabi_dsub>
 800b254:	a332      	add	r3, pc, #200	@ (adr r3, 800b320 <expm1+0x2f8>)
 800b256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b25a:	4606      	mov	r6, r0
 800b25c:	460f      	mov	r7, r1
 800b25e:	4640      	mov	r0, r8
 800b260:	4649      	mov	r1, r9
 800b262:	f7f5 f95b 	bl	800051c <__aeabi_dmul>
 800b266:	4680      	mov	r8, r0
 800b268:	4689      	mov	r9, r1
 800b26a:	e73f      	b.n	800b0ec <expm1+0xc4>
 800b26c:	a328      	add	r3, pc, #160	@ (adr r3, 800b310 <expm1+0x2e8>)
 800b26e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b272:	f7f5 f953 	bl	800051c <__aeabi_dmul>
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	2c00      	cmp	r4, #0
 800b27c:	f47f af1c 	bne.w	800b0b8 <expm1+0x90>
 800b280:	e7d2      	b.n	800b228 <expm1+0x200>
 800b282:	4a42      	ldr	r2, [pc, #264]	@ (800b38c <expm1+0x364>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d815      	bhi.n	800b2b4 <expm1+0x28c>
 800b288:	a333      	add	r3, pc, #204	@ (adr r3, 800b358 <expm1+0x330>)
 800b28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28e:	f7f4 ff8f 	bl	80001b0 <__adddf3>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	f7f4 ff89 	bl	80001ac <__aeabi_dsub>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	4650      	mov	r0, sl
 800b2a0:	4659      	mov	r1, fp
 800b2a2:	f7f4 ff83 	bl	80001ac <__aeabi_dsub>
 800b2a6:	4682      	mov	sl, r0
 800b2a8:	468b      	mov	fp, r1
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	4659      	mov	r1, fp
 800b2ae:	b005      	add	sp, #20
 800b2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2b4:	2400      	movs	r4, #0
 800b2b6:	e72d      	b.n	800b114 <expm1+0xec>
 800b2b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2bc:	f7f4 ff76 	bl	80001ac <__aeabi_dsub>
 800b2c0:	4652      	mov	r2, sl
 800b2c2:	465b      	mov	r3, fp
 800b2c4:	f7f5 f92a 	bl	800051c <__aeabi_dmul>
 800b2c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2cc:	f7f4 ff6e 	bl	80001ac <__aeabi_dsub>
 800b2d0:	464b      	mov	r3, r9
 800b2d2:	4642      	mov	r2, r8
 800b2d4:	f7f4 ff6a 	bl	80001ac <__aeabi_dsub>
 800b2d8:	1c63      	adds	r3, r4, #1
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	d157      	bne.n	800b390 <expm1+0x368>
 800b2e0:	4602      	mov	r2, r0
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	4650      	mov	r0, sl
 800b2e6:	4659      	mov	r1, fp
 800b2e8:	f7f4 ff60 	bl	80001ac <__aeabi_dsub>
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	4b23      	ldr	r3, [pc, #140]	@ (800b37c <expm1+0x354>)
 800b2f0:	f7f5 f914 	bl	800051c <__aeabi_dmul>
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4b21      	ldr	r3, [pc, #132]	@ (800b37c <expm1+0x354>)
 800b2f8:	e7d3      	b.n	800b2a2 <expm1+0x27a>
 800b2fa:	bf00      	nop
 800b2fc:	f3af 8000 	nop.w
 800b300:	fefa39ef 	.word	0xfefa39ef
 800b304:	40862e42 	.word	0x40862e42
 800b308:	c2f8f359 	.word	0xc2f8f359
 800b30c:	01a56e1f 	.word	0x01a56e1f
 800b310:	652b82fe 	.word	0x652b82fe
 800b314:	3ff71547 	.word	0x3ff71547
 800b318:	fee00000 	.word	0xfee00000
 800b31c:	3fe62e42 	.word	0x3fe62e42
 800b320:	35793c76 	.word	0x35793c76
 800b324:	3dea39ef 	.word	0x3dea39ef
 800b328:	6e09c32d 	.word	0x6e09c32d
 800b32c:	be8afdb7 	.word	0xbe8afdb7
 800b330:	86e65239 	.word	0x86e65239
 800b334:	3ed0cfca 	.word	0x3ed0cfca
 800b338:	9eaadbb7 	.word	0x9eaadbb7
 800b33c:	3f14ce19 	.word	0x3f14ce19
 800b340:	19fe5585 	.word	0x19fe5585
 800b344:	3f5a01a0 	.word	0x3f5a01a0
 800b348:	111110f4 	.word	0x111110f4
 800b34c:	3fa11111 	.word	0x3fa11111
 800b350:	35793c76 	.word	0x35793c76
 800b354:	bdea39ef 	.word	0xbdea39ef
 800b358:	8800759c 	.word	0x8800759c
 800b35c:	7e37e43c 	.word	0x7e37e43c
 800b360:	40436879 	.word	0x40436879
 800b364:	40862e41 	.word	0x40862e41
 800b368:	7fefffff 	.word	0x7fefffff
 800b36c:	bff00000 	.word	0xbff00000
 800b370:	bfe00000 	.word	0xbfe00000
 800b374:	3fd62e42 	.word	0x3fd62e42
 800b378:	3ff0a2b1 	.word	0x3ff0a2b1
 800b37c:	3fe00000 	.word	0x3fe00000
 800b380:	3ff00000 	.word	0x3ff00000
 800b384:	40080000 	.word	0x40080000
 800b388:	40180000 	.word	0x40180000
 800b38c:	3c8fffff 	.word	0x3c8fffff
 800b390:	2c01      	cmp	r4, #1
 800b392:	d125      	bne.n	800b3e0 <expm1+0x3b8>
 800b394:	2200      	movs	r2, #0
 800b396:	4650      	mov	r0, sl
 800b398:	4659      	mov	r1, fp
 800b39a:	4b32      	ldr	r3, [pc, #200]	@ (800b464 <expm1+0x43c>)
 800b39c:	f7f5 fb30 	bl	8000a00 <__aeabi_dcmplt>
 800b3a0:	b188      	cbz	r0, 800b3c6 <expm1+0x39e>
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	4650      	mov	r0, sl
 800b3a6:	4659      	mov	r1, fp
 800b3a8:	4b2f      	ldr	r3, [pc, #188]	@ (800b468 <expm1+0x440>)
 800b3aa:	f7f4 ff01 	bl	80001b0 <__adddf3>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	4630      	mov	r0, r6
 800b3b4:	4639      	mov	r1, r7
 800b3b6:	f7f4 fef9 	bl	80001ac <__aeabi_dsub>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800b3c0:	f7f5 f8ac 	bl	800051c <__aeabi_dmul>
 800b3c4:	e76f      	b.n	800b2a6 <expm1+0x27e>
 800b3c6:	4632      	mov	r2, r6
 800b3c8:	463b      	mov	r3, r7
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	4659      	mov	r1, fp
 800b3ce:	f7f4 feed 	bl	80001ac <__aeabi_dsub>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	f7f4 feeb 	bl	80001b0 <__adddf3>
 800b3da:	2200      	movs	r2, #0
 800b3dc:	4b23      	ldr	r3, [pc, #140]	@ (800b46c <expm1+0x444>)
 800b3de:	e63b      	b.n	800b058 <expm1+0x30>
 800b3e0:	1c63      	adds	r3, r4, #1
 800b3e2:	2b39      	cmp	r3, #57	@ 0x39
 800b3e4:	ea4f 5504 	mov.w	r5, r4, lsl #20
 800b3e8:	d90e      	bls.n	800b408 <expm1+0x3e0>
 800b3ea:	4652      	mov	r2, sl
 800b3ec:	465b      	mov	r3, fp
 800b3ee:	f7f4 fedd 	bl	80001ac <__aeabi_dsub>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	491c      	ldr	r1, [pc, #112]	@ (800b46c <expm1+0x444>)
 800b3fa:	f7f4 fed7 	bl	80001ac <__aeabi_dsub>
 800b3fe:	186b      	adds	r3, r5, r1
 800b400:	4619      	mov	r1, r3
 800b402:	2200      	movs	r2, #0
 800b404:	4b19      	ldr	r3, [pc, #100]	@ (800b46c <expm1+0x444>)
 800b406:	e74c      	b.n	800b2a2 <expm1+0x27a>
 800b408:	2c13      	cmp	r4, #19
 800b40a:	f04f 0200 	mov.w	r2, #0
 800b40e:	dc17      	bgt.n	800b440 <expm1+0x418>
 800b410:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 800b414:	fa46 f404 	asr.w	r4, r6, r4
 800b418:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 800b41c:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 800b420:	4616      	mov	r6, r2
 800b422:	461f      	mov	r7, r3
 800b424:	4652      	mov	r2, sl
 800b426:	465b      	mov	r3, fp
 800b428:	f7f4 fec0 	bl	80001ac <__aeabi_dsub>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4630      	mov	r0, r6
 800b432:	4639      	mov	r1, r7
 800b434:	f7f4 feba 	bl	80001ac <__aeabi_dsub>
 800b438:	4682      	mov	sl, r0
 800b43a:	eb05 0b01 	add.w	fp, r5, r1
 800b43e:	e734      	b.n	800b2aa <expm1+0x282>
 800b440:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 800b444:	3403      	adds	r4, #3
 800b446:	0523      	lsls	r3, r4, #20
 800b448:	f7f4 feb2 	bl	80001b0 <__adddf3>
 800b44c:	4602      	mov	r2, r0
 800b44e:	460b      	mov	r3, r1
 800b450:	4650      	mov	r0, sl
 800b452:	4659      	mov	r1, fp
 800b454:	f7f4 feaa 	bl	80001ac <__aeabi_dsub>
 800b458:	2200      	movs	r2, #0
 800b45a:	4b04      	ldr	r3, [pc, #16]	@ (800b46c <expm1+0x444>)
 800b45c:	f7f4 fea8 	bl	80001b0 <__adddf3>
 800b460:	e7ea      	b.n	800b438 <expm1+0x410>
 800b462:	bf00      	nop
 800b464:	bfd00000 	.word	0xbfd00000
 800b468:	3fe00000 	.word	0x3fe00000
 800b46c:	3ff00000 	.word	0x3ff00000

0800b470 <with_errno>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	4604      	mov	r4, r0
 800b474:	460d      	mov	r5, r1
 800b476:	4616      	mov	r6, r2
 800b478:	f7fc fa38 	bl	80078ec <__errno>
 800b47c:	4629      	mov	r1, r5
 800b47e:	6006      	str	r6, [r0, #0]
 800b480:	4620      	mov	r0, r4
 800b482:	bd70      	pop	{r4, r5, r6, pc}

0800b484 <xflow>:
 800b484:	b513      	push	{r0, r1, r4, lr}
 800b486:	4604      	mov	r4, r0
 800b488:	4619      	mov	r1, r3
 800b48a:	4610      	mov	r0, r2
 800b48c:	b10c      	cbz	r4, 800b492 <xflow+0xe>
 800b48e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b492:	e9cd 2300 	strd	r2, r3, [sp]
 800b496:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b49a:	f7f5 f83f 	bl	800051c <__aeabi_dmul>
 800b49e:	2222      	movs	r2, #34	@ 0x22
 800b4a0:	b002      	add	sp, #8
 800b4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4a6:	f7ff bfe3 	b.w	800b470 <with_errno>

0800b4aa <__math_oflow>:
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b4b0:	f7ff bfe8 	b.w	800b484 <xflow>

0800b4b4 <finitef>:
 800b4b4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b4b8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b4bc:	bfac      	ite	ge
 800b4be:	2000      	movge	r0, #0
 800b4c0:	2001      	movlt	r0, #1
 800b4c2:	4770      	bx	lr

0800b4c4 <fminf>:
 800b4c4:	b538      	push	{r3, r4, r5, lr}
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	460d      	mov	r5, r1
 800b4ca:	f000 f811 	bl	800b4f0 <__fpclassifyf>
 800b4ce:	b910      	cbnz	r0, 800b4d6 <fminf+0x12>
 800b4d0:	462c      	mov	r4, r5
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	bd38      	pop	{r3, r4, r5, pc}
 800b4d6:	4628      	mov	r0, r5
 800b4d8:	f000 f80a 	bl	800b4f0 <__fpclassifyf>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d0f8      	beq.n	800b4d2 <fminf+0xe>
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7f5 fe0e 	bl	8001104 <__aeabi_fcmplt>
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d0f1      	beq.n	800b4d0 <fminf+0xc>
 800b4ec:	e7f1      	b.n	800b4d2 <fminf+0xe>
	...

0800b4f0 <__fpclassifyf>:
 800b4f0:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800b4f4:	d00d      	beq.n	800b512 <__fpclassifyf+0x22>
 800b4f6:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800b4fa:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b4fe:	d30a      	bcc.n	800b516 <__fpclassifyf+0x26>
 800b500:	4b07      	ldr	r3, [pc, #28]	@ (800b520 <__fpclassifyf+0x30>)
 800b502:	1e42      	subs	r2, r0, #1
 800b504:	429a      	cmp	r2, r3
 800b506:	d908      	bls.n	800b51a <__fpclassifyf+0x2a>
 800b508:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800b50c:	4258      	negs	r0, r3
 800b50e:	4158      	adcs	r0, r3
 800b510:	4770      	bx	lr
 800b512:	2002      	movs	r0, #2
 800b514:	4770      	bx	lr
 800b516:	2004      	movs	r0, #4
 800b518:	4770      	bx	lr
 800b51a:	2003      	movs	r0, #3
 800b51c:	4770      	bx	lr
 800b51e:	bf00      	nop
 800b520:	007ffffe 	.word	0x007ffffe

0800b524 <fabs>:
 800b524:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b528:	4619      	mov	r1, r3
 800b52a:	4770      	bx	lr

0800b52c <__ieee754_expf>:
 800b52c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b530:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b534:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b538:	4604      	mov	r4, r0
 800b53a:	d904      	bls.n	800b546 <__ieee754_expf+0x1a>
 800b53c:	4601      	mov	r1, r0
 800b53e:	f7f5 fb3b 	bl	8000bb8 <__addsf3>
 800b542:	4604      	mov	r4, r0
 800b544:	e005      	b.n	800b552 <__ieee754_expf+0x26>
 800b546:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800b54a:	d105      	bne.n	800b558 <__ieee754_expf+0x2c>
 800b54c:	2e00      	cmp	r6, #0
 800b54e:	f040 80c3 	bne.w	800b6d8 <__ieee754_expf+0x1ac>
 800b552:	4620      	mov	r0, r4
 800b554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b558:	4960      	ldr	r1, [pc, #384]	@ (800b6dc <__ieee754_expf+0x1b0>)
 800b55a:	4288      	cmp	r0, r1
 800b55c:	dd04      	ble.n	800b568 <__ieee754_expf+0x3c>
 800b55e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b562:	2000      	movs	r0, #0
 800b564:	f000 b8f3 	b.w	800b74e <__math_oflowf>
 800b568:	2800      	cmp	r0, #0
 800b56a:	da07      	bge.n	800b57c <__ieee754_expf+0x50>
 800b56c:	4a5c      	ldr	r2, [pc, #368]	@ (800b6e0 <__ieee754_expf+0x1b4>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d904      	bls.n	800b57c <__ieee754_expf+0x50>
 800b572:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b576:	2000      	movs	r0, #0
 800b578:	f000 b8e5 	b.w	800b746 <__math_uflowf>
 800b57c:	4a59      	ldr	r2, [pc, #356]	@ (800b6e4 <__ieee754_expf+0x1b8>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d971      	bls.n	800b666 <__ieee754_expf+0x13a>
 800b582:	4a59      	ldr	r2, [pc, #356]	@ (800b6e8 <__ieee754_expf+0x1bc>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d851      	bhi.n	800b62c <__ieee754_expf+0x100>
 800b588:	4b58      	ldr	r3, [pc, #352]	@ (800b6ec <__ieee754_expf+0x1c0>)
 800b58a:	4620      	mov	r0, r4
 800b58c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b590:	f7f5 fb10 	bl	8000bb4 <__aeabi_fsub>
 800b594:	4605      	mov	r5, r0
 800b596:	4b56      	ldr	r3, [pc, #344]	@ (800b6f0 <__ieee754_expf+0x1c4>)
 800b598:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800b59c:	f086 0301 	eor.w	r3, r6, #1
 800b5a0:	eba3 0806 	sub.w	r8, r3, r6
 800b5a4:	4639      	mov	r1, r7
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	f7f5 fb04 	bl	8000bb4 <__aeabi_fsub>
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4620      	mov	r0, r4
 800b5b2:	f7f5 fc09 	bl	8000dc8 <__aeabi_fmul>
 800b5b6:	4606      	mov	r6, r0
 800b5b8:	494e      	ldr	r1, [pc, #312]	@ (800b6f4 <__ieee754_expf+0x1c8>)
 800b5ba:	f7f5 fc05 	bl	8000dc8 <__aeabi_fmul>
 800b5be:	494e      	ldr	r1, [pc, #312]	@ (800b6f8 <__ieee754_expf+0x1cc>)
 800b5c0:	f7f5 faf8 	bl	8000bb4 <__aeabi_fsub>
 800b5c4:	4631      	mov	r1, r6
 800b5c6:	f7f5 fbff 	bl	8000dc8 <__aeabi_fmul>
 800b5ca:	494c      	ldr	r1, [pc, #304]	@ (800b6fc <__ieee754_expf+0x1d0>)
 800b5cc:	f7f5 faf4 	bl	8000bb8 <__addsf3>
 800b5d0:	4631      	mov	r1, r6
 800b5d2:	f7f5 fbf9 	bl	8000dc8 <__aeabi_fmul>
 800b5d6:	494a      	ldr	r1, [pc, #296]	@ (800b700 <__ieee754_expf+0x1d4>)
 800b5d8:	f7f5 faec 	bl	8000bb4 <__aeabi_fsub>
 800b5dc:	4631      	mov	r1, r6
 800b5de:	f7f5 fbf3 	bl	8000dc8 <__aeabi_fmul>
 800b5e2:	4948      	ldr	r1, [pc, #288]	@ (800b704 <__ieee754_expf+0x1d8>)
 800b5e4:	f7f5 fae8 	bl	8000bb8 <__addsf3>
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	f7f5 fbed 	bl	8000dc8 <__aeabi_fmul>
 800b5ee:	4601      	mov	r1, r0
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f7f5 fadf 	bl	8000bb4 <__aeabi_fsub>
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	4606      	mov	r6, r0
 800b5fa:	4620      	mov	r0, r4
 800b5fc:	f7f5 fbe4 	bl	8000dc8 <__aeabi_fmul>
 800b600:	4681      	mov	r9, r0
 800b602:	f1b8 0f00 	cmp.w	r8, #0
 800b606:	d143      	bne.n	800b690 <__ieee754_expf+0x164>
 800b608:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b60c:	4630      	mov	r0, r6
 800b60e:	f7f5 fad1 	bl	8000bb4 <__aeabi_fsub>
 800b612:	4601      	mov	r1, r0
 800b614:	4648      	mov	r0, r9
 800b616:	f7f5 fc8b 	bl	8000f30 <__aeabi_fdiv>
 800b61a:	4621      	mov	r1, r4
 800b61c:	f7f5 faca 	bl	8000bb4 <__aeabi_fsub>
 800b620:	4601      	mov	r1, r0
 800b622:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b626:	f7f5 fac5 	bl	8000bb4 <__aeabi_fsub>
 800b62a:	e78a      	b.n	800b542 <__ieee754_expf+0x16>
 800b62c:	4936      	ldr	r1, [pc, #216]	@ (800b708 <__ieee754_expf+0x1dc>)
 800b62e:	4620      	mov	r0, r4
 800b630:	f7f5 fbca 	bl	8000dc8 <__aeabi_fmul>
 800b634:	4b35      	ldr	r3, [pc, #212]	@ (800b70c <__ieee754_expf+0x1e0>)
 800b636:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b63a:	f7f5 fabd 	bl	8000bb8 <__addsf3>
 800b63e:	f7f5 fd89 	bl	8001154 <__aeabi_f2iz>
 800b642:	4680      	mov	r8, r0
 800b644:	f7f5 fb6c 	bl	8000d20 <__aeabi_i2f>
 800b648:	4931      	ldr	r1, [pc, #196]	@ (800b710 <__ieee754_expf+0x1e4>)
 800b64a:	4606      	mov	r6, r0
 800b64c:	f7f5 fbbc 	bl	8000dc8 <__aeabi_fmul>
 800b650:	4601      	mov	r1, r0
 800b652:	4620      	mov	r0, r4
 800b654:	f7f5 faae 	bl	8000bb4 <__aeabi_fsub>
 800b658:	492e      	ldr	r1, [pc, #184]	@ (800b714 <__ieee754_expf+0x1e8>)
 800b65a:	4605      	mov	r5, r0
 800b65c:	4630      	mov	r0, r6
 800b65e:	f7f5 fbb3 	bl	8000dc8 <__aeabi_fmul>
 800b662:	4607      	mov	r7, r0
 800b664:	e79e      	b.n	800b5a4 <__ieee754_expf+0x78>
 800b666:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800b66a:	d20c      	bcs.n	800b686 <__ieee754_expf+0x15a>
 800b66c:	492a      	ldr	r1, [pc, #168]	@ (800b718 <__ieee754_expf+0x1ec>)
 800b66e:	4620      	mov	r0, r4
 800b670:	f7f5 faa2 	bl	8000bb8 <__addsf3>
 800b674:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b678:	f7f5 fd62 	bl	8001140 <__aeabi_fcmpgt>
 800b67c:	b130      	cbz	r0, 800b68c <__ieee754_expf+0x160>
 800b67e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b682:	4620      	mov	r0, r4
 800b684:	e75b      	b.n	800b53e <__ieee754_expf+0x12>
 800b686:	f04f 0800 	mov.w	r8, #0
 800b68a:	e790      	b.n	800b5ae <__ieee754_expf+0x82>
 800b68c:	4680      	mov	r8, r0
 800b68e:	e78e      	b.n	800b5ae <__ieee754_expf+0x82>
 800b690:	4631      	mov	r1, r6
 800b692:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800b696:	f7f5 fa8d 	bl	8000bb4 <__aeabi_fsub>
 800b69a:	4601      	mov	r1, r0
 800b69c:	4648      	mov	r0, r9
 800b69e:	f7f5 fc47 	bl	8000f30 <__aeabi_fdiv>
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	f7f5 fa85 	bl	8000bb4 <__aeabi_fsub>
 800b6aa:	4629      	mov	r1, r5
 800b6ac:	f7f5 fa82 	bl	8000bb4 <__aeabi_fsub>
 800b6b0:	4601      	mov	r1, r0
 800b6b2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b6b6:	f7f5 fa7d 	bl	8000bb4 <__aeabi_fsub>
 800b6ba:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800b6be:	db02      	blt.n	800b6c6 <__ieee754_expf+0x19a>
 800b6c0:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800b6c4:	e745      	b.n	800b552 <__ieee754_expf+0x26>
 800b6c6:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800b6ca:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800b6ce:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800b6d2:	f7f5 fb79 	bl	8000dc8 <__aeabi_fmul>
 800b6d6:	e734      	b.n	800b542 <__ieee754_expf+0x16>
 800b6d8:	2400      	movs	r4, #0
 800b6da:	e73a      	b.n	800b552 <__ieee754_expf+0x26>
 800b6dc:	42b17217 	.word	0x42b17217
 800b6e0:	42cff1b5 	.word	0x42cff1b5
 800b6e4:	3eb17218 	.word	0x3eb17218
 800b6e8:	3f851591 	.word	0x3f851591
 800b6ec:	0800ca98 	.word	0x0800ca98
 800b6f0:	0800ca90 	.word	0x0800ca90
 800b6f4:	3331bb4c 	.word	0x3331bb4c
 800b6f8:	35ddea0e 	.word	0x35ddea0e
 800b6fc:	388ab355 	.word	0x388ab355
 800b700:	3b360b61 	.word	0x3b360b61
 800b704:	3e2aaaab 	.word	0x3e2aaaab
 800b708:	3fb8aa3b 	.word	0x3fb8aa3b
 800b70c:	0800caa0 	.word	0x0800caa0
 800b710:	3f317180 	.word	0x3f317180
 800b714:	3717f7d1 	.word	0x3717f7d1
 800b718:	7149f2ca 	.word	0x7149f2ca

0800b71c <with_errnof>:
 800b71c:	b538      	push	{r3, r4, r5, lr}
 800b71e:	4604      	mov	r4, r0
 800b720:	460d      	mov	r5, r1
 800b722:	f7fc f8e3 	bl	80078ec <__errno>
 800b726:	6005      	str	r5, [r0, #0]
 800b728:	4620      	mov	r0, r4
 800b72a:	bd38      	pop	{r3, r4, r5, pc}

0800b72c <xflowf>:
 800b72c:	b508      	push	{r3, lr}
 800b72e:	b140      	cbz	r0, 800b742 <xflowf+0x16>
 800b730:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800b734:	f7f5 fb48 	bl	8000dc8 <__aeabi_fmul>
 800b738:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b73c:	2122      	movs	r1, #34	@ 0x22
 800b73e:	f7ff bfed 	b.w	800b71c <with_errnof>
 800b742:	4608      	mov	r0, r1
 800b744:	e7f6      	b.n	800b734 <xflowf+0x8>

0800b746 <__math_uflowf>:
 800b746:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800b74a:	f7ff bfef 	b.w	800b72c <xflowf>

0800b74e <__math_oflowf>:
 800b74e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800b752:	f7ff bfeb 	b.w	800b72c <xflowf>
	...

0800b758 <_init>:
 800b758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b75a:	bf00      	nop
 800b75c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b75e:	bc08      	pop	{r3}
 800b760:	469e      	mov	lr, r3
 800b762:	4770      	bx	lr

0800b764 <_fini>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	bf00      	nop
 800b768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76a:	bc08      	pop	{r3}
 800b76c:	469e      	mov	lr, r3
 800b76e:	4770      	bx	lr
