
NUCLEO-L152RE-LSM6DSO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009440  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009580  08009580  0000a580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d4  080099d4  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080099d4  080099d4  0000a9d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099dc  080099dc  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099dc  080099dc  0000a9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080099e0  080099e0  0000a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  080099e4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000824  200001d8  08009bbc  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009fc  08009bbc  0000b9fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e91  00000000  00000000  0000b201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6a  00000000  00000000  00021092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00022c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb4  00000000  00000000  00024038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017631  00000000  00000000  00024fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012383  00000000  00000000  0003c61d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e13  00000000  00000000  0004e9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e07b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd8  00000000  00000000  000e07f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000e75d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	08009568 	.word	0x08009568

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	08009568 	.word	0x08009568

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__aeabi_uldivmod>:
 8001054:	b953      	cbnz	r3, 800106c <__aeabi_uldivmod+0x18>
 8001056:	b94a      	cbnz	r2, 800106c <__aeabi_uldivmod+0x18>
 8001058:	2900      	cmp	r1, #0
 800105a:	bf08      	it	eq
 800105c:	2800      	cmpeq	r0, #0
 800105e:	bf1c      	itt	ne
 8001060:	f04f 31ff 	movne.w	r1, #4294967295
 8001064:	f04f 30ff 	movne.w	r0, #4294967295
 8001068:	f000 b9c2 	b.w	80013f0 <__aeabi_idiv0>
 800106c:	f1ad 0c08 	sub.w	ip, sp, #8
 8001070:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001074:	f000 f83c 	bl	80010f0 <__udivmoddi4>
 8001078:	f8dd e004 	ldr.w	lr, [sp, #4]
 800107c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001080:	b004      	add	sp, #16
 8001082:	4770      	bx	lr

08001084 <__aeabi_d2lz>:
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	2200      	movs	r2, #0
 8001088:	2300      	movs	r3, #0
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	f7ff fcad 	bl	80009ec <__aeabi_dcmplt>
 8001092:	b928      	cbnz	r0, 80010a0 <__aeabi_d2lz+0x1c>
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800109c:	f000 b80a 	b.w	80010b4 <__aeabi_d2ulz>
 80010a0:	4620      	mov	r0, r4
 80010a2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80010a6:	f000 f805 	bl	80010b4 <__aeabi_d2ulz>
 80010aa:	4240      	negs	r0, r0
 80010ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80010b0:	bd38      	pop	{r3, r4, r5, pc}
 80010b2:	bf00      	nop

080010b4 <__aeabi_d2ulz>:
 80010b4:	b5d0      	push	{r4, r6, r7, lr}
 80010b6:	2200      	movs	r2, #0
 80010b8:	4b0b      	ldr	r3, [pc, #44]	@ (80010e8 <__aeabi_d2ulz+0x34>)
 80010ba:	4606      	mov	r6, r0
 80010bc:	460f      	mov	r7, r1
 80010be:	f7ff fa23 	bl	8000508 <__aeabi_dmul>
 80010c2:	f7ff fcf9 	bl	8000ab8 <__aeabi_d2uiz>
 80010c6:	4604      	mov	r4, r0
 80010c8:	f7ff f9a4 	bl	8000414 <__aeabi_ui2d>
 80010cc:	2200      	movs	r2, #0
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <__aeabi_d2ulz+0x38>)
 80010d0:	f7ff fa1a 	bl	8000508 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4630      	mov	r0, r6
 80010da:	4639      	mov	r1, r7
 80010dc:	f7ff f85c 	bl	8000198 <__aeabi_dsub>
 80010e0:	f7ff fcea 	bl	8000ab8 <__aeabi_d2uiz>
 80010e4:	4621      	mov	r1, r4
 80010e6:	bdd0      	pop	{r4, r6, r7, pc}
 80010e8:	3df00000 	.word	0x3df00000
 80010ec:	41f00000 	.word	0x41f00000

080010f0 <__udivmoddi4>:
 80010f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010f4:	9d08      	ldr	r5, [sp, #32]
 80010f6:	468e      	mov	lr, r1
 80010f8:	4604      	mov	r4, r0
 80010fa:	4688      	mov	r8, r1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d14a      	bne.n	8001196 <__udivmoddi4+0xa6>
 8001100:	428a      	cmp	r2, r1
 8001102:	4617      	mov	r7, r2
 8001104:	d962      	bls.n	80011cc <__udivmoddi4+0xdc>
 8001106:	fab2 f682 	clz	r6, r2
 800110a:	b14e      	cbz	r6, 8001120 <__udivmoddi4+0x30>
 800110c:	f1c6 0320 	rsb	r3, r6, #32
 8001110:	fa01 f806 	lsl.w	r8, r1, r6
 8001114:	fa20 f303 	lsr.w	r3, r0, r3
 8001118:	40b7      	lsls	r7, r6
 800111a:	ea43 0808 	orr.w	r8, r3, r8
 800111e:	40b4      	lsls	r4, r6
 8001120:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001124:	fbb8 f1fe 	udiv	r1, r8, lr
 8001128:	fa1f fc87 	uxth.w	ip, r7
 800112c:	fb0e 8811 	mls	r8, lr, r1, r8
 8001130:	fb01 f20c 	mul.w	r2, r1, ip
 8001134:	0c23      	lsrs	r3, r4, #16
 8001136:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800113a:	429a      	cmp	r2, r3
 800113c:	d909      	bls.n	8001152 <__udivmoddi4+0x62>
 800113e:	18fb      	adds	r3, r7, r3
 8001140:	f101 30ff 	add.w	r0, r1, #4294967295
 8001144:	f080 80eb 	bcs.w	800131e <__udivmoddi4+0x22e>
 8001148:	429a      	cmp	r2, r3
 800114a:	f240 80e8 	bls.w	800131e <__udivmoddi4+0x22e>
 800114e:	3902      	subs	r1, #2
 8001150:	443b      	add	r3, r7
 8001152:	1a9a      	subs	r2, r3, r2
 8001154:	fbb2 f0fe 	udiv	r0, r2, lr
 8001158:	fb0e 2210 	mls	r2, lr, r0, r2
 800115c:	fb00 fc0c 	mul.w	ip, r0, ip
 8001160:	b2a3      	uxth	r3, r4
 8001162:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001166:	459c      	cmp	ip, r3
 8001168:	d909      	bls.n	800117e <__udivmoddi4+0x8e>
 800116a:	18fb      	adds	r3, r7, r3
 800116c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001170:	f080 80d7 	bcs.w	8001322 <__udivmoddi4+0x232>
 8001174:	459c      	cmp	ip, r3
 8001176:	f240 80d4 	bls.w	8001322 <__udivmoddi4+0x232>
 800117a:	443b      	add	r3, r7
 800117c:	3802      	subs	r0, #2
 800117e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001182:	2100      	movs	r1, #0
 8001184:	eba3 030c 	sub.w	r3, r3, ip
 8001188:	b11d      	cbz	r5, 8001192 <__udivmoddi4+0xa2>
 800118a:	2200      	movs	r2, #0
 800118c:	40f3      	lsrs	r3, r6
 800118e:	e9c5 3200 	strd	r3, r2, [r5]
 8001192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001196:	428b      	cmp	r3, r1
 8001198:	d905      	bls.n	80011a6 <__udivmoddi4+0xb6>
 800119a:	b10d      	cbz	r5, 80011a0 <__udivmoddi4+0xb0>
 800119c:	e9c5 0100 	strd	r0, r1, [r5]
 80011a0:	2100      	movs	r1, #0
 80011a2:	4608      	mov	r0, r1
 80011a4:	e7f5      	b.n	8001192 <__udivmoddi4+0xa2>
 80011a6:	fab3 f183 	clz	r1, r3
 80011aa:	2900      	cmp	r1, #0
 80011ac:	d146      	bne.n	800123c <__udivmoddi4+0x14c>
 80011ae:	4573      	cmp	r3, lr
 80011b0:	d302      	bcc.n	80011b8 <__udivmoddi4+0xc8>
 80011b2:	4282      	cmp	r2, r0
 80011b4:	f200 8108 	bhi.w	80013c8 <__udivmoddi4+0x2d8>
 80011b8:	1a84      	subs	r4, r0, r2
 80011ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80011be:	2001      	movs	r0, #1
 80011c0:	4690      	mov	r8, r2
 80011c2:	2d00      	cmp	r5, #0
 80011c4:	d0e5      	beq.n	8001192 <__udivmoddi4+0xa2>
 80011c6:	e9c5 4800 	strd	r4, r8, [r5]
 80011ca:	e7e2      	b.n	8001192 <__udivmoddi4+0xa2>
 80011cc:	2a00      	cmp	r2, #0
 80011ce:	f000 8091 	beq.w	80012f4 <__udivmoddi4+0x204>
 80011d2:	fab2 f682 	clz	r6, r2
 80011d6:	2e00      	cmp	r6, #0
 80011d8:	f040 80a5 	bne.w	8001326 <__udivmoddi4+0x236>
 80011dc:	1a8a      	subs	r2, r1, r2
 80011de:	2101      	movs	r1, #1
 80011e0:	0c03      	lsrs	r3, r0, #16
 80011e2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80011e6:	b280      	uxth	r0, r0
 80011e8:	b2bc      	uxth	r4, r7
 80011ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80011ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80011f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80011f6:	fb04 f20c 	mul.w	r2, r4, ip
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d907      	bls.n	800120e <__udivmoddi4+0x11e>
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001204:	d202      	bcs.n	800120c <__udivmoddi4+0x11c>
 8001206:	429a      	cmp	r2, r3
 8001208:	f200 80e3 	bhi.w	80013d2 <__udivmoddi4+0x2e2>
 800120c:	46c4      	mov	ip, r8
 800120e:	1a9b      	subs	r3, r3, r2
 8001210:	fbb3 f2fe 	udiv	r2, r3, lr
 8001214:	fb0e 3312 	mls	r3, lr, r2, r3
 8001218:	fb02 f404 	mul.w	r4, r2, r4
 800121c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001220:	429c      	cmp	r4, r3
 8001222:	d907      	bls.n	8001234 <__udivmoddi4+0x144>
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	f102 30ff 	add.w	r0, r2, #4294967295
 800122a:	d202      	bcs.n	8001232 <__udivmoddi4+0x142>
 800122c:	429c      	cmp	r4, r3
 800122e:	f200 80cd 	bhi.w	80013cc <__udivmoddi4+0x2dc>
 8001232:	4602      	mov	r2, r0
 8001234:	1b1b      	subs	r3, r3, r4
 8001236:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800123a:	e7a5      	b.n	8001188 <__udivmoddi4+0x98>
 800123c:	f1c1 0620 	rsb	r6, r1, #32
 8001240:	408b      	lsls	r3, r1
 8001242:	fa22 f706 	lsr.w	r7, r2, r6
 8001246:	431f      	orrs	r7, r3
 8001248:	fa2e fa06 	lsr.w	sl, lr, r6
 800124c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001250:	fbba f8f9 	udiv	r8, sl, r9
 8001254:	fa0e fe01 	lsl.w	lr, lr, r1
 8001258:	fa20 f306 	lsr.w	r3, r0, r6
 800125c:	fb09 aa18 	mls	sl, r9, r8, sl
 8001260:	fa1f fc87 	uxth.w	ip, r7
 8001264:	ea43 030e 	orr.w	r3, r3, lr
 8001268:	fa00 fe01 	lsl.w	lr, r0, r1
 800126c:	fb08 f00c 	mul.w	r0, r8, ip
 8001270:	0c1c      	lsrs	r4, r3, #16
 8001272:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001276:	42a0      	cmp	r0, r4
 8001278:	fa02 f201 	lsl.w	r2, r2, r1
 800127c:	d90a      	bls.n	8001294 <__udivmoddi4+0x1a4>
 800127e:	193c      	adds	r4, r7, r4
 8001280:	f108 3aff 	add.w	sl, r8, #4294967295
 8001284:	f080 809e 	bcs.w	80013c4 <__udivmoddi4+0x2d4>
 8001288:	42a0      	cmp	r0, r4
 800128a:	f240 809b 	bls.w	80013c4 <__udivmoddi4+0x2d4>
 800128e:	f1a8 0802 	sub.w	r8, r8, #2
 8001292:	443c      	add	r4, r7
 8001294:	1a24      	subs	r4, r4, r0
 8001296:	b298      	uxth	r0, r3
 8001298:	fbb4 f3f9 	udiv	r3, r4, r9
 800129c:	fb09 4413 	mls	r4, r9, r3, r4
 80012a0:	fb03 fc0c 	mul.w	ip, r3, ip
 80012a4:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80012a8:	45a4      	cmp	ip, r4
 80012aa:	d909      	bls.n	80012c0 <__udivmoddi4+0x1d0>
 80012ac:	193c      	adds	r4, r7, r4
 80012ae:	f103 30ff 	add.w	r0, r3, #4294967295
 80012b2:	f080 8085 	bcs.w	80013c0 <__udivmoddi4+0x2d0>
 80012b6:	45a4      	cmp	ip, r4
 80012b8:	f240 8082 	bls.w	80013c0 <__udivmoddi4+0x2d0>
 80012bc:	3b02      	subs	r3, #2
 80012be:	443c      	add	r4, r7
 80012c0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80012c4:	eba4 040c 	sub.w	r4, r4, ip
 80012c8:	fba0 8c02 	umull	r8, ip, r0, r2
 80012cc:	4564      	cmp	r4, ip
 80012ce:	4643      	mov	r3, r8
 80012d0:	46e1      	mov	r9, ip
 80012d2:	d364      	bcc.n	800139e <__udivmoddi4+0x2ae>
 80012d4:	d061      	beq.n	800139a <__udivmoddi4+0x2aa>
 80012d6:	b15d      	cbz	r5, 80012f0 <__udivmoddi4+0x200>
 80012d8:	ebbe 0203 	subs.w	r2, lr, r3
 80012dc:	eb64 0409 	sbc.w	r4, r4, r9
 80012e0:	fa04 f606 	lsl.w	r6, r4, r6
 80012e4:	fa22 f301 	lsr.w	r3, r2, r1
 80012e8:	431e      	orrs	r6, r3
 80012ea:	40cc      	lsrs	r4, r1
 80012ec:	e9c5 6400 	strd	r6, r4, [r5]
 80012f0:	2100      	movs	r1, #0
 80012f2:	e74e      	b.n	8001192 <__udivmoddi4+0xa2>
 80012f4:	fbb1 fcf2 	udiv	ip, r1, r2
 80012f8:	0c01      	lsrs	r1, r0, #16
 80012fa:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80012fe:	b280      	uxth	r0, r0
 8001300:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001304:	463b      	mov	r3, r7
 8001306:	fbb1 f1f7 	udiv	r1, r1, r7
 800130a:	4638      	mov	r0, r7
 800130c:	463c      	mov	r4, r7
 800130e:	46b8      	mov	r8, r7
 8001310:	46be      	mov	lr, r7
 8001312:	2620      	movs	r6, #32
 8001314:	eba2 0208 	sub.w	r2, r2, r8
 8001318:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800131c:	e765      	b.n	80011ea <__udivmoddi4+0xfa>
 800131e:	4601      	mov	r1, r0
 8001320:	e717      	b.n	8001152 <__udivmoddi4+0x62>
 8001322:	4610      	mov	r0, r2
 8001324:	e72b      	b.n	800117e <__udivmoddi4+0x8e>
 8001326:	f1c6 0120 	rsb	r1, r6, #32
 800132a:	fa2e fc01 	lsr.w	ip, lr, r1
 800132e:	40b7      	lsls	r7, r6
 8001330:	fa0e fe06 	lsl.w	lr, lr, r6
 8001334:	fa20 f101 	lsr.w	r1, r0, r1
 8001338:	ea41 010e 	orr.w	r1, r1, lr
 800133c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001340:	fbbc f8fe 	udiv	r8, ip, lr
 8001344:	b2bc      	uxth	r4, r7
 8001346:	fb0e cc18 	mls	ip, lr, r8, ip
 800134a:	fb08 f904 	mul.w	r9, r8, r4
 800134e:	0c0a      	lsrs	r2, r1, #16
 8001350:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8001354:	40b0      	lsls	r0, r6
 8001356:	4591      	cmp	r9, r2
 8001358:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800135c:	b280      	uxth	r0, r0
 800135e:	d93e      	bls.n	80013de <__udivmoddi4+0x2ee>
 8001360:	18ba      	adds	r2, r7, r2
 8001362:	f108 3cff 	add.w	ip, r8, #4294967295
 8001366:	d201      	bcs.n	800136c <__udivmoddi4+0x27c>
 8001368:	4591      	cmp	r9, r2
 800136a:	d81f      	bhi.n	80013ac <__udivmoddi4+0x2bc>
 800136c:	eba2 0209 	sub.w	r2, r2, r9
 8001370:	fbb2 f9fe 	udiv	r9, r2, lr
 8001374:	fb09 f804 	mul.w	r8, r9, r4
 8001378:	fb0e 2a19 	mls	sl, lr, r9, r2
 800137c:	b28a      	uxth	r2, r1
 800137e:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8001382:	4542      	cmp	r2, r8
 8001384:	d229      	bcs.n	80013da <__udivmoddi4+0x2ea>
 8001386:	18ba      	adds	r2, r7, r2
 8001388:	f109 31ff 	add.w	r1, r9, #4294967295
 800138c:	d2c2      	bcs.n	8001314 <__udivmoddi4+0x224>
 800138e:	4542      	cmp	r2, r8
 8001390:	d2c0      	bcs.n	8001314 <__udivmoddi4+0x224>
 8001392:	f1a9 0102 	sub.w	r1, r9, #2
 8001396:	443a      	add	r2, r7
 8001398:	e7bc      	b.n	8001314 <__udivmoddi4+0x224>
 800139a:	45c6      	cmp	lr, r8
 800139c:	d29b      	bcs.n	80012d6 <__udivmoddi4+0x1e6>
 800139e:	ebb8 0302 	subs.w	r3, r8, r2
 80013a2:	eb6c 0c07 	sbc.w	ip, ip, r7
 80013a6:	3801      	subs	r0, #1
 80013a8:	46e1      	mov	r9, ip
 80013aa:	e794      	b.n	80012d6 <__udivmoddi4+0x1e6>
 80013ac:	eba7 0909 	sub.w	r9, r7, r9
 80013b0:	444a      	add	r2, r9
 80013b2:	fbb2 f9fe 	udiv	r9, r2, lr
 80013b6:	f1a8 0c02 	sub.w	ip, r8, #2
 80013ba:	fb09 f804 	mul.w	r8, r9, r4
 80013be:	e7db      	b.n	8001378 <__udivmoddi4+0x288>
 80013c0:	4603      	mov	r3, r0
 80013c2:	e77d      	b.n	80012c0 <__udivmoddi4+0x1d0>
 80013c4:	46d0      	mov	r8, sl
 80013c6:	e765      	b.n	8001294 <__udivmoddi4+0x1a4>
 80013c8:	4608      	mov	r0, r1
 80013ca:	e6fa      	b.n	80011c2 <__udivmoddi4+0xd2>
 80013cc:	443b      	add	r3, r7
 80013ce:	3a02      	subs	r2, #2
 80013d0:	e730      	b.n	8001234 <__udivmoddi4+0x144>
 80013d2:	f1ac 0c02 	sub.w	ip, ip, #2
 80013d6:	443b      	add	r3, r7
 80013d8:	e719      	b.n	800120e <__udivmoddi4+0x11e>
 80013da:	4649      	mov	r1, r9
 80013dc:	e79a      	b.n	8001314 <__udivmoddi4+0x224>
 80013de:	eba2 0209 	sub.w	r2, r2, r9
 80013e2:	fbb2 f9fe 	udiv	r9, r2, lr
 80013e6:	46c4      	mov	ip, r8
 80013e8:	fb09 f804 	mul.w	r8, r9, r4
 80013ec:	e7c4      	b.n	8001378 <__udivmoddi4+0x288>
 80013ee:	bf00      	nop

080013f0 <__aeabi_idiv0>:
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 80013fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <main+0x140>)
 80013fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001538 <main+0x144>)
 80013fe:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001400:	4b4c      	ldr	r3, [pc, #304]	@ (8001534 <main+0x140>)
 8001402:	4a4e      	ldr	r2, [pc, #312]	@ (800153c <main+0x148>)
 8001404:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 8001406:	4b4b      	ldr	r3, [pc, #300]	@ (8001534 <main+0x140>)
 8001408:	4a4d      	ldr	r2, [pc, #308]	@ (8001540 <main+0x14c>)
 800140a:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140c:	f000 fda7 	bl	8001f5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001410:	f000 f8a6 	bl	8001560 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  iks01a3_i2c_stuck_quirk();
 8001414:	f000 fb76 	bl	8001b04 <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001418:	f000 f948 	bl	80016ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800141c:	f000 f8ee 	bl	80015fc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001420:	f000 f91a 	bl	8001658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  KIN1_InitCycleCounter();
 8001424:	4b47      	ldr	r3, [pc, #284]	@ (8001544 <main+0x150>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a46      	ldr	r2, [pc, #280]	@ (8001544 <main+0x150>)
 800142a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800142e:	6013      	str	r3, [r2, #0]
  KIN1_EnableCycleCounter();
 8001430:	4b45      	ldr	r3, [pc, #276]	@ (8001548 <main+0x154>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a44      	ldr	r2, [pc, #272]	@ (8001548 <main+0x154>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6013      	str	r3, [r2, #0]
  lsm6dso_initialize();
 800143c:	f000 fa0c 	bl	8001858 <lsm6dso_initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uint8_t wtm_flag = 0, status2 = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	717b      	strb	r3, [r7, #5]
 8001444:	2300      	movs	r3, #0
 8001446:	713b      	strb	r3, [r7, #4]
	uint16_t num = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	807b      	strh	r3, [r7, #2]
	if (drdy) {
 800144c:	4b3f      	ldr	r3, [pc, #252]	@ (800154c <main+0x158>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f4      	beq.n	8001440 <main+0x4c>
	  /* Reset data ready condition */
	  drdy = 0;
 8001456:	4b3d      	ldr	r3, [pc, #244]	@ (800154c <main+0x158>)
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
	  lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_STATUS2, &status2, 1);
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	2301      	movs	r3, #1
 8001460:	213b      	movs	r1, #59	@ 0x3b
 8001462:	4834      	ldr	r0, [pc, #208]	@ (8001534 <main+0x140>)
 8001464:	f003 f96e 	bl	8004744 <lsm6dso_read_reg>
      wtm_flag = status2 >> 7;
 8001468:	793b      	ldrb	r3, [r7, #4]
 800146a:	09db      	lsrs	r3, r3, #7
 800146c:	717b      	strb	r3, [r7, #5]
	  if (wtm_flag) {
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0e5      	beq.n	8001440 <main+0x4c>
		lsm6dso_fifo_data_level_get(&dev_ctx, &num);
 8001474:	1cbb      	adds	r3, r7, #2
 8001476:	4619      	mov	r1, r3
 8001478:	482e      	ldr	r0, [pc, #184]	@ (8001534 <main+0x140>)
 800147a:	f003 fc34 	bl	8004ce6 <lsm6dso_fifo_data_level_get>
		if (data_left < num) {
 800147e:	4b34      	ldr	r3, [pc, #208]	@ (8001550 <main+0x15c>)
 8001480:	881a      	ldrh	r2, [r3, #0]
 8001482:	887b      	ldrh	r3, [r7, #2]
 8001484:	429a      	cmp	r2, r3
 8001486:	d202      	bcs.n	800148e <main+0x9a>
	      num = data_left;
 8001488:	4b31      	ldr	r3, [pc, #196]	@ (8001550 <main+0x15c>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	807b      	strh	r3, [r7, #2]
		}
		lsm6dso_get_buffer_from_fifo(num);
 800148e:	887b      	ldrh	r3, [r7, #2]
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fa3d 	bl	8001910 <lsm6dso_get_buffer_from_fifo>
		data_left -= num;
 8001496:	4b2e      	ldr	r3, [pc, #184]	@ (8001550 <main+0x15c>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	887b      	ldrh	r3, [r7, #2]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	b29a      	uxth	r2, r3
 80014a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001550 <main+0x15c>)
 80014a2:	801a      	strh	r2, [r3, #0]
		number_read += num;
 80014a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001554 <main+0x160>)
 80014a6:	881a      	ldrh	r2, [r3, #0]
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	4413      	add	r3, r2
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b29      	ldr	r3, [pc, #164]	@ (8001554 <main+0x160>)
 80014b0:	801a      	strh	r2, [r3, #0]
		if (data_left == 0) {
 80014b2:	4b27      	ldr	r3, [pc, #156]	@ (8001550 <main+0x15c>)
 80014b4:	881b      	ldrh	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d131      	bne.n	800151e <main+0x12a>
	      lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_BYPASS_MODE);
 80014ba:	2100      	movs	r1, #0
 80014bc:	481d      	ldr	r0, [pc, #116]	@ (8001534 <main+0x140>)
 80014be:	f003 fbec 	bl	8004c9a <lsm6dso_fifo_mode_set>
			neai_time = (cycles_cnt * 1000000.0) / HAL_RCC_GetSysClockFreq();
			printf("Similarity: %d / 100. NEAI detect return: %d. Cycles counter: %ld = %.1f µs at %ld Hz.\n",
				  neai_similarity, neai_state, cycles_cnt, neai_time, HAL_RCC_GetSysClockFreq());
		  }
#else
		  for (uint16_t i = 0; i < AXIS * SAMPLES; i++) {
 80014c2:	2300      	movs	r3, #0
 80014c4:	80fb      	strh	r3, [r7, #6]
 80014c6:	e00e      	b.n	80014e6 <main+0xf2>
			printf("%.3f ", neai_buffer[i]);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	4a23      	ldr	r2, [pc, #140]	@ (8001558 <main+0x164>)
 80014cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffc1 	bl	8000458 <__aeabi_f2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4820      	ldr	r0, [pc, #128]	@ (800155c <main+0x168>)
 80014dc:	f004 fbc0 	bl	8005c60 <iprintf>
		  for (uint16_t i = 0; i < AXIS * SAMPLES; i++) {
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	3301      	adds	r3, #1
 80014e4:	80fb      	strh	r3, [r7, #6]
 80014e6:	88fb      	ldrh	r3, [r7, #6]
 80014e8:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80014ec:	d3ec      	bcc.n	80014c8 <main+0xd4>
		  }
		  printf("\n");
 80014ee:	200a      	movs	r0, #10
 80014f0:	f004 fbc8 	bl	8005c84 <putchar>
#endif
		  data_left = (uint16_t) SAMPLES;
 80014f4:	4b16      	ldr	r3, [pc, #88]	@ (8001550 <main+0x15c>)
 80014f6:	2280      	movs	r2, #128	@ 0x80
 80014f8:	801a      	strh	r2, [r3, #0]
		  number_read = 0;
 80014fa:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <main+0x160>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	801a      	strh	r2, [r3, #0]
		  memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 8001500:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001504:	2100      	movs	r1, #0
 8001506:	4814      	ldr	r0, [pc, #80]	@ (8001558 <main+0x164>)
 8001508:	f004 fc29 	bl	8005d5e <memset>
		  if (SAMPLES <= MAX_FIFO_SIZE) {
			lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	4809      	ldr	r0, [pc, #36]	@ (8001534 <main+0x140>)
 8001510:	f003 fb3f 	bl	8004b92 <lsm6dso_fifo_watermark_set>
		  }
		  else {
			lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
		  }
		  lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 8001514:	2101      	movs	r1, #1
 8001516:	4807      	ldr	r0, [pc, #28]	@ (8001534 <main+0x140>)
 8001518:	f003 fbbf 	bl	8004c9a <lsm6dso_fifo_mode_set>
 800151c:	e790      	b.n	8001440 <main+0x4c>
		}
		else if (data_left < MAX_FIFO_SIZE) {
 800151e:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <main+0x15c>)
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	2bff      	cmp	r3, #255	@ 0xff
 8001524:	d88c      	bhi.n	8001440 <main+0x4c>
		  lsm6dso_fifo_watermark_set(&dev_ctx, data_left);
 8001526:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <main+0x15c>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4801      	ldr	r0, [pc, #4]	@ (8001534 <main+0x140>)
 800152e:	f003 fb30 	bl	8004b92 <lsm6dso_fifo_watermark_set>
  {
 8001532:	e785      	b.n	8001440 <main+0x4c>
 8001534:	20000898 	.word	0x20000898
 8001538:	080017e5 	.word	0x080017e5
 800153c:	0800181f 	.word	0x0800181f
 8001540:	200001f4 	.word	0x200001f4
 8001544:	e000edfc 	.word	0xe000edfc
 8001548:	e0001000 	.word	0xe0001000
 800154c:	20000292 	.word	0x20000292
 8001550:	20000000 	.word	0x20000000
 8001554:	20000294 	.word	0x20000294
 8001558:	20000298 	.word	0x20000298
 800155c:	08009580 	.word	0x08009580

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b092      	sub	sp, #72	@ 0x48
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2234      	movs	r2, #52	@ 0x34
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fbf5 	bl	8005d5e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
 8001580:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001582:	4b1d      	ldr	r3, [pc, #116]	@ (80015f8 <SystemClock_Config+0x98>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800158a:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <SystemClock_Config+0x98>)
 800158c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001590:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001592:	2302      	movs	r3, #2
 8001594:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001596:	2301      	movs	r3, #1
 8001598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800159a:	2310      	movs	r3, #16
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80015a6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80015aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80015ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80015b0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f854 	bl	8003664 <HAL_RCC_OscConfig>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80015c2:	f000 faef 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c6:	230f      	movs	r3, #15
 80015c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ca:	2303      	movs	r3, #3
 80015cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015da:	463b      	mov	r3, r7
 80015dc:	2101      	movs	r1, #1
 80015de:	4618      	mov	r0, r3
 80015e0:	f002 fb70 	bl	8003cc4 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80015ea:	f000 fadb 	bl	8001ba4 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3748      	adds	r7, #72	@ 0x48
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40007000 	.word	0x40007000

080015fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <MX_I2C1_Init+0x50>)
 8001602:	4a13      	ldr	r2, [pc, #76]	@ (8001650 <MX_I2C1_Init+0x54>)
 8001604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001606:	4b11      	ldr	r3, [pc, #68]	@ (800164c <MX_I2C1_Init+0x50>)
 8001608:	4a12      	ldr	r2, [pc, #72]	@ (8001654 <MX_I2C1_Init+0x58>)
 800160a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	@ (800164c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001618:	4b0c      	ldr	r3, [pc, #48]	@ (800164c <MX_I2C1_Init+0x50>)
 800161a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800161e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <MX_I2C1_Init+0x50>)
 8001622:	2200      	movs	r2, #0
 8001624:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <MX_I2C1_Init+0x50>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <MX_I2C1_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001632:	4b06      	ldr	r3, [pc, #24]	@ (800164c <MX_I2C1_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001638:	4804      	ldr	r0, [pc, #16]	@ (800164c <MX_I2C1_Init+0x50>)
 800163a:	f000 ffef 	bl	800261c <HAL_I2C_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001644:	f000 faae 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200001f4 	.word	0x200001f4
 8001650:	40005400 	.word	0x40005400
 8001654:	00061a80 	.word	0x00061a80

08001658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <MX_USART2_UART_Init+0x50>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0b      	ldr	r3, [pc, #44]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800168e:	4805      	ldr	r0, [pc, #20]	@ (80016a4 <MX_USART2_UART_Init+0x4c>)
 8001690:	f002 fdde 	bl	8004250 <HAL_UART_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800169a:	f000 fa83 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000248 	.word	0x20000248
 80016a8:	40004400 	.word	0x40004400

080016ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
 80016c0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	61d3      	str	r3, [r2, #28]
 80016ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a28      	ldr	r2, [pc, #160]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b26      	ldr	r3, [pc, #152]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b23      	ldr	r3, [pc, #140]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a22      	ldr	r2, [pc, #136]	@ (8001780 <MX_GPIO_Init+0xd4>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b20      	ldr	r3, [pc, #128]	@ (8001780 <MX_GPIO_Init+0xd4>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	2120      	movs	r1, #32
 800170e:	481d      	ldr	r0, [pc, #116]	@ (8001784 <MX_GPIO_Init+0xd8>)
 8001710:	f000 ff54 	bl	80025bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001714:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001718:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800171e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	4817      	ldr	r0, [pc, #92]	@ (8001788 <MX_GPIO_Init+0xdc>)
 800172c:	f000 fdb6 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001730:	2320      	movs	r3, #32
 8001732:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	4619      	mov	r1, r3
 8001746:	480f      	ldr	r0, [pc, #60]	@ (8001784 <MX_GPIO_Init+0xd8>)
 8001748:	f000 fda8 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_ACC_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 800174c:	2320      	movs	r3, #32
 800174e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001750:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001754:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	4619      	mov	r1, r3
 8001760:	480a      	ldr	r0, [pc, #40]	@ (800178c <MX_GPIO_Init+0xe0>)
 8001762:	f000 fd9b 	bl	800229c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	2017      	movs	r0, #23
 800176c:	f000 fd5f 	bl	800222e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001770:	2017      	movs	r0, #23
 8001772:	f000 fd78 	bl	8002266 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020800 	.word	0x40020800
 800178c:	40020400 	.word	0x40020400

08001790 <__io_putchar>:
  * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
  * @retval
  * @param
  */
int __io_putchar(int ch)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 800179e:	f107 010c 	add.w	r1, r7, #12
 80017a2:	230a      	movs	r3, #10
 80017a4:	2201      	movs	r2, #1
 80017a6:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <__io_putchar+0x28>)
 80017a8:	f002 fda2 	bl	80042f0 <HAL_UART_Transmit>
 return ch;
 80017ac:	687b      	ldr	r3, [r7, #4]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000248 	.word	0x20000248

080017bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	2b20      	cmp	r3, #32
 80017ca:	d103      	bne.n	80017d4 <HAL_GPIO_EXTI_Callback+0x18>
  case GYRO_ACC_INT_Pin:
    drdy = 1;
 80017cc:	4b04      	ldr	r3, [pc, #16]	@ (80017e0 <HAL_GPIO_EXTI_Callback+0x24>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
    break;
 80017d2:	bf00      	nop
  }
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	20000292 	.word	0x20000292

080017e4 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af04      	add	r7, sp, #16
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	607a      	str	r2, [r7, #4]
 80017ee:	461a      	mov	r2, r3
 80017f0:	460b      	mov	r3, r1
 80017f2:	72fb      	strb	r3, [r7, #11]
 80017f4:	4613      	mov	r3, r2
 80017f6:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 80017f8:	7afb      	ldrb	r3, [r7, #11]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001800:	9302      	str	r3, [sp, #8]
 8001802:	893b      	ldrh	r3, [r7, #8]
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2301      	movs	r3, #1
 800180c:	21d7      	movs	r1, #215	@ 0xd7
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f001 f848 	bl	80028a4 <HAL_I2C_Mem_Write>
  return 0;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b088      	sub	sp, #32
 8001822:	af04      	add	r7, sp, #16
 8001824:	60f8      	str	r0, [r7, #12]
 8001826:	607a      	str	r2, [r7, #4]
 8001828:	461a      	mov	r2, r3
 800182a:	460b      	mov	r3, r1
 800182c:	72fb      	strb	r3, [r7, #11]
 800182e:	4613      	mov	r3, r2
 8001830:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001832:	7afb      	ldrb	r3, [r7, #11]
 8001834:	b29a      	uxth	r2, r3
 8001836:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800183a:	9302      	str	r3, [sp, #8]
 800183c:	893b      	ldrh	r3, [r7, #8]
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2301      	movs	r3, #1
 8001846:	21d7      	movs	r1, #215	@ 0xd7
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f001 f925 	bl	8002a98 <HAL_I2C_Mem_Read>
  return 0;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <lsm6dso_initialize>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize()
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  lsm6dso_initialize_basics();
 800185c:	f000 f80e 	bl	800187c <lsm6dso_initialize_basics>
#ifdef ACCELEROMETER
  /* Accelelerometer configuration */
  lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001860:	2106      	movs	r1, #6
 8001862:	4805      	ldr	r0, [pc, #20]	@ (8001878 <lsm6dso_initialize+0x20>)
 8001864:	f002 ffe6 	bl	8004834 <lsm6dso_xl_data_rate_set>
  lsm6dso_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 8001868:	2102      	movs	r1, #2
 800186a:	4803      	ldr	r0, [pc, #12]	@ (8001878 <lsm6dso_initialize+0x20>)
 800186c:	f002 ffbc 	bl	80047e8 <lsm6dso_xl_full_scale_set>
#else
  /* Gyroscope configuration */
  lsm6dso_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
  lsm6dso_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
  lsm6dso_initialize_fifo();
 8001870:	f000 f82c 	bl	80018cc <lsm6dso_initialize_fifo>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000898 	.word	0x20000898

0800187c <lsm6dso_initialize_basics>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_basics()
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 8001880:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <lsm6dso_initialize_basics+0x44>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]

  do {
    HAL_Delay(20);
 8001886:	2014      	movs	r0, #20
 8001888:	f000 fbd8 	bl	800203c <HAL_Delay>
    lsm6dso_device_id_get(&dev_ctx, &whoamI);
 800188c:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <lsm6dso_initialize_basics+0x44>)
 800188e:	480d      	ldr	r0, [pc, #52]	@ (80018c4 <lsm6dso_initialize_basics+0x48>)
 8001890:	f003 f8e7 	bl	8004a62 <lsm6dso_device_id_get>
  } while(whoamI != LSM6DSO_ID);
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <lsm6dso_initialize_basics+0x44>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b6c      	cmp	r3, #108	@ 0x6c
 800189a:	d1f4      	bne.n	8001886 <lsm6dso_initialize_basics+0xa>

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 800189c:	2101      	movs	r1, #1
 800189e:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <lsm6dso_initialize_basics+0x48>)
 80018a0:	f003 f8f0 	bl	8004a84 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 80018a4:	4908      	ldr	r1, [pc, #32]	@ (80018c8 <lsm6dso_initialize_basics+0x4c>)
 80018a6:	4807      	ldr	r0, [pc, #28]	@ (80018c4 <lsm6dso_initialize_basics+0x48>)
 80018a8:	f003 f912 	bl	8004ad0 <lsm6dso_reset_get>
  } while (rst);
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <lsm6dso_initialize_basics+0x4c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1f7      	bne.n	80018a4 <lsm6dso_initialize_basics+0x28>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 80018b4:	2180      	movs	r1, #128	@ 0x80
 80018b6:	4803      	ldr	r0, [pc, #12]	@ (80018c4 <lsm6dso_initialize_basics+0x48>)
 80018b8:	f003 f923 	bl	8004b02 <lsm6dso_i3c_disable_set>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000290 	.word	0x20000290
 80018c4:	20000898 	.word	0x20000898
 80018c8:	20000291 	.word	0x20000291

080018cc <lsm6dso_initialize_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_fifo()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
#ifdef ACCELEROMETER
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 80018d2:	2106      	movs	r1, #6
 80018d4:	480d      	ldr	r0, [pc, #52]	@ (800190c <lsm6dso_initialize_fifo+0x40>)
 80018d6:	f003 f994 	bl	8004c02 <lsm6dso_fifo_xl_batch_set>
  lsm6dso_fifo_gy_batch_set(&dev_ctx, 0);
 80018da:	2100      	movs	r1, #0
 80018dc:	480b      	ldr	r0, [pc, #44]	@ (800190c <lsm6dso_initialize_fifo+0x40>)
 80018de:	f003 f9b6 	bl	8004c4e <lsm6dso_fifo_gy_batch_set>
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, 0);
  lsm6dso_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
  /* FIFO MODE */
  lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 80018e2:	2101      	movs	r1, #1
 80018e4:	4809      	ldr	r0, [pc, #36]	@ (800190c <lsm6dso_initialize_fifo+0x40>)
 80018e6:	f003 f9d8 	bl	8004c9a <lsm6dso_fifo_mode_set>
  /* Watermark config */
  if (SAMPLES <= MAX_FIFO_SIZE) {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 80018ea:	2180      	movs	r1, #128	@ 0x80
 80018ec:	4807      	ldr	r0, [pc, #28]	@ (800190c <lsm6dso_initialize_fifo+0x40>)
 80018ee:	f003 f950 	bl	8004b92 <lsm6dso_fifo_watermark_set>
  }
  else {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
  }
  /* Need to enable interrupt pin when wtm is reached */
  uint8_t ctrl = 0x08;
 80018f2:	2308      	movs	r3, #8
 80018f4:	71fb      	strb	r3, [r7, #7]
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_INT1_CTRL, (uint8_t *) &ctrl, 1);
 80018f6:	1dfa      	adds	r2, r7, #7
 80018f8:	2301      	movs	r3, #1
 80018fa:	210d      	movs	r1, #13
 80018fc:	4803      	ldr	r0, [pc, #12]	@ (800190c <lsm6dso_initialize_fifo+0x40>)
 80018fe:	f002 ff3f 	bl	8004780 <lsm6dso_write_reg>
}
 8001902:	bf00      	nop
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000898 	.word	0x20000898

08001910 <lsm6dso_get_buffer_from_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_get_buffer_from_fifo(uint16_t nb)
{
 8001910:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001914:	b087      	sub	sp, #28
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	80fb      	strh	r3, [r7, #6]
 800191c:	466b      	mov	r3, sp
 800191e:	461e      	mov	r6, r3
  uint8_t reg_tag = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	74fb      	strb	r3, [r7, #19]
  uint8_t buff_tmp[nb * FIFO_WORD];
 8001924:	88fa      	ldrh	r2, [r7, #6]
 8001926:	4613      	mov	r3, r2
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	1a99      	subs	r1, r3, r2
 800192c:	1e4b      	subs	r3, r1, #1
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	460a      	mov	r2, r1
 8001932:	2300      	movs	r3, #0
 8001934:	4690      	mov	r8, r2
 8001936:	4699      	mov	r9, r3
 8001938:	f04f 0200 	mov.w	r2, #0
 800193c:	f04f 0300 	mov.w	r3, #0
 8001940:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001944:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001948:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800194c:	460a      	mov	r2, r1
 800194e:	2300      	movs	r3, #0
 8001950:	4614      	mov	r4, r2
 8001952:	461d      	mov	r5, r3
 8001954:	f04f 0200 	mov.w	r2, #0
 8001958:	f04f 0300 	mov.w	r3, #0
 800195c:	00eb      	lsls	r3, r5, #3
 800195e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001962:	00e2      	lsls	r2, r4, #3
 8001964:	460b      	mov	r3, r1
 8001966:	3307      	adds	r3, #7
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	ebad 0d03 	sub.w	sp, sp, r3
 8001970:	466b      	mov	r3, sp
 8001972:	3300      	adds	r3, #0
 8001974:	60bb      	str	r3, [r7, #8]
   * The data stored in FIFO are accessible from dedicated registers and each FIFO word is composed of 7
   * bytes: one tag byte (FIFO_DATA_OUT_TAG (78h)), in order to identify the sensor, and 6 bytes of fixed data
   * (FIFO_DATA_OUT registers from (79h) to (7Eh))
   * So, here we read the fifo in only one transaction in order to save time
   */
  lsm6dso_read_reg(&dev_ctx, LSM6DSO_FIFO_DATA_OUT_TAG, buff_tmp, nb * FIFO_WORD);
 8001976:	88fb      	ldrh	r3, [r7, #6]
 8001978:	461a      	mov	r2, r3
 800197a:	00d2      	lsls	r2, r2, #3
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	2178      	movs	r1, #120	@ 0x78
 8001984:	484b      	ldr	r0, [pc, #300]	@ (8001ab4 <lsm6dso_get_buffer_from_fifo+0x1a4>)
 8001986:	f002 fedd 	bl	8004744 <lsm6dso_read_reg>
  for (uint16_t i = 0; i < nb; i++) {
 800198a:	2300      	movs	r3, #0
 800198c:	82fb      	strh	r3, [r7, #22]
 800198e:	e079      	b.n	8001a84 <lsm6dso_get_buffer_from_fifo+0x174>
    /* According to the datasheet, the TAG_SENSOR is the 5 MSB of the FIFO_DATA_OUT_TAG register, so we shift 3 bits to the right */
    reg_tag = buff_tmp[FIFO_WORD * i] >> 3;
 8001990:	8afa      	ldrh	r2, [r7, #22]
 8001992:	4613      	mov	r3, r2
 8001994:	00db      	lsls	r3, r3, #3
 8001996:	1a9b      	subs	r3, r3, r2
 8001998:	68ba      	ldr	r2, [r7, #8]
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	74fb      	strb	r3, [r7, #19]
    if(reg_tag == LSM6DSO_XL_NC_TAG) {
 80019a0:	7cfb      	ldrb	r3, [r7, #19]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d134      	bne.n	8001a10 <lsm6dso_get_buffer_from_fifo+0x100>
      for(uint8_t j = 0; j < AXIS; j++) {
 80019a6:	2300      	movs	r3, #0
 80019a8:	757b      	strb	r3, [r7, #21]
 80019aa:	e02d      	b.n	8001a08 <lsm6dso_get_buffer_from_fifo+0xf8>
	neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_accel_data_to_mg((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 80019ac:	8afa      	ldrh	r2, [r7, #22]
 80019ae:	4613      	mov	r3, r2
 80019b0:	00db      	lsls	r3, r3, #3
 80019b2:	1a9a      	subs	r2, r3, r2
 80019b4:	7d7b      	ldrb	r3, [r7, #21]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	4413      	add	r3, r2
 80019ba:	3302      	adds	r3, #2
 80019bc:	68ba      	ldr	r2, [r7, #8]
 80019be:	5cd3      	ldrb	r3, [r2, r3]
 80019c0:	b21b      	sxth	r3, r3
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	b219      	sxth	r1, r3
 80019c6:	8afa      	ldrh	r2, [r7, #22]
 80019c8:	4613      	mov	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	1a9a      	subs	r2, r3, r2
 80019ce:	7d7b      	ldrb	r3, [r7, #21]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	3301      	adds	r3, #1
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	5cd3      	ldrb	r3, [r2, r3]
 80019da:	b21b      	sxth	r3, r3
 80019dc:	430b      	orrs	r3, r1
 80019de:	b219      	sxth	r1, r3
 80019e0:	4b35      	ldr	r3, [pc, #212]	@ (8001ab8 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 80019e2:	881b      	ldrh	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	8afb      	ldrh	r3, [r7, #22]
 80019e8:	441a      	add	r2, r3
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	441a      	add	r2, r3
 80019f0:	7d7b      	ldrb	r3, [r7, #21]
 80019f2:	18d4      	adds	r4, r2, r3
 80019f4:	4608      	mov	r0, r1
 80019f6:	f000 f871 	bl	8001adc <lsm6dso_convert_accel_data_to_mg>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4a2f      	ldr	r2, [pc, #188]	@ (8001abc <lsm6dso_get_buffer_from_fifo+0x1ac>)
 80019fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
      for(uint8_t j = 0; j < AXIS; j++) {
 8001a02:	7d7b      	ldrb	r3, [r7, #21]
 8001a04:	3301      	adds	r3, #1
 8001a06:	757b      	strb	r3, [r7, #21]
 8001a08:	7d7b      	ldrb	r3, [r7, #21]
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d9ce      	bls.n	80019ac <lsm6dso_get_buffer_from_fifo+0x9c>
 8001a0e:	e036      	b.n	8001a7e <lsm6dso_get_buffer_from_fifo+0x16e>
      }
    }
    else if(reg_tag == LSM6DSO_GYRO_NC_TAG) {
 8001a10:	7cfb      	ldrb	r3, [r7, #19]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d133      	bne.n	8001a7e <lsm6dso_get_buffer_from_fifo+0x16e>
    for(uint8_t j = 0; j < AXIS; j++) {
 8001a16:	2300      	movs	r3, #0
 8001a18:	753b      	strb	r3, [r7, #20]
 8001a1a:	e02d      	b.n	8001a78 <lsm6dso_get_buffer_from_fifo+0x168>
      neai_buffer[(AXIS * neai_buffer_ptr) + (AXIS * i) + j] = lsm6dso_convert_gyro_data_to_mdps((uint16_t) buff_tmp[(FIFO_WORD * i) + (2 * j) + 2] << 8 | buff_tmp[(FIFO_WORD * i) + (2 * j) + 1]);
 8001a1c:	8afa      	ldrh	r2, [r7, #22]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	1a9a      	subs	r2, r3, r2
 8001a24:	7d3b      	ldrb	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	4413      	add	r3, r2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	68ba      	ldr	r2, [r7, #8]
 8001a2e:	5cd3      	ldrb	r3, [r2, r3]
 8001a30:	b21b      	sxth	r3, r3
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b219      	sxth	r1, r3
 8001a36:	8afa      	ldrh	r2, [r7, #22]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	1a9a      	subs	r2, r3, r2
 8001a3e:	7d3b      	ldrb	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4413      	add	r3, r2
 8001a44:	3301      	adds	r3, #1
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	b219      	sxth	r1, r3
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001a52:	881b      	ldrh	r3, [r3, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	8afb      	ldrh	r3, [r7, #22]
 8001a58:	441a      	add	r2, r3
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	441a      	add	r2, r3
 8001a60:	7d3b      	ldrb	r3, [r7, #20]
 8001a62:	18d4      	adds	r4, r2, r3
 8001a64:	4608      	mov	r0, r1
 8001a66:	f000 f82b 	bl	8001ac0 <lsm6dso_convert_gyro_data_to_mdps>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	4a13      	ldr	r2, [pc, #76]	@ (8001abc <lsm6dso_get_buffer_from_fifo+0x1ac>)
 8001a6e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    for(uint8_t j = 0; j < AXIS; j++) {
 8001a72:	7d3b      	ldrb	r3, [r7, #20]
 8001a74:	3301      	adds	r3, #1
 8001a76:	753b      	strb	r3, [r7, #20]
 8001a78:	7d3b      	ldrb	r3, [r7, #20]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d9ce      	bls.n	8001a1c <lsm6dso_get_buffer_from_fifo+0x10c>
  for (uint16_t i = 0; i < nb; i++) {
 8001a7e:	8afb      	ldrh	r3, [r7, #22]
 8001a80:	3301      	adds	r3, #1
 8001a82:	82fb      	strh	r3, [r7, #22]
 8001a84:	8afa      	ldrh	r2, [r7, #22]
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d381      	bcc.n	8001990 <lsm6dso_get_buffer_from_fifo+0x80>
    }
    }
  }
  neai_buffer_ptr += nb;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001a8e:	881a      	ldrh	r2, [r3, #0]
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4413      	add	r3, r2
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b08      	ldr	r3, [pc, #32]	@ (8001ab8 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001a98:	801a      	strh	r2, [r3, #0]
  if (neai_buffer_ptr == SAMPLES) {
 8001a9a:	4b07      	ldr	r3, [pc, #28]	@ (8001ab8 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	2b80      	cmp	r3, #128	@ 0x80
 8001aa0:	d102      	bne.n	8001aa8 <lsm6dso_get_buffer_from_fifo+0x198>
    neai_buffer_ptr = 0;
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <lsm6dso_get_buffer_from_fifo+0x1a8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	801a      	strh	r2, [r3, #0]
 8001aa8:	46b5      	mov	sp, r6
  }
}
 8001aaa:	bf00      	nop
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ab4:	20000898 	.word	0x20000898
 8001ab8:	20000296 	.word	0x20000296
 8001abc:	20000298 	.word	0x20000298

08001ac0 <lsm6dso_convert_gyro_data_to_mdps>:
 *
 * @return The converted value in milli degrees per second (mdps)
 *
 */
static float lsm6dso_convert_gyro_data_to_mdps(int16_t gyro_raw_data)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
  float gyro_data_mdps = 0.0;
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  default:
    gyro_data_mdps = 0.0;
    break;
  }
#endif
  return gyro_data_mdps;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <lsm6dso_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lsm6dso_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  float accel_data_mg = 0.0;
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  {
  case LSM6DSO_2g:
    accel_data_mg = lsm6dso_from_fs2_to_mg(accel_raw_data);
    break;
  case LSM6DSO_4g:
    accel_data_mg = lsm6dso_from_fs4_to_mg(accel_raw_data);
 8001aec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f002 fe63 	bl	80047bc <lsm6dso_from_fs4_to_mg>
 8001af6:	60f8      	str	r0, [r7, #12]
    break;
 8001af8:	bf00      	nop
  default:
    accel_data_mg = 0.0;
    break;
  }
#endif
  return accel_data_mg;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
 8001b18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b20      	ldr	r3, [pc, #128]	@ (8001b9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	61d3      	str	r3, [r2, #28]
 8001b26:	4b1d      	ldr	r3, [pc, #116]	@ (8001b9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /* Configure SCL as a GPIO */
  GPIO_InitStruct.Pin = SCL_PIN;
 8001b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b44:	2304      	movs	r3, #4
 8001b46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8001b48:	f107 0308 	add.w	r3, r7, #8
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4814      	ldr	r0, [pc, #80]	@ (8001ba0 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001b50:	f000 fba4 	bl	800229c <HAL_GPIO_Init>

  /* Send a burst of pulses on SCL */
  int pulses = 20;
 8001b54:	2314      	movs	r3, #20
 8001b56:	61fb      	str	r3, [r7, #28]
  do {
    HAL_Delay(1);
 8001b58:	2001      	movs	r0, #1
 8001b5a:	f000 fa6f 	bl	800203c <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b64:	480e      	ldr	r0, [pc, #56]	@ (8001ba0 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001b66:	f000 fd29 	bl	80025bc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f000 fa66 	bl	800203c <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001b70:	2201      	movs	r2, #1
 8001b72:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b76:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001b78:	f000 fd20 	bl	80025bc <HAL_GPIO_WritePin>
  } while (pulses--);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	61fa      	str	r2, [r7, #28]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1e8      	bne.n	8001b58 <iks01a3_i2c_stuck_quirk+0x54>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001b86:	4b05      	ldr	r3, [pc, #20]	@ (8001b9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a04      	ldr	r2, [pc, #16]	@ (8001b9c <iks01a3_i2c_stuck_quirk+0x98>)
 8001b8c:	f023 0302 	bic.w	r3, r3, #2
 8001b90:	61d3      	str	r3, [r2, #28]
}
 8001b92:	bf00      	nop
 8001b94:	3720      	adds	r7, #32
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <Error_Handler+0x8>

08001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001bb6:	4b15      	ldr	r3, [pc, #84]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	4a14      	ldr	r2, [pc, #80]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001bc0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	4b0f      	ldr	r3, [pc, #60]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	4b0c      	ldr	r3, [pc, #48]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
 8001be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bf0:	6253      	str	r3, [r2, #36]	@ 0x24
 8001bf2:	4b06      	ldr	r3, [pc, #24]	@ (8001c0c <HAL_MspInit+0x5c>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bfe:	2007      	movs	r0, #7
 8001c00:	f000 fb0a 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40023800 	.word	0x40023800

08001c10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b08a      	sub	sp, #40	@ 0x28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0314 	add.w	r3, r7, #20
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a17      	ldr	r2, [pc, #92]	@ (8001c8c <HAL_I2C_MspInit+0x7c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d128      	bne.n	8001c84 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c32:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <HAL_I2C_MspInit+0x80>)
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	4a16      	ldr	r2, [pc, #88]	@ (8001c90 <HAL_I2C_MspInit+0x80>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	61d3      	str	r3, [r2, #28]
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_I2C_MspInit+0x80>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c50:	2312      	movs	r3, #18
 8001c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c54:	2300      	movs	r3, #0
 8001c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c5c:	2304      	movs	r3, #4
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c60:	f107 0314 	add.w	r3, r7, #20
 8001c64:	4619      	mov	r1, r3
 8001c66:	480b      	ldr	r0, [pc, #44]	@ (8001c94 <HAL_I2C_MspInit+0x84>)
 8001c68:	f000 fb18 	bl	800229c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c6c:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_I2C_MspInit+0x80>)
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	4a07      	ldr	r2, [pc, #28]	@ (8001c90 <HAL_I2C_MspInit+0x80>)
 8001c72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c76:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c78:	4b05      	ldr	r3, [pc, #20]	@ (8001c90 <HAL_I2C_MspInit+0x80>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c84:	bf00      	nop
 8001c86:	3728      	adds	r7, #40	@ 0x28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40005400 	.word	0x40005400
 8001c90:	40023800 	.word	0x40023800
 8001c94:	40020400 	.word	0x40020400

08001c98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	@ 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	@ (8001d14 <HAL_UART_MspInit+0x7c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d127      	bne.n	8001d0a <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cba:	4b17      	ldr	r3, [pc, #92]	@ (8001d18 <HAL_UART_MspInit+0x80>)
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbe:	4a16      	ldr	r2, [pc, #88]	@ (8001d18 <HAL_UART_MspInit+0x80>)
 8001cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc4:	6253      	str	r3, [r2, #36]	@ 0x24
 8001cc6:	4b14      	ldr	r3, [pc, #80]	@ (8001d18 <HAL_UART_MspInit+0x80>)
 8001cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b11      	ldr	r3, [pc, #68]	@ (8001d18 <HAL_UART_MspInit+0x80>)
 8001cd4:	69db      	ldr	r3, [r3, #28]
 8001cd6:	4a10      	ldr	r2, [pc, #64]	@ (8001d18 <HAL_UART_MspInit+0x80>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	61d3      	str	r3, [r2, #28]
 8001cde:	4b0e      	ldr	r3, [pc, #56]	@ (8001d18 <HAL_UART_MspInit+0x80>)
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cea:	230c      	movs	r3, #12
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <HAL_UART_MspInit+0x84>)
 8001d06:	f000 fac9 	bl	800229c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	@ 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40004400 	.word	0x40004400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <NMI_Handler+0x4>

08001d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <MemManage_Handler+0x4>

08001d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 f948 	bl	8002004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_ACC_INT_Pin);
 8001d7c:	2020      	movs	r0, #32
 8001d7e:	f000 fc35 	bl	80025ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  return 1;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <_kill>:

int _kill(int pid, int sig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d9e:	f004 f831 	bl	8005e04 <__errno>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2216      	movs	r2, #22
 8001da6:	601a      	str	r2, [r3, #0]
  return -1;
 8001da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_exit>:

void _exit (int status)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ffe7 	bl	8001d94 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dc6:	bf00      	nop
 8001dc8:	e7fd      	b.n	8001dc6 <_exit+0x12>

08001dca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
 8001dda:	e00a      	b.n	8001df2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ddc:	f3af 8000 	nop.w
 8001de0:	4601      	mov	r1, r0
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	60ba      	str	r2, [r7, #8]
 8001de8:	b2ca      	uxtb	r2, r1
 8001dea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf0      	blt.n	8001ddc <_read+0x12>
  }

  return len;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e009      	b.n	8001e2a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	60ba      	str	r2, [r7, #8]
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff fcb6 	bl	8001790 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	3301      	adds	r3, #1
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	dbf1      	blt.n	8001e16 <_write+0x12>
  }
  return len;
 8001e32:	687b      	ldr	r3, [r7, #4]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_close>:

int _close(int file)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e62:	605a      	str	r2, [r3, #4]
  return 0;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr

08001e70 <_isatty>:

int _isatty(int file)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e78:	2301      	movs	r3, #1
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b085      	sub	sp, #20
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ea4:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <_sbrk+0x5c>)
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <_sbrk+0x60>)
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb0:	4b13      	ldr	r3, [pc, #76]	@ (8001f00 <_sbrk+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d102      	bne.n	8001ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	@ (8001f00 <_sbrk+0x64>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <_sbrk+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ebe:	4b10      	ldr	r3, [pc, #64]	@ (8001f00 <_sbrk+0x64>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4413      	add	r3, r2
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d207      	bcs.n	8001edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ecc:	f003 ff9a 	bl	8005e04 <__errno>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	220c      	movs	r2, #12
 8001ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eda:	e009      	b.n	8001ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001edc:	4b08      	ldr	r3, [pc, #32]	@ (8001f00 <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	@ (8001f00 <_sbrk+0x64>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	4a05      	ldr	r2, [pc, #20]	@ (8001f00 <_sbrk+0x64>)
 8001eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eee:	68fb      	ldr	r3, [r7, #12]
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20014000 	.word	0x20014000
 8001efc:	00000400 	.word	0x00000400
 8001f00:	200008a8 	.word	0x200008a8
 8001f04:	20000a00 	.word	0x20000a00

08001f08 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f14:	f7ff fff8 	bl	8001f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f18:	480b      	ldr	r0, [pc, #44]	@ (8001f48 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f1a:	490c      	ldr	r1, [pc, #48]	@ (8001f4c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8001f50 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f20:	e002      	b.n	8001f28 <LoopCopyDataInit>

08001f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f26:	3304      	adds	r3, #4

08001f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f2c:	d3f9      	bcc.n	8001f22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f2e:	4a09      	ldr	r2, [pc, #36]	@ (8001f54 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f30:	4c09      	ldr	r4, [pc, #36]	@ (8001f58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f34:	e001      	b.n	8001f3a <LoopFillZerobss>

08001f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f38:	3204      	adds	r2, #4

08001f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f3c:	d3fb      	bcc.n	8001f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f3e:	f003 ff67 	bl	8005e10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f42:	f7ff fa57 	bl	80013f4 <main>
  bx lr
 8001f46:	4770      	bx	lr
  ldr r0, =_sdata
 8001f48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f4c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001f50:	080099e4 	.word	0x080099e4
  ldr r2, =_sbss
 8001f54:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001f58:	200009fc 	.word	0x200009fc

08001f5c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f5c:	e7fe      	b.n	8001f5c <ADC1_IRQHandler>

08001f5e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f68:	2003      	movs	r0, #3
 8001f6a:	f000 f955 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f000 f80e 	bl	8001f90 <HAL_InitTick>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d002      	beq.n	8001f80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	71fb      	strb	r3, [r7, #7]
 8001f7e:	e001      	b.n	8001f84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f80:	f7ff fe16 	bl	8001bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f84:	79fb      	ldrb	r3, [r7, #7]
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f9c:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <HAL_InitTick+0x68>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d022      	beq.n	8001fea <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001fa4:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_InitTick+0x6c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <HAL_InitTick+0x68>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f000 f962 	bl	8002282 <HAL_SYSTICK_Config>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b0f      	cmp	r3, #15
 8001fc8:	d809      	bhi.n	8001fde <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd2:	f000 f92c 	bl	800222e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002000 <HAL_InitTick+0x70>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e007      	b.n	8001fee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
 8001fe2:	e004      	b.n	8001fee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
 8001fe8:	e001      	b.n	8001fee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	2000000c 	.word	0x2000000c
 8001ffc:	20000004 	.word	0x20000004
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_IncTick+0x1c>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b05      	ldr	r3, [pc, #20]	@ (8002024 <HAL_IncTick+0x20>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4413      	add	r3, r2
 8002012:	4a03      	ldr	r2, [pc, #12]	@ (8002020 <HAL_IncTick+0x1c>)
 8002014:	6013      	str	r3, [r2, #0]
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	200008ac 	.word	0x200008ac
 8002024:	2000000c 	.word	0x2000000c

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b02      	ldr	r3, [pc, #8]	@ (8002038 <HAL_GetTick+0x10>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	200008ac 	.word	0x200008ac

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff fff0 	bl	8002028 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d004      	beq.n	8002060 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b09      	ldr	r3, [pc, #36]	@ (800207c <HAL_Delay+0x40>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68fa      	ldr	r2, [r7, #12]
 800205c:	4413      	add	r3, r2
 800205e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002060:	bf00      	nop
 8002062:	f7ff ffe1 	bl	8002028 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	429a      	cmp	r2, r3
 8002070:	d8f7      	bhi.n	8002062 <HAL_Delay+0x26>
  {
  }
}
 8002072:	bf00      	nop
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	2000000c 	.word	0x2000000c

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	@ (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4906      	ldr	r1, [pc, #24]	@ (8002118 <__NVIC_EnableIRQ+0x34>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	@ (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	@ (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	@ 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff90 	bl	800211c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff2d 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff42 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff90 	bl	8002170 <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5f 	bl	800211c <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff35 	bl	80020e4 <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b087      	sub	sp, #28
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80022b2:	e160      	b.n	8002576 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa01 f303 	lsl.w	r3, r1, r3
 80022c0:	4013      	ands	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8152 	beq.w	8002570 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d005      	beq.n	80022e4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d130      	bne.n	8002346 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	2203      	movs	r2, #3
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	fa02 f303 	lsl.w	r3, r2, r3
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800231a:	2201      	movs	r2, #1
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	091b      	lsrs	r3, r3, #4
 8002330:	f003 0201 	and.w	r2, r3, #1
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b03      	cmp	r3, #3
 8002350:	d017      	beq.n	8002382 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4013      	ands	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d123      	bne.n	80023d6 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	08da      	lsrs	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3208      	adds	r2, #8
 8002396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	220f      	movs	r2, #15
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	691a      	ldr	r2, [r3, #16]
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f003 0307 	and.w	r3, r3, #7
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	08da      	lsrs	r2, r3, #3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3208      	adds	r2, #8
 80023d0:	6939      	ldr	r1, [r7, #16]
 80023d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	2203      	movs	r2, #3
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	4013      	ands	r3, r2
 80023ec:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f003 0203 	and.w	r2, r3, #3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80ac 	beq.w	8002570 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002418:	4b5e      	ldr	r3, [pc, #376]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4a5d      	ldr	r2, [pc, #372]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	4b5b      	ldr	r3, [pc, #364]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	60bb      	str	r3, [r7, #8]
 800242e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002430:	4a59      	ldr	r2, [pc, #356]	@ (8002598 <HAL_GPIO_Init+0x2fc>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	220f      	movs	r2, #15
 8002448:	fa02 f303 	lsl.w	r3, r2, r3
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a51      	ldr	r2, [pc, #324]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d025      	beq.n	80024a8 <HAL_GPIO_Init+0x20c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a50      	ldr	r2, [pc, #320]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d01f      	beq.n	80024a4 <HAL_GPIO_Init+0x208>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a4f      	ldr	r2, [pc, #316]	@ (80025a4 <HAL_GPIO_Init+0x308>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d019      	beq.n	80024a0 <HAL_GPIO_Init+0x204>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a4e      	ldr	r2, [pc, #312]	@ (80025a8 <HAL_GPIO_Init+0x30c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d013      	beq.n	800249c <HAL_GPIO_Init+0x200>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a4d      	ldr	r2, [pc, #308]	@ (80025ac <HAL_GPIO_Init+0x310>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00d      	beq.n	8002498 <HAL_GPIO_Init+0x1fc>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <HAL_GPIO_Init+0x314>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <HAL_GPIO_Init+0x1f8>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4b      	ldr	r2, [pc, #300]	@ (80025b4 <HAL_GPIO_Init+0x318>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d101      	bne.n	8002490 <HAL_GPIO_Init+0x1f4>
 800248c:	2306      	movs	r3, #6
 800248e:	e00c      	b.n	80024aa <HAL_GPIO_Init+0x20e>
 8002490:	2307      	movs	r3, #7
 8002492:	e00a      	b.n	80024aa <HAL_GPIO_Init+0x20e>
 8002494:	2305      	movs	r3, #5
 8002496:	e008      	b.n	80024aa <HAL_GPIO_Init+0x20e>
 8002498:	2304      	movs	r3, #4
 800249a:	e006      	b.n	80024aa <HAL_GPIO_Init+0x20e>
 800249c:	2303      	movs	r3, #3
 800249e:	e004      	b.n	80024aa <HAL_GPIO_Init+0x20e>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e002      	b.n	80024aa <HAL_GPIO_Init+0x20e>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_GPIO_Init+0x20e>
 80024a8:	2300      	movs	r3, #0
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	f002 0203 	and.w	r2, r2, #3
 80024b0:	0092      	lsls	r2, r2, #2
 80024b2:	4093      	lsls	r3, r2
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80024ba:	4937      	ldr	r1, [pc, #220]	@ (8002598 <HAL_GPIO_Init+0x2fc>)
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	089b      	lsrs	r3, r3, #2
 80024c0:	3302      	adds	r3, #2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c8:	4b3b      	ldr	r3, [pc, #236]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ec:	4a32      	ldr	r2, [pc, #200]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f2:	4b31      	ldr	r3, [pc, #196]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	43db      	mvns	r3, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4013      	ands	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002516:	4a28      	ldr	r2, [pc, #160]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251c:	4b26      	ldr	r3, [pc, #152]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	43db      	mvns	r3, r3
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4013      	ands	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002540:	4a1d      	ldr	r2, [pc, #116]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002546:	4b1c      	ldr	r3, [pc, #112]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	43db      	mvns	r3, r3
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	4013      	ands	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4313      	orrs	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800256a:	4a13      	ldr	r2, [pc, #76]	@ (80025b8 <HAL_GPIO_Init+0x31c>)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	f47f ae97 	bne.w	80022b4 <HAL_GPIO_Init+0x18>
  }
}
 8002586:	bf00      	nop
 8002588:	bf00      	nop
 800258a:	371c      	adds	r7, #28
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	40010000 	.word	0x40010000
 800259c:	40020000 	.word	0x40020000
 80025a0:	40020400 	.word	0x40020400
 80025a4:	40020800 	.word	0x40020800
 80025a8:	40020c00 	.word	0x40020c00
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40021400 	.word	0x40021400
 80025b4:	40021800 	.word	0x40021800
 80025b8:	40010400 	.word	0x40010400

080025bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
 80025c8:	4613      	mov	r3, r2
 80025ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025cc:	787b      	ldrb	r3, [r7, #1]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025d2:	887a      	ldrh	r2, [r7, #2]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80025d8:	e003      	b.n	80025e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	041a      	lsls	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	619a      	str	r2, [r3, #24]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bc80      	pop	{r7}
 80025ea:	4770      	bx	lr

080025ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025f6:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	88fb      	ldrh	r3, [r7, #6]
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d006      	beq.n	8002610 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002602:	4a05      	ldr	r2, [pc, #20]	@ (8002618 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f8d6 	bl	80017bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40010400 	.word	0x40010400

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e12b      	b.n	8002886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fae4 	bl	8001c10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	@ 0x24
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800266e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800267e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f001 fd5e 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a81      	ldr	r2, [pc, #516]	@ (8002890 <HAL_I2C_Init+0x274>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <HAL_I2C_Init+0x84>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a80      	ldr	r2, [pc, #512]	@ (8002894 <HAL_I2C_Init+0x278>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e006      	b.n	80026ae <HAL_I2C_Init+0x92>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002898 <HAL_I2C_Init+0x27c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0e7      	b.n	8002886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a78      	ldr	r2, [pc, #480]	@ (800289c <HAL_I2C_Init+0x280>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002890 <HAL_I2C_Init+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d802      	bhi.n	80026f0 <HAL_I2C_Init+0xd4>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	e009      	b.n	8002704 <HAL_I2C_Init+0xe8>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a69      	ldr	r2, [pc, #420]	@ (80028a0 <HAL_I2C_Init+0x284>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	3301      	adds	r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002716:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	495c      	ldr	r1, [pc, #368]	@ (8002890 <HAL_I2C_Init+0x274>)
 8002720:	428b      	cmp	r3, r1
 8002722:	d819      	bhi.n	8002758 <HAL_I2C_Init+0x13c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e59      	subs	r1, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_I2C_Init+0x138>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e59      	subs	r1, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fbb1 f3f3 	udiv	r3, r1, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	e051      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002754:	2304      	movs	r3, #4
 8002756:	e04f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <HAL_I2C_Init+0x168>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e012      	b.n	80027aa <HAL_I2C_Init+0x18e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x196>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e022      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <HAL_I2C_Init+0x1bc>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1e58      	subs	r0, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	440b      	add	r3, r1
 80027c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d6:	e00f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6809      	ldr	r1, [r1, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002826:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6911      	ldr	r1, [r2, #16]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	000186a0 	.word	0x000186a0
 8002894:	001e847f 	.word	0x001e847f
 8002898:	003d08ff 	.word	0x003d08ff
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af02      	add	r7, sp, #8
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	817b      	strh	r3, [r7, #10]
 80028b6:	460b      	mov	r3, r1
 80028b8:	813b      	strh	r3, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028be:	f7ff fbb3 	bl	8002028 <HAL_GetTick>
 80028c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b20      	cmp	r3, #32
 80028ce:	f040 80d9 	bne.w	8002a84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2319      	movs	r3, #25
 80028d8:	2201      	movs	r2, #1
 80028da:	496d      	ldr	r1, [pc, #436]	@ (8002a90 <HAL_I2C_Mem_Write+0x1ec>)
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f000 fc8b 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028e8:	2302      	movs	r3, #2
 80028ea:	e0cc      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_I2C_Mem_Write+0x56>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e0c5      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b01      	cmp	r3, #1
 800290e:	d007      	beq.n	8002920 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800292e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2221      	movs	r2, #33	@ 0x21
 8002934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2240      	movs	r2, #64	@ 0x40
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2200      	movs	r2, #0
 8002944:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a3a      	ldr	r2, [r7, #32]
 800294a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002950:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a4d      	ldr	r2, [pc, #308]	@ (8002a94 <HAL_I2C_Mem_Write+0x1f0>)
 8002960:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002962:	88f8      	ldrh	r0, [r7, #6]
 8002964:	893a      	ldrh	r2, [r7, #8]
 8002966:	8979      	ldrh	r1, [r7, #10]
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4603      	mov	r3, r0
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fac2 	bl	8002efc <I2C_RequestMemoryWrite>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d052      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e081      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fd50 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00d      	beq.n	80029ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	2b04      	cmp	r3, #4
 8002998:	d107      	bne.n	80029aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e06b      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	1c5a      	adds	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b29a      	uxth	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b04      	cmp	r3, #4
 80029ea:	d11b      	bne.n	8002a24 <HAL_I2C_Mem_Write+0x180>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d017      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	781a      	ldrb	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a04:	1c5a      	adds	r2, r3, #1
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d1aa      	bne.n	8002982 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fd43 	bl	80034bc <I2C_WaitOnBTFFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00d      	beq.n	8002a58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a40:	2b04      	cmp	r3, #4
 8002a42:	d107      	bne.n	8002a54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e016      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2220      	movs	r2, #32
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a80:	2300      	movs	r3, #0
 8002a82:	e000      	b.n	8002a86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a84:	2302      	movs	r3, #2
  }
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	00100002 	.word	0x00100002
 8002a94:	ffff0000 	.word	0xffff0000

08002a98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08c      	sub	sp, #48	@ 0x30
 8002a9c:	af02      	add	r7, sp, #8
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4611      	mov	r1, r2
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	817b      	strh	r3, [r7, #10]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	813b      	strh	r3, [r7, #8]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ab2:	f7ff fab9 	bl	8002028 <HAL_GetTick>
 8002ab6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	f040 8214 	bne.w	8002eee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	2319      	movs	r3, #25
 8002acc:	2201      	movs	r2, #1
 8002ace:	497b      	ldr	r1, [pc, #492]	@ (8002cbc <HAL_I2C_Mem_Read+0x224>)
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fb91 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002adc:	2302      	movs	r3, #2
 8002ade:	e207      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_I2C_Mem_Read+0x56>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e200      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d007      	beq.n	8002b14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2222      	movs	r2, #34	@ 0x22
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	4a5b      	ldr	r2, [pc, #364]	@ (8002cc0 <HAL_I2C_Mem_Read+0x228>)
 8002b54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b56:	88f8      	ldrh	r0, [r7, #6]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	4603      	mov	r3, r0
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fa5e 	bl	8003028 <I2C_RequestMemoryRead>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e1bc      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d113      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	623b      	str	r3, [r7, #32]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	623b      	str	r3, [r7, #32]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	623b      	str	r3, [r7, #32]
 8002b92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e190      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d11b      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	699b      	ldr	r3, [r3, #24]
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	e170      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d11b      	bne.n	8002c26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61bb      	str	r3, [r7, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	61bb      	str	r3, [r7, #24]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	61bb      	str	r3, [r7, #24]
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	e150      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c3c:	e144      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	f200 80f1 	bhi.w	8002e2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d123      	bne.n	8002c98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c54:	68f8      	ldr	r0, [r7, #12]
 8002c56:	f000 fc79 	bl	800354c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e145      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691a      	ldr	r2, [r3, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	b2d2      	uxtb	r2, r2
 8002c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c96:	e117      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d14e      	bne.n	8002d3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	4906      	ldr	r1, [pc, #24]	@ (8002cc4 <HAL_I2C_Mem_Read+0x22c>)
 8002caa:	68f8      	ldr	r0, [r7, #12]
 8002cac:	f000 faa4 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e11a      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
 8002cba:	bf00      	nop
 8002cbc:	00100002 	.word	0x00100002
 8002cc0:	ffff0000 	.word	0xffff0000
 8002cc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	b2d2      	uxtb	r2, r2
 8002ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	1c5a      	adds	r2, r3, #1
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	3b01      	subs	r3, #1
 8002d36:	b29a      	uxth	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d3c:	e0c4      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d44:	2200      	movs	r2, #0
 8002d46:	496c      	ldr	r1, [pc, #432]	@ (8002ef8 <HAL_I2C_Mem_Read+0x460>)
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fa55 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0cb      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	691a      	ldr	r2, [r3, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d72:	b2d2      	uxtb	r2, r2
 8002d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7a:	1c5a      	adds	r2, r3, #1
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29a      	uxth	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	3b01      	subs	r3, #1
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da0:	2200      	movs	r2, #0
 8002da2:	4955      	ldr	r1, [pc, #340]	@ (8002ef8 <HAL_I2C_Mem_Read+0x460>)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 fa27 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e09d      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691a      	ldr	r2, [r3, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	3b01      	subs	r3, #1
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e28:	e04e      	b.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fb8c 	bl	800354c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e058      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691a      	ldr	r2, [r3, #16]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	1c5a      	adds	r2, r3, #1
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	f003 0304 	and.w	r3, r3, #4
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d124      	bne.n	8002ec8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d107      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e94:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	b29a      	uxth	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f47f aeb6 	bne.w	8002c3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e000      	b.n	8002ef0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002eee:	2302      	movs	r3, #2
  }
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3728      	adds	r7, #40	@ 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	00010004 	.word	0x00010004

08002efc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	817b      	strh	r3, [r7, #10]
 8002f0e:	460b      	mov	r3, r1
 8002f10:	813b      	strh	r3, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f24:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f960 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f4c:	d103      	bne.n	8002f56 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f54:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e05f      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f5a:	897b      	ldrh	r3, [r7, #10]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f68:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	6a3a      	ldr	r2, [r7, #32]
 8002f6e:	492d      	ldr	r1, [pc, #180]	@ (8003024 <I2C_RequestMemoryWrite+0x128>)
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 f9bb 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d001      	beq.n	8002f80 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e04c      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fa46 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00d      	beq.n	8002fc2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d107      	bne.n	8002fbe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fbc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e02b      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fc2:	88fb      	ldrh	r3, [r7, #6]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d105      	bne.n	8002fd4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fc8:	893b      	ldrh	r3, [r7, #8]
 8002fca:	b2da      	uxtb	r2, r3
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	611a      	str	r2, [r3, #16]
 8002fd2:	e021      	b.n	8003018 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fd4:	893b      	ldrh	r3, [r7, #8]
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 fa20 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00d      	beq.n	800300e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d107      	bne.n	800300a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003008:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e005      	b.n	800301a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800300e:	893b      	ldrh	r3, [r7, #8]
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	00010002 	.word	0x00010002

08003028 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003050:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003060:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2200      	movs	r2, #0
 800306a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f8c2 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00d      	beq.n	8003096 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003084:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003088:	d103      	bne.n	8003092 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003090:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e0aa      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003096:	897b      	ldrh	r3, [r7, #10]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	6a3a      	ldr	r2, [r7, #32]
 80030aa:	4952      	ldr	r1, [pc, #328]	@ (80031f4 <I2C_RequestMemoryRead+0x1cc>)
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f000 f91d 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e097      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d4:	6a39      	ldr	r1, [r7, #32]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f9a8 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00d      	beq.n	80030fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d107      	bne.n	80030fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e076      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d105      	bne.n	8003110 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003104:	893b      	ldrh	r3, [r7, #8]
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	611a      	str	r2, [r3, #16]
 800310e:	e021      	b.n	8003154 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003110:	893b      	ldrh	r3, [r7, #8]
 8003112:	0a1b      	lsrs	r3, r3, #8
 8003114:	b29b      	uxth	r3, r3
 8003116:	b2da      	uxtb	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003120:	6a39      	ldr	r1, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f982 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00d      	beq.n	800314a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003132:	2b04      	cmp	r3, #4
 8003134:	d107      	bne.n	8003146 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003144:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e050      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800314a:	893b      	ldrh	r3, [r7, #8]
 800314c:	b2da      	uxtb	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003154:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003156:	6a39      	ldr	r1, [r7, #32]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 f967 	bl	800342c <I2C_WaitOnTXEFlagUntilTimeout>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003168:	2b04      	cmp	r3, #4
 800316a:	d107      	bne.n	800317c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800317a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e035      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800318e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	2200      	movs	r2, #0
 8003198:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 f82b 	bl	80031f8 <I2C_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031b6:	d103      	bne.n	80031c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e013      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80031c4:	897b      	ldrh	r3, [r7, #10]
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d6:	6a3a      	ldr	r2, [r7, #32]
 80031d8:	4906      	ldr	r1, [pc, #24]	@ (80031f4 <I2C_RequestMemoryRead+0x1cc>)
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f886 	bl	80032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	00010002 	.word	0x00010002

080031f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	4613      	mov	r3, r2
 8003206:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003208:	e048      	b.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d044      	beq.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003212:	f7fe ff09 	bl	8002028 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	429a      	cmp	r2, r3
 8003220:	d302      	bcc.n	8003228 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d139      	bne.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10d      	bne.n	800324e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	43da      	mvns	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	e00c      	b.n	8003268 <I2C_WaitOnFlagUntilTimeout+0x70>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	43da      	mvns	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4013      	ands	r3, r2
 800325a:	b29b      	uxth	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	79fb      	ldrb	r3, [r7, #7]
 800326a:	429a      	cmp	r2, r3
 800326c:	d116      	bne.n	800329c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e023      	b.n	80032e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	0c1b      	lsrs	r3, r3, #16
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d10d      	bne.n	80032c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4013      	ands	r3, r2
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf0c      	ite	eq
 80032b8:	2301      	moveq	r3, #1
 80032ba:	2300      	movne	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	e00c      	b.n	80032dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	43da      	mvns	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4013      	ands	r3, r2
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	bf0c      	ite	eq
 80032d4:	2301      	moveq	r3, #1
 80032d6:	2300      	movne	r3, #0
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	461a      	mov	r2, r3
 80032dc:	79fb      	ldrb	r3, [r7, #7]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d093      	beq.n	800320a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
 80032f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032fa:	e071      	b.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d123      	bne.n	8003354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800331a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003324:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2220      	movs	r2, #32
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	f043 0204 	orr.w	r2, r3, #4
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e067      	b.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d041      	beq.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7fe fe64 	bl	8002028 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d136      	bne.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b01      	cmp	r3, #1
 800337a:	d10c      	bne.n	8003396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	43da      	mvns	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4013      	ands	r3, r2
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	e00b      	b.n	80033ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	43da      	mvns	r2, r3
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	4013      	ands	r3, r2
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	bf14      	ite	ne
 80033a8:	2301      	movne	r3, #1
 80033aa:	2300      	moveq	r3, #0
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e021      	b.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10c      	bne.n	8003404 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	e00b      	b.n	800341c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	f47f af6d 	bne.w	80032fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003438:	e034      	b.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8e3 	bl	8003606 <I2C_IsAcknowledgeFailed>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e034      	b.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d028      	beq.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fe fde9 	bl	8002028 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d11d      	bne.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	695b      	ldr	r3, [r3, #20]
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	2b80      	cmp	r3, #128	@ 0x80
 8003474:	d016      	beq.n	80034a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	f043 0220 	orr.w	r2, r3, #32
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e007      	b.n	80034b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ae:	2b80      	cmp	r3, #128	@ 0x80
 80034b0:	d1c3      	bne.n	800343a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034c8:	e034      	b.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 f89b 	bl	8003606 <I2C_IsAcknowledgeFailed>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e034      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d028      	beq.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e2:	f7fe fda1 	bl	8002028 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d302      	bcc.n	80034f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11d      	bne.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b04      	cmp	r3, #4
 8003504:	d016      	beq.n	8003534 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	f043 0220 	orr.w	r2, r3, #32
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e007      	b.n	8003544 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b04      	cmp	r3, #4
 8003540:	d1c3      	bne.n	80034ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003558:	e049      	b.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b10      	cmp	r3, #16
 8003566:	d119      	bne.n	800359c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0210 	mvn.w	r2, #16
 8003570:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e030      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359c:	f7fe fd44 	bl	8002028 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d302      	bcc.n	80035b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11d      	bne.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035bc:	2b40      	cmp	r3, #64	@ 0x40
 80035be:	d016      	beq.n	80035ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e007      	b.n	80035fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f8:	2b40      	cmp	r3, #64	@ 0x40
 80035fa:	d1ae      	bne.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003606:	b480      	push	{r7}
 8003608:	b083      	sub	sp, #12
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800361c:	d11b      	bne.n	8003656 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003626:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	f043 0204 	orr.w	r2, r3, #4
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e000      	b.n	8003658 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
	...

08003664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e31d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4b94      	ldr	r3, [pc, #592]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	4b91      	ldr	r3, [pc, #580]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003688:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b00      	cmp	r3, #0
 8003694:	d07b      	beq.n	800378e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d006      	beq.n	80036aa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b0c      	cmp	r3, #12
 80036a0:	d10f      	bne.n	80036c2 <HAL_RCC_OscConfig+0x5e>
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036a8:	d10b      	bne.n	80036c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036aa:	4b87      	ldr	r3, [pc, #540]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d06a      	beq.n	800378c <HAL_RCC_OscConfig+0x128>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d166      	bne.n	800378c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e2f7      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d106      	bne.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036ca:	4b7f      	ldr	r3, [pc, #508]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a7e      	ldr	r2, [pc, #504]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80036d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	e02d      	b.n	8003734 <HAL_RCC_OscConfig+0xd0>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10c      	bne.n	80036fa <HAL_RCC_OscConfig+0x96>
 80036e0:	4b79      	ldr	r3, [pc, #484]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a78      	ldr	r2, [pc, #480]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80036e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036ea:	6013      	str	r3, [r2, #0]
 80036ec:	4b76      	ldr	r3, [pc, #472]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a75      	ldr	r2, [pc, #468]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80036f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	e01c      	b.n	8003734 <HAL_RCC_OscConfig+0xd0>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b05      	cmp	r3, #5
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0xb8>
 8003702:	4b71      	ldr	r3, [pc, #452]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a70      	ldr	r2, [pc, #448]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b6e      	ldr	r3, [pc, #440]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6d      	ldr	r2, [pc, #436]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0xd0>
 800371c:	4b6a      	ldr	r3, [pc, #424]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a69      	ldr	r2, [pc, #420]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b67      	ldr	r3, [pc, #412]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a66      	ldr	r2, [pc, #408]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 800372e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe fc74 	bl	8002028 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe fc70 	bl	8002028 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	@ 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e2ad      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003756:	4b5c      	ldr	r3, [pc, #368]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0xe0>
 8003762:	e014      	b.n	800378e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fc60 	bl	8002028 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376c:	f7fe fc5c 	bl	8002028 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	@ 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e299      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800377e:	4b52      	ldr	r3, [pc, #328]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x108>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d05a      	beq.n	8003850 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d005      	beq.n	80037ac <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d119      	bne.n	80037da <HAL_RCC_OscConfig+0x176>
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d116      	bne.n	80037da <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ac:	4b46      	ldr	r3, [pc, #280]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d005      	beq.n	80037c4 <HAL_RCC_OscConfig+0x160>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e276      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c4:	4b40      	ldr	r3, [pc, #256]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	021b      	lsls	r3, r3, #8
 80037d2:	493d      	ldr	r1, [pc, #244]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037d8:	e03a      	b.n	8003850 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d020      	beq.n	8003824 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037e2:	4b3a      	ldr	r3, [pc, #232]	@ (80038cc <HAL_RCC_OscConfig+0x268>)
 80037e4:	2201      	movs	r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe fc1e 	bl	8002028 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037f0:	f7fe fc1a 	bl	8002028 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e257      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003802:	4b31      	ldr	r3, [pc, #196]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380e:	4b2e      	ldr	r3, [pc, #184]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	492a      	ldr	r1, [pc, #168]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
 8003822:	e015      	b.n	8003850 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003824:	4b29      	ldr	r3, [pc, #164]	@ (80038cc <HAL_RCC_OscConfig+0x268>)
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe fbfd 	bl	8002028 <HAL_GetTick>
 800382e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003830:	e008      	b.n	8003844 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003832:	f7fe fbf9 	bl	8002028 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	2b02      	cmp	r3, #2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e236      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003844:	4b20      	ldr	r3, [pc, #128]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f0      	bne.n	8003832 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80b8 	beq.w	80039ce <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d170      	bne.n	8003946 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003864:	4b18      	ldr	r3, [pc, #96]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800386c:	2b00      	cmp	r3, #0
 800386e:	d005      	beq.n	800387c <HAL_RCC_OscConfig+0x218>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e21a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1a      	ldr	r2, [r3, #32]
 8003880:	4b11      	ldr	r3, [pc, #68]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8003888:	429a      	cmp	r2, r3
 800388a:	d921      	bls.n	80038d0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fc7d 	bl	8004190 <RCC_SetFlashLatencyFromMSIRange>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e208      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038a0:	4b09      	ldr	r3, [pc, #36]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a1b      	ldr	r3, [r3, #32]
 80038ac:	4906      	ldr	r1, [pc, #24]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038b2:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	69db      	ldr	r3, [r3, #28]
 80038be:	061b      	lsls	r3, r3, #24
 80038c0:	4901      	ldr	r1, [pc, #4]	@ (80038c8 <HAL_RCC_OscConfig+0x264>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
 80038c6:	e020      	b.n	800390a <HAL_RCC_OscConfig+0x2a6>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038d0:	4b99      	ldr	r3, [pc, #612]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	4996      	ldr	r1, [pc, #600]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038e2:	4b95      	ldr	r3, [pc, #596]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	69db      	ldr	r3, [r3, #28]
 80038ee:	061b      	lsls	r3, r3, #24
 80038f0:	4991      	ldr	r1, [pc, #580]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fc48 	bl	8004190 <RCC_SetFlashLatencyFromMSIRange>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e1d3      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a1b      	ldr	r3, [r3, #32]
 800390e:	0b5b      	lsrs	r3, r3, #13
 8003910:	3301      	adds	r3, #1
 8003912:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800391a:	4a87      	ldr	r2, [pc, #540]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 800391c:	6892      	ldr	r2, [r2, #8]
 800391e:	0912      	lsrs	r2, r2, #4
 8003920:	f002 020f 	and.w	r2, r2, #15
 8003924:	4985      	ldr	r1, [pc, #532]	@ (8003b3c <HAL_RCC_OscConfig+0x4d8>)
 8003926:	5c8a      	ldrb	r2, [r1, r2]
 8003928:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800392a:	4a85      	ldr	r2, [pc, #532]	@ (8003b40 <HAL_RCC_OscConfig+0x4dc>)
 800392c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800392e:	4b85      	ldr	r3, [pc, #532]	@ (8003b44 <HAL_RCC_OscConfig+0x4e0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f7fe fb2c 	bl	8001f90 <HAL_InitTick>
 8003938:	4603      	mov	r3, r0
 800393a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d045      	beq.n	80039ce <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	e1b5      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d029      	beq.n	80039a2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800394e:	4b7e      	ldr	r3, [pc, #504]	@ (8003b48 <HAL_RCC_OscConfig+0x4e4>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe fb68 	bl	8002028 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800395c:	f7fe fb64 	bl	8002028 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e1a1      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800396e:	4b72      	ldr	r3, [pc, #456]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800397a:	4b6f      	ldr	r3, [pc, #444]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	496c      	ldr	r1, [pc, #432]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003988:	4313      	orrs	r3, r2
 800398a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800398c:	4b6a      	ldr	r3, [pc, #424]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	061b      	lsls	r3, r3, #24
 800399a:	4967      	ldr	r1, [pc, #412]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 800399c:	4313      	orrs	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
 80039a0:	e015      	b.n	80039ce <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80039a2:	4b69      	ldr	r3, [pc, #420]	@ (8003b48 <HAL_RCC_OscConfig+0x4e4>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a8:	f7fe fb3e 	bl	8002028 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80039b0:	f7fe fb3a 	bl	8002028 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e177      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80039c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f0      	bne.n	80039b0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0308 	and.w	r3, r3, #8
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d030      	beq.n	8003a3c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d016      	beq.n	8003a10 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039e2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b4c <HAL_RCC_OscConfig+0x4e8>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e8:	f7fe fb1e 	bl	8002028 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f0:	f7fe fb1a 	bl	8002028 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e157      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003a02:	4b4d      	ldr	r3, [pc, #308]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x38c>
 8003a0e:	e015      	b.n	8003a3c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a10:	4b4e      	ldr	r3, [pc, #312]	@ (8003b4c <HAL_RCC_OscConfig+0x4e8>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe fb07 	bl	8002028 <HAL_GetTick>
 8003a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a1c:	e008      	b.n	8003a30 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a1e:	f7fe fb03 	bl	8002028 <HAL_GetTick>
 8003a22:	4602      	mov	r2, r0
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e140      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003a30:	4b41      	ldr	r3, [pc, #260]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 80b5 	beq.w	8003bb4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10d      	bne.n	8003a76 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b37      	ldr	r3, [pc, #220]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5e:	4a36      	ldr	r2, [pc, #216]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a64:	6253      	str	r3, [r2, #36]	@ 0x24
 8003a66:	4b34      	ldr	r3, [pc, #208]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	4b36      	ldr	r3, [pc, #216]	@ (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a82:	4b33      	ldr	r3, [pc, #204]	@ (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a32      	ldr	r2, [pc, #200]	@ (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7fe facb 	bl	8002028 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7fe fac7 	bl	8002028 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b64      	cmp	r3, #100	@ 0x64
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e104      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aa8:	4b29      	ldr	r3, [pc, #164]	@ (8003b50 <HAL_RCC_OscConfig+0x4ec>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d106      	bne.n	8003aca <HAL_RCC_OscConfig+0x466>
 8003abc:	4b1e      	ldr	r3, [pc, #120]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003ac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ac6:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ac8:	e02d      	b.n	8003b26 <HAL_RCC_OscConfig+0x4c2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCC_OscConfig+0x488>
 8003ad2:	4b19      	ldr	r3, [pc, #100]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003ad4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad6:	4a18      	ldr	r2, [pc, #96]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003adc:	6353      	str	r3, [r2, #52]	@ 0x34
 8003ade:	4b16      	ldr	r3, [pc, #88]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ae2:	4a15      	ldr	r2, [pc, #84]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003ae4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ae8:	6353      	str	r3, [r2, #52]	@ 0x34
 8003aea:	e01c      	b.n	8003b26 <HAL_RCC_OscConfig+0x4c2>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d10c      	bne.n	8003b0e <HAL_RCC_OscConfig+0x4aa>
 8003af4:	4b10      	ldr	r3, [pc, #64]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003af8:	4a0f      	ldr	r2, [pc, #60]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003afa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003afe:	6353      	str	r3, [r2, #52]	@ 0x34
 8003b00:	4b0d      	ldr	r3, [pc, #52]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b04:	4a0c      	ldr	r2, [pc, #48]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0a:	6353      	str	r3, [r2, #52]	@ 0x34
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCC_OscConfig+0x4c2>
 8003b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003b10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b12:	4a09      	ldr	r2, [pc, #36]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b18:	6353      	str	r3, [r2, #52]	@ 0x34
 8003b1a:	4b07      	ldr	r3, [pc, #28]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b1e:	4a06      	ldr	r2, [pc, #24]	@ (8003b38 <HAL_RCC_OscConfig+0x4d4>)
 8003b20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b24:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d024      	beq.n	8003b78 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b2e:	f7fe fa7b 	bl	8002028 <HAL_GetTick>
 8003b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b34:	e019      	b.n	8003b6a <HAL_RCC_OscConfig+0x506>
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	08009594 	.word	0x08009594
 8003b40:	20000004 	.word	0x20000004
 8003b44:	20000008 	.word	0x20000008
 8003b48:	42470020 	.word	0x42470020
 8003b4c:	42470680 	.word	0x42470680
 8003b50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b54:	f7fe fa68 	bl	8002028 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e0a3      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b6a:	4b54      	ldr	r3, [pc, #336]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0ee      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4f0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7fe fa56 	bl	8002028 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b7e:	e00a      	b.n	8003b96 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b80:	f7fe fa52 	bl	8002028 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e08d      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b96:	4b49      	ldr	r3, [pc, #292]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003b98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1ee      	bne.n	8003b80 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ba2:	7ffb      	ldrb	r3, [r7, #31]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b44      	ldr	r3, [pc, #272]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	4a43      	ldr	r2, [pc, #268]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bb2:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d079      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d056      	beq.n	8003c70 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d13b      	bne.n	8003c42 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bca:	4b3d      	ldr	r3, [pc, #244]	@ (8003cc0 <HAL_RCC_OscConfig+0x65c>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd0:	f7fe fa2a 	bl	8002028 <HAL_GetTick>
 8003bd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bd8:	f7fe fa26 	bl	8002028 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e063      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bea:	4b34      	ldr	r3, [pc, #208]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1f0      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bf6:	4b31      	ldr	r3, [pc, #196]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c06:	4319      	orrs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	492b      	ldr	r1, [pc, #172]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c14:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc0 <HAL_RCC_OscConfig+0x65c>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1a:	f7fe fa05 	bl	8002028 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c22:	f7fe fa01 	bl	8002028 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e03e      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c34:	4b21      	ldr	r3, [pc, #132]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x5be>
 8003c40:	e036      	b.n	8003cb0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c42:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc0 <HAL_RCC_OscConfig+0x65c>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fe f9ee 	bl	8002028 <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c50:	f7fe f9ea 	bl	8002028 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e027      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c62:	4b16      	ldr	r3, [pc, #88]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f0      	bne.n	8003c50 <HAL_RCC_OscConfig+0x5ec>
 8003c6e:	e01f      	b.n	8003cb0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e01a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003cbc <HAL_RCC_OscConfig+0x658>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d10d      	bne.n	8003cac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	42470060 	.word	0x42470060

08003cc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e11a      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d919      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d105      	bne.n	8003cf8 <HAL_RCC_ClockConfig+0x34>
 8003cec:	4b8a      	ldr	r3, [pc, #552]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a89      	ldr	r2, [pc, #548]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003cf2:	f043 0304 	orr.w	r3, r3, #4
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	4b87      	ldr	r3, [pc, #540]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f023 0201 	bic.w	r2, r3, #1
 8003d00:	4985      	ldr	r1, [pc, #532]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d08:	4b83      	ldr	r3, [pc, #524]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 0301 	and.w	r3, r3, #1
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e0f9      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0302 	and.w	r3, r3, #2
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d26:	4b7d      	ldr	r3, [pc, #500]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	497a      	ldr	r1, [pc, #488]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 808e 	beq.w	8003e62 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d107      	bne.n	8003d5e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d4e:	4b73      	ldr	r3, [pc, #460]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d121      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0d7      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	d107      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003d66:	4b6d      	ldr	r3, [pc, #436]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d115      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0cb      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003d7e:	4b67      	ldr	r3, [pc, #412]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d109      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e0bf      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003d8e:	4b63      	ldr	r3, [pc, #396]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0b7      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f023 0203 	bic.w	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	495c      	ldr	r1, [pc, #368]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003db0:	f7fe f93a 	bl	8002028 <HAL_GetTick>
 8003db4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d112      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dbe:	e00a      	b.n	8003dd6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f7fe f932 	bl	8002028 <HAL_GetTick>
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	1ad3      	subs	r3, r2, r3
 8003dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e09b      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dd6:	4b51      	ldr	r3, [pc, #324]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d1ee      	bne.n	8003dc0 <HAL_RCC_ClockConfig+0xfc>
 8003de2:	e03e      	b.n	8003e62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	2b03      	cmp	r3, #3
 8003dea:	d112      	bne.n	8003e12 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dec:	e00a      	b.n	8003e04 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dee:	f7fe f91b 	bl	8002028 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e084      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e04:	4b45      	ldr	r3, [pc, #276]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b0c      	cmp	r3, #12
 8003e0e:	d1ee      	bne.n	8003dee <HAL_RCC_ClockConfig+0x12a>
 8003e10:	e027      	b.n	8003e62 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d11d      	bne.n	8003e56 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe f904 	bl	8002028 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e06d      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e32:	4b3a      	ldr	r3, [pc, #232]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_RCC_ClockConfig+0x158>
 8003e3e:	e010      	b.n	8003e62 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e40:	f7fe f8f2 	bl	8002028 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e05b      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003e56:	4b31      	ldr	r3, [pc, #196]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1ee      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e62:	4b2d      	ldr	r3, [pc, #180]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	683a      	ldr	r2, [r7, #0]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d219      	bcs.n	8003ea4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d105      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x1be>
 8003e76:	4b28      	ldr	r3, [pc, #160]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a27      	ldr	r2, [pc, #156]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	4b25      	ldr	r3, [pc, #148]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 0201 	bic.w	r2, r3, #1
 8003e8a:	4923      	ldr	r1, [pc, #140]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b21      	ldr	r3, [pc, #132]	@ (8003f18 <HAL_RCC_ClockConfig+0x254>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0301 	and.w	r3, r3, #1
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e034      	b.n	8003f0e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	4917      	ldr	r1, [pc, #92]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d009      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ece:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	490f      	ldr	r1, [pc, #60]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ee2:	f000 f823 	bl	8003f2c <HAL_RCC_GetSysClockFreq>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f1c <HAL_RCC_ClockConfig+0x258>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f003 030f 	and.w	r3, r3, #15
 8003ef2:	490b      	ldr	r1, [pc, #44]	@ (8003f20 <HAL_RCC_ClockConfig+0x25c>)
 8003ef4:	5ccb      	ldrb	r3, [r1, r3]
 8003ef6:	fa22 f303 	lsr.w	r3, r2, r3
 8003efa:	4a0a      	ldr	r2, [pc, #40]	@ (8003f24 <HAL_RCC_ClockConfig+0x260>)
 8003efc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003efe:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_RCC_ClockConfig+0x264>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe f844 	bl	8001f90 <HAL_InitTick>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	72fb      	strb	r3, [r7, #11]

  return status;
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	40023c00 	.word	0x40023c00
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	08009594 	.word	0x08009594
 8003f24:	20000004 	.word	0x20000004
 8003f28:	20000008 	.word	0x20000008

08003f2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f30:	b092      	sub	sp, #72	@ 0x48
 8003f32:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003f34:	4b79      	ldr	r3, [pc, #484]	@ (800411c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b0c      	cmp	r3, #12
 8003f42:	d00d      	beq.n	8003f60 <HAL_RCC_GetSysClockFreq+0x34>
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	f200 80d5 	bhi.w	80040f4 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d002      	beq.n	8003f54 <HAL_RCC_GetSysClockFreq+0x28>
 8003f4e:	2b08      	cmp	r3, #8
 8003f50:	d003      	beq.n	8003f5a <HAL_RCC_GetSysClockFreq+0x2e>
 8003f52:	e0cf      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f54:	4b72      	ldr	r3, [pc, #456]	@ (8004120 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003f56:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003f58:	e0da      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f5a:	4b72      	ldr	r3, [pc, #456]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003f5c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003f5e:	e0d7      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	f003 020f 	and.w	r2, r3, #15
 8003f68:	4b6f      	ldr	r3, [pc, #444]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003f6a:	5c9b      	ldrb	r3, [r3, r2]
 8003f6c:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f70:	0d9b      	lsrs	r3, r3, #22
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	3301      	adds	r3, #1
 8003f78:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f7a:	4b68      	ldr	r3, [pc, #416]	@ (800411c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d05d      	beq.n	8004042 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f88:	2200      	movs	r2, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4611      	mov	r1, r2
 8003f8e:	4604      	mov	r4, r0
 8003f90:	460d      	mov	r5, r1
 8003f92:	4622      	mov	r2, r4
 8003f94:	462b      	mov	r3, r5
 8003f96:	f04f 0000 	mov.w	r0, #0
 8003f9a:	f04f 0100 	mov.w	r1, #0
 8003f9e:	0159      	lsls	r1, r3, #5
 8003fa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa4:	0150      	lsls	r0, r2, #5
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	460b      	mov	r3, r1
 8003faa:	4621      	mov	r1, r4
 8003fac:	1a51      	subs	r1, r2, r1
 8003fae:	6139      	str	r1, [r7, #16]
 8003fb0:	4629      	mov	r1, r5
 8003fb2:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003fc4:	4659      	mov	r1, fp
 8003fc6:	018b      	lsls	r3, r1, #6
 8003fc8:	4651      	mov	r1, sl
 8003fca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fce:	4651      	mov	r1, sl
 8003fd0:	018a      	lsls	r2, r1, #6
 8003fd2:	46d4      	mov	ip, sl
 8003fd4:	ebb2 080c 	subs.w	r8, r2, ip
 8003fd8:	4659      	mov	r1, fp
 8003fda:	eb63 0901 	sbc.w	r9, r3, r1
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff2:	4690      	mov	r8, r2
 8003ff4:	4699      	mov	r9, r3
 8003ff6:	4623      	mov	r3, r4
 8003ff8:	eb18 0303 	adds.w	r3, r8, r3
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	462b      	mov	r3, r5
 8004000:	eb49 0303 	adc.w	r3, r9, r3
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004012:	4629      	mov	r1, r5
 8004014:	024b      	lsls	r3, r1, #9
 8004016:	4620      	mov	r0, r4
 8004018:	4629      	mov	r1, r5
 800401a:	4604      	mov	r4, r0
 800401c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004020:	4601      	mov	r1, r0
 8004022:	024a      	lsls	r2, r1, #9
 8004024:	4610      	mov	r0, r2
 8004026:	4619      	mov	r1, r3
 8004028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402a:	2200      	movs	r2, #0
 800402c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800402e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004030:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004034:	f7fd f80e 	bl	8001054 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004040:	e055      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004044:	2200      	movs	r2, #0
 8004046:	623b      	str	r3, [r7, #32]
 8004048:	627a      	str	r2, [r7, #36]	@ 0x24
 800404a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800404e:	4642      	mov	r2, r8
 8004050:	464b      	mov	r3, r9
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	0159      	lsls	r1, r3, #5
 800405c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004060:	0150      	lsls	r0, r2, #5
 8004062:	4602      	mov	r2, r0
 8004064:	460b      	mov	r3, r1
 8004066:	46c4      	mov	ip, r8
 8004068:	ebb2 0a0c 	subs.w	sl, r2, ip
 800406c:	4640      	mov	r0, r8
 800406e:	4649      	mov	r1, r9
 8004070:	468c      	mov	ip, r1
 8004072:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004082:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004086:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800408a:	ebb2 040a 	subs.w	r4, r2, sl
 800408e:	eb63 050b 	sbc.w	r5, r3, fp
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	00eb      	lsls	r3, r5, #3
 800409c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040a0:	00e2      	lsls	r2, r4, #3
 80040a2:	4614      	mov	r4, r2
 80040a4:	461d      	mov	r5, r3
 80040a6:	4603      	mov	r3, r0
 80040a8:	18e3      	adds	r3, r4, r3
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	460b      	mov	r3, r1
 80040ae:	eb45 0303 	adc.w	r3, r5, r3
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040c0:	4629      	mov	r1, r5
 80040c2:	028b      	lsls	r3, r1, #10
 80040c4:	4620      	mov	r0, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	4604      	mov	r4, r0
 80040ca:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80040ce:	4601      	mov	r1, r0
 80040d0:	028a      	lsls	r2, r1, #10
 80040d2:	4610      	mov	r0, r2
 80040d4:	4619      	mov	r1, r3
 80040d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d8:	2200      	movs	r2, #0
 80040da:	61bb      	str	r3, [r7, #24]
 80040dc:	61fa      	str	r2, [r7, #28]
 80040de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e2:	f7fc ffb7 	bl	8001054 <__aeabi_uldivmod>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4613      	mov	r3, r2
 80040ec:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 80040ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f0:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 80040f2:	e00d      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80040f4:	4b09      	ldr	r3, [pc, #36]	@ (800411c <HAL_RCC_GetSysClockFreq+0x1f0>)
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	0b5b      	lsrs	r3, r3, #13
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004102:	3301      	adds	r3, #1
 8004104:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800410e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004112:	4618      	mov	r0, r3
 8004114:	3748      	adds	r7, #72	@ 0x48
 8004116:	46bd      	mov	sp, r7
 8004118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	00f42400 	.word	0x00f42400
 8004124:	007a1200 	.word	0x007a1200
 8004128:	08009588 	.word	0x08009588

0800412c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004130:	4b02      	ldr	r3, [pc, #8]	@ (800413c <HAL_RCC_GetHCLKFreq+0x10>)
 8004132:	681b      	ldr	r3, [r3, #0]
}
 8004134:	4618      	mov	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	20000004 	.word	0x20000004

08004140 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004144:	f7ff fff2 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004148:	4602      	mov	r2, r0
 800414a:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_RCC_GetPCLK1Freq+0x20>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	0a1b      	lsrs	r3, r3, #8
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	4903      	ldr	r1, [pc, #12]	@ (8004164 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004156:	5ccb      	ldrb	r3, [r1, r3]
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	bd80      	pop	{r7, pc}
 8004160:	40023800 	.word	0x40023800
 8004164:	080095a4 	.word	0x080095a4

08004168 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800416c:	f7ff ffde 	bl	800412c <HAL_RCC_GetHCLKFreq>
 8004170:	4602      	mov	r2, r0
 8004172:	4b05      	ldr	r3, [pc, #20]	@ (8004188 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	0adb      	lsrs	r3, r3, #11
 8004178:	f003 0307 	and.w	r3, r3, #7
 800417c:	4903      	ldr	r1, [pc, #12]	@ (800418c <HAL_RCC_GetPCLK2Freq+0x24>)
 800417e:	5ccb      	ldrb	r3, [r1, r3]
 8004180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004184:	4618      	mov	r0, r3
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40023800 	.word	0x40023800
 800418c:	080095a4 	.word	0x080095a4

08004190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004190:	b480      	push	{r7}
 8004192:	b087      	sub	sp, #28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004198:	2300      	movs	r3, #0
 800419a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800419c:	4b29      	ldr	r3, [pc, #164]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d12c      	bne.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041a8:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80041aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80041b4:	4b24      	ldr	r3, [pc, #144]	@ (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	e016      	b.n	80041ee <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c0:	4b20      	ldr	r3, [pc, #128]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80041c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80041c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ca:	6253      	str	r3, [r2, #36]	@ 0x24
 80041cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80041d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004248 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80041e0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e2:	4b18      	ldr	r3, [pc, #96]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80041e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e6:	4a17      	ldr	r2, [pc, #92]	@ (8004244 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80041e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ec:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80041f4:	d105      	bne.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80041fc:	d101      	bne.n	8004202 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80041fe:	2301      	movs	r3, #1
 8004200:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004208:	4b10      	ldr	r3, [pc, #64]	@ (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a0f      	ldr	r2, [pc, #60]	@ (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800420e:	f043 0304 	orr.w	r3, r3, #4
 8004212:	6013      	str	r3, [r2, #0]
 8004214:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f023 0201 	bic.w	r2, r3, #1
 800421c:	490b      	ldr	r1, [pc, #44]	@ (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004224:	4b09      	ldr	r3, [pc, #36]	@ (800424c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	429a      	cmp	r2, r3
 8004230:	d001      	beq.n	8004236 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	bc80      	pop	{r7}
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	40023800 	.word	0x40023800
 8004248:	40007000 	.word	0x40007000
 800424c:	40023c00 	.word	0x40023c00

08004250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e042      	b.n	80042e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fd0e 	bl	8001c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	@ 0x24
 8004280:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f971 	bl	800457c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3708      	adds	r7, #8
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	@ 0x28
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	603b      	str	r3, [r7, #0]
 80042fc:	4613      	mov	r3, r2
 80042fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b20      	cmp	r3, #32
 800430e:	d175      	bne.n	80043fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Transmit+0x2c>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e06e      	b.n	80043fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2221      	movs	r2, #33	@ 0x21
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800432e:	f7fd fe7b 	bl	8002028 <HAL_GetTick>
 8004332:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	88fa      	ldrh	r2, [r7, #6]
 8004338:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	88fa      	ldrh	r2, [r7, #6]
 800433e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004348:	d108      	bne.n	800435c <HAL_UART_Transmit+0x6c>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	61bb      	str	r3, [r7, #24]
 800435a:	e003      	b.n	8004364 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004360:	2300      	movs	r3, #0
 8004362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004364:	e02e      	b.n	80043c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	2200      	movs	r2, #0
 800436e:	2180      	movs	r1, #128	@ 0x80
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f848 	bl	8004406 <UART_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d005      	beq.n	8004388 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e03a      	b.n	80043fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10b      	bne.n	80043a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	461a      	mov	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800439c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3302      	adds	r3, #2
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	e007      	b.n	80043b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	781a      	ldrb	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	3301      	adds	r3, #1
 80043b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1cb      	bne.n	8004366 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	2140      	movs	r1, #64	@ 0x40
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f814 	bl	8004406 <UART_WaitOnFlagUntilTimeout>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e006      	b.n	80043fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b086      	sub	sp, #24
 800440a:	af00      	add	r7, sp, #0
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	603b      	str	r3, [r7, #0]
 8004412:	4613      	mov	r3, r2
 8004414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004416:	e03b      	b.n	8004490 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441e:	d037      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004420:	f7fd fe02 	bl	8002028 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	6a3a      	ldr	r2, [r7, #32]
 800442c:	429a      	cmp	r2, r3
 800442e:	d302      	bcc.n	8004436 <UART_WaitOnFlagUntilTimeout+0x30>
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e03a      	b.n	80044b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d023      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b80      	cmp	r3, #128	@ 0x80
 800444c:	d020      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x8a>
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b40      	cmp	r3, #64	@ 0x40
 8004452:	d01d      	beq.n	8004490 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0308 	and.w	r3, r3, #8
 800445e:	2b08      	cmp	r3, #8
 8004460:	d116      	bne.n	8004490 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f000 f81d 	bl	80044b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2208      	movs	r2, #8
 8004482:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e00f      	b.n	80044b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	429a      	cmp	r2, r3
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	79fb      	ldrb	r3, [r7, #7]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d0b4      	beq.n	8004418 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b095      	sub	sp, #84	@ 0x54
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044ca:	e853 3f00 	ldrex	r3, [r3]
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	330c      	adds	r3, #12
 80044de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044e8:	e841 2300 	strex	r3, r2, [r1]
 80044ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1e5      	bne.n	80044c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	6a3b      	ldr	r3, [r7, #32]
 80044fe:	e853 3f00 	ldrex	r3, [r3]
 8004502:	61fb      	str	r3, [r7, #28]
   return(result);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	f023 0301 	bic.w	r3, r3, #1
 800450a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3314      	adds	r3, #20
 8004512:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004514:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800451a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e5      	bne.n	80044f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452c:	2b01      	cmp	r3, #1
 800452e:	d119      	bne.n	8004564 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f023 0310 	bic.w	r3, r3, #16
 8004546:	647b      	str	r3, [r7, #68]	@ 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004550:	61ba      	str	r2, [r7, #24]
 8004552:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6979      	ldr	r1, [r7, #20]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	613b      	str	r3, [r7, #16]
   return(result);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004572:	bf00      	nop
 8004574:	3754      	adds	r7, #84	@ 0x54
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	431a      	orrs	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80045bc:	f023 030c 	bic.w	r3, r3, #12
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	68b9      	ldr	r1, [r7, #8]
 80045c6:	430b      	orrs	r3, r1
 80045c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699a      	ldr	r2, [r3, #24]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	430a      	orrs	r2, r1
 80045de:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a55      	ldr	r2, [pc, #340]	@ (800473c <UART_SetConfig+0x1c0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d103      	bne.n	80045f2 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80045ea:	f7ff fdbd 	bl	8004168 <HAL_RCC_GetPCLK2Freq>
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	e002      	b.n	80045f8 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80045f2:	f7ff fda5 	bl	8004140 <HAL_RCC_GetPCLK1Freq>
 80045f6:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004600:	d14c      	bne.n	800469c <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4613      	mov	r3, r2
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	4413      	add	r3, r2
 800460a:	009a      	lsls	r2, r3, #2
 800460c:	441a      	add	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fbb2 f3f3 	udiv	r3, r2, r3
 8004618:	4a49      	ldr	r2, [pc, #292]	@ (8004740 <UART_SetConfig+0x1c4>)
 800461a:	fba2 2303 	umull	r2, r3, r2, r3
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	0119      	lsls	r1, r3, #4
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009a      	lsls	r2, r3, #2
 800462c:	441a      	add	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	fbb2 f2f3 	udiv	r2, r2, r3
 8004638:	4b41      	ldr	r3, [pc, #260]	@ (8004740 <UART_SetConfig+0x1c4>)
 800463a:	fba3 0302 	umull	r0, r3, r3, r2
 800463e:	095b      	lsrs	r3, r3, #5
 8004640:	2064      	movs	r0, #100	@ 0x64
 8004642:	fb00 f303 	mul.w	r3, r0, r3
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	3332      	adds	r3, #50	@ 0x32
 800464c:	4a3c      	ldr	r2, [pc, #240]	@ (8004740 <UART_SetConfig+0x1c4>)
 800464e:	fba2 2303 	umull	r2, r3, r2, r3
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800465a:	4419      	add	r1, r3
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	4613      	mov	r3, r2
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	009a      	lsls	r2, r3, #2
 8004666:	441a      	add	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004672:	4b33      	ldr	r3, [pc, #204]	@ (8004740 <UART_SetConfig+0x1c4>)
 8004674:	fba3 0302 	umull	r0, r3, r3, r2
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	2064      	movs	r0, #100	@ 0x64
 800467c:	fb00 f303 	mul.w	r3, r0, r3
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	3332      	adds	r3, #50	@ 0x32
 8004686:	4a2e      	ldr	r2, [pc, #184]	@ (8004740 <UART_SetConfig+0x1c4>)
 8004688:	fba2 2303 	umull	r2, r3, r2, r3
 800468c:	095b      	lsrs	r3, r3, #5
 800468e:	f003 0207 	and.w	r2, r3, #7
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	440a      	add	r2, r1
 8004698:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800469a:	e04a      	b.n	8004732 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	4613      	mov	r3, r2
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	4413      	add	r3, r2
 80046a4:	009a      	lsls	r2, r3, #2
 80046a6:	441a      	add	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b2:	4a23      	ldr	r2, [pc, #140]	@ (8004740 <UART_SetConfig+0x1c4>)
 80046b4:	fba2 2303 	umull	r2, r3, r2, r3
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	0119      	lsls	r1, r3, #4
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4613      	mov	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4413      	add	r3, r2
 80046c4:	009a      	lsls	r2, r3, #2
 80046c6:	441a      	add	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <UART_SetConfig+0x1c4>)
 80046d4:	fba3 0302 	umull	r0, r3, r3, r2
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	2064      	movs	r0, #100	@ 0x64
 80046dc:	fb00 f303 	mul.w	r3, r0, r3
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	011b      	lsls	r3, r3, #4
 80046e4:	3332      	adds	r3, #50	@ 0x32
 80046e6:	4a16      	ldr	r2, [pc, #88]	@ (8004740 <UART_SetConfig+0x1c4>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	095b      	lsrs	r3, r3, #5
 80046ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f2:	4419      	add	r1, r3
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	009a      	lsls	r2, r3, #2
 80046fe:	441a      	add	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	fbb2 f2f3 	udiv	r2, r2, r3
 800470a:	4b0d      	ldr	r3, [pc, #52]	@ (8004740 <UART_SetConfig+0x1c4>)
 800470c:	fba3 0302 	umull	r0, r3, r3, r2
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	2064      	movs	r0, #100	@ 0x64
 8004714:	fb00 f303 	mul.w	r3, r0, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	011b      	lsls	r3, r3, #4
 800471c:	3332      	adds	r3, #50	@ 0x32
 800471e:	4a08      	ldr	r2, [pc, #32]	@ (8004740 <UART_SetConfig+0x1c4>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	f003 020f 	and.w	r2, r3, #15
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	440a      	add	r2, r1
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	bf00      	nop
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40013800 	.word	0x40013800
 8004740:	51eb851f 	.word	0x51eb851f

08004744 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8004744:	b590      	push	{r4, r7, lr}
 8004746:	b087      	sub	sp, #28
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	461a      	mov	r2, r3
 8004750:	460b      	mov	r3, r1
 8004752:	72fb      	strb	r3, [r7, #11]
 8004754:	4613      	mov	r3, r2
 8004756:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <lsm6dso_read_reg+0x20>
 800475e:	f04f 33ff 	mov.w	r3, #4294967295
 8004762:	e009      	b.n	8004778 <lsm6dso_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	685c      	ldr	r4, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	68d8      	ldr	r0, [r3, #12]
 800476c:	893b      	ldrh	r3, [r7, #8]
 800476e:	7af9      	ldrb	r1, [r7, #11]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	47a0      	blx	r4
 8004774:	6178      	str	r0, [r7, #20]

  return ret;
 8004776:	697b      	ldr	r3, [r7, #20]
}
 8004778:	4618      	mov	r0, r3
 800477a:	371c      	adds	r7, #28
 800477c:	46bd      	mov	sp, r7
 800477e:	bd90      	pop	{r4, r7, pc}

08004780 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8004780:	b590      	push	{r4, r7, lr}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	607a      	str	r2, [r7, #4]
 800478a:	461a      	mov	r2, r3
 800478c:	460b      	mov	r3, r1
 800478e:	72fb      	strb	r3, [r7, #11]
 8004790:	4613      	mov	r3, r2
 8004792:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d102      	bne.n	80047a0 <lsm6dso_write_reg+0x20>
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	e009      	b.n	80047b4 <lsm6dso_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681c      	ldr	r4, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	68d8      	ldr	r0, [r3, #12]
 80047a8:	893b      	ldrh	r3, [r7, #8]
 80047aa:	7af9      	ldrb	r1, [r7, #11]
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	47a0      	blx	r4
 80047b0:	6178      	str	r0, [r7, #20]

  return ret;
 80047b2:	697b      	ldr	r3, [r7, #20]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd90      	pop	{r4, r7, pc}

080047bc <lsm6dso_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dso_from_fs4_to_mg(int16_t lsb)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	4603      	mov	r3, r0
 80047c4:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 80047c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fc fa9e 	bl	8000d0c <__aeabi_i2f>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4904      	ldr	r1, [pc, #16]	@ (80047e4 <lsm6dso_from_fs4_to_mg+0x28>)
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fc faed 	bl	8000db4 <__aeabi_fmul>
 80047da:	4603      	mov	r3, r0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	3df9db23 	.word	0x3df9db23

080047e8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80047f4:	f107 0208 	add.w	r2, r7, #8
 80047f8:	2301      	movs	r3, #1
 80047fa:	2110      	movs	r1, #16
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ffa1 	bl	8004744 <lsm6dso_read_reg>
 8004802:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d10f      	bne.n	800482a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 0303 	and.w	r3, r3, #3
 8004810:	b2da      	uxtb	r2, r3
 8004812:	7a3b      	ldrb	r3, [r7, #8]
 8004814:	f362 0383 	bfi	r3, r2, #2, #2
 8004818:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800481a:	f107 0208 	add.w	r2, r7, #8
 800481e:	2301      	movs	r3, #1
 8004820:	2110      	movs	r1, #16
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7ff ffac 	bl	8004780 <lsm6dso_write_reg>
 8004828:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800482a:	68fb      	ldr	r3, [r7, #12]
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}

08004834 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	460b      	mov	r3, r1
 800483e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8004844:	f107 030c 	add.w	r3, r7, #12
 8004848:	4619      	mov	r1, r3
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa73 	bl	8004d36 <lsm6dso_fsm_enable_get>
 8004850:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <lsm6dso_xl_data_rate_set+0x28>
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	e0e0      	b.n	8004a1e <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800485c:	7b3b      	ldrb	r3, [r7, #12]
 800485e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004862:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004864:	7b3b      	ldrb	r3, [r7, #12]
 8004866:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800486a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800486c:	4313      	orrs	r3, r2
 800486e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004870:	7b3b      	ldrb	r3, [r7, #12]
 8004872:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004876:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8004878:	4313      	orrs	r3, r2
 800487a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800487c:	7b3b      	ldrb	r3, [r7, #12]
 800487e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004882:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8004884:	4313      	orrs	r3, r2
 8004886:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004888:	7b3b      	ldrb	r3, [r7, #12]
 800488a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800488e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8004890:	4313      	orrs	r3, r2
 8004892:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004894:	7b3b      	ldrb	r3, [r7, #12]
 8004896:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800489a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800489c:	4313      	orrs	r3, r2
 800489e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80048a0:	7b3b      	ldrb	r3, [r7, #12]
 80048a2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80048a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80048a8:	4313      	orrs	r3, r2
 80048aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80048ac:	7b3b      	ldrb	r3, [r7, #12]
 80048ae:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80048b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80048b4:	4313      	orrs	r3, r2
 80048b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80048b8:	7b7b      	ldrb	r3, [r7, #13]
 80048ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80048be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80048c0:	4313      	orrs	r3, r2
 80048c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80048c4:	7b7b      	ldrb	r3, [r7, #13]
 80048c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80048ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80048cc:	4313      	orrs	r3, r2
 80048ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80048d0:	7b7b      	ldrb	r3, [r7, #13]
 80048d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80048d8:	4313      	orrs	r3, r2
 80048da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80048dc:	7b7b      	ldrb	r3, [r7, #13]
 80048de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80048e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80048e4:	4313      	orrs	r3, r2
 80048e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80048e8:	7b7b      	ldrb	r3, [r7, #13]
 80048ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80048ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80048f0:	4313      	orrs	r3, r2
 80048f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80048f4:	7b7b      	ldrb	r3, [r7, #13]
 80048f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80048fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80048fc:	4313      	orrs	r3, r2
 80048fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004900:	7b7b      	ldrb	r3, [r7, #13]
 8004902:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004906:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004908:	4313      	orrs	r3, r2
 800490a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800490c:	7b7b      	ldrb	r3, [r7, #13]
 800490e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004912:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004914:	4313      	orrs	r3, r2
 8004916:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004918:	2b01      	cmp	r3, #1
 800491a:	d164      	bne.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800491c:	f107 030b 	add.w	r3, r7, #11
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fa28 	bl	8004d78 <lsm6dso_fsm_data_rate_get>
 8004928:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <lsm6dso_xl_data_rate_set+0x100>
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	e074      	b.n	8004a1e <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8004934:	7afb      	ldrb	r3, [r7, #11]
 8004936:	2b03      	cmp	r3, #3
 8004938:	d852      	bhi.n	80049e0 <lsm6dso_xl_data_rate_set+0x1ac>
 800493a:	a201      	add	r2, pc, #4	@ (adr r2, 8004940 <lsm6dso_xl_data_rate_set+0x10c>)
 800493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004940:	08004951 	.word	0x08004951
 8004944:	08004963 	.word	0x08004963
 8004948:	08004981 	.word	0x08004981
 800494c:	080049ab 	.word	0x080049ab
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004950:	78fb      	ldrb	r3, [r7, #3]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d102      	bne.n	800495c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8004956:	2301      	movs	r3, #1
 8004958:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800495a:	e044      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	75fb      	strb	r3, [r7, #23]
        break;
 8004960:	e041      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004968:	2302      	movs	r3, #2
 800496a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800496c:	e03b      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800496e:	78fb      	ldrb	r3, [r7, #3]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d102      	bne.n	800497a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8004974:	2302      	movs	r3, #2
 8004976:	75fb      	strb	r3, [r7, #23]
        break;
 8004978:	e035      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800497a:	78fb      	ldrb	r3, [r7, #3]
 800497c:	75fb      	strb	r3, [r7, #23]
        break;
 800497e:	e032      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004986:	2303      	movs	r3, #3
 8004988:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800498a:	e02c      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d102      	bne.n	8004998 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8004992:	2303      	movs	r3, #3
 8004994:	75fb      	strb	r3, [r7, #23]
        break;
 8004996:	e026      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004998:	78fb      	ldrb	r3, [r7, #3]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d102      	bne.n	80049a4 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800499e:	2303      	movs	r3, #3
 80049a0:	75fb      	strb	r3, [r7, #23]
        break;
 80049a2:	e020      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	75fb      	strb	r3, [r7, #23]
        break;
 80049a8:	e01d      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d102      	bne.n	80049b6 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80049b0:	2304      	movs	r3, #4
 80049b2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80049b4:	e017      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80049b6:	78fb      	ldrb	r3, [r7, #3]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d102      	bne.n	80049c2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80049bc:	2304      	movs	r3, #4
 80049be:	75fb      	strb	r3, [r7, #23]
        break;
 80049c0:	e011      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d102      	bne.n	80049ce <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80049c8:	2304      	movs	r3, #4
 80049ca:	75fb      	strb	r3, [r7, #23]
        break;
 80049cc:	e00b      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d102      	bne.n	80049da <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80049d4:	2304      	movs	r3, #4
 80049d6:	75fb      	strb	r3, [r7, #23]
        break;
 80049d8:	e005      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	75fb      	strb	r3, [r7, #23]
        break;
 80049de:	e002      	b.n	80049e6 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80049e0:	78fb      	ldrb	r3, [r7, #3]
 80049e2:	75fb      	strb	r3, [r7, #23]
        break;
 80049e4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80049e6:	f107 0208 	add.w	r2, r7, #8
 80049ea:	2301      	movs	r3, #1
 80049ec:	2110      	movs	r1, #16
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f7ff fea8 	bl	8004744 <lsm6dso_read_reg>
 80049f4:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80049f6:	7dfb      	ldrb	r3, [r7, #23]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	7a3b      	ldrb	r3, [r7, #8]
 8004a00:	f362 1307 	bfi	r3, r2, #4, #4
 8004a04:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004a06:	f107 0208 	add.w	r2, r7, #8
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff feb6 	bl	8004780 <lsm6dso_write_reg>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	4413      	add	r3, r2
 8004a1a:	613b      	str	r3, [r7, #16]

  return ret;
 8004a1c:	693b      	ldr	r3, [r7, #16]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop

08004a28 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(const stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8004a34:	2300      	movs	r3, #0
 8004a36:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	7a3b      	ldrb	r3, [r7, #8]
 8004a42:	f362 1387 	bfi	r3, r2, #6, #2
 8004a46:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004a48:	f107 0208 	add.w	r2, r7, #8
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	2101      	movs	r1, #1
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7ff fe95 	bl	8004780 <lsm6dso_write_reg>
 8004a56:	60f8      	str	r0, [r7, #12]

  return ret;
 8004a58:	68fb      	ldr	r3, [r7, #12]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	210f      	movs	r1, #15
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fe66 	bl	8004744 <lsm6dso_read_reg>
 8004a78:	60f8      	str	r0, [r7, #12]

  return ret;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004a90:	f107 0208 	add.w	r2, r7, #8
 8004a94:	2301      	movs	r3, #1
 8004a96:	2112      	movs	r1, #18
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f7ff fe53 	bl	8004744 <lsm6dso_read_reg>
 8004a9e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d10f      	bne.n	8004ac6 <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 0301 	and.w	r3, r3, #1
 8004aac:	b2da      	uxtb	r2, r3
 8004aae:	7a3b      	ldrb	r3, [r7, #8]
 8004ab0:	f362 0300 	bfi	r3, r2, #0, #1
 8004ab4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004ab6:	f107 0208 	add.w	r2, r7, #8
 8004aba:	2301      	movs	r3, #1
 8004abc:	2112      	movs	r1, #18
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff fe5e 	bl	8004780 <lsm6dso_write_reg>
 8004ac4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <lsm6dso_reset_get>:
  * @param  val      Get the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004ada:	f107 0208 	add.w	r2, r7, #8
 8004ade:	2301      	movs	r3, #1
 8004ae0:	2112      	movs	r1, #18
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fe2e 	bl	8004744 <lsm6dso_read_reg>
 8004ae8:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8004aea:	7a3b      	ldrb	r3, [r7, #8]
 8004aec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	461a      	mov	r2, r3
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	701a      	strb	r2, [r3, #0]

  return ret;
 8004af8:	68fb      	ldr	r3, [r7, #12]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3710      	adds	r7, #16
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}

08004b02 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(const stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b086      	sub	sp, #24
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004b0e:	f107 020c 	add.w	r2, r7, #12
 8004b12:	2301      	movs	r3, #1
 8004b14:	2118      	movs	r1, #24
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fe14 	bl	8004744 <lsm6dso_read_reg>
 8004b1c:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004b1e:	78fb      	ldrb	r3, [r7, #3]
 8004b20:	09db      	lsrs	r3, r3, #7
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	b2da      	uxtb	r2, r3
 8004b2a:	7b3b      	ldrb	r3, [r7, #12]
 8004b2c:	f362 0341 	bfi	r3, r2, #1, #1
 8004b30:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004b32:	f107 020c 	add.w	r2, r7, #12
 8004b36:	2301      	movs	r3, #1
 8004b38:	2118      	movs	r1, #24
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff fe20 	bl	8004780 <lsm6dso_write_reg>
 8004b40:	4602      	mov	r2, r0
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	4413      	add	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <lsm6dso_i3c_disable_set+0x50>
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	e01b      	b.n	8004b8a <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8004b52:	f107 0210 	add.w	r2, r7, #16
 8004b56:	2301      	movs	r3, #1
 8004b58:	2162      	movs	r1, #98	@ 0x62
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f7ff fdf2 	bl	8004744 <lsm6dso_read_reg>
 8004b60:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	f003 0303 	and.w	r3, r3, #3
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	7c3b      	ldrb	r3, [r7, #16]
 8004b6c:	f362 03c4 	bfi	r3, r2, #3, #2
 8004b70:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8004b72:	f107 0210 	add.w	r2, r7, #16
 8004b76:	2301      	movs	r3, #1
 8004b78:	2162      	movs	r1, #98	@ 0x62
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fe00 	bl	8004780 <lsm6dso_write_reg>
 8004b80:	4602      	mov	r2, r0
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	4413      	add	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

  return ret;
 8004b88:	697b      	ldr	r3, [r7, #20]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b086      	sub	sp, #24
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 8004b9e:	f107 020c 	add.w	r2, r7, #12
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	2108      	movs	r1, #8
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fdcc 	bl	8004744 <lsm6dso_read_reg>
 8004bac:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <lsm6dso_fifo_watermark_set+0x26>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	e020      	b.n	8004bfa <lsm6dso_fifo_watermark_set+0x68>

  fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	743b      	strb	r3, [r7, #16]
  fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	b2da      	uxtb	r2, r3
 8004bca:	7b3b      	ldrb	r3, [r7, #12]
 8004bcc:	f362 0300 	bfi	r3, r2, #0, #1
 8004bd0:	733b      	strb	r3, [r7, #12]

  ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8004bd2:	f107 0210 	add.w	r2, r7, #16
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	2107      	movs	r1, #7
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fdd0 	bl	8004780 <lsm6dso_write_reg>
 8004be0:	6178      	str	r0, [r7, #20]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 8004be2:	f107 020c 	add.w	r2, r7, #12
 8004be6:	2301      	movs	r3, #1
 8004be8:	2108      	movs	r1, #8
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fdc8 	bl	8004780 <lsm6dso_write_reg>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  return ret;
 8004bf8:	697b      	ldr	r3, [r7, #20]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3718      	adds	r7, #24
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c0e:	f107 0208 	add.w	r2, r7, #8
 8004c12:	2301      	movs	r3, #1
 8004c14:	2109      	movs	r1, #9
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fd94 	bl	8004744 <lsm6dso_read_reg>
 8004c1c:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10f      	bne.n	8004c44 <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 8004c24:	78fb      	ldrb	r3, [r7, #3]
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	7a3b      	ldrb	r3, [r7, #8]
 8004c2e:	f362 0303 	bfi	r3, r2, #0, #4
 8004c32:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c34:	f107 0208 	add.w	r2, r7, #8
 8004c38:	2301      	movs	r3, #1
 8004c3a:	2109      	movs	r1, #9
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7ff fd9f 	bl	8004780 <lsm6dso_write_reg>
 8004c42:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c44:	68fb      	ldr	r3, [r7, #12]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <lsm6dso_fifo_gy_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_gy_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_gy_t val)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b084      	sub	sp, #16
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
 8004c56:	460b      	mov	r3, r1
 8004c58:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c5a:	f107 0208 	add.w	r2, r7, #8
 8004c5e:	2301      	movs	r3, #1
 8004c60:	2109      	movs	r1, #9
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fd6e 	bl	8004744 <lsm6dso_read_reg>
 8004c68:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10f      	bne.n	8004c90 <lsm6dso_fifo_gy_batch_set+0x42>
  {
    reg.bdr_gy = (uint8_t)val;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	7a3b      	ldrb	r3, [r7, #8]
 8004c7a:	f362 1307 	bfi	r3, r2, #4, #4
 8004c7e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c80:	f107 0208 	add.w	r2, r7, #8
 8004c84:	2301      	movs	r3, #1
 8004c86:	2109      	movs	r1, #9
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f7ff fd79 	bl	8004780 <lsm6dso_write_reg>
 8004c8e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c90:	68fb      	ldr	r3, [r7, #12]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b084      	sub	sp, #16
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004ca6:	f107 0208 	add.w	r2, r7, #8
 8004caa:	2301      	movs	r3, #1
 8004cac:	210a      	movs	r1, #10
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f7ff fd48 	bl	8004744 <lsm6dso_read_reg>
 8004cb4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10f      	bne.n	8004cdc <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	b2da      	uxtb	r2, r3
 8004cc4:	7a3b      	ldrb	r3, [r7, #8]
 8004cc6:	f362 0302 	bfi	r3, r2, #0, #3
 8004cca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004ccc:	f107 0208 	add.w	r2, r7, #8
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	210a      	movs	r1, #10
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f7ff fd53 	bl	8004780 <lsm6dso_write_reg>
 8004cda:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <lsm6dso_fifo_data_level_get>:
  * @param  val      Get the values of diff_fifo in reg FIFO_STATUS1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_data_level_get(const stmdev_ctx_t *ctx, uint16_t *val)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b086      	sub	sp, #24
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	6039      	str	r1, [r7, #0]
  lsm6dso_fifo_status1_t fifo_status1;
  lsm6dso_fifo_status2_t fifo_status2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS1,
 8004cf0:	f107 0210 	add.w	r2, r7, #16
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	213a      	movs	r1, #58	@ 0x3a
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff fd23 	bl	8004744 <lsm6dso_read_reg>
 8004cfe:	6178      	str	r0, [r7, #20]
                         (uint8_t *)&fifo_status1, 1);

  if (ret == 0)
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d112      	bne.n	8004d2c <lsm6dso_fifo_data_level_get+0x46>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_STATUS2,
 8004d06:	f107 020c 	add.w	r2, r7, #12
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	213b      	movs	r1, #59	@ 0x3b
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f7ff fd18 	bl	8004744 <lsm6dso_read_reg>
 8004d14:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&fifo_status2, 1);
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 8004d16:	7b3b      	ldrb	r3, [r7, #12]
 8004d18:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	021b      	lsls	r3, r3, #8
 8004d20:	b29b      	uxth	r3, r3
           (uint16_t)fifo_status1.diff_fifo;
 8004d22:	7c3a      	ldrb	r2, [r7, #16]
    *val = ((uint16_t)fifo_status2.diff_fifo << 8) +
 8004d24:	4413      	add	r3, r2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(const stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004d40:	2102      	movs	r1, #2
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fe70 	bl	8004a28 <lsm6dso_mem_bank_set>
 8004d48:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	2146      	movs	r1, #70	@ 0x46
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fcf7 	bl	8004744 <lsm6dso_read_reg>
 8004d56:	4602      	mov	r2, r0
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004d5e:	2100      	movs	r1, #0
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff fe61 	bl	8004a28 <lsm6dso_mem_bank_set>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	60fb      	str	r3, [r7, #12]

  return ret;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004d82:	2102      	movs	r1, #2
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f7ff fe4f 	bl	8004a28 <lsm6dso_mem_bank_set>
 8004d8a:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <lsm6dso_fsm_data_rate_get+0x1e>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	e03a      	b.n	8004e0c <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8004d96:	f107 0208 	add.w	r2, r7, #8
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	215f      	movs	r1, #95	@ 0x5f
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7ff fcd0 	bl	8004744 <lsm6dso_read_reg>
 8004da4:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d125      	bne.n	8004df8 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8004dac:	7a3b      	ldrb	r3, [r7, #8]
 8004dae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d81b      	bhi.n	8004df0 <lsm6dso_fsm_data_rate_get+0x78>
 8004db8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <lsm6dso_fsm_data_rate_get+0x48>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004dd9 	.word	0x08004dd9
 8004dc8:	08004de1 	.word	0x08004de1
 8004dcc:	08004de9 	.word	0x08004de9
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
      break;
 8004dd6:	e010      	b.n	8004dfa <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	701a      	strb	r2, [r3, #0]
      break;
 8004dde:	e00c      	b.n	8004dfa <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	2202      	movs	r2, #2
 8004de4:	701a      	strb	r2, [r3, #0]
      break;
 8004de6:	e008      	b.n	8004dfa <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2203      	movs	r2, #3
 8004dec:	701a      	strb	r2, [r3, #0]
      break;
 8004dee:	e004      	b.n	8004dfa <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
      break;
 8004df6:	e000      	b.n	8004dfa <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8004df8:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f7ff fe13 	bl	8004a28 <lsm6dso_mem_bank_set>
 8004e02:	4602      	mov	r2, r0
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4413      	add	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  return ret;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3710      	adds	r7, #16
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <__cvt>:
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1a:	461d      	mov	r5, r3
 8004e1c:	bfbb      	ittet	lt
 8004e1e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004e22:	461d      	movlt	r5, r3
 8004e24:	2300      	movge	r3, #0
 8004e26:	232d      	movlt	r3, #45	@ 0x2d
 8004e28:	b088      	sub	sp, #32
 8004e2a:	4614      	mov	r4, r2
 8004e2c:	bfb8      	it	lt
 8004e2e:	4614      	movlt	r4, r2
 8004e30:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e32:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004e34:	7013      	strb	r3, [r2, #0]
 8004e36:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004e38:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004e3c:	f023 0820 	bic.w	r8, r3, #32
 8004e40:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e44:	d005      	beq.n	8004e52 <__cvt+0x3e>
 8004e46:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004e4a:	d100      	bne.n	8004e4e <__cvt+0x3a>
 8004e4c:	3601      	adds	r6, #1
 8004e4e:	2302      	movs	r3, #2
 8004e50:	e000      	b.n	8004e54 <__cvt+0x40>
 8004e52:	2303      	movs	r3, #3
 8004e54:	aa07      	add	r2, sp, #28
 8004e56:	9204      	str	r2, [sp, #16]
 8004e58:	aa06      	add	r2, sp, #24
 8004e5a:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004e5e:	e9cd 3600 	strd	r3, r6, [sp]
 8004e62:	4622      	mov	r2, r4
 8004e64:	462b      	mov	r3, r5
 8004e66:	f001 f897 	bl	8005f98 <_dtoa_r>
 8004e6a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004e6e:	4607      	mov	r7, r0
 8004e70:	d119      	bne.n	8004ea6 <__cvt+0x92>
 8004e72:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004e74:	07db      	lsls	r3, r3, #31
 8004e76:	d50e      	bpl.n	8004e96 <__cvt+0x82>
 8004e78:	eb00 0906 	add.w	r9, r0, r6
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2300      	movs	r3, #0
 8004e80:	4620      	mov	r0, r4
 8004e82:	4629      	mov	r1, r5
 8004e84:	f7fb fda8 	bl	80009d8 <__aeabi_dcmpeq>
 8004e88:	b108      	cbz	r0, 8004e8e <__cvt+0x7a>
 8004e8a:	f8cd 901c 	str.w	r9, [sp, #28]
 8004e8e:	2230      	movs	r2, #48	@ 0x30
 8004e90:	9b07      	ldr	r3, [sp, #28]
 8004e92:	454b      	cmp	r3, r9
 8004e94:	d31e      	bcc.n	8004ed4 <__cvt+0xc0>
 8004e96:	4638      	mov	r0, r7
 8004e98:	9b07      	ldr	r3, [sp, #28]
 8004e9a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004e9c:	1bdb      	subs	r3, r3, r7
 8004e9e:	6013      	str	r3, [r2, #0]
 8004ea0:	b008      	add	sp, #32
 8004ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004eaa:	eb00 0906 	add.w	r9, r0, r6
 8004eae:	d1e5      	bne.n	8004e7c <__cvt+0x68>
 8004eb0:	7803      	ldrb	r3, [r0, #0]
 8004eb2:	2b30      	cmp	r3, #48	@ 0x30
 8004eb4:	d10a      	bne.n	8004ecc <__cvt+0xb8>
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	2300      	movs	r3, #0
 8004eba:	4620      	mov	r0, r4
 8004ebc:	4629      	mov	r1, r5
 8004ebe:	f7fb fd8b 	bl	80009d8 <__aeabi_dcmpeq>
 8004ec2:	b918      	cbnz	r0, 8004ecc <__cvt+0xb8>
 8004ec4:	f1c6 0601 	rsb	r6, r6, #1
 8004ec8:	f8ca 6000 	str.w	r6, [sl]
 8004ecc:	f8da 3000 	ldr.w	r3, [sl]
 8004ed0:	4499      	add	r9, r3
 8004ed2:	e7d3      	b.n	8004e7c <__cvt+0x68>
 8004ed4:	1c59      	adds	r1, r3, #1
 8004ed6:	9107      	str	r1, [sp, #28]
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e7d9      	b.n	8004e90 <__cvt+0x7c>

08004edc <__exponent>:
 8004edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ede:	2900      	cmp	r1, #0
 8004ee0:	bfb6      	itet	lt
 8004ee2:	232d      	movlt	r3, #45	@ 0x2d
 8004ee4:	232b      	movge	r3, #43	@ 0x2b
 8004ee6:	4249      	neglt	r1, r1
 8004ee8:	2909      	cmp	r1, #9
 8004eea:	7002      	strb	r2, [r0, #0]
 8004eec:	7043      	strb	r3, [r0, #1]
 8004eee:	dd29      	ble.n	8004f44 <__exponent+0x68>
 8004ef0:	f10d 0307 	add.w	r3, sp, #7
 8004ef4:	461d      	mov	r5, r3
 8004ef6:	270a      	movs	r7, #10
 8004ef8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004efc:	461a      	mov	r2, r3
 8004efe:	fb07 1416 	mls	r4, r7, r6, r1
 8004f02:	3430      	adds	r4, #48	@ 0x30
 8004f04:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004f08:	460c      	mov	r4, r1
 8004f0a:	2c63      	cmp	r4, #99	@ 0x63
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004f12:	dcf1      	bgt.n	8004ef8 <__exponent+0x1c>
 8004f14:	3130      	adds	r1, #48	@ 0x30
 8004f16:	1e94      	subs	r4, r2, #2
 8004f18:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004f1c:	4623      	mov	r3, r4
 8004f1e:	1c41      	adds	r1, r0, #1
 8004f20:	42ab      	cmp	r3, r5
 8004f22:	d30a      	bcc.n	8004f3a <__exponent+0x5e>
 8004f24:	f10d 0309 	add.w	r3, sp, #9
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	42ac      	cmp	r4, r5
 8004f2c:	bf88      	it	hi
 8004f2e:	2300      	movhi	r3, #0
 8004f30:	3302      	adds	r3, #2
 8004f32:	4403      	add	r3, r0
 8004f34:	1a18      	subs	r0, r3, r0
 8004f36:	b003      	add	sp, #12
 8004f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f3a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004f3e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004f42:	e7ed      	b.n	8004f20 <__exponent+0x44>
 8004f44:	2330      	movs	r3, #48	@ 0x30
 8004f46:	3130      	adds	r1, #48	@ 0x30
 8004f48:	7083      	strb	r3, [r0, #2]
 8004f4a:	70c1      	strb	r1, [r0, #3]
 8004f4c:	1d03      	adds	r3, r0, #4
 8004f4e:	e7f1      	b.n	8004f34 <__exponent+0x58>

08004f50 <_printf_float>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	b091      	sub	sp, #68	@ 0x44
 8004f56:	460c      	mov	r4, r1
 8004f58:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004f5c:	4616      	mov	r6, r2
 8004f5e:	461f      	mov	r7, r3
 8004f60:	4605      	mov	r5, r0
 8004f62:	f000 ff05 	bl	8005d70 <_localeconv_r>
 8004f66:	6803      	ldr	r3, [r0, #0]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	9308      	str	r3, [sp, #32]
 8004f6c:	f7fb f908 	bl	8000180 <strlen>
 8004f70:	2300      	movs	r3, #0
 8004f72:	930e      	str	r3, [sp, #56]	@ 0x38
 8004f74:	f8d8 3000 	ldr.w	r3, [r8]
 8004f78:	9009      	str	r0, [sp, #36]	@ 0x24
 8004f7a:	3307      	adds	r3, #7
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
 8004f80:	f103 0208 	add.w	r2, r3, #8
 8004f84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004f88:	f8d4 b000 	ldr.w	fp, [r4]
 8004f8c:	f8c8 2000 	str.w	r2, [r8]
 8004f90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004f98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004f9a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004faa:	4b9c      	ldr	r3, [pc, #624]	@ (800521c <_printf_float+0x2cc>)
 8004fac:	f7fb fd46 	bl	8000a3c <__aeabi_dcmpun>
 8004fb0:	bb70      	cbnz	r0, 8005010 <_printf_float+0xc0>
 8004fb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fba:	4b98      	ldr	r3, [pc, #608]	@ (800521c <_printf_float+0x2cc>)
 8004fbc:	f7fb fd20 	bl	8000a00 <__aeabi_dcmple>
 8004fc0:	bb30      	cbnz	r0, 8005010 <_printf_float+0xc0>
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	4649      	mov	r1, r9
 8004fca:	f7fb fd0f 	bl	80009ec <__aeabi_dcmplt>
 8004fce:	b110      	cbz	r0, 8004fd6 <_printf_float+0x86>
 8004fd0:	232d      	movs	r3, #45	@ 0x2d
 8004fd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fd6:	4a92      	ldr	r2, [pc, #584]	@ (8005220 <_printf_float+0x2d0>)
 8004fd8:	4b92      	ldr	r3, [pc, #584]	@ (8005224 <_printf_float+0x2d4>)
 8004fda:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004fde:	bf8c      	ite	hi
 8004fe0:	4690      	movhi	r8, r2
 8004fe2:	4698      	movls	r8, r3
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	f04f 0900 	mov.w	r9, #0
 8004fea:	6123      	str	r3, [r4, #16]
 8004fec:	f02b 0304 	bic.w	r3, fp, #4
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	4633      	mov	r3, r6
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	9700      	str	r7, [sp, #0]
 8004ffa:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004ffc:	f000 f9d4 	bl	80053a8 <_printf_common>
 8005000:	3001      	adds	r0, #1
 8005002:	f040 8090 	bne.w	8005126 <_printf_float+0x1d6>
 8005006:	f04f 30ff 	mov.w	r0, #4294967295
 800500a:	b011      	add	sp, #68	@ 0x44
 800500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005010:	4642      	mov	r2, r8
 8005012:	464b      	mov	r3, r9
 8005014:	4640      	mov	r0, r8
 8005016:	4649      	mov	r1, r9
 8005018:	f7fb fd10 	bl	8000a3c <__aeabi_dcmpun>
 800501c:	b148      	cbz	r0, 8005032 <_printf_float+0xe2>
 800501e:	464b      	mov	r3, r9
 8005020:	2b00      	cmp	r3, #0
 8005022:	bfb8      	it	lt
 8005024:	232d      	movlt	r3, #45	@ 0x2d
 8005026:	4a80      	ldr	r2, [pc, #512]	@ (8005228 <_printf_float+0x2d8>)
 8005028:	bfb8      	it	lt
 800502a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800502e:	4b7f      	ldr	r3, [pc, #508]	@ (800522c <_printf_float+0x2dc>)
 8005030:	e7d3      	b.n	8004fda <_printf_float+0x8a>
 8005032:	6863      	ldr	r3, [r4, #4]
 8005034:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	d13f      	bne.n	80050bc <_printf_float+0x16c>
 800503c:	2306      	movs	r3, #6
 800503e:	6063      	str	r3, [r4, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	9206      	str	r2, [sp, #24]
 800504a:	aa0e      	add	r2, sp, #56	@ 0x38
 800504c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005050:	aa0d      	add	r2, sp, #52	@ 0x34
 8005052:	9203      	str	r2, [sp, #12]
 8005054:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005058:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800505c:	6863      	ldr	r3, [r4, #4]
 800505e:	4642      	mov	r2, r8
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	4628      	mov	r0, r5
 8005064:	464b      	mov	r3, r9
 8005066:	910a      	str	r1, [sp, #40]	@ 0x28
 8005068:	f7ff fed4 	bl	8004e14 <__cvt>
 800506c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800506e:	4680      	mov	r8, r0
 8005070:	2947      	cmp	r1, #71	@ 0x47
 8005072:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005074:	d128      	bne.n	80050c8 <_printf_float+0x178>
 8005076:	1cc8      	adds	r0, r1, #3
 8005078:	db02      	blt.n	8005080 <_printf_float+0x130>
 800507a:	6863      	ldr	r3, [r4, #4]
 800507c:	4299      	cmp	r1, r3
 800507e:	dd40      	ble.n	8005102 <_printf_float+0x1b2>
 8005080:	f1aa 0a02 	sub.w	sl, sl, #2
 8005084:	fa5f fa8a 	uxtb.w	sl, sl
 8005088:	4652      	mov	r2, sl
 800508a:	3901      	subs	r1, #1
 800508c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005090:	910d      	str	r1, [sp, #52]	@ 0x34
 8005092:	f7ff ff23 	bl	8004edc <__exponent>
 8005096:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005098:	4681      	mov	r9, r0
 800509a:	1813      	adds	r3, r2, r0
 800509c:	2a01      	cmp	r2, #1
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	dc02      	bgt.n	80050a8 <_printf_float+0x158>
 80050a2:	6822      	ldr	r2, [r4, #0]
 80050a4:	07d2      	lsls	r2, r2, #31
 80050a6:	d501      	bpl.n	80050ac <_printf_float+0x15c>
 80050a8:	3301      	adds	r3, #1
 80050aa:	6123      	str	r3, [r4, #16]
 80050ac:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d09e      	beq.n	8004ff2 <_printf_float+0xa2>
 80050b4:	232d      	movs	r3, #45	@ 0x2d
 80050b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ba:	e79a      	b.n	8004ff2 <_printf_float+0xa2>
 80050bc:	2947      	cmp	r1, #71	@ 0x47
 80050be:	d1bf      	bne.n	8005040 <_printf_float+0xf0>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1bd      	bne.n	8005040 <_printf_float+0xf0>
 80050c4:	2301      	movs	r3, #1
 80050c6:	e7ba      	b.n	800503e <_printf_float+0xee>
 80050c8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80050cc:	d9dc      	bls.n	8005088 <_printf_float+0x138>
 80050ce:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80050d2:	d118      	bne.n	8005106 <_printf_float+0x1b6>
 80050d4:	2900      	cmp	r1, #0
 80050d6:	6863      	ldr	r3, [r4, #4]
 80050d8:	dd0b      	ble.n	80050f2 <_printf_float+0x1a2>
 80050da:	6121      	str	r1, [r4, #16]
 80050dc:	b913      	cbnz	r3, 80050e4 <_printf_float+0x194>
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	07d0      	lsls	r0, r2, #31
 80050e2:	d502      	bpl.n	80050ea <_printf_float+0x19a>
 80050e4:	3301      	adds	r3, #1
 80050e6:	440b      	add	r3, r1
 80050e8:	6123      	str	r3, [r4, #16]
 80050ea:	f04f 0900 	mov.w	r9, #0
 80050ee:	65a1      	str	r1, [r4, #88]	@ 0x58
 80050f0:	e7dc      	b.n	80050ac <_printf_float+0x15c>
 80050f2:	b913      	cbnz	r3, 80050fa <_printf_float+0x1aa>
 80050f4:	6822      	ldr	r2, [r4, #0]
 80050f6:	07d2      	lsls	r2, r2, #31
 80050f8:	d501      	bpl.n	80050fe <_printf_float+0x1ae>
 80050fa:	3302      	adds	r3, #2
 80050fc:	e7f4      	b.n	80050e8 <_printf_float+0x198>
 80050fe:	2301      	movs	r3, #1
 8005100:	e7f2      	b.n	80050e8 <_printf_float+0x198>
 8005102:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005106:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005108:	4299      	cmp	r1, r3
 800510a:	db05      	blt.n	8005118 <_printf_float+0x1c8>
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	6121      	str	r1, [r4, #16]
 8005110:	07d8      	lsls	r0, r3, #31
 8005112:	d5ea      	bpl.n	80050ea <_printf_float+0x19a>
 8005114:	1c4b      	adds	r3, r1, #1
 8005116:	e7e7      	b.n	80050e8 <_printf_float+0x198>
 8005118:	2900      	cmp	r1, #0
 800511a:	bfcc      	ite	gt
 800511c:	2201      	movgt	r2, #1
 800511e:	f1c1 0202 	rsble	r2, r1, #2
 8005122:	4413      	add	r3, r2
 8005124:	e7e0      	b.n	80050e8 <_printf_float+0x198>
 8005126:	6823      	ldr	r3, [r4, #0]
 8005128:	055a      	lsls	r2, r3, #21
 800512a:	d407      	bmi.n	800513c <_printf_float+0x1ec>
 800512c:	6923      	ldr	r3, [r4, #16]
 800512e:	4642      	mov	r2, r8
 8005130:	4631      	mov	r1, r6
 8005132:	4628      	mov	r0, r5
 8005134:	47b8      	blx	r7
 8005136:	3001      	adds	r0, #1
 8005138:	d12b      	bne.n	8005192 <_printf_float+0x242>
 800513a:	e764      	b.n	8005006 <_printf_float+0xb6>
 800513c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005140:	f240 80dc 	bls.w	80052fc <_printf_float+0x3ac>
 8005144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005148:	2200      	movs	r2, #0
 800514a:	2300      	movs	r3, #0
 800514c:	f7fb fc44 	bl	80009d8 <__aeabi_dcmpeq>
 8005150:	2800      	cmp	r0, #0
 8005152:	d033      	beq.n	80051bc <_printf_float+0x26c>
 8005154:	2301      	movs	r3, #1
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	4a35      	ldr	r2, [pc, #212]	@ (8005230 <_printf_float+0x2e0>)
 800515c:	47b8      	blx	r7
 800515e:	3001      	adds	r0, #1
 8005160:	f43f af51 	beq.w	8005006 <_printf_float+0xb6>
 8005164:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005168:	4543      	cmp	r3, r8
 800516a:	db02      	blt.n	8005172 <_printf_float+0x222>
 800516c:	6823      	ldr	r3, [r4, #0]
 800516e:	07d8      	lsls	r0, r3, #31
 8005170:	d50f      	bpl.n	8005192 <_printf_float+0x242>
 8005172:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005176:	4631      	mov	r1, r6
 8005178:	4628      	mov	r0, r5
 800517a:	47b8      	blx	r7
 800517c:	3001      	adds	r0, #1
 800517e:	f43f af42 	beq.w	8005006 <_printf_float+0xb6>
 8005182:	f04f 0900 	mov.w	r9, #0
 8005186:	f108 38ff 	add.w	r8, r8, #4294967295
 800518a:	f104 0a1a 	add.w	sl, r4, #26
 800518e:	45c8      	cmp	r8, r9
 8005190:	dc09      	bgt.n	80051a6 <_printf_float+0x256>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	079b      	lsls	r3, r3, #30
 8005196:	f100 8102 	bmi.w	800539e <_printf_float+0x44e>
 800519a:	68e0      	ldr	r0, [r4, #12]
 800519c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800519e:	4298      	cmp	r0, r3
 80051a0:	bfb8      	it	lt
 80051a2:	4618      	movlt	r0, r3
 80051a4:	e731      	b.n	800500a <_printf_float+0xba>
 80051a6:	2301      	movs	r3, #1
 80051a8:	4652      	mov	r2, sl
 80051aa:	4631      	mov	r1, r6
 80051ac:	4628      	mov	r0, r5
 80051ae:	47b8      	blx	r7
 80051b0:	3001      	adds	r0, #1
 80051b2:	f43f af28 	beq.w	8005006 <_printf_float+0xb6>
 80051b6:	f109 0901 	add.w	r9, r9, #1
 80051ba:	e7e8      	b.n	800518e <_printf_float+0x23e>
 80051bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dc38      	bgt.n	8005234 <_printf_float+0x2e4>
 80051c2:	2301      	movs	r3, #1
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	4a19      	ldr	r2, [pc, #100]	@ (8005230 <_printf_float+0x2e0>)
 80051ca:	47b8      	blx	r7
 80051cc:	3001      	adds	r0, #1
 80051ce:	f43f af1a 	beq.w	8005006 <_printf_float+0xb6>
 80051d2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80051d6:	ea59 0303 	orrs.w	r3, r9, r3
 80051da:	d102      	bne.n	80051e2 <_printf_float+0x292>
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	07d9      	lsls	r1, r3, #31
 80051e0:	d5d7      	bpl.n	8005192 <_printf_float+0x242>
 80051e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	f43f af0a 	beq.w	8005006 <_printf_float+0xb6>
 80051f2:	f04f 0a00 	mov.w	sl, #0
 80051f6:	f104 0b1a 	add.w	fp, r4, #26
 80051fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051fc:	425b      	negs	r3, r3
 80051fe:	4553      	cmp	r3, sl
 8005200:	dc01      	bgt.n	8005206 <_printf_float+0x2b6>
 8005202:	464b      	mov	r3, r9
 8005204:	e793      	b.n	800512e <_printf_float+0x1de>
 8005206:	2301      	movs	r3, #1
 8005208:	465a      	mov	r2, fp
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	47b8      	blx	r7
 8005210:	3001      	adds	r0, #1
 8005212:	f43f aef8 	beq.w	8005006 <_printf_float+0xb6>
 8005216:	f10a 0a01 	add.w	sl, sl, #1
 800521a:	e7ee      	b.n	80051fa <_printf_float+0x2aa>
 800521c:	7fefffff 	.word	0x7fefffff
 8005220:	080095b0 	.word	0x080095b0
 8005224:	080095ac 	.word	0x080095ac
 8005228:	080095b8 	.word	0x080095b8
 800522c:	080095b4 	.word	0x080095b4
 8005230:	080095bc 	.word	0x080095bc
 8005234:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005236:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800523a:	4553      	cmp	r3, sl
 800523c:	bfa8      	it	ge
 800523e:	4653      	movge	r3, sl
 8005240:	2b00      	cmp	r3, #0
 8005242:	4699      	mov	r9, r3
 8005244:	dc36      	bgt.n	80052b4 <_printf_float+0x364>
 8005246:	f04f 0b00 	mov.w	fp, #0
 800524a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800524e:	f104 021a 	add.w	r2, r4, #26
 8005252:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005254:	930a      	str	r3, [sp, #40]	@ 0x28
 8005256:	eba3 0309 	sub.w	r3, r3, r9
 800525a:	455b      	cmp	r3, fp
 800525c:	dc31      	bgt.n	80052c2 <_printf_float+0x372>
 800525e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005260:	459a      	cmp	sl, r3
 8005262:	dc3a      	bgt.n	80052da <_printf_float+0x38a>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	07da      	lsls	r2, r3, #31
 8005268:	d437      	bmi.n	80052da <_printf_float+0x38a>
 800526a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800526c:	ebaa 0903 	sub.w	r9, sl, r3
 8005270:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005272:	ebaa 0303 	sub.w	r3, sl, r3
 8005276:	4599      	cmp	r9, r3
 8005278:	bfa8      	it	ge
 800527a:	4699      	movge	r9, r3
 800527c:	f1b9 0f00 	cmp.w	r9, #0
 8005280:	dc33      	bgt.n	80052ea <_printf_float+0x39a>
 8005282:	f04f 0800 	mov.w	r8, #0
 8005286:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800528a:	f104 0b1a 	add.w	fp, r4, #26
 800528e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005290:	ebaa 0303 	sub.w	r3, sl, r3
 8005294:	eba3 0309 	sub.w	r3, r3, r9
 8005298:	4543      	cmp	r3, r8
 800529a:	f77f af7a 	ble.w	8005192 <_printf_float+0x242>
 800529e:	2301      	movs	r3, #1
 80052a0:	465a      	mov	r2, fp
 80052a2:	4631      	mov	r1, r6
 80052a4:	4628      	mov	r0, r5
 80052a6:	47b8      	blx	r7
 80052a8:	3001      	adds	r0, #1
 80052aa:	f43f aeac 	beq.w	8005006 <_printf_float+0xb6>
 80052ae:	f108 0801 	add.w	r8, r8, #1
 80052b2:	e7ec      	b.n	800528e <_printf_float+0x33e>
 80052b4:	4642      	mov	r2, r8
 80052b6:	4631      	mov	r1, r6
 80052b8:	4628      	mov	r0, r5
 80052ba:	47b8      	blx	r7
 80052bc:	3001      	adds	r0, #1
 80052be:	d1c2      	bne.n	8005246 <_printf_float+0x2f6>
 80052c0:	e6a1      	b.n	8005006 <_printf_float+0xb6>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f ae9a 	beq.w	8005006 <_printf_float+0xb6>
 80052d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052d4:	f10b 0b01 	add.w	fp, fp, #1
 80052d8:	e7bb      	b.n	8005252 <_printf_float+0x302>
 80052da:	4631      	mov	r1, r6
 80052dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	d1c0      	bne.n	800526a <_printf_float+0x31a>
 80052e8:	e68d      	b.n	8005006 <_printf_float+0xb6>
 80052ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052ec:	464b      	mov	r3, r9
 80052ee:	4631      	mov	r1, r6
 80052f0:	4628      	mov	r0, r5
 80052f2:	4442      	add	r2, r8
 80052f4:	47b8      	blx	r7
 80052f6:	3001      	adds	r0, #1
 80052f8:	d1c3      	bne.n	8005282 <_printf_float+0x332>
 80052fa:	e684      	b.n	8005006 <_printf_float+0xb6>
 80052fc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005300:	f1ba 0f01 	cmp.w	sl, #1
 8005304:	dc01      	bgt.n	800530a <_printf_float+0x3ba>
 8005306:	07db      	lsls	r3, r3, #31
 8005308:	d536      	bpl.n	8005378 <_printf_float+0x428>
 800530a:	2301      	movs	r3, #1
 800530c:	4642      	mov	r2, r8
 800530e:	4631      	mov	r1, r6
 8005310:	4628      	mov	r0, r5
 8005312:	47b8      	blx	r7
 8005314:	3001      	adds	r0, #1
 8005316:	f43f ae76 	beq.w	8005006 <_printf_float+0xb6>
 800531a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	f43f ae6e 	beq.w	8005006 <_printf_float+0xb6>
 800532a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800532e:	2200      	movs	r2, #0
 8005330:	2300      	movs	r3, #0
 8005332:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005336:	f7fb fb4f 	bl	80009d8 <__aeabi_dcmpeq>
 800533a:	b9c0      	cbnz	r0, 800536e <_printf_float+0x41e>
 800533c:	4653      	mov	r3, sl
 800533e:	f108 0201 	add.w	r2, r8, #1
 8005342:	4631      	mov	r1, r6
 8005344:	4628      	mov	r0, r5
 8005346:	47b8      	blx	r7
 8005348:	3001      	adds	r0, #1
 800534a:	d10c      	bne.n	8005366 <_printf_float+0x416>
 800534c:	e65b      	b.n	8005006 <_printf_float+0xb6>
 800534e:	2301      	movs	r3, #1
 8005350:	465a      	mov	r2, fp
 8005352:	4631      	mov	r1, r6
 8005354:	4628      	mov	r0, r5
 8005356:	47b8      	blx	r7
 8005358:	3001      	adds	r0, #1
 800535a:	f43f ae54 	beq.w	8005006 <_printf_float+0xb6>
 800535e:	f108 0801 	add.w	r8, r8, #1
 8005362:	45d0      	cmp	r8, sl
 8005364:	dbf3      	blt.n	800534e <_printf_float+0x3fe>
 8005366:	464b      	mov	r3, r9
 8005368:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800536c:	e6e0      	b.n	8005130 <_printf_float+0x1e0>
 800536e:	f04f 0800 	mov.w	r8, #0
 8005372:	f104 0b1a 	add.w	fp, r4, #26
 8005376:	e7f4      	b.n	8005362 <_printf_float+0x412>
 8005378:	2301      	movs	r3, #1
 800537a:	4642      	mov	r2, r8
 800537c:	e7e1      	b.n	8005342 <_printf_float+0x3f2>
 800537e:	2301      	movs	r3, #1
 8005380:	464a      	mov	r2, r9
 8005382:	4631      	mov	r1, r6
 8005384:	4628      	mov	r0, r5
 8005386:	47b8      	blx	r7
 8005388:	3001      	adds	r0, #1
 800538a:	f43f ae3c 	beq.w	8005006 <_printf_float+0xb6>
 800538e:	f108 0801 	add.w	r8, r8, #1
 8005392:	68e3      	ldr	r3, [r4, #12]
 8005394:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005396:	1a5b      	subs	r3, r3, r1
 8005398:	4543      	cmp	r3, r8
 800539a:	dcf0      	bgt.n	800537e <_printf_float+0x42e>
 800539c:	e6fd      	b.n	800519a <_printf_float+0x24a>
 800539e:	f04f 0800 	mov.w	r8, #0
 80053a2:	f104 0919 	add.w	r9, r4, #25
 80053a6:	e7f4      	b.n	8005392 <_printf_float+0x442>

080053a8 <_printf_common>:
 80053a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ac:	4616      	mov	r6, r2
 80053ae:	4698      	mov	r8, r3
 80053b0:	688a      	ldr	r2, [r1, #8]
 80053b2:	690b      	ldr	r3, [r1, #16]
 80053b4:	4607      	mov	r7, r0
 80053b6:	4293      	cmp	r3, r2
 80053b8:	bfb8      	it	lt
 80053ba:	4613      	movlt	r3, r2
 80053bc:	6033      	str	r3, [r6, #0]
 80053be:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80053c2:	460c      	mov	r4, r1
 80053c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053c8:	b10a      	cbz	r2, 80053ce <_printf_common+0x26>
 80053ca:	3301      	adds	r3, #1
 80053cc:	6033      	str	r3, [r6, #0]
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	0699      	lsls	r1, r3, #26
 80053d2:	bf42      	ittt	mi
 80053d4:	6833      	ldrmi	r3, [r6, #0]
 80053d6:	3302      	addmi	r3, #2
 80053d8:	6033      	strmi	r3, [r6, #0]
 80053da:	6825      	ldr	r5, [r4, #0]
 80053dc:	f015 0506 	ands.w	r5, r5, #6
 80053e0:	d106      	bne.n	80053f0 <_printf_common+0x48>
 80053e2:	f104 0a19 	add.w	sl, r4, #25
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	6832      	ldr	r2, [r6, #0]
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	42ab      	cmp	r3, r5
 80053ee:	dc2b      	bgt.n	8005448 <_printf_common+0xa0>
 80053f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053f4:	6822      	ldr	r2, [r4, #0]
 80053f6:	3b00      	subs	r3, #0
 80053f8:	bf18      	it	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	0692      	lsls	r2, r2, #26
 80053fe:	d430      	bmi.n	8005462 <_printf_common+0xba>
 8005400:	4641      	mov	r1, r8
 8005402:	4638      	mov	r0, r7
 8005404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005408:	47c8      	blx	r9
 800540a:	3001      	adds	r0, #1
 800540c:	d023      	beq.n	8005456 <_printf_common+0xae>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	6922      	ldr	r2, [r4, #16]
 8005412:	f003 0306 	and.w	r3, r3, #6
 8005416:	2b04      	cmp	r3, #4
 8005418:	bf14      	ite	ne
 800541a:	2500      	movne	r5, #0
 800541c:	6833      	ldreq	r3, [r6, #0]
 800541e:	f04f 0600 	mov.w	r6, #0
 8005422:	bf08      	it	eq
 8005424:	68e5      	ldreq	r5, [r4, #12]
 8005426:	f104 041a 	add.w	r4, r4, #26
 800542a:	bf08      	it	eq
 800542c:	1aed      	subeq	r5, r5, r3
 800542e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005432:	bf08      	it	eq
 8005434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005438:	4293      	cmp	r3, r2
 800543a:	bfc4      	itt	gt
 800543c:	1a9b      	subgt	r3, r3, r2
 800543e:	18ed      	addgt	r5, r5, r3
 8005440:	42b5      	cmp	r5, r6
 8005442:	d11a      	bne.n	800547a <_printf_common+0xd2>
 8005444:	2000      	movs	r0, #0
 8005446:	e008      	b.n	800545a <_printf_common+0xb2>
 8005448:	2301      	movs	r3, #1
 800544a:	4652      	mov	r2, sl
 800544c:	4641      	mov	r1, r8
 800544e:	4638      	mov	r0, r7
 8005450:	47c8      	blx	r9
 8005452:	3001      	adds	r0, #1
 8005454:	d103      	bne.n	800545e <_printf_common+0xb6>
 8005456:	f04f 30ff 	mov.w	r0, #4294967295
 800545a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545e:	3501      	adds	r5, #1
 8005460:	e7c1      	b.n	80053e6 <_printf_common+0x3e>
 8005462:	2030      	movs	r0, #48	@ 0x30
 8005464:	18e1      	adds	r1, r4, r3
 8005466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005470:	4422      	add	r2, r4
 8005472:	3302      	adds	r3, #2
 8005474:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005478:	e7c2      	b.n	8005400 <_printf_common+0x58>
 800547a:	2301      	movs	r3, #1
 800547c:	4622      	mov	r2, r4
 800547e:	4641      	mov	r1, r8
 8005480:	4638      	mov	r0, r7
 8005482:	47c8      	blx	r9
 8005484:	3001      	adds	r0, #1
 8005486:	d0e6      	beq.n	8005456 <_printf_common+0xae>
 8005488:	3601      	adds	r6, #1
 800548a:	e7d9      	b.n	8005440 <_printf_common+0x98>

0800548c <_printf_i>:
 800548c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005490:	7e0f      	ldrb	r7, [r1, #24]
 8005492:	4691      	mov	r9, r2
 8005494:	2f78      	cmp	r7, #120	@ 0x78
 8005496:	4680      	mov	r8, r0
 8005498:	460c      	mov	r4, r1
 800549a:	469a      	mov	sl, r3
 800549c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800549e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054a2:	d807      	bhi.n	80054b4 <_printf_i+0x28>
 80054a4:	2f62      	cmp	r7, #98	@ 0x62
 80054a6:	d80a      	bhi.n	80054be <_printf_i+0x32>
 80054a8:	2f00      	cmp	r7, #0
 80054aa:	f000 80d1 	beq.w	8005650 <_printf_i+0x1c4>
 80054ae:	2f58      	cmp	r7, #88	@ 0x58
 80054b0:	f000 80b8 	beq.w	8005624 <_printf_i+0x198>
 80054b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80054bc:	e03a      	b.n	8005534 <_printf_i+0xa8>
 80054be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80054c2:	2b15      	cmp	r3, #21
 80054c4:	d8f6      	bhi.n	80054b4 <_printf_i+0x28>
 80054c6:	a101      	add	r1, pc, #4	@ (adr r1, 80054cc <_printf_i+0x40>)
 80054c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054cc:	08005525 	.word	0x08005525
 80054d0:	08005539 	.word	0x08005539
 80054d4:	080054b5 	.word	0x080054b5
 80054d8:	080054b5 	.word	0x080054b5
 80054dc:	080054b5 	.word	0x080054b5
 80054e0:	080054b5 	.word	0x080054b5
 80054e4:	08005539 	.word	0x08005539
 80054e8:	080054b5 	.word	0x080054b5
 80054ec:	080054b5 	.word	0x080054b5
 80054f0:	080054b5 	.word	0x080054b5
 80054f4:	080054b5 	.word	0x080054b5
 80054f8:	08005637 	.word	0x08005637
 80054fc:	08005563 	.word	0x08005563
 8005500:	080055f1 	.word	0x080055f1
 8005504:	080054b5 	.word	0x080054b5
 8005508:	080054b5 	.word	0x080054b5
 800550c:	08005659 	.word	0x08005659
 8005510:	080054b5 	.word	0x080054b5
 8005514:	08005563 	.word	0x08005563
 8005518:	080054b5 	.word	0x080054b5
 800551c:	080054b5 	.word	0x080054b5
 8005520:	080055f9 	.word	0x080055f9
 8005524:	6833      	ldr	r3, [r6, #0]
 8005526:	1d1a      	adds	r2, r3, #4
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	6032      	str	r2, [r6, #0]
 800552c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005534:	2301      	movs	r3, #1
 8005536:	e09c      	b.n	8005672 <_printf_i+0x1e6>
 8005538:	6833      	ldr	r3, [r6, #0]
 800553a:	6820      	ldr	r0, [r4, #0]
 800553c:	1d19      	adds	r1, r3, #4
 800553e:	6031      	str	r1, [r6, #0]
 8005540:	0606      	lsls	r6, r0, #24
 8005542:	d501      	bpl.n	8005548 <_printf_i+0xbc>
 8005544:	681d      	ldr	r5, [r3, #0]
 8005546:	e003      	b.n	8005550 <_printf_i+0xc4>
 8005548:	0645      	lsls	r5, r0, #25
 800554a:	d5fb      	bpl.n	8005544 <_printf_i+0xb8>
 800554c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005550:	2d00      	cmp	r5, #0
 8005552:	da03      	bge.n	800555c <_printf_i+0xd0>
 8005554:	232d      	movs	r3, #45	@ 0x2d
 8005556:	426d      	negs	r5, r5
 8005558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800555c:	230a      	movs	r3, #10
 800555e:	4858      	ldr	r0, [pc, #352]	@ (80056c0 <_printf_i+0x234>)
 8005560:	e011      	b.n	8005586 <_printf_i+0xfa>
 8005562:	6821      	ldr	r1, [r4, #0]
 8005564:	6833      	ldr	r3, [r6, #0]
 8005566:	0608      	lsls	r0, r1, #24
 8005568:	f853 5b04 	ldr.w	r5, [r3], #4
 800556c:	d402      	bmi.n	8005574 <_printf_i+0xe8>
 800556e:	0649      	lsls	r1, r1, #25
 8005570:	bf48      	it	mi
 8005572:	b2ad      	uxthmi	r5, r5
 8005574:	2f6f      	cmp	r7, #111	@ 0x6f
 8005576:	6033      	str	r3, [r6, #0]
 8005578:	bf14      	ite	ne
 800557a:	230a      	movne	r3, #10
 800557c:	2308      	moveq	r3, #8
 800557e:	4850      	ldr	r0, [pc, #320]	@ (80056c0 <_printf_i+0x234>)
 8005580:	2100      	movs	r1, #0
 8005582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005586:	6866      	ldr	r6, [r4, #4]
 8005588:	2e00      	cmp	r6, #0
 800558a:	60a6      	str	r6, [r4, #8]
 800558c:	db05      	blt.n	800559a <_printf_i+0x10e>
 800558e:	6821      	ldr	r1, [r4, #0]
 8005590:	432e      	orrs	r6, r5
 8005592:	f021 0104 	bic.w	r1, r1, #4
 8005596:	6021      	str	r1, [r4, #0]
 8005598:	d04b      	beq.n	8005632 <_printf_i+0x1a6>
 800559a:	4616      	mov	r6, r2
 800559c:	fbb5 f1f3 	udiv	r1, r5, r3
 80055a0:	fb03 5711 	mls	r7, r3, r1, r5
 80055a4:	5dc7      	ldrb	r7, [r0, r7]
 80055a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055aa:	462f      	mov	r7, r5
 80055ac:	42bb      	cmp	r3, r7
 80055ae:	460d      	mov	r5, r1
 80055b0:	d9f4      	bls.n	800559c <_printf_i+0x110>
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d10b      	bne.n	80055ce <_printf_i+0x142>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	07df      	lsls	r7, r3, #31
 80055ba:	d508      	bpl.n	80055ce <_printf_i+0x142>
 80055bc:	6923      	ldr	r3, [r4, #16]
 80055be:	6861      	ldr	r1, [r4, #4]
 80055c0:	4299      	cmp	r1, r3
 80055c2:	bfde      	ittt	le
 80055c4:	2330      	movle	r3, #48	@ 0x30
 80055c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80055ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80055ce:	1b92      	subs	r2, r2, r6
 80055d0:	6122      	str	r2, [r4, #16]
 80055d2:	464b      	mov	r3, r9
 80055d4:	4621      	mov	r1, r4
 80055d6:	4640      	mov	r0, r8
 80055d8:	f8cd a000 	str.w	sl, [sp]
 80055dc:	aa03      	add	r2, sp, #12
 80055de:	f7ff fee3 	bl	80053a8 <_printf_common>
 80055e2:	3001      	adds	r0, #1
 80055e4:	d14a      	bne.n	800567c <_printf_i+0x1f0>
 80055e6:	f04f 30ff 	mov.w	r0, #4294967295
 80055ea:	b004      	add	sp, #16
 80055ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	f043 0320 	orr.w	r3, r3, #32
 80055f6:	6023      	str	r3, [r4, #0]
 80055f8:	2778      	movs	r7, #120	@ 0x78
 80055fa:	4832      	ldr	r0, [pc, #200]	@ (80056c4 <_printf_i+0x238>)
 80055fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005600:	6823      	ldr	r3, [r4, #0]
 8005602:	6831      	ldr	r1, [r6, #0]
 8005604:	061f      	lsls	r7, r3, #24
 8005606:	f851 5b04 	ldr.w	r5, [r1], #4
 800560a:	d402      	bmi.n	8005612 <_printf_i+0x186>
 800560c:	065f      	lsls	r7, r3, #25
 800560e:	bf48      	it	mi
 8005610:	b2ad      	uxthmi	r5, r5
 8005612:	6031      	str	r1, [r6, #0]
 8005614:	07d9      	lsls	r1, r3, #31
 8005616:	bf44      	itt	mi
 8005618:	f043 0320 	orrmi.w	r3, r3, #32
 800561c:	6023      	strmi	r3, [r4, #0]
 800561e:	b11d      	cbz	r5, 8005628 <_printf_i+0x19c>
 8005620:	2310      	movs	r3, #16
 8005622:	e7ad      	b.n	8005580 <_printf_i+0xf4>
 8005624:	4826      	ldr	r0, [pc, #152]	@ (80056c0 <_printf_i+0x234>)
 8005626:	e7e9      	b.n	80055fc <_printf_i+0x170>
 8005628:	6823      	ldr	r3, [r4, #0]
 800562a:	f023 0320 	bic.w	r3, r3, #32
 800562e:	6023      	str	r3, [r4, #0]
 8005630:	e7f6      	b.n	8005620 <_printf_i+0x194>
 8005632:	4616      	mov	r6, r2
 8005634:	e7bd      	b.n	80055b2 <_printf_i+0x126>
 8005636:	6833      	ldr	r3, [r6, #0]
 8005638:	6825      	ldr	r5, [r4, #0]
 800563a:	1d18      	adds	r0, r3, #4
 800563c:	6961      	ldr	r1, [r4, #20]
 800563e:	6030      	str	r0, [r6, #0]
 8005640:	062e      	lsls	r6, r5, #24
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	d501      	bpl.n	800564a <_printf_i+0x1be>
 8005646:	6019      	str	r1, [r3, #0]
 8005648:	e002      	b.n	8005650 <_printf_i+0x1c4>
 800564a:	0668      	lsls	r0, r5, #25
 800564c:	d5fb      	bpl.n	8005646 <_printf_i+0x1ba>
 800564e:	8019      	strh	r1, [r3, #0]
 8005650:	2300      	movs	r3, #0
 8005652:	4616      	mov	r6, r2
 8005654:	6123      	str	r3, [r4, #16]
 8005656:	e7bc      	b.n	80055d2 <_printf_i+0x146>
 8005658:	6833      	ldr	r3, [r6, #0]
 800565a:	2100      	movs	r1, #0
 800565c:	1d1a      	adds	r2, r3, #4
 800565e:	6032      	str	r2, [r6, #0]
 8005660:	681e      	ldr	r6, [r3, #0]
 8005662:	6862      	ldr	r2, [r4, #4]
 8005664:	4630      	mov	r0, r6
 8005666:	f000 fbfa 	bl	8005e5e <memchr>
 800566a:	b108      	cbz	r0, 8005670 <_printf_i+0x1e4>
 800566c:	1b80      	subs	r0, r0, r6
 800566e:	6060      	str	r0, [r4, #4]
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	2300      	movs	r3, #0
 8005676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800567a:	e7aa      	b.n	80055d2 <_printf_i+0x146>
 800567c:	4632      	mov	r2, r6
 800567e:	4649      	mov	r1, r9
 8005680:	4640      	mov	r0, r8
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	47d0      	blx	sl
 8005686:	3001      	adds	r0, #1
 8005688:	d0ad      	beq.n	80055e6 <_printf_i+0x15a>
 800568a:	6823      	ldr	r3, [r4, #0]
 800568c:	079b      	lsls	r3, r3, #30
 800568e:	d413      	bmi.n	80056b8 <_printf_i+0x22c>
 8005690:	68e0      	ldr	r0, [r4, #12]
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	4298      	cmp	r0, r3
 8005696:	bfb8      	it	lt
 8005698:	4618      	movlt	r0, r3
 800569a:	e7a6      	b.n	80055ea <_printf_i+0x15e>
 800569c:	2301      	movs	r3, #1
 800569e:	4632      	mov	r2, r6
 80056a0:	4649      	mov	r1, r9
 80056a2:	4640      	mov	r0, r8
 80056a4:	47d0      	blx	sl
 80056a6:	3001      	adds	r0, #1
 80056a8:	d09d      	beq.n	80055e6 <_printf_i+0x15a>
 80056aa:	3501      	adds	r5, #1
 80056ac:	68e3      	ldr	r3, [r4, #12]
 80056ae:	9903      	ldr	r1, [sp, #12]
 80056b0:	1a5b      	subs	r3, r3, r1
 80056b2:	42ab      	cmp	r3, r5
 80056b4:	dcf2      	bgt.n	800569c <_printf_i+0x210>
 80056b6:	e7eb      	b.n	8005690 <_printf_i+0x204>
 80056b8:	2500      	movs	r5, #0
 80056ba:	f104 0619 	add.w	r6, r4, #25
 80056be:	e7f5      	b.n	80056ac <_printf_i+0x220>
 80056c0:	080095be 	.word	0x080095be
 80056c4:	080095cf 	.word	0x080095cf

080056c8 <_scanf_float>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	b087      	sub	sp, #28
 80056ce:	9303      	str	r3, [sp, #12]
 80056d0:	688b      	ldr	r3, [r1, #8]
 80056d2:	4691      	mov	r9, r2
 80056d4:	1e5a      	subs	r2, r3, #1
 80056d6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80056da:	bf82      	ittt	hi
 80056dc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80056e0:	eb03 0b05 	addhi.w	fp, r3, r5
 80056e4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80056e8:	460a      	mov	r2, r1
 80056ea:	f04f 0500 	mov.w	r5, #0
 80056ee:	bf88      	it	hi
 80056f0:	608b      	strhi	r3, [r1, #8]
 80056f2:	680b      	ldr	r3, [r1, #0]
 80056f4:	4680      	mov	r8, r0
 80056f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80056fa:	f842 3b1c 	str.w	r3, [r2], #28
 80056fe:	460c      	mov	r4, r1
 8005700:	bf98      	it	ls
 8005702:	f04f 0b00 	movls.w	fp, #0
 8005706:	4616      	mov	r6, r2
 8005708:	46aa      	mov	sl, r5
 800570a:	462f      	mov	r7, r5
 800570c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005710:	9201      	str	r2, [sp, #4]
 8005712:	9502      	str	r5, [sp, #8]
 8005714:	68a2      	ldr	r2, [r4, #8]
 8005716:	b15a      	cbz	r2, 8005730 <_scanf_float+0x68>
 8005718:	f8d9 3000 	ldr.w	r3, [r9]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005720:	d862      	bhi.n	80057e8 <_scanf_float+0x120>
 8005722:	2b40      	cmp	r3, #64	@ 0x40
 8005724:	d83a      	bhi.n	800579c <_scanf_float+0xd4>
 8005726:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800572a:	b2c8      	uxtb	r0, r1
 800572c:	280e      	cmp	r0, #14
 800572e:	d938      	bls.n	80057a2 <_scanf_float+0xda>
 8005730:	b11f      	cbz	r7, 800573a <_scanf_float+0x72>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800573e:	f1ba 0f01 	cmp.w	sl, #1
 8005742:	f200 8114 	bhi.w	800596e <_scanf_float+0x2a6>
 8005746:	9b01      	ldr	r3, [sp, #4]
 8005748:	429e      	cmp	r6, r3
 800574a:	f200 8105 	bhi.w	8005958 <_scanf_float+0x290>
 800574e:	2001      	movs	r0, #1
 8005750:	b007      	add	sp, #28
 8005752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005756:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800575a:	2a0d      	cmp	r2, #13
 800575c:	d8e8      	bhi.n	8005730 <_scanf_float+0x68>
 800575e:	a101      	add	r1, pc, #4	@ (adr r1, 8005764 <_scanf_float+0x9c>)
 8005760:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005764:	080058ad 	.word	0x080058ad
 8005768:	08005731 	.word	0x08005731
 800576c:	08005731 	.word	0x08005731
 8005770:	08005731 	.word	0x08005731
 8005774:	08005909 	.word	0x08005909
 8005778:	080058e3 	.word	0x080058e3
 800577c:	08005731 	.word	0x08005731
 8005780:	08005731 	.word	0x08005731
 8005784:	080058bb 	.word	0x080058bb
 8005788:	08005731 	.word	0x08005731
 800578c:	08005731 	.word	0x08005731
 8005790:	08005731 	.word	0x08005731
 8005794:	08005731 	.word	0x08005731
 8005798:	08005877 	.word	0x08005877
 800579c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80057a0:	e7db      	b.n	800575a <_scanf_float+0x92>
 80057a2:	290e      	cmp	r1, #14
 80057a4:	d8c4      	bhi.n	8005730 <_scanf_float+0x68>
 80057a6:	a001      	add	r0, pc, #4	@ (adr r0, 80057ac <_scanf_float+0xe4>)
 80057a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80057ac:	08005867 	.word	0x08005867
 80057b0:	08005731 	.word	0x08005731
 80057b4:	08005867 	.word	0x08005867
 80057b8:	080058f7 	.word	0x080058f7
 80057bc:	08005731 	.word	0x08005731
 80057c0:	08005809 	.word	0x08005809
 80057c4:	0800584d 	.word	0x0800584d
 80057c8:	0800584d 	.word	0x0800584d
 80057cc:	0800584d 	.word	0x0800584d
 80057d0:	0800584d 	.word	0x0800584d
 80057d4:	0800584d 	.word	0x0800584d
 80057d8:	0800584d 	.word	0x0800584d
 80057dc:	0800584d 	.word	0x0800584d
 80057e0:	0800584d 	.word	0x0800584d
 80057e4:	0800584d 	.word	0x0800584d
 80057e8:	2b6e      	cmp	r3, #110	@ 0x6e
 80057ea:	d809      	bhi.n	8005800 <_scanf_float+0x138>
 80057ec:	2b60      	cmp	r3, #96	@ 0x60
 80057ee:	d8b2      	bhi.n	8005756 <_scanf_float+0x8e>
 80057f0:	2b54      	cmp	r3, #84	@ 0x54
 80057f2:	d07b      	beq.n	80058ec <_scanf_float+0x224>
 80057f4:	2b59      	cmp	r3, #89	@ 0x59
 80057f6:	d19b      	bne.n	8005730 <_scanf_float+0x68>
 80057f8:	2d07      	cmp	r5, #7
 80057fa:	d199      	bne.n	8005730 <_scanf_float+0x68>
 80057fc:	2508      	movs	r5, #8
 80057fe:	e02f      	b.n	8005860 <_scanf_float+0x198>
 8005800:	2b74      	cmp	r3, #116	@ 0x74
 8005802:	d073      	beq.n	80058ec <_scanf_float+0x224>
 8005804:	2b79      	cmp	r3, #121	@ 0x79
 8005806:	e7f6      	b.n	80057f6 <_scanf_float+0x12e>
 8005808:	6821      	ldr	r1, [r4, #0]
 800580a:	05c8      	lsls	r0, r1, #23
 800580c:	d51e      	bpl.n	800584c <_scanf_float+0x184>
 800580e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005812:	6021      	str	r1, [r4, #0]
 8005814:	3701      	adds	r7, #1
 8005816:	f1bb 0f00 	cmp.w	fp, #0
 800581a:	d003      	beq.n	8005824 <_scanf_float+0x15c>
 800581c:	3201      	adds	r2, #1
 800581e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005822:	60a2      	str	r2, [r4, #8]
 8005824:	68a3      	ldr	r3, [r4, #8]
 8005826:	3b01      	subs	r3, #1
 8005828:	60a3      	str	r3, [r4, #8]
 800582a:	6923      	ldr	r3, [r4, #16]
 800582c:	3301      	adds	r3, #1
 800582e:	6123      	str	r3, [r4, #16]
 8005830:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	2b00      	cmp	r3, #0
 8005838:	f8c9 3004 	str.w	r3, [r9, #4]
 800583c:	f340 8083 	ble.w	8005946 <_scanf_float+0x27e>
 8005840:	f8d9 3000 	ldr.w	r3, [r9]
 8005844:	3301      	adds	r3, #1
 8005846:	f8c9 3000 	str.w	r3, [r9]
 800584a:	e763      	b.n	8005714 <_scanf_float+0x4c>
 800584c:	eb1a 0105 	adds.w	r1, sl, r5
 8005850:	f47f af6e 	bne.w	8005730 <_scanf_float+0x68>
 8005854:	460d      	mov	r5, r1
 8005856:	468a      	mov	sl, r1
 8005858:	6822      	ldr	r2, [r4, #0]
 800585a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800585e:	6022      	str	r2, [r4, #0]
 8005860:	f806 3b01 	strb.w	r3, [r6], #1
 8005864:	e7de      	b.n	8005824 <_scanf_float+0x15c>
 8005866:	6822      	ldr	r2, [r4, #0]
 8005868:	0610      	lsls	r0, r2, #24
 800586a:	f57f af61 	bpl.w	8005730 <_scanf_float+0x68>
 800586e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005872:	6022      	str	r2, [r4, #0]
 8005874:	e7f4      	b.n	8005860 <_scanf_float+0x198>
 8005876:	f1ba 0f00 	cmp.w	sl, #0
 800587a:	d10c      	bne.n	8005896 <_scanf_float+0x1ce>
 800587c:	b977      	cbnz	r7, 800589c <_scanf_float+0x1d4>
 800587e:	6822      	ldr	r2, [r4, #0]
 8005880:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005884:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005888:	d108      	bne.n	800589c <_scanf_float+0x1d4>
 800588a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800588e:	f04f 0a01 	mov.w	sl, #1
 8005892:	6022      	str	r2, [r4, #0]
 8005894:	e7e4      	b.n	8005860 <_scanf_float+0x198>
 8005896:	f1ba 0f02 	cmp.w	sl, #2
 800589a:	d051      	beq.n	8005940 <_scanf_float+0x278>
 800589c:	2d01      	cmp	r5, #1
 800589e:	d002      	beq.n	80058a6 <_scanf_float+0x1de>
 80058a0:	2d04      	cmp	r5, #4
 80058a2:	f47f af45 	bne.w	8005730 <_scanf_float+0x68>
 80058a6:	3501      	adds	r5, #1
 80058a8:	b2ed      	uxtb	r5, r5
 80058aa:	e7d9      	b.n	8005860 <_scanf_float+0x198>
 80058ac:	f1ba 0f01 	cmp.w	sl, #1
 80058b0:	f47f af3e 	bne.w	8005730 <_scanf_float+0x68>
 80058b4:	f04f 0a02 	mov.w	sl, #2
 80058b8:	e7d2      	b.n	8005860 <_scanf_float+0x198>
 80058ba:	b975      	cbnz	r5, 80058da <_scanf_float+0x212>
 80058bc:	2f00      	cmp	r7, #0
 80058be:	f47f af38 	bne.w	8005732 <_scanf_float+0x6a>
 80058c2:	6822      	ldr	r2, [r4, #0]
 80058c4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80058c8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80058cc:	f040 80ff 	bne.w	8005ace <_scanf_float+0x406>
 80058d0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80058d4:	2501      	movs	r5, #1
 80058d6:	6022      	str	r2, [r4, #0]
 80058d8:	e7c2      	b.n	8005860 <_scanf_float+0x198>
 80058da:	2d03      	cmp	r5, #3
 80058dc:	d0e3      	beq.n	80058a6 <_scanf_float+0x1de>
 80058de:	2d05      	cmp	r5, #5
 80058e0:	e7df      	b.n	80058a2 <_scanf_float+0x1da>
 80058e2:	2d02      	cmp	r5, #2
 80058e4:	f47f af24 	bne.w	8005730 <_scanf_float+0x68>
 80058e8:	2503      	movs	r5, #3
 80058ea:	e7b9      	b.n	8005860 <_scanf_float+0x198>
 80058ec:	2d06      	cmp	r5, #6
 80058ee:	f47f af1f 	bne.w	8005730 <_scanf_float+0x68>
 80058f2:	2507      	movs	r5, #7
 80058f4:	e7b4      	b.n	8005860 <_scanf_float+0x198>
 80058f6:	6822      	ldr	r2, [r4, #0]
 80058f8:	0591      	lsls	r1, r2, #22
 80058fa:	f57f af19 	bpl.w	8005730 <_scanf_float+0x68>
 80058fe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005902:	6022      	str	r2, [r4, #0]
 8005904:	9702      	str	r7, [sp, #8]
 8005906:	e7ab      	b.n	8005860 <_scanf_float+0x198>
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800590e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005912:	d005      	beq.n	8005920 <_scanf_float+0x258>
 8005914:	0550      	lsls	r0, r2, #21
 8005916:	f57f af0b 	bpl.w	8005730 <_scanf_float+0x68>
 800591a:	2f00      	cmp	r7, #0
 800591c:	f000 80d7 	beq.w	8005ace <_scanf_float+0x406>
 8005920:	0591      	lsls	r1, r2, #22
 8005922:	bf58      	it	pl
 8005924:	9902      	ldrpl	r1, [sp, #8]
 8005926:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800592a:	bf58      	it	pl
 800592c:	1a79      	subpl	r1, r7, r1
 800592e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005932:	f04f 0700 	mov.w	r7, #0
 8005936:	bf58      	it	pl
 8005938:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800593c:	6022      	str	r2, [r4, #0]
 800593e:	e78f      	b.n	8005860 <_scanf_float+0x198>
 8005940:	f04f 0a03 	mov.w	sl, #3
 8005944:	e78c      	b.n	8005860 <_scanf_float+0x198>
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800594e:	4798      	blx	r3
 8005950:	2800      	cmp	r0, #0
 8005952:	f43f aedf 	beq.w	8005714 <_scanf_float+0x4c>
 8005956:	e6eb      	b.n	8005730 <_scanf_float+0x68>
 8005958:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800595c:	464a      	mov	r2, r9
 800595e:	4640      	mov	r0, r8
 8005960:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005964:	4798      	blx	r3
 8005966:	6923      	ldr	r3, [r4, #16]
 8005968:	3b01      	subs	r3, #1
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	e6eb      	b.n	8005746 <_scanf_float+0x7e>
 800596e:	1e6b      	subs	r3, r5, #1
 8005970:	2b06      	cmp	r3, #6
 8005972:	d824      	bhi.n	80059be <_scanf_float+0x2f6>
 8005974:	2d02      	cmp	r5, #2
 8005976:	d836      	bhi.n	80059e6 <_scanf_float+0x31e>
 8005978:	9b01      	ldr	r3, [sp, #4]
 800597a:	429e      	cmp	r6, r3
 800597c:	f67f aee7 	bls.w	800574e <_scanf_float+0x86>
 8005980:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005984:	464a      	mov	r2, r9
 8005986:	4640      	mov	r0, r8
 8005988:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800598c:	4798      	blx	r3
 800598e:	6923      	ldr	r3, [r4, #16]
 8005990:	3b01      	subs	r3, #1
 8005992:	6123      	str	r3, [r4, #16]
 8005994:	e7f0      	b.n	8005978 <_scanf_float+0x2b0>
 8005996:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800599a:	464a      	mov	r2, r9
 800599c:	4640      	mov	r0, r8
 800599e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80059a2:	4798      	blx	r3
 80059a4:	6923      	ldr	r3, [r4, #16]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059ae:	fa5f fa8a 	uxtb.w	sl, sl
 80059b2:	f1ba 0f02 	cmp.w	sl, #2
 80059b6:	d1ee      	bne.n	8005996 <_scanf_float+0x2ce>
 80059b8:	3d03      	subs	r5, #3
 80059ba:	b2ed      	uxtb	r5, r5
 80059bc:	1b76      	subs	r6, r6, r5
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	05da      	lsls	r2, r3, #23
 80059c2:	d530      	bpl.n	8005a26 <_scanf_float+0x35e>
 80059c4:	055b      	lsls	r3, r3, #21
 80059c6:	d511      	bpl.n	80059ec <_scanf_float+0x324>
 80059c8:	9b01      	ldr	r3, [sp, #4]
 80059ca:	429e      	cmp	r6, r3
 80059cc:	f67f aebf 	bls.w	800574e <_scanf_float+0x86>
 80059d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80059d4:	464a      	mov	r2, r9
 80059d6:	4640      	mov	r0, r8
 80059d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80059dc:	4798      	blx	r3
 80059de:	6923      	ldr	r3, [r4, #16]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	6123      	str	r3, [r4, #16]
 80059e4:	e7f0      	b.n	80059c8 <_scanf_float+0x300>
 80059e6:	46aa      	mov	sl, r5
 80059e8:	46b3      	mov	fp, r6
 80059ea:	e7de      	b.n	80059aa <_scanf_float+0x2e2>
 80059ec:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80059f0:	6923      	ldr	r3, [r4, #16]
 80059f2:	2965      	cmp	r1, #101	@ 0x65
 80059f4:	f103 33ff 	add.w	r3, r3, #4294967295
 80059f8:	f106 35ff 	add.w	r5, r6, #4294967295
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	d00c      	beq.n	8005a1a <_scanf_float+0x352>
 8005a00:	2945      	cmp	r1, #69	@ 0x45
 8005a02:	d00a      	beq.n	8005a1a <_scanf_float+0x352>
 8005a04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a08:	464a      	mov	r2, r9
 8005a0a:	4640      	mov	r0, r8
 8005a0c:	4798      	blx	r3
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	1eb5      	subs	r5, r6, #2
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	464a      	mov	r2, r9
 8005a1c:	4640      	mov	r0, r8
 8005a1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005a22:	4798      	blx	r3
 8005a24:	462e      	mov	r6, r5
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	f012 0210 	ands.w	r2, r2, #16
 8005a2c:	d001      	beq.n	8005a32 <_scanf_float+0x36a>
 8005a2e:	2000      	movs	r0, #0
 8005a30:	e68e      	b.n	8005750 <_scanf_float+0x88>
 8005a32:	7032      	strb	r2, [r6, #0]
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005a3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a3e:	d125      	bne.n	8005a8c <_scanf_float+0x3c4>
 8005a40:	9b02      	ldr	r3, [sp, #8]
 8005a42:	429f      	cmp	r7, r3
 8005a44:	d00a      	beq.n	8005a5c <_scanf_float+0x394>
 8005a46:	1bda      	subs	r2, r3, r7
 8005a48:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005a4c:	429e      	cmp	r6, r3
 8005a4e:	bf28      	it	cs
 8005a50:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005a54:	4630      	mov	r0, r6
 8005a56:	491f      	ldr	r1, [pc, #124]	@ (8005ad4 <_scanf_float+0x40c>)
 8005a58:	f000 f91c 	bl	8005c94 <siprintf>
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	4640      	mov	r0, r8
 8005a60:	9901      	ldr	r1, [sp, #4]
 8005a62:	f002 fc05 	bl	8008270 <_strtod_r>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	6825      	ldr	r5, [r4, #0]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f015 0f02 	tst.w	r5, #2
 8005a70:	4606      	mov	r6, r0
 8005a72:	460f      	mov	r7, r1
 8005a74:	f103 0204 	add.w	r2, r3, #4
 8005a78:	d015      	beq.n	8005aa6 <_scanf_float+0x3de>
 8005a7a:	9903      	ldr	r1, [sp, #12]
 8005a7c:	600a      	str	r2, [r1, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	e9c3 6700 	strd	r6, r7, [r3]
 8005a84:	68e3      	ldr	r3, [r4, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60e3      	str	r3, [r4, #12]
 8005a8a:	e7d0      	b.n	8005a2e <_scanf_float+0x366>
 8005a8c:	9b04      	ldr	r3, [sp, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d0e4      	beq.n	8005a5c <_scanf_float+0x394>
 8005a92:	9905      	ldr	r1, [sp, #20]
 8005a94:	230a      	movs	r3, #10
 8005a96:	4640      	mov	r0, r8
 8005a98:	3101      	adds	r1, #1
 8005a9a:	f002 fc69 	bl	8008370 <_strtol_r>
 8005a9e:	9b04      	ldr	r3, [sp, #16]
 8005aa0:	9e05      	ldr	r6, [sp, #20]
 8005aa2:	1ac2      	subs	r2, r0, r3
 8005aa4:	e7d0      	b.n	8005a48 <_scanf_float+0x380>
 8005aa6:	076d      	lsls	r5, r5, #29
 8005aa8:	d4e7      	bmi.n	8005a7a <_scanf_float+0x3b2>
 8005aaa:	9d03      	ldr	r5, [sp, #12]
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	681d      	ldr	r5, [r3, #0]
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	f7fa ffc2 	bl	8000a3c <__aeabi_dcmpun>
 8005ab8:	b120      	cbz	r0, 8005ac4 <_scanf_float+0x3fc>
 8005aba:	4807      	ldr	r0, [pc, #28]	@ (8005ad8 <_scanf_float+0x410>)
 8005abc:	f000 f9de 	bl	8005e7c <nanf>
 8005ac0:	6028      	str	r0, [r5, #0]
 8005ac2:	e7df      	b.n	8005a84 <_scanf_float+0x3bc>
 8005ac4:	4630      	mov	r0, r6
 8005ac6:	4639      	mov	r1, r7
 8005ac8:	f7fb f816 	bl	8000af8 <__aeabi_d2f>
 8005acc:	e7f8      	b.n	8005ac0 <_scanf_float+0x3f8>
 8005ace:	2700      	movs	r7, #0
 8005ad0:	e633      	b.n	800573a <_scanf_float+0x72>
 8005ad2:	bf00      	nop
 8005ad4:	080095e0 	.word	0x080095e0
 8005ad8:	08009721 	.word	0x08009721

08005adc <std>:
 8005adc:	2300      	movs	r3, #0
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ae6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aea:	6083      	str	r3, [r0, #8]
 8005aec:	8181      	strh	r1, [r0, #12]
 8005aee:	6643      	str	r3, [r0, #100]	@ 0x64
 8005af0:	81c2      	strh	r2, [r0, #14]
 8005af2:	6183      	str	r3, [r0, #24]
 8005af4:	4619      	mov	r1, r3
 8005af6:	2208      	movs	r2, #8
 8005af8:	305c      	adds	r0, #92	@ 0x5c
 8005afa:	f000 f930 	bl	8005d5e <memset>
 8005afe:	4b0d      	ldr	r3, [pc, #52]	@ (8005b34 <std+0x58>)
 8005b00:	6224      	str	r4, [r4, #32]
 8005b02:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b04:	4b0c      	ldr	r3, [pc, #48]	@ (8005b38 <std+0x5c>)
 8005b06:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b08:	4b0c      	ldr	r3, [pc, #48]	@ (8005b3c <std+0x60>)
 8005b0a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b40 <std+0x64>)
 8005b0e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b10:	4b0c      	ldr	r3, [pc, #48]	@ (8005b44 <std+0x68>)
 8005b12:	429c      	cmp	r4, r3
 8005b14:	d006      	beq.n	8005b24 <std+0x48>
 8005b16:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b1a:	4294      	cmp	r4, r2
 8005b1c:	d002      	beq.n	8005b24 <std+0x48>
 8005b1e:	33d0      	adds	r3, #208	@ 0xd0
 8005b20:	429c      	cmp	r4, r3
 8005b22:	d105      	bne.n	8005b30 <std+0x54>
 8005b24:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b2c:	f000 b994 	b.w	8005e58 <__retarget_lock_init_recursive>
 8005b30:	bd10      	pop	{r4, pc}
 8005b32:	bf00      	nop
 8005b34:	08005cd9 	.word	0x08005cd9
 8005b38:	08005cfb 	.word	0x08005cfb
 8005b3c:	08005d33 	.word	0x08005d33
 8005b40:	08005d57 	.word	0x08005d57
 8005b44:	200008b0 	.word	0x200008b0

08005b48 <stdio_exit_handler>:
 8005b48:	4a02      	ldr	r2, [pc, #8]	@ (8005b54 <stdio_exit_handler+0xc>)
 8005b4a:	4903      	ldr	r1, [pc, #12]	@ (8005b58 <stdio_exit_handler+0x10>)
 8005b4c:	4803      	ldr	r0, [pc, #12]	@ (8005b5c <stdio_exit_handler+0x14>)
 8005b4e:	f000 b869 	b.w	8005c24 <_fwalk_sglue>
 8005b52:	bf00      	nop
 8005b54:	20000010 	.word	0x20000010
 8005b58:	080089a5 	.word	0x080089a5
 8005b5c:	20000020 	.word	0x20000020

08005b60 <cleanup_stdio>:
 8005b60:	6841      	ldr	r1, [r0, #4]
 8005b62:	4b0c      	ldr	r3, [pc, #48]	@ (8005b94 <cleanup_stdio+0x34>)
 8005b64:	b510      	push	{r4, lr}
 8005b66:	4299      	cmp	r1, r3
 8005b68:	4604      	mov	r4, r0
 8005b6a:	d001      	beq.n	8005b70 <cleanup_stdio+0x10>
 8005b6c:	f002 ff1a 	bl	80089a4 <_fflush_r>
 8005b70:	68a1      	ldr	r1, [r4, #8]
 8005b72:	4b09      	ldr	r3, [pc, #36]	@ (8005b98 <cleanup_stdio+0x38>)
 8005b74:	4299      	cmp	r1, r3
 8005b76:	d002      	beq.n	8005b7e <cleanup_stdio+0x1e>
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f002 ff13 	bl	80089a4 <_fflush_r>
 8005b7e:	68e1      	ldr	r1, [r4, #12]
 8005b80:	4b06      	ldr	r3, [pc, #24]	@ (8005b9c <cleanup_stdio+0x3c>)
 8005b82:	4299      	cmp	r1, r3
 8005b84:	d004      	beq.n	8005b90 <cleanup_stdio+0x30>
 8005b86:	4620      	mov	r0, r4
 8005b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b8c:	f002 bf0a 	b.w	80089a4 <_fflush_r>
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	bf00      	nop
 8005b94:	200008b0 	.word	0x200008b0
 8005b98:	20000918 	.word	0x20000918
 8005b9c:	20000980 	.word	0x20000980

08005ba0 <global_stdio_init.part.0>:
 8005ba0:	b510      	push	{r4, lr}
 8005ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <global_stdio_init.part.0+0x30>)
 8005ba4:	4c0b      	ldr	r4, [pc, #44]	@ (8005bd4 <global_stdio_init.part.0+0x34>)
 8005ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8005bd8 <global_stdio_init.part.0+0x38>)
 8005ba8:	4620      	mov	r0, r4
 8005baa:	601a      	str	r2, [r3, #0]
 8005bac:	2104      	movs	r1, #4
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f7ff ff94 	bl	8005adc <std>
 8005bb4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2109      	movs	r1, #9
 8005bbc:	f7ff ff8e 	bl	8005adc <std>
 8005bc0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bca:	2112      	movs	r1, #18
 8005bcc:	f7ff bf86 	b.w	8005adc <std>
 8005bd0:	200009e8 	.word	0x200009e8
 8005bd4:	200008b0 	.word	0x200008b0
 8005bd8:	08005b49 	.word	0x08005b49

08005bdc <__sfp_lock_acquire>:
 8005bdc:	4801      	ldr	r0, [pc, #4]	@ (8005be4 <__sfp_lock_acquire+0x8>)
 8005bde:	f000 b93c 	b.w	8005e5a <__retarget_lock_acquire_recursive>
 8005be2:	bf00      	nop
 8005be4:	200009f1 	.word	0x200009f1

08005be8 <__sfp_lock_release>:
 8005be8:	4801      	ldr	r0, [pc, #4]	@ (8005bf0 <__sfp_lock_release+0x8>)
 8005bea:	f000 b937 	b.w	8005e5c <__retarget_lock_release_recursive>
 8005bee:	bf00      	nop
 8005bf0:	200009f1 	.word	0x200009f1

08005bf4 <__sinit>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	f7ff fff0 	bl	8005bdc <__sfp_lock_acquire>
 8005bfc:	6a23      	ldr	r3, [r4, #32]
 8005bfe:	b11b      	cbz	r3, 8005c08 <__sinit+0x14>
 8005c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c04:	f7ff bff0 	b.w	8005be8 <__sfp_lock_release>
 8005c08:	4b04      	ldr	r3, [pc, #16]	@ (8005c1c <__sinit+0x28>)
 8005c0a:	6223      	str	r3, [r4, #32]
 8005c0c:	4b04      	ldr	r3, [pc, #16]	@ (8005c20 <__sinit+0x2c>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1f5      	bne.n	8005c00 <__sinit+0xc>
 8005c14:	f7ff ffc4 	bl	8005ba0 <global_stdio_init.part.0>
 8005c18:	e7f2      	b.n	8005c00 <__sinit+0xc>
 8005c1a:	bf00      	nop
 8005c1c:	08005b61 	.word	0x08005b61
 8005c20:	200009e8 	.word	0x200009e8

08005c24 <_fwalk_sglue>:
 8005c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c28:	4607      	mov	r7, r0
 8005c2a:	4688      	mov	r8, r1
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	2600      	movs	r6, #0
 8005c30:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c34:	f1b9 0901 	subs.w	r9, r9, #1
 8005c38:	d505      	bpl.n	8005c46 <_fwalk_sglue+0x22>
 8005c3a:	6824      	ldr	r4, [r4, #0]
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	d1f7      	bne.n	8005c30 <_fwalk_sglue+0xc>
 8005c40:	4630      	mov	r0, r6
 8005c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c46:	89ab      	ldrh	r3, [r5, #12]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d907      	bls.n	8005c5c <_fwalk_sglue+0x38>
 8005c4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c50:	3301      	adds	r3, #1
 8005c52:	d003      	beq.n	8005c5c <_fwalk_sglue+0x38>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4638      	mov	r0, r7
 8005c58:	47c0      	blx	r8
 8005c5a:	4306      	orrs	r6, r0
 8005c5c:	3568      	adds	r5, #104	@ 0x68
 8005c5e:	e7e9      	b.n	8005c34 <_fwalk_sglue+0x10>

08005c60 <iprintf>:
 8005c60:	b40f      	push	{r0, r1, r2, r3}
 8005c62:	b507      	push	{r0, r1, r2, lr}
 8005c64:	4906      	ldr	r1, [pc, #24]	@ (8005c80 <iprintf+0x20>)
 8005c66:	ab04      	add	r3, sp, #16
 8005c68:	6808      	ldr	r0, [r1, #0]
 8005c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c6e:	6881      	ldr	r1, [r0, #8]
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	f002 fcff 	bl	8008674 <_vfiprintf_r>
 8005c76:	b003      	add	sp, #12
 8005c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c7c:	b004      	add	sp, #16
 8005c7e:	4770      	bx	lr
 8005c80:	2000001c 	.word	0x2000001c

08005c84 <putchar>:
 8005c84:	4b02      	ldr	r3, [pc, #8]	@ (8005c90 <putchar+0xc>)
 8005c86:	4601      	mov	r1, r0
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	6882      	ldr	r2, [r0, #8]
 8005c8c:	f002 beb2 	b.w	80089f4 <_putc_r>
 8005c90:	2000001c 	.word	0x2000001c

08005c94 <siprintf>:
 8005c94:	b40e      	push	{r1, r2, r3}
 8005c96:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c9a:	b510      	push	{r4, lr}
 8005c9c:	2400      	movs	r4, #0
 8005c9e:	b09d      	sub	sp, #116	@ 0x74
 8005ca0:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005ca2:	9002      	str	r0, [sp, #8]
 8005ca4:	9006      	str	r0, [sp, #24]
 8005ca6:	9107      	str	r1, [sp, #28]
 8005ca8:	9104      	str	r1, [sp, #16]
 8005caa:	4809      	ldr	r0, [pc, #36]	@ (8005cd0 <siprintf+0x3c>)
 8005cac:	4909      	ldr	r1, [pc, #36]	@ (8005cd4 <siprintf+0x40>)
 8005cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cb2:	9105      	str	r1, [sp, #20]
 8005cb4:	6800      	ldr	r0, [r0, #0]
 8005cb6:	a902      	add	r1, sp, #8
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005cbc:	f002 fbb6 	bl	800842c <_svfiprintf_r>
 8005cc0:	9b02      	ldr	r3, [sp, #8]
 8005cc2:	701c      	strb	r4, [r3, #0]
 8005cc4:	b01d      	add	sp, #116	@ 0x74
 8005cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cca:	b003      	add	sp, #12
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	2000001c 	.word	0x2000001c
 8005cd4:	ffff0208 	.word	0xffff0208

08005cd8 <__sread>:
 8005cd8:	b510      	push	{r4, lr}
 8005cda:	460c      	mov	r4, r1
 8005cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce0:	f000 f86c 	bl	8005dbc <_read_r>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	bfab      	itete	ge
 8005ce8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cea:	89a3      	ldrhlt	r3, [r4, #12]
 8005cec:	181b      	addge	r3, r3, r0
 8005cee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cf2:	bfac      	ite	ge
 8005cf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cf6:	81a3      	strhlt	r3, [r4, #12]
 8005cf8:	bd10      	pop	{r4, pc}

08005cfa <__swrite>:
 8005cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfe:	461f      	mov	r7, r3
 8005d00:	898b      	ldrh	r3, [r1, #12]
 8005d02:	4605      	mov	r5, r0
 8005d04:	05db      	lsls	r3, r3, #23
 8005d06:	460c      	mov	r4, r1
 8005d08:	4616      	mov	r6, r2
 8005d0a:	d505      	bpl.n	8005d18 <__swrite+0x1e>
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d14:	f000 f840 	bl	8005d98 <_lseek_r>
 8005d18:	89a3      	ldrh	r3, [r4, #12]
 8005d1a:	4632      	mov	r2, r6
 8005d1c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d20:	81a3      	strh	r3, [r4, #12]
 8005d22:	4628      	mov	r0, r5
 8005d24:	463b      	mov	r3, r7
 8005d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d2e:	f000 b857 	b.w	8005de0 <_write_r>

08005d32 <__sseek>:
 8005d32:	b510      	push	{r4, lr}
 8005d34:	460c      	mov	r4, r1
 8005d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3a:	f000 f82d 	bl	8005d98 <_lseek_r>
 8005d3e:	1c43      	adds	r3, r0, #1
 8005d40:	89a3      	ldrh	r3, [r4, #12]
 8005d42:	bf15      	itete	ne
 8005d44:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d4e:	81a3      	strheq	r3, [r4, #12]
 8005d50:	bf18      	it	ne
 8005d52:	81a3      	strhne	r3, [r4, #12]
 8005d54:	bd10      	pop	{r4, pc}

08005d56 <__sclose>:
 8005d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d5a:	f000 b80d 	b.w	8005d78 <_close_r>

08005d5e <memset>:
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4402      	add	r2, r0
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d100      	bne.n	8005d68 <memset+0xa>
 8005d66:	4770      	bx	lr
 8005d68:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6c:	e7f9      	b.n	8005d62 <memset+0x4>
	...

08005d70 <_localeconv_r>:
 8005d70:	4800      	ldr	r0, [pc, #0]	@ (8005d74 <_localeconv_r+0x4>)
 8005d72:	4770      	bx	lr
 8005d74:	2000015c 	.word	0x2000015c

08005d78 <_close_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4d05      	ldr	r5, [pc, #20]	@ (8005d94 <_close_r+0x1c>)
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4608      	mov	r0, r1
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	f7fc f85a 	bl	8001e3c <_close>
 8005d88:	1c43      	adds	r3, r0, #1
 8005d8a:	d102      	bne.n	8005d92 <_close_r+0x1a>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	b103      	cbz	r3, 8005d92 <_close_r+0x1a>
 8005d90:	6023      	str	r3, [r4, #0]
 8005d92:	bd38      	pop	{r3, r4, r5, pc}
 8005d94:	200009ec 	.word	0x200009ec

08005d98 <_lseek_r>:
 8005d98:	b538      	push	{r3, r4, r5, lr}
 8005d9a:	4604      	mov	r4, r0
 8005d9c:	4608      	mov	r0, r1
 8005d9e:	4611      	mov	r1, r2
 8005da0:	2200      	movs	r2, #0
 8005da2:	4d05      	ldr	r5, [pc, #20]	@ (8005db8 <_lseek_r+0x20>)
 8005da4:	602a      	str	r2, [r5, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f7fc f86c 	bl	8001e84 <_lseek>
 8005dac:	1c43      	adds	r3, r0, #1
 8005dae:	d102      	bne.n	8005db6 <_lseek_r+0x1e>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	b103      	cbz	r3, 8005db6 <_lseek_r+0x1e>
 8005db4:	6023      	str	r3, [r4, #0]
 8005db6:	bd38      	pop	{r3, r4, r5, pc}
 8005db8:	200009ec 	.word	0x200009ec

08005dbc <_read_r>:
 8005dbc:	b538      	push	{r3, r4, r5, lr}
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	4608      	mov	r0, r1
 8005dc2:	4611      	mov	r1, r2
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	4d05      	ldr	r5, [pc, #20]	@ (8005ddc <_read_r+0x20>)
 8005dc8:	602a      	str	r2, [r5, #0]
 8005dca:	461a      	mov	r2, r3
 8005dcc:	f7fb fffd 	bl	8001dca <_read>
 8005dd0:	1c43      	adds	r3, r0, #1
 8005dd2:	d102      	bne.n	8005dda <_read_r+0x1e>
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	b103      	cbz	r3, 8005dda <_read_r+0x1e>
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	bd38      	pop	{r3, r4, r5, pc}
 8005ddc:	200009ec 	.word	0x200009ec

08005de0 <_write_r>:
 8005de0:	b538      	push	{r3, r4, r5, lr}
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	4611      	mov	r1, r2
 8005de8:	2200      	movs	r2, #0
 8005dea:	4d05      	ldr	r5, [pc, #20]	@ (8005e00 <_write_r+0x20>)
 8005dec:	602a      	str	r2, [r5, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	f7fc f808 	bl	8001e04 <_write>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_write_r+0x1e>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_write_r+0x1e>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	200009ec 	.word	0x200009ec

08005e04 <__errno>:
 8005e04:	4b01      	ldr	r3, [pc, #4]	@ (8005e0c <__errno+0x8>)
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	2000001c 	.word	0x2000001c

08005e10 <__libc_init_array>:
 8005e10:	b570      	push	{r4, r5, r6, lr}
 8005e12:	2600      	movs	r6, #0
 8005e14:	4d0c      	ldr	r5, [pc, #48]	@ (8005e48 <__libc_init_array+0x38>)
 8005e16:	4c0d      	ldr	r4, [pc, #52]	@ (8005e4c <__libc_init_array+0x3c>)
 8005e18:	1b64      	subs	r4, r4, r5
 8005e1a:	10a4      	asrs	r4, r4, #2
 8005e1c:	42a6      	cmp	r6, r4
 8005e1e:	d109      	bne.n	8005e34 <__libc_init_array+0x24>
 8005e20:	f003 fba2 	bl	8009568 <_init>
 8005e24:	2600      	movs	r6, #0
 8005e26:	4d0a      	ldr	r5, [pc, #40]	@ (8005e50 <__libc_init_array+0x40>)
 8005e28:	4c0a      	ldr	r4, [pc, #40]	@ (8005e54 <__libc_init_array+0x44>)
 8005e2a:	1b64      	subs	r4, r4, r5
 8005e2c:	10a4      	asrs	r4, r4, #2
 8005e2e:	42a6      	cmp	r6, r4
 8005e30:	d105      	bne.n	8005e3e <__libc_init_array+0x2e>
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e38:	4798      	blx	r3
 8005e3a:	3601      	adds	r6, #1
 8005e3c:	e7ee      	b.n	8005e1c <__libc_init_array+0xc>
 8005e3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e42:	4798      	blx	r3
 8005e44:	3601      	adds	r6, #1
 8005e46:	e7f2      	b.n	8005e2e <__libc_init_array+0x1e>
 8005e48:	080099dc 	.word	0x080099dc
 8005e4c:	080099dc 	.word	0x080099dc
 8005e50:	080099dc 	.word	0x080099dc
 8005e54:	080099e0 	.word	0x080099e0

08005e58 <__retarget_lock_init_recursive>:
 8005e58:	4770      	bx	lr

08005e5a <__retarget_lock_acquire_recursive>:
 8005e5a:	4770      	bx	lr

08005e5c <__retarget_lock_release_recursive>:
 8005e5c:	4770      	bx	lr

08005e5e <memchr>:
 8005e5e:	4603      	mov	r3, r0
 8005e60:	b510      	push	{r4, lr}
 8005e62:	b2c9      	uxtb	r1, r1
 8005e64:	4402      	add	r2, r0
 8005e66:	4293      	cmp	r3, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	d101      	bne.n	8005e70 <memchr+0x12>
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	e003      	b.n	8005e78 <memchr+0x1a>
 8005e70:	7804      	ldrb	r4, [r0, #0]
 8005e72:	3301      	adds	r3, #1
 8005e74:	428c      	cmp	r4, r1
 8005e76:	d1f6      	bne.n	8005e66 <memchr+0x8>
 8005e78:	bd10      	pop	{r4, pc}
	...

08005e7c <nanf>:
 8005e7c:	4800      	ldr	r0, [pc, #0]	@ (8005e80 <nanf+0x4>)
 8005e7e:	4770      	bx	lr
 8005e80:	7fc00000 	.word	0x7fc00000

08005e84 <quorem>:
 8005e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e88:	6903      	ldr	r3, [r0, #16]
 8005e8a:	690c      	ldr	r4, [r1, #16]
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	42a3      	cmp	r3, r4
 8005e90:	db7e      	blt.n	8005f90 <quorem+0x10c>
 8005e92:	3c01      	subs	r4, #1
 8005e94:	00a3      	lsls	r3, r4, #2
 8005e96:	f100 0514 	add.w	r5, r0, #20
 8005e9a:	f101 0814 	add.w	r8, r1, #20
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005eaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005eae:	3301      	adds	r3, #1
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8005eb6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005eba:	d32e      	bcc.n	8005f1a <quorem+0x96>
 8005ebc:	f04f 0a00 	mov.w	sl, #0
 8005ec0:	46c4      	mov	ip, r8
 8005ec2:	46ae      	mov	lr, r5
 8005ec4:	46d3      	mov	fp, sl
 8005ec6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005eca:	b298      	uxth	r0, r3
 8005ecc:	fb06 a000 	mla	r0, r6, r0, sl
 8005ed0:	0c1b      	lsrs	r3, r3, #16
 8005ed2:	0c02      	lsrs	r2, r0, #16
 8005ed4:	fb06 2303 	mla	r3, r6, r3, r2
 8005ed8:	f8de 2000 	ldr.w	r2, [lr]
 8005edc:	b280      	uxth	r0, r0
 8005ede:	b292      	uxth	r2, r2
 8005ee0:	1a12      	subs	r2, r2, r0
 8005ee2:	445a      	add	r2, fp
 8005ee4:	f8de 0000 	ldr.w	r0, [lr]
 8005ee8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005ef2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ef6:	b292      	uxth	r2, r2
 8005ef8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005efc:	45e1      	cmp	r9, ip
 8005efe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005f02:	f84e 2b04 	str.w	r2, [lr], #4
 8005f06:	d2de      	bcs.n	8005ec6 <quorem+0x42>
 8005f08:	9b00      	ldr	r3, [sp, #0]
 8005f0a:	58eb      	ldr	r3, [r5, r3]
 8005f0c:	b92b      	cbnz	r3, 8005f1a <quorem+0x96>
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	3b04      	subs	r3, #4
 8005f12:	429d      	cmp	r5, r3
 8005f14:	461a      	mov	r2, r3
 8005f16:	d32f      	bcc.n	8005f78 <quorem+0xf4>
 8005f18:	613c      	str	r4, [r7, #16]
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	f001 f9ca 	bl	80072b4 <__mcmp>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	db25      	blt.n	8005f70 <quorem+0xec>
 8005f24:	4629      	mov	r1, r5
 8005f26:	2000      	movs	r0, #0
 8005f28:	f858 2b04 	ldr.w	r2, [r8], #4
 8005f2c:	f8d1 c000 	ldr.w	ip, [r1]
 8005f30:	fa1f fe82 	uxth.w	lr, r2
 8005f34:	fa1f f38c 	uxth.w	r3, ip
 8005f38:	eba3 030e 	sub.w	r3, r3, lr
 8005f3c:	4403      	add	r3, r0
 8005f3e:	0c12      	lsrs	r2, r2, #16
 8005f40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005f44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f4e:	45c1      	cmp	r9, r8
 8005f50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f54:	f841 3b04 	str.w	r3, [r1], #4
 8005f58:	d2e6      	bcs.n	8005f28 <quorem+0xa4>
 8005f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f62:	b922      	cbnz	r2, 8005f6e <quorem+0xea>
 8005f64:	3b04      	subs	r3, #4
 8005f66:	429d      	cmp	r5, r3
 8005f68:	461a      	mov	r2, r3
 8005f6a:	d30b      	bcc.n	8005f84 <quorem+0x100>
 8005f6c:	613c      	str	r4, [r7, #16]
 8005f6e:	3601      	adds	r6, #1
 8005f70:	4630      	mov	r0, r6
 8005f72:	b003      	add	sp, #12
 8005f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f78:	6812      	ldr	r2, [r2, #0]
 8005f7a:	3b04      	subs	r3, #4
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	d1cb      	bne.n	8005f18 <quorem+0x94>
 8005f80:	3c01      	subs	r4, #1
 8005f82:	e7c6      	b.n	8005f12 <quorem+0x8e>
 8005f84:	6812      	ldr	r2, [r2, #0]
 8005f86:	3b04      	subs	r3, #4
 8005f88:	2a00      	cmp	r2, #0
 8005f8a:	d1ef      	bne.n	8005f6c <quorem+0xe8>
 8005f8c:	3c01      	subs	r4, #1
 8005f8e:	e7ea      	b.n	8005f66 <quorem+0xe2>
 8005f90:	2000      	movs	r0, #0
 8005f92:	e7ee      	b.n	8005f72 <quorem+0xee>
 8005f94:	0000      	movs	r0, r0
	...

08005f98 <_dtoa_r>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	4614      	mov	r4, r2
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	69c7      	ldr	r7, [r0, #28]
 8005fa2:	b097      	sub	sp, #92	@ 0x5c
 8005fa4:	4681      	mov	r9, r0
 8005fa6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005faa:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005fac:	b97f      	cbnz	r7, 8005fce <_dtoa_r+0x36>
 8005fae:	2010      	movs	r0, #16
 8005fb0:	f000 fe0e 	bl	8006bd0 <malloc>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	f8c9 001c 	str.w	r0, [r9, #28]
 8005fba:	b920      	cbnz	r0, 8005fc6 <_dtoa_r+0x2e>
 8005fbc:	21ef      	movs	r1, #239	@ 0xef
 8005fbe:	4bac      	ldr	r3, [pc, #688]	@ (8006270 <_dtoa_r+0x2d8>)
 8005fc0:	48ac      	ldr	r0, [pc, #688]	@ (8006274 <_dtoa_r+0x2dc>)
 8005fc2:	f002 fe2f 	bl	8008c24 <__assert_func>
 8005fc6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005fca:	6007      	str	r7, [r0, #0]
 8005fcc:	60c7      	str	r7, [r0, #12]
 8005fce:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005fd2:	6819      	ldr	r1, [r3, #0]
 8005fd4:	b159      	cbz	r1, 8005fee <_dtoa_r+0x56>
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4093      	lsls	r3, r2
 8005fdc:	604a      	str	r2, [r1, #4]
 8005fde:	608b      	str	r3, [r1, #8]
 8005fe0:	4648      	mov	r0, r9
 8005fe2:	f000 feeb 	bl	8006dbc <_Bfree>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005fec:	601a      	str	r2, [r3, #0]
 8005fee:	1e2b      	subs	r3, r5, #0
 8005ff0:	bfaf      	iteee	ge
 8005ff2:	2300      	movge	r3, #0
 8005ff4:	2201      	movlt	r2, #1
 8005ff6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ffa:	9307      	strlt	r3, [sp, #28]
 8005ffc:	bfa8      	it	ge
 8005ffe:	6033      	strge	r3, [r6, #0]
 8006000:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8006004:	4b9c      	ldr	r3, [pc, #624]	@ (8006278 <_dtoa_r+0x2e0>)
 8006006:	bfb8      	it	lt
 8006008:	6032      	strlt	r2, [r6, #0]
 800600a:	ea33 0308 	bics.w	r3, r3, r8
 800600e:	d112      	bne.n	8006036 <_dtoa_r+0x9e>
 8006010:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006014:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006016:	6013      	str	r3, [r2, #0]
 8006018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800601c:	4323      	orrs	r3, r4
 800601e:	f000 855e 	beq.w	8006ade <_dtoa_r+0xb46>
 8006022:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006024:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800627c <_dtoa_r+0x2e4>
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 8560 	beq.w	8006aee <_dtoa_r+0xb56>
 800602e:	f10a 0303 	add.w	r3, sl, #3
 8006032:	f000 bd5a 	b.w	8006aea <_dtoa_r+0xb52>
 8006036:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800603a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800603e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	2300      	movs	r3, #0
 8006046:	f7fa fcc7 	bl	80009d8 <__aeabi_dcmpeq>
 800604a:	4607      	mov	r7, r0
 800604c:	b158      	cbz	r0, 8006066 <_dtoa_r+0xce>
 800604e:	2301      	movs	r3, #1
 8006050:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006052:	6013      	str	r3, [r2, #0]
 8006054:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006056:	b113      	cbz	r3, 800605e <_dtoa_r+0xc6>
 8006058:	4b89      	ldr	r3, [pc, #548]	@ (8006280 <_dtoa_r+0x2e8>)
 800605a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800605c:	6013      	str	r3, [r2, #0]
 800605e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8006284 <_dtoa_r+0x2ec>
 8006062:	f000 bd44 	b.w	8006aee <_dtoa_r+0xb56>
 8006066:	ab14      	add	r3, sp, #80	@ 0x50
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	ab15      	add	r3, sp, #84	@ 0x54
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	4648      	mov	r0, r9
 8006070:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006074:	f001 fa36 	bl	80074e4 <__d2b>
 8006078:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800607c:	9003      	str	r0, [sp, #12]
 800607e:	2e00      	cmp	r6, #0
 8006080:	d078      	beq.n	8006174 <_dtoa_r+0x1dc>
 8006082:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006088:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800608c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006090:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006094:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006098:	9712      	str	r7, [sp, #72]	@ 0x48
 800609a:	4619      	mov	r1, r3
 800609c:	2200      	movs	r2, #0
 800609e:	4b7a      	ldr	r3, [pc, #488]	@ (8006288 <_dtoa_r+0x2f0>)
 80060a0:	f7fa f87a 	bl	8000198 <__aeabi_dsub>
 80060a4:	a36c      	add	r3, pc, #432	@ (adr r3, 8006258 <_dtoa_r+0x2c0>)
 80060a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060aa:	f7fa fa2d 	bl	8000508 <__aeabi_dmul>
 80060ae:	a36c      	add	r3, pc, #432	@ (adr r3, 8006260 <_dtoa_r+0x2c8>)
 80060b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b4:	f7fa f872 	bl	800019c <__adddf3>
 80060b8:	4604      	mov	r4, r0
 80060ba:	4630      	mov	r0, r6
 80060bc:	460d      	mov	r5, r1
 80060be:	f7fa f9b9 	bl	8000434 <__aeabi_i2d>
 80060c2:	a369      	add	r3, pc, #420	@ (adr r3, 8006268 <_dtoa_r+0x2d0>)
 80060c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c8:	f7fa fa1e 	bl	8000508 <__aeabi_dmul>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	f7fa f862 	bl	800019c <__adddf3>
 80060d8:	4604      	mov	r4, r0
 80060da:	460d      	mov	r5, r1
 80060dc:	f7fa fcc4 	bl	8000a68 <__aeabi_d2iz>
 80060e0:	2200      	movs	r2, #0
 80060e2:	4607      	mov	r7, r0
 80060e4:	2300      	movs	r3, #0
 80060e6:	4620      	mov	r0, r4
 80060e8:	4629      	mov	r1, r5
 80060ea:	f7fa fc7f 	bl	80009ec <__aeabi_dcmplt>
 80060ee:	b140      	cbz	r0, 8006102 <_dtoa_r+0x16a>
 80060f0:	4638      	mov	r0, r7
 80060f2:	f7fa f99f 	bl	8000434 <__aeabi_i2d>
 80060f6:	4622      	mov	r2, r4
 80060f8:	462b      	mov	r3, r5
 80060fa:	f7fa fc6d 	bl	80009d8 <__aeabi_dcmpeq>
 80060fe:	b900      	cbnz	r0, 8006102 <_dtoa_r+0x16a>
 8006100:	3f01      	subs	r7, #1
 8006102:	2f16      	cmp	r7, #22
 8006104:	d854      	bhi.n	80061b0 <_dtoa_r+0x218>
 8006106:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800610a:	4b60      	ldr	r3, [pc, #384]	@ (800628c <_dtoa_r+0x2f4>)
 800610c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f7fa fc6a 	bl	80009ec <__aeabi_dcmplt>
 8006118:	2800      	cmp	r0, #0
 800611a:	d04b      	beq.n	80061b4 <_dtoa_r+0x21c>
 800611c:	2300      	movs	r3, #0
 800611e:	3f01      	subs	r7, #1
 8006120:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006122:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006124:	1b9b      	subs	r3, r3, r6
 8006126:	1e5a      	subs	r2, r3, #1
 8006128:	bf49      	itett	mi
 800612a:	f1c3 0301 	rsbmi	r3, r3, #1
 800612e:	2300      	movpl	r3, #0
 8006130:	9304      	strmi	r3, [sp, #16]
 8006132:	2300      	movmi	r3, #0
 8006134:	9209      	str	r2, [sp, #36]	@ 0x24
 8006136:	bf54      	ite	pl
 8006138:	9304      	strpl	r3, [sp, #16]
 800613a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800613c:	2f00      	cmp	r7, #0
 800613e:	db3b      	blt.n	80061b8 <_dtoa_r+0x220>
 8006140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006142:	970e      	str	r7, [sp, #56]	@ 0x38
 8006144:	443b      	add	r3, r7
 8006146:	9309      	str	r3, [sp, #36]	@ 0x24
 8006148:	2300      	movs	r3, #0
 800614a:	930a      	str	r3, [sp, #40]	@ 0x28
 800614c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800614e:	2b09      	cmp	r3, #9
 8006150:	d865      	bhi.n	800621e <_dtoa_r+0x286>
 8006152:	2b05      	cmp	r3, #5
 8006154:	bfc4      	itt	gt
 8006156:	3b04      	subgt	r3, #4
 8006158:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800615a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800615c:	bfc8      	it	gt
 800615e:	2400      	movgt	r4, #0
 8006160:	f1a3 0302 	sub.w	r3, r3, #2
 8006164:	bfd8      	it	le
 8006166:	2401      	movle	r4, #1
 8006168:	2b03      	cmp	r3, #3
 800616a:	d864      	bhi.n	8006236 <_dtoa_r+0x29e>
 800616c:	e8df f003 	tbb	[pc, r3]
 8006170:	2c385553 	.word	0x2c385553
 8006174:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006178:	441e      	add	r6, r3
 800617a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800617e:	2b20      	cmp	r3, #32
 8006180:	bfc1      	itttt	gt
 8006182:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006186:	fa08 f803 	lslgt.w	r8, r8, r3
 800618a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800618e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006192:	bfd6      	itet	le
 8006194:	f1c3 0320 	rsble	r3, r3, #32
 8006198:	ea48 0003 	orrgt.w	r0, r8, r3
 800619c:	fa04 f003 	lslle.w	r0, r4, r3
 80061a0:	f7fa f938 	bl	8000414 <__aeabi_ui2d>
 80061a4:	2201      	movs	r2, #1
 80061a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80061aa:	3e01      	subs	r6, #1
 80061ac:	9212      	str	r2, [sp, #72]	@ 0x48
 80061ae:	e774      	b.n	800609a <_dtoa_r+0x102>
 80061b0:	2301      	movs	r3, #1
 80061b2:	e7b5      	b.n	8006120 <_dtoa_r+0x188>
 80061b4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80061b6:	e7b4      	b.n	8006122 <_dtoa_r+0x18a>
 80061b8:	9b04      	ldr	r3, [sp, #16]
 80061ba:	1bdb      	subs	r3, r3, r7
 80061bc:	9304      	str	r3, [sp, #16]
 80061be:	427b      	negs	r3, r7
 80061c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80061c2:	2300      	movs	r3, #0
 80061c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80061c6:	e7c1      	b.n	800614c <_dtoa_r+0x1b4>
 80061c8:	2301      	movs	r3, #1
 80061ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061cc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061ce:	eb07 0b03 	add.w	fp, r7, r3
 80061d2:	f10b 0301 	add.w	r3, fp, #1
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	9308      	str	r3, [sp, #32]
 80061da:	bfb8      	it	lt
 80061dc:	2301      	movlt	r3, #1
 80061de:	e006      	b.n	80061ee <_dtoa_r+0x256>
 80061e0:	2301      	movs	r3, #1
 80061e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	dd28      	ble.n	800623c <_dtoa_r+0x2a4>
 80061ea:	469b      	mov	fp, r3
 80061ec:	9308      	str	r3, [sp, #32]
 80061ee:	2100      	movs	r1, #0
 80061f0:	2204      	movs	r2, #4
 80061f2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80061f6:	f102 0514 	add.w	r5, r2, #20
 80061fa:	429d      	cmp	r5, r3
 80061fc:	d926      	bls.n	800624c <_dtoa_r+0x2b4>
 80061fe:	6041      	str	r1, [r0, #4]
 8006200:	4648      	mov	r0, r9
 8006202:	f000 fd9b 	bl	8006d3c <_Balloc>
 8006206:	4682      	mov	sl, r0
 8006208:	2800      	cmp	r0, #0
 800620a:	d143      	bne.n	8006294 <_dtoa_r+0x2fc>
 800620c:	4602      	mov	r2, r0
 800620e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006212:	4b1f      	ldr	r3, [pc, #124]	@ (8006290 <_dtoa_r+0x2f8>)
 8006214:	e6d4      	b.n	8005fc0 <_dtoa_r+0x28>
 8006216:	2300      	movs	r3, #0
 8006218:	e7e3      	b.n	80061e2 <_dtoa_r+0x24a>
 800621a:	2300      	movs	r3, #0
 800621c:	e7d5      	b.n	80061ca <_dtoa_r+0x232>
 800621e:	2401      	movs	r4, #1
 8006220:	2300      	movs	r3, #0
 8006222:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006224:	9320      	str	r3, [sp, #128]	@ 0x80
 8006226:	f04f 3bff 	mov.w	fp, #4294967295
 800622a:	2200      	movs	r2, #0
 800622c:	2312      	movs	r3, #18
 800622e:	f8cd b020 	str.w	fp, [sp, #32]
 8006232:	9221      	str	r2, [sp, #132]	@ 0x84
 8006234:	e7db      	b.n	80061ee <_dtoa_r+0x256>
 8006236:	2301      	movs	r3, #1
 8006238:	930b      	str	r3, [sp, #44]	@ 0x2c
 800623a:	e7f4      	b.n	8006226 <_dtoa_r+0x28e>
 800623c:	f04f 0b01 	mov.w	fp, #1
 8006240:	465b      	mov	r3, fp
 8006242:	f8cd b020 	str.w	fp, [sp, #32]
 8006246:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800624a:	e7d0      	b.n	80061ee <_dtoa_r+0x256>
 800624c:	3101      	adds	r1, #1
 800624e:	0052      	lsls	r2, r2, #1
 8006250:	e7d1      	b.n	80061f6 <_dtoa_r+0x25e>
 8006252:	bf00      	nop
 8006254:	f3af 8000 	nop.w
 8006258:	636f4361 	.word	0x636f4361
 800625c:	3fd287a7 	.word	0x3fd287a7
 8006260:	8b60c8b3 	.word	0x8b60c8b3
 8006264:	3fc68a28 	.word	0x3fc68a28
 8006268:	509f79fb 	.word	0x509f79fb
 800626c:	3fd34413 	.word	0x3fd34413
 8006270:	080095f2 	.word	0x080095f2
 8006274:	08009609 	.word	0x08009609
 8006278:	7ff00000 	.word	0x7ff00000
 800627c:	080095ee 	.word	0x080095ee
 8006280:	080095bd 	.word	0x080095bd
 8006284:	080095bc 	.word	0x080095bc
 8006288:	3ff80000 	.word	0x3ff80000
 800628c:	080097b8 	.word	0x080097b8
 8006290:	08009661 	.word	0x08009661
 8006294:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006298:	6018      	str	r0, [r3, #0]
 800629a:	9b08      	ldr	r3, [sp, #32]
 800629c:	2b0e      	cmp	r3, #14
 800629e:	f200 80a1 	bhi.w	80063e4 <_dtoa_r+0x44c>
 80062a2:	2c00      	cmp	r4, #0
 80062a4:	f000 809e 	beq.w	80063e4 <_dtoa_r+0x44c>
 80062a8:	2f00      	cmp	r7, #0
 80062aa:	dd33      	ble.n	8006314 <_dtoa_r+0x37c>
 80062ac:	4b9c      	ldr	r3, [pc, #624]	@ (8006520 <_dtoa_r+0x588>)
 80062ae:	f007 020f 	and.w	r2, r7, #15
 80062b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062b6:	05f8      	lsls	r0, r7, #23
 80062b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80062bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80062c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80062c4:	d516      	bpl.n	80062f4 <_dtoa_r+0x35c>
 80062c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062ca:	4b96      	ldr	r3, [pc, #600]	@ (8006524 <_dtoa_r+0x58c>)
 80062cc:	2603      	movs	r6, #3
 80062ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80062d2:	f7fa fa43 	bl	800075c <__aeabi_ddiv>
 80062d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062da:	f004 040f 	and.w	r4, r4, #15
 80062de:	4d91      	ldr	r5, [pc, #580]	@ (8006524 <_dtoa_r+0x58c>)
 80062e0:	b954      	cbnz	r4, 80062f8 <_dtoa_r+0x360>
 80062e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ea:	f7fa fa37 	bl	800075c <__aeabi_ddiv>
 80062ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80062f2:	e028      	b.n	8006346 <_dtoa_r+0x3ae>
 80062f4:	2602      	movs	r6, #2
 80062f6:	e7f2      	b.n	80062de <_dtoa_r+0x346>
 80062f8:	07e1      	lsls	r1, r4, #31
 80062fa:	d508      	bpl.n	800630e <_dtoa_r+0x376>
 80062fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006300:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006304:	f7fa f900 	bl	8000508 <__aeabi_dmul>
 8006308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800630c:	3601      	adds	r6, #1
 800630e:	1064      	asrs	r4, r4, #1
 8006310:	3508      	adds	r5, #8
 8006312:	e7e5      	b.n	80062e0 <_dtoa_r+0x348>
 8006314:	f000 80af 	beq.w	8006476 <_dtoa_r+0x4de>
 8006318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800631c:	427c      	negs	r4, r7
 800631e:	4b80      	ldr	r3, [pc, #512]	@ (8006520 <_dtoa_r+0x588>)
 8006320:	f004 020f 	and.w	r2, r4, #15
 8006324:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f7fa f8ec 	bl	8000508 <__aeabi_dmul>
 8006330:	2602      	movs	r6, #2
 8006332:	2300      	movs	r3, #0
 8006334:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006338:	4d7a      	ldr	r5, [pc, #488]	@ (8006524 <_dtoa_r+0x58c>)
 800633a:	1124      	asrs	r4, r4, #4
 800633c:	2c00      	cmp	r4, #0
 800633e:	f040 808f 	bne.w	8006460 <_dtoa_r+0x4c8>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1d3      	bne.n	80062ee <_dtoa_r+0x356>
 8006346:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800634a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 8094 	beq.w	800647a <_dtoa_r+0x4e2>
 8006352:	2200      	movs	r2, #0
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	4b73      	ldr	r3, [pc, #460]	@ (8006528 <_dtoa_r+0x590>)
 800635a:	f7fa fb47 	bl	80009ec <__aeabi_dcmplt>
 800635e:	2800      	cmp	r0, #0
 8006360:	f000 808b 	beq.w	800647a <_dtoa_r+0x4e2>
 8006364:	9b08      	ldr	r3, [sp, #32]
 8006366:	2b00      	cmp	r3, #0
 8006368:	f000 8087 	beq.w	800647a <_dtoa_r+0x4e2>
 800636c:	f1bb 0f00 	cmp.w	fp, #0
 8006370:	dd34      	ble.n	80063dc <_dtoa_r+0x444>
 8006372:	4620      	mov	r0, r4
 8006374:	2200      	movs	r2, #0
 8006376:	4629      	mov	r1, r5
 8006378:	4b6c      	ldr	r3, [pc, #432]	@ (800652c <_dtoa_r+0x594>)
 800637a:	f7fa f8c5 	bl	8000508 <__aeabi_dmul>
 800637e:	465c      	mov	r4, fp
 8006380:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006384:	f107 38ff 	add.w	r8, r7, #4294967295
 8006388:	3601      	adds	r6, #1
 800638a:	4630      	mov	r0, r6
 800638c:	f7fa f852 	bl	8000434 <__aeabi_i2d>
 8006390:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006394:	f7fa f8b8 	bl	8000508 <__aeabi_dmul>
 8006398:	2200      	movs	r2, #0
 800639a:	4b65      	ldr	r3, [pc, #404]	@ (8006530 <_dtoa_r+0x598>)
 800639c:	f7f9 fefe 	bl	800019c <__adddf3>
 80063a0:	4605      	mov	r5, r0
 80063a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80063a6:	2c00      	cmp	r4, #0
 80063a8:	d16a      	bne.n	8006480 <_dtoa_r+0x4e8>
 80063aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063ae:	2200      	movs	r2, #0
 80063b0:	4b60      	ldr	r3, [pc, #384]	@ (8006534 <_dtoa_r+0x59c>)
 80063b2:	f7f9 fef1 	bl	8000198 <__aeabi_dsub>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80063be:	462a      	mov	r2, r5
 80063c0:	4633      	mov	r3, r6
 80063c2:	f7fa fb31 	bl	8000a28 <__aeabi_dcmpgt>
 80063c6:	2800      	cmp	r0, #0
 80063c8:	f040 8298 	bne.w	80068fc <_dtoa_r+0x964>
 80063cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063d0:	462a      	mov	r2, r5
 80063d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80063d6:	f7fa fb09 	bl	80009ec <__aeabi_dcmplt>
 80063da:	bb38      	cbnz	r0, 800642c <_dtoa_r+0x494>
 80063dc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80063e0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80063e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f2c0 8157 	blt.w	800669a <_dtoa_r+0x702>
 80063ec:	2f0e      	cmp	r7, #14
 80063ee:	f300 8154 	bgt.w	800669a <_dtoa_r+0x702>
 80063f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006520 <_dtoa_r+0x588>)
 80063f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80063fc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006400:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006402:	2b00      	cmp	r3, #0
 8006404:	f280 80e5 	bge.w	80065d2 <_dtoa_r+0x63a>
 8006408:	9b08      	ldr	r3, [sp, #32]
 800640a:	2b00      	cmp	r3, #0
 800640c:	f300 80e1 	bgt.w	80065d2 <_dtoa_r+0x63a>
 8006410:	d10c      	bne.n	800642c <_dtoa_r+0x494>
 8006412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006416:	2200      	movs	r2, #0
 8006418:	4b46      	ldr	r3, [pc, #280]	@ (8006534 <_dtoa_r+0x59c>)
 800641a:	f7fa f875 	bl	8000508 <__aeabi_dmul>
 800641e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006422:	f7fa faf7 	bl	8000a14 <__aeabi_dcmpge>
 8006426:	2800      	cmp	r0, #0
 8006428:	f000 8266 	beq.w	80068f8 <_dtoa_r+0x960>
 800642c:	2400      	movs	r4, #0
 800642e:	4625      	mov	r5, r4
 8006430:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006432:	4656      	mov	r6, sl
 8006434:	ea6f 0803 	mvn.w	r8, r3
 8006438:	2700      	movs	r7, #0
 800643a:	4621      	mov	r1, r4
 800643c:	4648      	mov	r0, r9
 800643e:	f000 fcbd 	bl	8006dbc <_Bfree>
 8006442:	2d00      	cmp	r5, #0
 8006444:	f000 80bd 	beq.w	80065c2 <_dtoa_r+0x62a>
 8006448:	b12f      	cbz	r7, 8006456 <_dtoa_r+0x4be>
 800644a:	42af      	cmp	r7, r5
 800644c:	d003      	beq.n	8006456 <_dtoa_r+0x4be>
 800644e:	4639      	mov	r1, r7
 8006450:	4648      	mov	r0, r9
 8006452:	f000 fcb3 	bl	8006dbc <_Bfree>
 8006456:	4629      	mov	r1, r5
 8006458:	4648      	mov	r0, r9
 800645a:	f000 fcaf 	bl	8006dbc <_Bfree>
 800645e:	e0b0      	b.n	80065c2 <_dtoa_r+0x62a>
 8006460:	07e2      	lsls	r2, r4, #31
 8006462:	d505      	bpl.n	8006470 <_dtoa_r+0x4d8>
 8006464:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006468:	f7fa f84e 	bl	8000508 <__aeabi_dmul>
 800646c:	2301      	movs	r3, #1
 800646e:	3601      	adds	r6, #1
 8006470:	1064      	asrs	r4, r4, #1
 8006472:	3508      	adds	r5, #8
 8006474:	e762      	b.n	800633c <_dtoa_r+0x3a4>
 8006476:	2602      	movs	r6, #2
 8006478:	e765      	b.n	8006346 <_dtoa_r+0x3ae>
 800647a:	46b8      	mov	r8, r7
 800647c:	9c08      	ldr	r4, [sp, #32]
 800647e:	e784      	b.n	800638a <_dtoa_r+0x3f2>
 8006480:	4b27      	ldr	r3, [pc, #156]	@ (8006520 <_dtoa_r+0x588>)
 8006482:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006484:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800648c:	4454      	add	r4, sl
 800648e:	2900      	cmp	r1, #0
 8006490:	d054      	beq.n	800653c <_dtoa_r+0x5a4>
 8006492:	2000      	movs	r0, #0
 8006494:	4928      	ldr	r1, [pc, #160]	@ (8006538 <_dtoa_r+0x5a0>)
 8006496:	f7fa f961 	bl	800075c <__aeabi_ddiv>
 800649a:	4633      	mov	r3, r6
 800649c:	462a      	mov	r2, r5
 800649e:	f7f9 fe7b 	bl	8000198 <__aeabi_dsub>
 80064a2:	4656      	mov	r6, sl
 80064a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064ac:	f7fa fadc 	bl	8000a68 <__aeabi_d2iz>
 80064b0:	4605      	mov	r5, r0
 80064b2:	f7f9 ffbf 	bl	8000434 <__aeabi_i2d>
 80064b6:	4602      	mov	r2, r0
 80064b8:	460b      	mov	r3, r1
 80064ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80064be:	f7f9 fe6b 	bl	8000198 <__aeabi_dsub>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	3530      	adds	r5, #48	@ 0x30
 80064c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80064cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064d0:	f806 5b01 	strb.w	r5, [r6], #1
 80064d4:	f7fa fa8a 	bl	80009ec <__aeabi_dcmplt>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d172      	bne.n	80065c2 <_dtoa_r+0x62a>
 80064dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064e0:	2000      	movs	r0, #0
 80064e2:	4911      	ldr	r1, [pc, #68]	@ (8006528 <_dtoa_r+0x590>)
 80064e4:	f7f9 fe58 	bl	8000198 <__aeabi_dsub>
 80064e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064ec:	f7fa fa7e 	bl	80009ec <__aeabi_dcmplt>
 80064f0:	2800      	cmp	r0, #0
 80064f2:	f040 80b4 	bne.w	800665e <_dtoa_r+0x6c6>
 80064f6:	42a6      	cmp	r6, r4
 80064f8:	f43f af70 	beq.w	80063dc <_dtoa_r+0x444>
 80064fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006500:	2200      	movs	r2, #0
 8006502:	4b0a      	ldr	r3, [pc, #40]	@ (800652c <_dtoa_r+0x594>)
 8006504:	f7fa f800 	bl	8000508 <__aeabi_dmul>
 8006508:	2200      	movs	r2, #0
 800650a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800650e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006512:	4b06      	ldr	r3, [pc, #24]	@ (800652c <_dtoa_r+0x594>)
 8006514:	f7f9 fff8 	bl	8000508 <__aeabi_dmul>
 8006518:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800651c:	e7c4      	b.n	80064a8 <_dtoa_r+0x510>
 800651e:	bf00      	nop
 8006520:	080097b8 	.word	0x080097b8
 8006524:	08009790 	.word	0x08009790
 8006528:	3ff00000 	.word	0x3ff00000
 800652c:	40240000 	.word	0x40240000
 8006530:	401c0000 	.word	0x401c0000
 8006534:	40140000 	.word	0x40140000
 8006538:	3fe00000 	.word	0x3fe00000
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	f7f9 ffe2 	bl	8000508 <__aeabi_dmul>
 8006544:	4656      	mov	r6, sl
 8006546:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800654a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800654c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006550:	f7fa fa8a 	bl	8000a68 <__aeabi_d2iz>
 8006554:	4605      	mov	r5, r0
 8006556:	f7f9 ff6d 	bl	8000434 <__aeabi_i2d>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006562:	f7f9 fe19 	bl	8000198 <__aeabi_dsub>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	3530      	adds	r5, #48	@ 0x30
 800656c:	f806 5b01 	strb.w	r5, [r6], #1
 8006570:	42a6      	cmp	r6, r4
 8006572:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006576:	f04f 0200 	mov.w	r2, #0
 800657a:	d124      	bne.n	80065c6 <_dtoa_r+0x62e>
 800657c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006580:	4bae      	ldr	r3, [pc, #696]	@ (800683c <_dtoa_r+0x8a4>)
 8006582:	f7f9 fe0b 	bl	800019c <__adddf3>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800658e:	f7fa fa4b 	bl	8000a28 <__aeabi_dcmpgt>
 8006592:	2800      	cmp	r0, #0
 8006594:	d163      	bne.n	800665e <_dtoa_r+0x6c6>
 8006596:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800659a:	2000      	movs	r0, #0
 800659c:	49a7      	ldr	r1, [pc, #668]	@ (800683c <_dtoa_r+0x8a4>)
 800659e:	f7f9 fdfb 	bl	8000198 <__aeabi_dsub>
 80065a2:	4602      	mov	r2, r0
 80065a4:	460b      	mov	r3, r1
 80065a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065aa:	f7fa fa1f 	bl	80009ec <__aeabi_dcmplt>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	f43f af14 	beq.w	80063dc <_dtoa_r+0x444>
 80065b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80065b6:	1e73      	subs	r3, r6, #1
 80065b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80065ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065be:	2b30      	cmp	r3, #48	@ 0x30
 80065c0:	d0f8      	beq.n	80065b4 <_dtoa_r+0x61c>
 80065c2:	4647      	mov	r7, r8
 80065c4:	e03b      	b.n	800663e <_dtoa_r+0x6a6>
 80065c6:	4b9e      	ldr	r3, [pc, #632]	@ (8006840 <_dtoa_r+0x8a8>)
 80065c8:	f7f9 ff9e 	bl	8000508 <__aeabi_dmul>
 80065cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80065d0:	e7bc      	b.n	800654c <_dtoa_r+0x5b4>
 80065d2:	4656      	mov	r6, sl
 80065d4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80065d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065dc:	4620      	mov	r0, r4
 80065de:	4629      	mov	r1, r5
 80065e0:	f7fa f8bc 	bl	800075c <__aeabi_ddiv>
 80065e4:	f7fa fa40 	bl	8000a68 <__aeabi_d2iz>
 80065e8:	4680      	mov	r8, r0
 80065ea:	f7f9 ff23 	bl	8000434 <__aeabi_i2d>
 80065ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065f2:	f7f9 ff89 	bl	8000508 <__aeabi_dmul>
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	4620      	mov	r0, r4
 80065fc:	4629      	mov	r1, r5
 80065fe:	f7f9 fdcb 	bl	8000198 <__aeabi_dsub>
 8006602:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006606:	9d08      	ldr	r5, [sp, #32]
 8006608:	f806 4b01 	strb.w	r4, [r6], #1
 800660c:	eba6 040a 	sub.w	r4, r6, sl
 8006610:	42a5      	cmp	r5, r4
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	d133      	bne.n	8006680 <_dtoa_r+0x6e8>
 8006618:	f7f9 fdc0 	bl	800019c <__adddf3>
 800661c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006620:	4604      	mov	r4, r0
 8006622:	460d      	mov	r5, r1
 8006624:	f7fa fa00 	bl	8000a28 <__aeabi_dcmpgt>
 8006628:	b9c0      	cbnz	r0, 800665c <_dtoa_r+0x6c4>
 800662a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800662e:	4620      	mov	r0, r4
 8006630:	4629      	mov	r1, r5
 8006632:	f7fa f9d1 	bl	80009d8 <__aeabi_dcmpeq>
 8006636:	b110      	cbz	r0, 800663e <_dtoa_r+0x6a6>
 8006638:	f018 0f01 	tst.w	r8, #1
 800663c:	d10e      	bne.n	800665c <_dtoa_r+0x6c4>
 800663e:	4648      	mov	r0, r9
 8006640:	9903      	ldr	r1, [sp, #12]
 8006642:	f000 fbbb 	bl	8006dbc <_Bfree>
 8006646:	2300      	movs	r3, #0
 8006648:	7033      	strb	r3, [r6, #0]
 800664a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800664c:	3701      	adds	r7, #1
 800664e:	601f      	str	r7, [r3, #0]
 8006650:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 824b 	beq.w	8006aee <_dtoa_r+0xb56>
 8006658:	601e      	str	r6, [r3, #0]
 800665a:	e248      	b.n	8006aee <_dtoa_r+0xb56>
 800665c:	46b8      	mov	r8, r7
 800665e:	4633      	mov	r3, r6
 8006660:	461e      	mov	r6, r3
 8006662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006666:	2a39      	cmp	r2, #57	@ 0x39
 8006668:	d106      	bne.n	8006678 <_dtoa_r+0x6e0>
 800666a:	459a      	cmp	sl, r3
 800666c:	d1f8      	bne.n	8006660 <_dtoa_r+0x6c8>
 800666e:	2230      	movs	r2, #48	@ 0x30
 8006670:	f108 0801 	add.w	r8, r8, #1
 8006674:	f88a 2000 	strb.w	r2, [sl]
 8006678:	781a      	ldrb	r2, [r3, #0]
 800667a:	3201      	adds	r2, #1
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	e7a0      	b.n	80065c2 <_dtoa_r+0x62a>
 8006680:	2200      	movs	r2, #0
 8006682:	4b6f      	ldr	r3, [pc, #444]	@ (8006840 <_dtoa_r+0x8a8>)
 8006684:	f7f9 ff40 	bl	8000508 <__aeabi_dmul>
 8006688:	2200      	movs	r2, #0
 800668a:	2300      	movs	r3, #0
 800668c:	4604      	mov	r4, r0
 800668e:	460d      	mov	r5, r1
 8006690:	f7fa f9a2 	bl	80009d8 <__aeabi_dcmpeq>
 8006694:	2800      	cmp	r0, #0
 8006696:	d09f      	beq.n	80065d8 <_dtoa_r+0x640>
 8006698:	e7d1      	b.n	800663e <_dtoa_r+0x6a6>
 800669a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800669c:	2a00      	cmp	r2, #0
 800669e:	f000 80ea 	beq.w	8006876 <_dtoa_r+0x8de>
 80066a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80066a4:	2a01      	cmp	r2, #1
 80066a6:	f300 80cd 	bgt.w	8006844 <_dtoa_r+0x8ac>
 80066aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80066ac:	2a00      	cmp	r2, #0
 80066ae:	f000 80c1 	beq.w	8006834 <_dtoa_r+0x89c>
 80066b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80066b6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80066b8:	9e04      	ldr	r6, [sp, #16]
 80066ba:	9a04      	ldr	r2, [sp, #16]
 80066bc:	2101      	movs	r1, #1
 80066be:	441a      	add	r2, r3
 80066c0:	9204      	str	r2, [sp, #16]
 80066c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c4:	4648      	mov	r0, r9
 80066c6:	441a      	add	r2, r3
 80066c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80066ca:	f000 fc75 	bl	8006fb8 <__i2b>
 80066ce:	4605      	mov	r5, r0
 80066d0:	b166      	cbz	r6, 80066ec <_dtoa_r+0x754>
 80066d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	dd09      	ble.n	80066ec <_dtoa_r+0x754>
 80066d8:	42b3      	cmp	r3, r6
 80066da:	bfa8      	it	ge
 80066dc:	4633      	movge	r3, r6
 80066de:	9a04      	ldr	r2, [sp, #16]
 80066e0:	1af6      	subs	r6, r6, r3
 80066e2:	1ad2      	subs	r2, r2, r3
 80066e4:	9204      	str	r2, [sp, #16]
 80066e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ee:	b30b      	cbz	r3, 8006734 <_dtoa_r+0x79c>
 80066f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	f000 80c6 	beq.w	8006884 <_dtoa_r+0x8ec>
 80066f8:	2c00      	cmp	r4, #0
 80066fa:	f000 80c0 	beq.w	800687e <_dtoa_r+0x8e6>
 80066fe:	4629      	mov	r1, r5
 8006700:	4622      	mov	r2, r4
 8006702:	4648      	mov	r0, r9
 8006704:	f000 fd10 	bl	8007128 <__pow5mult>
 8006708:	9a03      	ldr	r2, [sp, #12]
 800670a:	4601      	mov	r1, r0
 800670c:	4605      	mov	r5, r0
 800670e:	4648      	mov	r0, r9
 8006710:	f000 fc68 	bl	8006fe4 <__multiply>
 8006714:	9903      	ldr	r1, [sp, #12]
 8006716:	4680      	mov	r8, r0
 8006718:	4648      	mov	r0, r9
 800671a:	f000 fb4f 	bl	8006dbc <_Bfree>
 800671e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006720:	1b1b      	subs	r3, r3, r4
 8006722:	930a      	str	r3, [sp, #40]	@ 0x28
 8006724:	f000 80b1 	beq.w	800688a <_dtoa_r+0x8f2>
 8006728:	4641      	mov	r1, r8
 800672a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800672c:	4648      	mov	r0, r9
 800672e:	f000 fcfb 	bl	8007128 <__pow5mult>
 8006732:	9003      	str	r0, [sp, #12]
 8006734:	2101      	movs	r1, #1
 8006736:	4648      	mov	r0, r9
 8006738:	f000 fc3e 	bl	8006fb8 <__i2b>
 800673c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800673e:	4604      	mov	r4, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 81d8 	beq.w	8006af6 <_dtoa_r+0xb5e>
 8006746:	461a      	mov	r2, r3
 8006748:	4601      	mov	r1, r0
 800674a:	4648      	mov	r0, r9
 800674c:	f000 fcec 	bl	8007128 <__pow5mult>
 8006750:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006752:	4604      	mov	r4, r0
 8006754:	2b01      	cmp	r3, #1
 8006756:	f300 809f 	bgt.w	8006898 <_dtoa_r+0x900>
 800675a:	9b06      	ldr	r3, [sp, #24]
 800675c:	2b00      	cmp	r3, #0
 800675e:	f040 8097 	bne.w	8006890 <_dtoa_r+0x8f8>
 8006762:	9b07      	ldr	r3, [sp, #28]
 8006764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 8093 	bne.w	8006894 <_dtoa_r+0x8fc>
 800676e:	9b07      	ldr	r3, [sp, #28]
 8006770:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006774:	0d1b      	lsrs	r3, r3, #20
 8006776:	051b      	lsls	r3, r3, #20
 8006778:	b133      	cbz	r3, 8006788 <_dtoa_r+0x7f0>
 800677a:	9b04      	ldr	r3, [sp, #16]
 800677c:	3301      	adds	r3, #1
 800677e:	9304      	str	r3, [sp, #16]
 8006780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006782:	3301      	adds	r3, #1
 8006784:	9309      	str	r3, [sp, #36]	@ 0x24
 8006786:	2301      	movs	r3, #1
 8006788:	930a      	str	r3, [sp, #40]	@ 0x28
 800678a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800678c:	2b00      	cmp	r3, #0
 800678e:	f000 81b8 	beq.w	8006b02 <_dtoa_r+0xb6a>
 8006792:	6923      	ldr	r3, [r4, #16]
 8006794:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006798:	6918      	ldr	r0, [r3, #16]
 800679a:	f000 fbc1 	bl	8006f20 <__hi0bits>
 800679e:	f1c0 0020 	rsb	r0, r0, #32
 80067a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067a4:	4418      	add	r0, r3
 80067a6:	f010 001f 	ands.w	r0, r0, #31
 80067aa:	f000 8082 	beq.w	80068b2 <_dtoa_r+0x91a>
 80067ae:	f1c0 0320 	rsb	r3, r0, #32
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	dd73      	ble.n	800689e <_dtoa_r+0x906>
 80067b6:	9b04      	ldr	r3, [sp, #16]
 80067b8:	f1c0 001c 	rsb	r0, r0, #28
 80067bc:	4403      	add	r3, r0
 80067be:	9304      	str	r3, [sp, #16]
 80067c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c2:	4406      	add	r6, r0
 80067c4:	4403      	add	r3, r0
 80067c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80067c8:	9b04      	ldr	r3, [sp, #16]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	dd05      	ble.n	80067da <_dtoa_r+0x842>
 80067ce:	461a      	mov	r2, r3
 80067d0:	4648      	mov	r0, r9
 80067d2:	9903      	ldr	r1, [sp, #12]
 80067d4:	f000 fd02 	bl	80071dc <__lshift>
 80067d8:	9003      	str	r0, [sp, #12]
 80067da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067dc:	2b00      	cmp	r3, #0
 80067de:	dd05      	ble.n	80067ec <_dtoa_r+0x854>
 80067e0:	4621      	mov	r1, r4
 80067e2:	461a      	mov	r2, r3
 80067e4:	4648      	mov	r0, r9
 80067e6:	f000 fcf9 	bl	80071dc <__lshift>
 80067ea:	4604      	mov	r4, r0
 80067ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d061      	beq.n	80068b6 <_dtoa_r+0x91e>
 80067f2:	4621      	mov	r1, r4
 80067f4:	9803      	ldr	r0, [sp, #12]
 80067f6:	f000 fd5d 	bl	80072b4 <__mcmp>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	da5b      	bge.n	80068b6 <_dtoa_r+0x91e>
 80067fe:	2300      	movs	r3, #0
 8006800:	220a      	movs	r2, #10
 8006802:	4648      	mov	r0, r9
 8006804:	9903      	ldr	r1, [sp, #12]
 8006806:	f000 fafb 	bl	8006e00 <__multadd>
 800680a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800680c:	f107 38ff 	add.w	r8, r7, #4294967295
 8006810:	9003      	str	r0, [sp, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 8177 	beq.w	8006b06 <_dtoa_r+0xb6e>
 8006818:	4629      	mov	r1, r5
 800681a:	2300      	movs	r3, #0
 800681c:	220a      	movs	r2, #10
 800681e:	4648      	mov	r0, r9
 8006820:	f000 faee 	bl	8006e00 <__multadd>
 8006824:	f1bb 0f00 	cmp.w	fp, #0
 8006828:	4605      	mov	r5, r0
 800682a:	dc6f      	bgt.n	800690c <_dtoa_r+0x974>
 800682c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800682e:	2b02      	cmp	r3, #2
 8006830:	dc49      	bgt.n	80068c6 <_dtoa_r+0x92e>
 8006832:	e06b      	b.n	800690c <_dtoa_r+0x974>
 8006834:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006836:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800683a:	e73c      	b.n	80066b6 <_dtoa_r+0x71e>
 800683c:	3fe00000 	.word	0x3fe00000
 8006840:	40240000 	.word	0x40240000
 8006844:	9b08      	ldr	r3, [sp, #32]
 8006846:	1e5c      	subs	r4, r3, #1
 8006848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800684a:	42a3      	cmp	r3, r4
 800684c:	db09      	blt.n	8006862 <_dtoa_r+0x8ca>
 800684e:	1b1c      	subs	r4, r3, r4
 8006850:	9b08      	ldr	r3, [sp, #32]
 8006852:	2b00      	cmp	r3, #0
 8006854:	f6bf af30 	bge.w	80066b8 <_dtoa_r+0x720>
 8006858:	9b04      	ldr	r3, [sp, #16]
 800685a:	9a08      	ldr	r2, [sp, #32]
 800685c:	1a9e      	subs	r6, r3, r2
 800685e:	2300      	movs	r3, #0
 8006860:	e72b      	b.n	80066ba <_dtoa_r+0x722>
 8006862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006864:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006866:	1ae3      	subs	r3, r4, r3
 8006868:	441a      	add	r2, r3
 800686a:	940a      	str	r4, [sp, #40]	@ 0x28
 800686c:	9e04      	ldr	r6, [sp, #16]
 800686e:	2400      	movs	r4, #0
 8006870:	9b08      	ldr	r3, [sp, #32]
 8006872:	920e      	str	r2, [sp, #56]	@ 0x38
 8006874:	e721      	b.n	80066ba <_dtoa_r+0x722>
 8006876:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006878:	9e04      	ldr	r6, [sp, #16]
 800687a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800687c:	e728      	b.n	80066d0 <_dtoa_r+0x738>
 800687e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006882:	e751      	b.n	8006728 <_dtoa_r+0x790>
 8006884:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006886:	9903      	ldr	r1, [sp, #12]
 8006888:	e750      	b.n	800672c <_dtoa_r+0x794>
 800688a:	f8cd 800c 	str.w	r8, [sp, #12]
 800688e:	e751      	b.n	8006734 <_dtoa_r+0x79c>
 8006890:	2300      	movs	r3, #0
 8006892:	e779      	b.n	8006788 <_dtoa_r+0x7f0>
 8006894:	9b06      	ldr	r3, [sp, #24]
 8006896:	e777      	b.n	8006788 <_dtoa_r+0x7f0>
 8006898:	2300      	movs	r3, #0
 800689a:	930a      	str	r3, [sp, #40]	@ 0x28
 800689c:	e779      	b.n	8006792 <_dtoa_r+0x7fa>
 800689e:	d093      	beq.n	80067c8 <_dtoa_r+0x830>
 80068a0:	9a04      	ldr	r2, [sp, #16]
 80068a2:	331c      	adds	r3, #28
 80068a4:	441a      	add	r2, r3
 80068a6:	9204      	str	r2, [sp, #16]
 80068a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068aa:	441e      	add	r6, r3
 80068ac:	441a      	add	r2, r3
 80068ae:	9209      	str	r2, [sp, #36]	@ 0x24
 80068b0:	e78a      	b.n	80067c8 <_dtoa_r+0x830>
 80068b2:	4603      	mov	r3, r0
 80068b4:	e7f4      	b.n	80068a0 <_dtoa_r+0x908>
 80068b6:	9b08      	ldr	r3, [sp, #32]
 80068b8:	46b8      	mov	r8, r7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dc20      	bgt.n	8006900 <_dtoa_r+0x968>
 80068be:	469b      	mov	fp, r3
 80068c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068c2:	2b02      	cmp	r3, #2
 80068c4:	dd1e      	ble.n	8006904 <_dtoa_r+0x96c>
 80068c6:	f1bb 0f00 	cmp.w	fp, #0
 80068ca:	f47f adb1 	bne.w	8006430 <_dtoa_r+0x498>
 80068ce:	4621      	mov	r1, r4
 80068d0:	465b      	mov	r3, fp
 80068d2:	2205      	movs	r2, #5
 80068d4:	4648      	mov	r0, r9
 80068d6:	f000 fa93 	bl	8006e00 <__multadd>
 80068da:	4601      	mov	r1, r0
 80068dc:	4604      	mov	r4, r0
 80068de:	9803      	ldr	r0, [sp, #12]
 80068e0:	f000 fce8 	bl	80072b4 <__mcmp>
 80068e4:	2800      	cmp	r0, #0
 80068e6:	f77f ada3 	ble.w	8006430 <_dtoa_r+0x498>
 80068ea:	4656      	mov	r6, sl
 80068ec:	2331      	movs	r3, #49	@ 0x31
 80068ee:	f108 0801 	add.w	r8, r8, #1
 80068f2:	f806 3b01 	strb.w	r3, [r6], #1
 80068f6:	e59f      	b.n	8006438 <_dtoa_r+0x4a0>
 80068f8:	46b8      	mov	r8, r7
 80068fa:	9c08      	ldr	r4, [sp, #32]
 80068fc:	4625      	mov	r5, r4
 80068fe:	e7f4      	b.n	80068ea <_dtoa_r+0x952>
 8006900:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006904:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006906:	2b00      	cmp	r3, #0
 8006908:	f000 8101 	beq.w	8006b0e <_dtoa_r+0xb76>
 800690c:	2e00      	cmp	r6, #0
 800690e:	dd05      	ble.n	800691c <_dtoa_r+0x984>
 8006910:	4629      	mov	r1, r5
 8006912:	4632      	mov	r2, r6
 8006914:	4648      	mov	r0, r9
 8006916:	f000 fc61 	bl	80071dc <__lshift>
 800691a:	4605      	mov	r5, r0
 800691c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d05c      	beq.n	80069dc <_dtoa_r+0xa44>
 8006922:	4648      	mov	r0, r9
 8006924:	6869      	ldr	r1, [r5, #4]
 8006926:	f000 fa09 	bl	8006d3c <_Balloc>
 800692a:	4606      	mov	r6, r0
 800692c:	b928      	cbnz	r0, 800693a <_dtoa_r+0x9a2>
 800692e:	4602      	mov	r2, r0
 8006930:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006934:	4b80      	ldr	r3, [pc, #512]	@ (8006b38 <_dtoa_r+0xba0>)
 8006936:	f7ff bb43 	b.w	8005fc0 <_dtoa_r+0x28>
 800693a:	692a      	ldr	r2, [r5, #16]
 800693c:	f105 010c 	add.w	r1, r5, #12
 8006940:	3202      	adds	r2, #2
 8006942:	0092      	lsls	r2, r2, #2
 8006944:	300c      	adds	r0, #12
 8006946:	f002 f959 	bl	8008bfc <memcpy>
 800694a:	2201      	movs	r2, #1
 800694c:	4631      	mov	r1, r6
 800694e:	4648      	mov	r0, r9
 8006950:	f000 fc44 	bl	80071dc <__lshift>
 8006954:	462f      	mov	r7, r5
 8006956:	4605      	mov	r5, r0
 8006958:	f10a 0301 	add.w	r3, sl, #1
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	eb0a 030b 	add.w	r3, sl, fp
 8006962:	930a      	str	r3, [sp, #40]	@ 0x28
 8006964:	9b06      	ldr	r3, [sp, #24]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	9309      	str	r3, [sp, #36]	@ 0x24
 800696c:	9b04      	ldr	r3, [sp, #16]
 800696e:	4621      	mov	r1, r4
 8006970:	9803      	ldr	r0, [sp, #12]
 8006972:	f103 3bff 	add.w	fp, r3, #4294967295
 8006976:	f7ff fa85 	bl	8005e84 <quorem>
 800697a:	4603      	mov	r3, r0
 800697c:	4639      	mov	r1, r7
 800697e:	3330      	adds	r3, #48	@ 0x30
 8006980:	9006      	str	r0, [sp, #24]
 8006982:	9803      	ldr	r0, [sp, #12]
 8006984:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006986:	f000 fc95 	bl	80072b4 <__mcmp>
 800698a:	462a      	mov	r2, r5
 800698c:	9008      	str	r0, [sp, #32]
 800698e:	4621      	mov	r1, r4
 8006990:	4648      	mov	r0, r9
 8006992:	f000 fcab 	bl	80072ec <__mdiff>
 8006996:	68c2      	ldr	r2, [r0, #12]
 8006998:	4606      	mov	r6, r0
 800699a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800699c:	bb02      	cbnz	r2, 80069e0 <_dtoa_r+0xa48>
 800699e:	4601      	mov	r1, r0
 80069a0:	9803      	ldr	r0, [sp, #12]
 80069a2:	f000 fc87 	bl	80072b4 <__mcmp>
 80069a6:	4602      	mov	r2, r0
 80069a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069aa:	4631      	mov	r1, r6
 80069ac:	4648      	mov	r0, r9
 80069ae:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80069b2:	f000 fa03 	bl	8006dbc <_Bfree>
 80069b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80069ba:	9e04      	ldr	r6, [sp, #16]
 80069bc:	ea42 0103 	orr.w	r1, r2, r3
 80069c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069c2:	4319      	orrs	r1, r3
 80069c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069c6:	d10d      	bne.n	80069e4 <_dtoa_r+0xa4c>
 80069c8:	2b39      	cmp	r3, #57	@ 0x39
 80069ca:	d027      	beq.n	8006a1c <_dtoa_r+0xa84>
 80069cc:	9a08      	ldr	r2, [sp, #32]
 80069ce:	2a00      	cmp	r2, #0
 80069d0:	dd01      	ble.n	80069d6 <_dtoa_r+0xa3e>
 80069d2:	9b06      	ldr	r3, [sp, #24]
 80069d4:	3331      	adds	r3, #49	@ 0x31
 80069d6:	f88b 3000 	strb.w	r3, [fp]
 80069da:	e52e      	b.n	800643a <_dtoa_r+0x4a2>
 80069dc:	4628      	mov	r0, r5
 80069de:	e7b9      	b.n	8006954 <_dtoa_r+0x9bc>
 80069e0:	2201      	movs	r2, #1
 80069e2:	e7e2      	b.n	80069aa <_dtoa_r+0xa12>
 80069e4:	9908      	ldr	r1, [sp, #32]
 80069e6:	2900      	cmp	r1, #0
 80069e8:	db04      	blt.n	80069f4 <_dtoa_r+0xa5c>
 80069ea:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80069ec:	4301      	orrs	r1, r0
 80069ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069f0:	4301      	orrs	r1, r0
 80069f2:	d120      	bne.n	8006a36 <_dtoa_r+0xa9e>
 80069f4:	2a00      	cmp	r2, #0
 80069f6:	ddee      	ble.n	80069d6 <_dtoa_r+0xa3e>
 80069f8:	2201      	movs	r2, #1
 80069fa:	9903      	ldr	r1, [sp, #12]
 80069fc:	4648      	mov	r0, r9
 80069fe:	9304      	str	r3, [sp, #16]
 8006a00:	f000 fbec 	bl	80071dc <__lshift>
 8006a04:	4621      	mov	r1, r4
 8006a06:	9003      	str	r0, [sp, #12]
 8006a08:	f000 fc54 	bl	80072b4 <__mcmp>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	9b04      	ldr	r3, [sp, #16]
 8006a10:	dc02      	bgt.n	8006a18 <_dtoa_r+0xa80>
 8006a12:	d1e0      	bne.n	80069d6 <_dtoa_r+0xa3e>
 8006a14:	07da      	lsls	r2, r3, #31
 8006a16:	d5de      	bpl.n	80069d6 <_dtoa_r+0xa3e>
 8006a18:	2b39      	cmp	r3, #57	@ 0x39
 8006a1a:	d1da      	bne.n	80069d2 <_dtoa_r+0xa3a>
 8006a1c:	2339      	movs	r3, #57	@ 0x39
 8006a1e:	f88b 3000 	strb.w	r3, [fp]
 8006a22:	4633      	mov	r3, r6
 8006a24:	461e      	mov	r6, r3
 8006a26:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	2a39      	cmp	r2, #57	@ 0x39
 8006a2e:	d04e      	beq.n	8006ace <_dtoa_r+0xb36>
 8006a30:	3201      	adds	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	e501      	b.n	800643a <_dtoa_r+0x4a2>
 8006a36:	2a00      	cmp	r2, #0
 8006a38:	dd03      	ble.n	8006a42 <_dtoa_r+0xaaa>
 8006a3a:	2b39      	cmp	r3, #57	@ 0x39
 8006a3c:	d0ee      	beq.n	8006a1c <_dtoa_r+0xa84>
 8006a3e:	3301      	adds	r3, #1
 8006a40:	e7c9      	b.n	80069d6 <_dtoa_r+0xa3e>
 8006a42:	9a04      	ldr	r2, [sp, #16]
 8006a44:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006a4a:	428a      	cmp	r2, r1
 8006a4c:	d028      	beq.n	8006aa0 <_dtoa_r+0xb08>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	220a      	movs	r2, #10
 8006a52:	9903      	ldr	r1, [sp, #12]
 8006a54:	4648      	mov	r0, r9
 8006a56:	f000 f9d3 	bl	8006e00 <__multadd>
 8006a5a:	42af      	cmp	r7, r5
 8006a5c:	9003      	str	r0, [sp, #12]
 8006a5e:	f04f 0300 	mov.w	r3, #0
 8006a62:	f04f 020a 	mov.w	r2, #10
 8006a66:	4639      	mov	r1, r7
 8006a68:	4648      	mov	r0, r9
 8006a6a:	d107      	bne.n	8006a7c <_dtoa_r+0xae4>
 8006a6c:	f000 f9c8 	bl	8006e00 <__multadd>
 8006a70:	4607      	mov	r7, r0
 8006a72:	4605      	mov	r5, r0
 8006a74:	9b04      	ldr	r3, [sp, #16]
 8006a76:	3301      	adds	r3, #1
 8006a78:	9304      	str	r3, [sp, #16]
 8006a7a:	e777      	b.n	800696c <_dtoa_r+0x9d4>
 8006a7c:	f000 f9c0 	bl	8006e00 <__multadd>
 8006a80:	4629      	mov	r1, r5
 8006a82:	4607      	mov	r7, r0
 8006a84:	2300      	movs	r3, #0
 8006a86:	220a      	movs	r2, #10
 8006a88:	4648      	mov	r0, r9
 8006a8a:	f000 f9b9 	bl	8006e00 <__multadd>
 8006a8e:	4605      	mov	r5, r0
 8006a90:	e7f0      	b.n	8006a74 <_dtoa_r+0xadc>
 8006a92:	f1bb 0f00 	cmp.w	fp, #0
 8006a96:	bfcc      	ite	gt
 8006a98:	465e      	movgt	r6, fp
 8006a9a:	2601      	movle	r6, #1
 8006a9c:	2700      	movs	r7, #0
 8006a9e:	4456      	add	r6, sl
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	9903      	ldr	r1, [sp, #12]
 8006aa4:	4648      	mov	r0, r9
 8006aa6:	9304      	str	r3, [sp, #16]
 8006aa8:	f000 fb98 	bl	80071dc <__lshift>
 8006aac:	4621      	mov	r1, r4
 8006aae:	9003      	str	r0, [sp, #12]
 8006ab0:	f000 fc00 	bl	80072b4 <__mcmp>
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	dcb4      	bgt.n	8006a22 <_dtoa_r+0xa8a>
 8006ab8:	d102      	bne.n	8006ac0 <_dtoa_r+0xb28>
 8006aba:	9b04      	ldr	r3, [sp, #16]
 8006abc:	07db      	lsls	r3, r3, #31
 8006abe:	d4b0      	bmi.n	8006a22 <_dtoa_r+0xa8a>
 8006ac0:	4633      	mov	r3, r6
 8006ac2:	461e      	mov	r6, r3
 8006ac4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ac8:	2a30      	cmp	r2, #48	@ 0x30
 8006aca:	d0fa      	beq.n	8006ac2 <_dtoa_r+0xb2a>
 8006acc:	e4b5      	b.n	800643a <_dtoa_r+0x4a2>
 8006ace:	459a      	cmp	sl, r3
 8006ad0:	d1a8      	bne.n	8006a24 <_dtoa_r+0xa8c>
 8006ad2:	2331      	movs	r3, #49	@ 0x31
 8006ad4:	f108 0801 	add.w	r8, r8, #1
 8006ad8:	f88a 3000 	strb.w	r3, [sl]
 8006adc:	e4ad      	b.n	800643a <_dtoa_r+0x4a2>
 8006ade:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006ae0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006b3c <_dtoa_r+0xba4>
 8006ae4:	b11b      	cbz	r3, 8006aee <_dtoa_r+0xb56>
 8006ae6:	f10a 0308 	add.w	r3, sl, #8
 8006aea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	4650      	mov	r0, sl
 8006af0:	b017      	add	sp, #92	@ 0x5c
 8006af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006af6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	f77f ae2e 	ble.w	800675a <_dtoa_r+0x7c2>
 8006afe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b00:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b02:	2001      	movs	r0, #1
 8006b04:	e64d      	b.n	80067a2 <_dtoa_r+0x80a>
 8006b06:	f1bb 0f00 	cmp.w	fp, #0
 8006b0a:	f77f aed9 	ble.w	80068c0 <_dtoa_r+0x928>
 8006b0e:	4656      	mov	r6, sl
 8006b10:	4621      	mov	r1, r4
 8006b12:	9803      	ldr	r0, [sp, #12]
 8006b14:	f7ff f9b6 	bl	8005e84 <quorem>
 8006b18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006b1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006b20:	eba6 020a 	sub.w	r2, r6, sl
 8006b24:	4593      	cmp	fp, r2
 8006b26:	ddb4      	ble.n	8006a92 <_dtoa_r+0xafa>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	220a      	movs	r2, #10
 8006b2c:	4648      	mov	r0, r9
 8006b2e:	9903      	ldr	r1, [sp, #12]
 8006b30:	f000 f966 	bl	8006e00 <__multadd>
 8006b34:	9003      	str	r0, [sp, #12]
 8006b36:	e7eb      	b.n	8006b10 <_dtoa_r+0xb78>
 8006b38:	08009661 	.word	0x08009661
 8006b3c:	080095e5 	.word	0x080095e5

08006b40 <_free_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4605      	mov	r5, r0
 8006b44:	2900      	cmp	r1, #0
 8006b46:	d040      	beq.n	8006bca <_free_r+0x8a>
 8006b48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b4c:	1f0c      	subs	r4, r1, #4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	18e4      	addlt	r4, r4, r3
 8006b54:	f000 f8e6 	bl	8006d24 <__malloc_lock>
 8006b58:	4a1c      	ldr	r2, [pc, #112]	@ (8006bcc <_free_r+0x8c>)
 8006b5a:	6813      	ldr	r3, [r2, #0]
 8006b5c:	b933      	cbnz	r3, 8006b6c <_free_r+0x2c>
 8006b5e:	6063      	str	r3, [r4, #4]
 8006b60:	6014      	str	r4, [r2, #0]
 8006b62:	4628      	mov	r0, r5
 8006b64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b68:	f000 b8e2 	b.w	8006d30 <__malloc_unlock>
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d908      	bls.n	8006b82 <_free_r+0x42>
 8006b70:	6820      	ldr	r0, [r4, #0]
 8006b72:	1821      	adds	r1, r4, r0
 8006b74:	428b      	cmp	r3, r1
 8006b76:	bf01      	itttt	eq
 8006b78:	6819      	ldreq	r1, [r3, #0]
 8006b7a:	685b      	ldreq	r3, [r3, #4]
 8006b7c:	1809      	addeq	r1, r1, r0
 8006b7e:	6021      	streq	r1, [r4, #0]
 8006b80:	e7ed      	b.n	8006b5e <_free_r+0x1e>
 8006b82:	461a      	mov	r2, r3
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	b10b      	cbz	r3, 8006b8c <_free_r+0x4c>
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	d9fa      	bls.n	8006b82 <_free_r+0x42>
 8006b8c:	6811      	ldr	r1, [r2, #0]
 8006b8e:	1850      	adds	r0, r2, r1
 8006b90:	42a0      	cmp	r0, r4
 8006b92:	d10b      	bne.n	8006bac <_free_r+0x6c>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	4401      	add	r1, r0
 8006b98:	1850      	adds	r0, r2, r1
 8006b9a:	4283      	cmp	r3, r0
 8006b9c:	6011      	str	r1, [r2, #0]
 8006b9e:	d1e0      	bne.n	8006b62 <_free_r+0x22>
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4408      	add	r0, r1
 8006ba6:	6010      	str	r0, [r2, #0]
 8006ba8:	6053      	str	r3, [r2, #4]
 8006baa:	e7da      	b.n	8006b62 <_free_r+0x22>
 8006bac:	d902      	bls.n	8006bb4 <_free_r+0x74>
 8006bae:	230c      	movs	r3, #12
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	e7d6      	b.n	8006b62 <_free_r+0x22>
 8006bb4:	6820      	ldr	r0, [r4, #0]
 8006bb6:	1821      	adds	r1, r4, r0
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	bf01      	itttt	eq
 8006bbc:	6819      	ldreq	r1, [r3, #0]
 8006bbe:	685b      	ldreq	r3, [r3, #4]
 8006bc0:	1809      	addeq	r1, r1, r0
 8006bc2:	6021      	streq	r1, [r4, #0]
 8006bc4:	6063      	str	r3, [r4, #4]
 8006bc6:	6054      	str	r4, [r2, #4]
 8006bc8:	e7cb      	b.n	8006b62 <_free_r+0x22>
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	200009f8 	.word	0x200009f8

08006bd0 <malloc>:
 8006bd0:	4b02      	ldr	r3, [pc, #8]	@ (8006bdc <malloc+0xc>)
 8006bd2:	4601      	mov	r1, r0
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	f000 b825 	b.w	8006c24 <_malloc_r>
 8006bda:	bf00      	nop
 8006bdc:	2000001c 	.word	0x2000001c

08006be0 <sbrk_aligned>:
 8006be0:	b570      	push	{r4, r5, r6, lr}
 8006be2:	4e0f      	ldr	r6, [pc, #60]	@ (8006c20 <sbrk_aligned+0x40>)
 8006be4:	460c      	mov	r4, r1
 8006be6:	6831      	ldr	r1, [r6, #0]
 8006be8:	4605      	mov	r5, r0
 8006bea:	b911      	cbnz	r1, 8006bf2 <sbrk_aligned+0x12>
 8006bec:	f001 fff6 	bl	8008bdc <_sbrk_r>
 8006bf0:	6030      	str	r0, [r6, #0]
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	f001 fff1 	bl	8008bdc <_sbrk_r>
 8006bfa:	1c43      	adds	r3, r0, #1
 8006bfc:	d103      	bne.n	8006c06 <sbrk_aligned+0x26>
 8006bfe:	f04f 34ff 	mov.w	r4, #4294967295
 8006c02:	4620      	mov	r0, r4
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
 8006c06:	1cc4      	adds	r4, r0, #3
 8006c08:	f024 0403 	bic.w	r4, r4, #3
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d0f8      	beq.n	8006c02 <sbrk_aligned+0x22>
 8006c10:	1a21      	subs	r1, r4, r0
 8006c12:	4628      	mov	r0, r5
 8006c14:	f001 ffe2 	bl	8008bdc <_sbrk_r>
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d1f2      	bne.n	8006c02 <sbrk_aligned+0x22>
 8006c1c:	e7ef      	b.n	8006bfe <sbrk_aligned+0x1e>
 8006c1e:	bf00      	nop
 8006c20:	200009f4 	.word	0x200009f4

08006c24 <_malloc_r>:
 8006c24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c28:	1ccd      	adds	r5, r1, #3
 8006c2a:	f025 0503 	bic.w	r5, r5, #3
 8006c2e:	3508      	adds	r5, #8
 8006c30:	2d0c      	cmp	r5, #12
 8006c32:	bf38      	it	cc
 8006c34:	250c      	movcc	r5, #12
 8006c36:	2d00      	cmp	r5, #0
 8006c38:	4606      	mov	r6, r0
 8006c3a:	db01      	blt.n	8006c40 <_malloc_r+0x1c>
 8006c3c:	42a9      	cmp	r1, r5
 8006c3e:	d904      	bls.n	8006c4a <_malloc_r+0x26>
 8006c40:	230c      	movs	r3, #12
 8006c42:	6033      	str	r3, [r6, #0]
 8006c44:	2000      	movs	r0, #0
 8006c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d20 <_malloc_r+0xfc>
 8006c4e:	f000 f869 	bl	8006d24 <__malloc_lock>
 8006c52:	f8d8 3000 	ldr.w	r3, [r8]
 8006c56:	461c      	mov	r4, r3
 8006c58:	bb44      	cbnz	r4, 8006cac <_malloc_r+0x88>
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	f7ff ffbf 	bl	8006be0 <sbrk_aligned>
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	4604      	mov	r4, r0
 8006c66:	d158      	bne.n	8006d1a <_malloc_r+0xf6>
 8006c68:	f8d8 4000 	ldr.w	r4, [r8]
 8006c6c:	4627      	mov	r7, r4
 8006c6e:	2f00      	cmp	r7, #0
 8006c70:	d143      	bne.n	8006cfa <_malloc_r+0xd6>
 8006c72:	2c00      	cmp	r4, #0
 8006c74:	d04b      	beq.n	8006d0e <_malloc_r+0xea>
 8006c76:	6823      	ldr	r3, [r4, #0]
 8006c78:	4639      	mov	r1, r7
 8006c7a:	4630      	mov	r0, r6
 8006c7c:	eb04 0903 	add.w	r9, r4, r3
 8006c80:	f001 ffac 	bl	8008bdc <_sbrk_r>
 8006c84:	4581      	cmp	r9, r0
 8006c86:	d142      	bne.n	8006d0e <_malloc_r+0xea>
 8006c88:	6821      	ldr	r1, [r4, #0]
 8006c8a:	4630      	mov	r0, r6
 8006c8c:	1a6d      	subs	r5, r5, r1
 8006c8e:	4629      	mov	r1, r5
 8006c90:	f7ff ffa6 	bl	8006be0 <sbrk_aligned>
 8006c94:	3001      	adds	r0, #1
 8006c96:	d03a      	beq.n	8006d0e <_malloc_r+0xea>
 8006c98:	6823      	ldr	r3, [r4, #0]
 8006c9a:	442b      	add	r3, r5
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	f8d8 3000 	ldr.w	r3, [r8]
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	bb62      	cbnz	r2, 8006d00 <_malloc_r+0xdc>
 8006ca6:	f8c8 7000 	str.w	r7, [r8]
 8006caa:	e00f      	b.n	8006ccc <_malloc_r+0xa8>
 8006cac:	6822      	ldr	r2, [r4, #0]
 8006cae:	1b52      	subs	r2, r2, r5
 8006cb0:	d420      	bmi.n	8006cf4 <_malloc_r+0xd0>
 8006cb2:	2a0b      	cmp	r2, #11
 8006cb4:	d917      	bls.n	8006ce6 <_malloc_r+0xc2>
 8006cb6:	1961      	adds	r1, r4, r5
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	6025      	str	r5, [r4, #0]
 8006cbc:	bf18      	it	ne
 8006cbe:	6059      	strne	r1, [r3, #4]
 8006cc0:	6863      	ldr	r3, [r4, #4]
 8006cc2:	bf08      	it	eq
 8006cc4:	f8c8 1000 	streq.w	r1, [r8]
 8006cc8:	5162      	str	r2, [r4, r5]
 8006cca:	604b      	str	r3, [r1, #4]
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f000 f82f 	bl	8006d30 <__malloc_unlock>
 8006cd2:	f104 000b 	add.w	r0, r4, #11
 8006cd6:	1d23      	adds	r3, r4, #4
 8006cd8:	f020 0007 	bic.w	r0, r0, #7
 8006cdc:	1ac2      	subs	r2, r0, r3
 8006cde:	bf1c      	itt	ne
 8006ce0:	1a1b      	subne	r3, r3, r0
 8006ce2:	50a3      	strne	r3, [r4, r2]
 8006ce4:	e7af      	b.n	8006c46 <_malloc_r+0x22>
 8006ce6:	6862      	ldr	r2, [r4, #4]
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	bf0c      	ite	eq
 8006cec:	f8c8 2000 	streq.w	r2, [r8]
 8006cf0:	605a      	strne	r2, [r3, #4]
 8006cf2:	e7eb      	b.n	8006ccc <_malloc_r+0xa8>
 8006cf4:	4623      	mov	r3, r4
 8006cf6:	6864      	ldr	r4, [r4, #4]
 8006cf8:	e7ae      	b.n	8006c58 <_malloc_r+0x34>
 8006cfa:	463c      	mov	r4, r7
 8006cfc:	687f      	ldr	r7, [r7, #4]
 8006cfe:	e7b6      	b.n	8006c6e <_malloc_r+0x4a>
 8006d00:	461a      	mov	r2, r3
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	d1fb      	bne.n	8006d00 <_malloc_r+0xdc>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6053      	str	r3, [r2, #4]
 8006d0c:	e7de      	b.n	8006ccc <_malloc_r+0xa8>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	4630      	mov	r0, r6
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	f000 f80c 	bl	8006d30 <__malloc_unlock>
 8006d18:	e794      	b.n	8006c44 <_malloc_r+0x20>
 8006d1a:	6005      	str	r5, [r0, #0]
 8006d1c:	e7d6      	b.n	8006ccc <_malloc_r+0xa8>
 8006d1e:	bf00      	nop
 8006d20:	200009f8 	.word	0x200009f8

08006d24 <__malloc_lock>:
 8006d24:	4801      	ldr	r0, [pc, #4]	@ (8006d2c <__malloc_lock+0x8>)
 8006d26:	f7ff b898 	b.w	8005e5a <__retarget_lock_acquire_recursive>
 8006d2a:	bf00      	nop
 8006d2c:	200009f0 	.word	0x200009f0

08006d30 <__malloc_unlock>:
 8006d30:	4801      	ldr	r0, [pc, #4]	@ (8006d38 <__malloc_unlock+0x8>)
 8006d32:	f7ff b893 	b.w	8005e5c <__retarget_lock_release_recursive>
 8006d36:	bf00      	nop
 8006d38:	200009f0 	.word	0x200009f0

08006d3c <_Balloc>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	69c6      	ldr	r6, [r0, #28]
 8006d40:	4604      	mov	r4, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	b976      	cbnz	r6, 8006d64 <_Balloc+0x28>
 8006d46:	2010      	movs	r0, #16
 8006d48:	f7ff ff42 	bl	8006bd0 <malloc>
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	61e0      	str	r0, [r4, #28]
 8006d50:	b920      	cbnz	r0, 8006d5c <_Balloc+0x20>
 8006d52:	216b      	movs	r1, #107	@ 0x6b
 8006d54:	4b17      	ldr	r3, [pc, #92]	@ (8006db4 <_Balloc+0x78>)
 8006d56:	4818      	ldr	r0, [pc, #96]	@ (8006db8 <_Balloc+0x7c>)
 8006d58:	f001 ff64 	bl	8008c24 <__assert_func>
 8006d5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d60:	6006      	str	r6, [r0, #0]
 8006d62:	60c6      	str	r6, [r0, #12]
 8006d64:	69e6      	ldr	r6, [r4, #28]
 8006d66:	68f3      	ldr	r3, [r6, #12]
 8006d68:	b183      	cbz	r3, 8006d8c <_Balloc+0x50>
 8006d6a:	69e3      	ldr	r3, [r4, #28]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d72:	b9b8      	cbnz	r0, 8006da4 <_Balloc+0x68>
 8006d74:	2101      	movs	r1, #1
 8006d76:	fa01 f605 	lsl.w	r6, r1, r5
 8006d7a:	1d72      	adds	r2, r6, #5
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	0092      	lsls	r2, r2, #2
 8006d80:	f001 ff6e 	bl	8008c60 <_calloc_r>
 8006d84:	b160      	cbz	r0, 8006da0 <_Balloc+0x64>
 8006d86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d8a:	e00e      	b.n	8006daa <_Balloc+0x6e>
 8006d8c:	2221      	movs	r2, #33	@ 0x21
 8006d8e:	2104      	movs	r1, #4
 8006d90:	4620      	mov	r0, r4
 8006d92:	f001 ff65 	bl	8008c60 <_calloc_r>
 8006d96:	69e3      	ldr	r3, [r4, #28]
 8006d98:	60f0      	str	r0, [r6, #12]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e4      	bne.n	8006d6a <_Balloc+0x2e>
 8006da0:	2000      	movs	r0, #0
 8006da2:	bd70      	pop	{r4, r5, r6, pc}
 8006da4:	6802      	ldr	r2, [r0, #0]
 8006da6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006daa:	2300      	movs	r3, #0
 8006dac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006db0:	e7f7      	b.n	8006da2 <_Balloc+0x66>
 8006db2:	bf00      	nop
 8006db4:	080095f2 	.word	0x080095f2
 8006db8:	08009672 	.word	0x08009672

08006dbc <_Bfree>:
 8006dbc:	b570      	push	{r4, r5, r6, lr}
 8006dbe:	69c6      	ldr	r6, [r0, #28]
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	b976      	cbnz	r6, 8006de4 <_Bfree+0x28>
 8006dc6:	2010      	movs	r0, #16
 8006dc8:	f7ff ff02 	bl	8006bd0 <malloc>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	61e8      	str	r0, [r5, #28]
 8006dd0:	b920      	cbnz	r0, 8006ddc <_Bfree+0x20>
 8006dd2:	218f      	movs	r1, #143	@ 0x8f
 8006dd4:	4b08      	ldr	r3, [pc, #32]	@ (8006df8 <_Bfree+0x3c>)
 8006dd6:	4809      	ldr	r0, [pc, #36]	@ (8006dfc <_Bfree+0x40>)
 8006dd8:	f001 ff24 	bl	8008c24 <__assert_func>
 8006ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de0:	6006      	str	r6, [r0, #0]
 8006de2:	60c6      	str	r6, [r0, #12]
 8006de4:	b13c      	cbz	r4, 8006df6 <_Bfree+0x3a>
 8006de6:	69eb      	ldr	r3, [r5, #28]
 8006de8:	6862      	ldr	r2, [r4, #4]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006df0:	6021      	str	r1, [r4, #0]
 8006df2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006df6:	bd70      	pop	{r4, r5, r6, pc}
 8006df8:	080095f2 	.word	0x080095f2
 8006dfc:	08009672 	.word	0x08009672

08006e00 <__multadd>:
 8006e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e04:	4607      	mov	r7, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	461e      	mov	r6, r3
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	690d      	ldr	r5, [r1, #16]
 8006e0e:	f101 0c14 	add.w	ip, r1, #20
 8006e12:	f8dc 3000 	ldr.w	r3, [ip]
 8006e16:	3001      	adds	r0, #1
 8006e18:	b299      	uxth	r1, r3
 8006e1a:	fb02 6101 	mla	r1, r2, r1, r6
 8006e1e:	0c1e      	lsrs	r6, r3, #16
 8006e20:	0c0b      	lsrs	r3, r1, #16
 8006e22:	fb02 3306 	mla	r3, r2, r6, r3
 8006e26:	b289      	uxth	r1, r1
 8006e28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006e2c:	4285      	cmp	r5, r0
 8006e2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006e32:	f84c 1b04 	str.w	r1, [ip], #4
 8006e36:	dcec      	bgt.n	8006e12 <__multadd+0x12>
 8006e38:	b30e      	cbz	r6, 8006e7e <__multadd+0x7e>
 8006e3a:	68a3      	ldr	r3, [r4, #8]
 8006e3c:	42ab      	cmp	r3, r5
 8006e3e:	dc19      	bgt.n	8006e74 <__multadd+0x74>
 8006e40:	6861      	ldr	r1, [r4, #4]
 8006e42:	4638      	mov	r0, r7
 8006e44:	3101      	adds	r1, #1
 8006e46:	f7ff ff79 	bl	8006d3c <_Balloc>
 8006e4a:	4680      	mov	r8, r0
 8006e4c:	b928      	cbnz	r0, 8006e5a <__multadd+0x5a>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	21ba      	movs	r1, #186	@ 0xba
 8006e52:	4b0c      	ldr	r3, [pc, #48]	@ (8006e84 <__multadd+0x84>)
 8006e54:	480c      	ldr	r0, [pc, #48]	@ (8006e88 <__multadd+0x88>)
 8006e56:	f001 fee5 	bl	8008c24 <__assert_func>
 8006e5a:	6922      	ldr	r2, [r4, #16]
 8006e5c:	f104 010c 	add.w	r1, r4, #12
 8006e60:	3202      	adds	r2, #2
 8006e62:	0092      	lsls	r2, r2, #2
 8006e64:	300c      	adds	r0, #12
 8006e66:	f001 fec9 	bl	8008bfc <memcpy>
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	4638      	mov	r0, r7
 8006e6e:	f7ff ffa5 	bl	8006dbc <_Bfree>
 8006e72:	4644      	mov	r4, r8
 8006e74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e78:	3501      	adds	r5, #1
 8006e7a:	615e      	str	r6, [r3, #20]
 8006e7c:	6125      	str	r5, [r4, #16]
 8006e7e:	4620      	mov	r0, r4
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	08009661 	.word	0x08009661
 8006e88:	08009672 	.word	0x08009672

08006e8c <__s2b>:
 8006e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e90:	4615      	mov	r5, r2
 8006e92:	2209      	movs	r2, #9
 8006e94:	461f      	mov	r7, r3
 8006e96:	3308      	adds	r3, #8
 8006e98:	460c      	mov	r4, r1
 8006e9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e9e:	4606      	mov	r6, r0
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	db09      	blt.n	8006ebc <__s2b+0x30>
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f7ff ff47 	bl	8006d3c <_Balloc>
 8006eae:	b940      	cbnz	r0, 8006ec2 <__s2b+0x36>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	21d3      	movs	r1, #211	@ 0xd3
 8006eb4:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <__s2b+0x8c>)
 8006eb6:	4819      	ldr	r0, [pc, #100]	@ (8006f1c <__s2b+0x90>)
 8006eb8:	f001 feb4 	bl	8008c24 <__assert_func>
 8006ebc:	0052      	lsls	r2, r2, #1
 8006ebe:	3101      	adds	r1, #1
 8006ec0:	e7f0      	b.n	8006ea4 <__s2b+0x18>
 8006ec2:	9b08      	ldr	r3, [sp, #32]
 8006ec4:	2d09      	cmp	r5, #9
 8006ec6:	6143      	str	r3, [r0, #20]
 8006ec8:	f04f 0301 	mov.w	r3, #1
 8006ecc:	6103      	str	r3, [r0, #16]
 8006ece:	dd16      	ble.n	8006efe <__s2b+0x72>
 8006ed0:	f104 0909 	add.w	r9, r4, #9
 8006ed4:	46c8      	mov	r8, r9
 8006ed6:	442c      	add	r4, r5
 8006ed8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006edc:	4601      	mov	r1, r0
 8006ede:	220a      	movs	r2, #10
 8006ee0:	4630      	mov	r0, r6
 8006ee2:	3b30      	subs	r3, #48	@ 0x30
 8006ee4:	f7ff ff8c 	bl	8006e00 <__multadd>
 8006ee8:	45a0      	cmp	r8, r4
 8006eea:	d1f5      	bne.n	8006ed8 <__s2b+0x4c>
 8006eec:	f1a5 0408 	sub.w	r4, r5, #8
 8006ef0:	444c      	add	r4, r9
 8006ef2:	1b2d      	subs	r5, r5, r4
 8006ef4:	1963      	adds	r3, r4, r5
 8006ef6:	42bb      	cmp	r3, r7
 8006ef8:	db04      	blt.n	8006f04 <__s2b+0x78>
 8006efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006efe:	2509      	movs	r5, #9
 8006f00:	340a      	adds	r4, #10
 8006f02:	e7f6      	b.n	8006ef2 <__s2b+0x66>
 8006f04:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006f08:	4601      	mov	r1, r0
 8006f0a:	220a      	movs	r2, #10
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	3b30      	subs	r3, #48	@ 0x30
 8006f10:	f7ff ff76 	bl	8006e00 <__multadd>
 8006f14:	e7ee      	b.n	8006ef4 <__s2b+0x68>
 8006f16:	bf00      	nop
 8006f18:	08009661 	.word	0x08009661
 8006f1c:	08009672 	.word	0x08009672

08006f20 <__hi0bits>:
 8006f20:	4603      	mov	r3, r0
 8006f22:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006f26:	bf3a      	itte	cc
 8006f28:	0403      	lslcc	r3, r0, #16
 8006f2a:	2010      	movcc	r0, #16
 8006f2c:	2000      	movcs	r0, #0
 8006f2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f32:	bf3c      	itt	cc
 8006f34:	021b      	lslcc	r3, r3, #8
 8006f36:	3008      	addcc	r0, #8
 8006f38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006f3c:	bf3c      	itt	cc
 8006f3e:	011b      	lslcc	r3, r3, #4
 8006f40:	3004      	addcc	r0, #4
 8006f42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f46:	bf3c      	itt	cc
 8006f48:	009b      	lslcc	r3, r3, #2
 8006f4a:	3002      	addcc	r0, #2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	db05      	blt.n	8006f5c <__hi0bits+0x3c>
 8006f50:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006f54:	f100 0001 	add.w	r0, r0, #1
 8006f58:	bf08      	it	eq
 8006f5a:	2020      	moveq	r0, #32
 8006f5c:	4770      	bx	lr

08006f5e <__lo0bits>:
 8006f5e:	6803      	ldr	r3, [r0, #0]
 8006f60:	4602      	mov	r2, r0
 8006f62:	f013 0007 	ands.w	r0, r3, #7
 8006f66:	d00b      	beq.n	8006f80 <__lo0bits+0x22>
 8006f68:	07d9      	lsls	r1, r3, #31
 8006f6a:	d421      	bmi.n	8006fb0 <__lo0bits+0x52>
 8006f6c:	0798      	lsls	r0, r3, #30
 8006f6e:	bf49      	itett	mi
 8006f70:	085b      	lsrmi	r3, r3, #1
 8006f72:	089b      	lsrpl	r3, r3, #2
 8006f74:	2001      	movmi	r0, #1
 8006f76:	6013      	strmi	r3, [r2, #0]
 8006f78:	bf5c      	itt	pl
 8006f7a:	2002      	movpl	r0, #2
 8006f7c:	6013      	strpl	r3, [r2, #0]
 8006f7e:	4770      	bx	lr
 8006f80:	b299      	uxth	r1, r3
 8006f82:	b909      	cbnz	r1, 8006f88 <__lo0bits+0x2a>
 8006f84:	2010      	movs	r0, #16
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	b2d9      	uxtb	r1, r3
 8006f8a:	b909      	cbnz	r1, 8006f90 <__lo0bits+0x32>
 8006f8c:	3008      	adds	r0, #8
 8006f8e:	0a1b      	lsrs	r3, r3, #8
 8006f90:	0719      	lsls	r1, r3, #28
 8006f92:	bf04      	itt	eq
 8006f94:	091b      	lsreq	r3, r3, #4
 8006f96:	3004      	addeq	r0, #4
 8006f98:	0799      	lsls	r1, r3, #30
 8006f9a:	bf04      	itt	eq
 8006f9c:	089b      	lsreq	r3, r3, #2
 8006f9e:	3002      	addeq	r0, #2
 8006fa0:	07d9      	lsls	r1, r3, #31
 8006fa2:	d403      	bmi.n	8006fac <__lo0bits+0x4e>
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	f100 0001 	add.w	r0, r0, #1
 8006faa:	d003      	beq.n	8006fb4 <__lo0bits+0x56>
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4770      	bx	lr
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	4770      	bx	lr
 8006fb4:	2020      	movs	r0, #32
 8006fb6:	4770      	bx	lr

08006fb8 <__i2b>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	460c      	mov	r4, r1
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	f7ff febd 	bl	8006d3c <_Balloc>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	b928      	cbnz	r0, 8006fd2 <__i2b+0x1a>
 8006fc6:	f240 1145 	movw	r1, #325	@ 0x145
 8006fca:	4b04      	ldr	r3, [pc, #16]	@ (8006fdc <__i2b+0x24>)
 8006fcc:	4804      	ldr	r0, [pc, #16]	@ (8006fe0 <__i2b+0x28>)
 8006fce:	f001 fe29 	bl	8008c24 <__assert_func>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	6144      	str	r4, [r0, #20]
 8006fd6:	6103      	str	r3, [r0, #16]
 8006fd8:	bd10      	pop	{r4, pc}
 8006fda:	bf00      	nop
 8006fdc:	08009661 	.word	0x08009661
 8006fe0:	08009672 	.word	0x08009672

08006fe4 <__multiply>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	4617      	mov	r7, r2
 8006fea:	690a      	ldr	r2, [r1, #16]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	4689      	mov	r9, r1
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	bfa2      	ittt	ge
 8006ff4:	463b      	movge	r3, r7
 8006ff6:	460f      	movge	r7, r1
 8006ff8:	4699      	movge	r9, r3
 8006ffa:	693d      	ldr	r5, [r7, #16]
 8006ffc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	6879      	ldr	r1, [r7, #4]
 8007004:	eb05 060a 	add.w	r6, r5, sl
 8007008:	42b3      	cmp	r3, r6
 800700a:	b085      	sub	sp, #20
 800700c:	bfb8      	it	lt
 800700e:	3101      	addlt	r1, #1
 8007010:	f7ff fe94 	bl	8006d3c <_Balloc>
 8007014:	b930      	cbnz	r0, 8007024 <__multiply+0x40>
 8007016:	4602      	mov	r2, r0
 8007018:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800701c:	4b40      	ldr	r3, [pc, #256]	@ (8007120 <__multiply+0x13c>)
 800701e:	4841      	ldr	r0, [pc, #260]	@ (8007124 <__multiply+0x140>)
 8007020:	f001 fe00 	bl	8008c24 <__assert_func>
 8007024:	f100 0414 	add.w	r4, r0, #20
 8007028:	4623      	mov	r3, r4
 800702a:	2200      	movs	r2, #0
 800702c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007030:	4573      	cmp	r3, lr
 8007032:	d320      	bcc.n	8007076 <__multiply+0x92>
 8007034:	f107 0814 	add.w	r8, r7, #20
 8007038:	f109 0114 	add.w	r1, r9, #20
 800703c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007040:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007044:	9302      	str	r3, [sp, #8]
 8007046:	1beb      	subs	r3, r5, r7
 8007048:	3b15      	subs	r3, #21
 800704a:	f023 0303 	bic.w	r3, r3, #3
 800704e:	3304      	adds	r3, #4
 8007050:	3715      	adds	r7, #21
 8007052:	42bd      	cmp	r5, r7
 8007054:	bf38      	it	cc
 8007056:	2304      	movcc	r3, #4
 8007058:	9301      	str	r3, [sp, #4]
 800705a:	9b02      	ldr	r3, [sp, #8]
 800705c:	9103      	str	r1, [sp, #12]
 800705e:	428b      	cmp	r3, r1
 8007060:	d80c      	bhi.n	800707c <__multiply+0x98>
 8007062:	2e00      	cmp	r6, #0
 8007064:	dd03      	ble.n	800706e <__multiply+0x8a>
 8007066:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800706a:	2b00      	cmp	r3, #0
 800706c:	d055      	beq.n	800711a <__multiply+0x136>
 800706e:	6106      	str	r6, [r0, #16]
 8007070:	b005      	add	sp, #20
 8007072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007076:	f843 2b04 	str.w	r2, [r3], #4
 800707a:	e7d9      	b.n	8007030 <__multiply+0x4c>
 800707c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007080:	f1ba 0f00 	cmp.w	sl, #0
 8007084:	d01f      	beq.n	80070c6 <__multiply+0xe2>
 8007086:	46c4      	mov	ip, r8
 8007088:	46a1      	mov	r9, r4
 800708a:	2700      	movs	r7, #0
 800708c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007090:	f8d9 3000 	ldr.w	r3, [r9]
 8007094:	fa1f fb82 	uxth.w	fp, r2
 8007098:	b29b      	uxth	r3, r3
 800709a:	fb0a 330b 	mla	r3, sl, fp, r3
 800709e:	443b      	add	r3, r7
 80070a0:	f8d9 7000 	ldr.w	r7, [r9]
 80070a4:	0c12      	lsrs	r2, r2, #16
 80070a6:	0c3f      	lsrs	r7, r7, #16
 80070a8:	fb0a 7202 	mla	r2, sl, r2, r7
 80070ac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070b6:	4565      	cmp	r5, ip
 80070b8:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80070bc:	f849 3b04 	str.w	r3, [r9], #4
 80070c0:	d8e4      	bhi.n	800708c <__multiply+0xa8>
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	50e7      	str	r7, [r4, r3]
 80070c6:	9b03      	ldr	r3, [sp, #12]
 80070c8:	3104      	adds	r1, #4
 80070ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80070ce:	f1b9 0f00 	cmp.w	r9, #0
 80070d2:	d020      	beq.n	8007116 <__multiply+0x132>
 80070d4:	4647      	mov	r7, r8
 80070d6:	46a4      	mov	ip, r4
 80070d8:	f04f 0a00 	mov.w	sl, #0
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	f8b7 b000 	ldrh.w	fp, [r7]
 80070e2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	fb09 220b 	mla	r2, r9, fp, r2
 80070ec:	4452      	add	r2, sl
 80070ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80070f2:	f84c 3b04 	str.w	r3, [ip], #4
 80070f6:	f857 3b04 	ldr.w	r3, [r7], #4
 80070fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070fe:	f8bc 3000 	ldrh.w	r3, [ip]
 8007102:	42bd      	cmp	r5, r7
 8007104:	fb09 330a 	mla	r3, r9, sl, r3
 8007108:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800710c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007110:	d8e5      	bhi.n	80070de <__multiply+0xfa>
 8007112:	9a01      	ldr	r2, [sp, #4]
 8007114:	50a3      	str	r3, [r4, r2]
 8007116:	3404      	adds	r4, #4
 8007118:	e79f      	b.n	800705a <__multiply+0x76>
 800711a:	3e01      	subs	r6, #1
 800711c:	e7a1      	b.n	8007062 <__multiply+0x7e>
 800711e:	bf00      	nop
 8007120:	08009661 	.word	0x08009661
 8007124:	08009672 	.word	0x08009672

08007128 <__pow5mult>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	4615      	mov	r5, r2
 800712e:	f012 0203 	ands.w	r2, r2, #3
 8007132:	4607      	mov	r7, r0
 8007134:	460e      	mov	r6, r1
 8007136:	d007      	beq.n	8007148 <__pow5mult+0x20>
 8007138:	4c25      	ldr	r4, [pc, #148]	@ (80071d0 <__pow5mult+0xa8>)
 800713a:	3a01      	subs	r2, #1
 800713c:	2300      	movs	r3, #0
 800713e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007142:	f7ff fe5d 	bl	8006e00 <__multadd>
 8007146:	4606      	mov	r6, r0
 8007148:	10ad      	asrs	r5, r5, #2
 800714a:	d03d      	beq.n	80071c8 <__pow5mult+0xa0>
 800714c:	69fc      	ldr	r4, [r7, #28]
 800714e:	b97c      	cbnz	r4, 8007170 <__pow5mult+0x48>
 8007150:	2010      	movs	r0, #16
 8007152:	f7ff fd3d 	bl	8006bd0 <malloc>
 8007156:	4602      	mov	r2, r0
 8007158:	61f8      	str	r0, [r7, #28]
 800715a:	b928      	cbnz	r0, 8007168 <__pow5mult+0x40>
 800715c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007160:	4b1c      	ldr	r3, [pc, #112]	@ (80071d4 <__pow5mult+0xac>)
 8007162:	481d      	ldr	r0, [pc, #116]	@ (80071d8 <__pow5mult+0xb0>)
 8007164:	f001 fd5e 	bl	8008c24 <__assert_func>
 8007168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800716c:	6004      	str	r4, [r0, #0]
 800716e:	60c4      	str	r4, [r0, #12]
 8007170:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007178:	b94c      	cbnz	r4, 800718e <__pow5mult+0x66>
 800717a:	f240 2171 	movw	r1, #625	@ 0x271
 800717e:	4638      	mov	r0, r7
 8007180:	f7ff ff1a 	bl	8006fb8 <__i2b>
 8007184:	2300      	movs	r3, #0
 8007186:	4604      	mov	r4, r0
 8007188:	f8c8 0008 	str.w	r0, [r8, #8]
 800718c:	6003      	str	r3, [r0, #0]
 800718e:	f04f 0900 	mov.w	r9, #0
 8007192:	07eb      	lsls	r3, r5, #31
 8007194:	d50a      	bpl.n	80071ac <__pow5mult+0x84>
 8007196:	4631      	mov	r1, r6
 8007198:	4622      	mov	r2, r4
 800719a:	4638      	mov	r0, r7
 800719c:	f7ff ff22 	bl	8006fe4 <__multiply>
 80071a0:	4680      	mov	r8, r0
 80071a2:	4631      	mov	r1, r6
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff fe09 	bl	8006dbc <_Bfree>
 80071aa:	4646      	mov	r6, r8
 80071ac:	106d      	asrs	r5, r5, #1
 80071ae:	d00b      	beq.n	80071c8 <__pow5mult+0xa0>
 80071b0:	6820      	ldr	r0, [r4, #0]
 80071b2:	b938      	cbnz	r0, 80071c4 <__pow5mult+0x9c>
 80071b4:	4622      	mov	r2, r4
 80071b6:	4621      	mov	r1, r4
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ff13 	bl	8006fe4 <__multiply>
 80071be:	6020      	str	r0, [r4, #0]
 80071c0:	f8c0 9000 	str.w	r9, [r0]
 80071c4:	4604      	mov	r4, r0
 80071c6:	e7e4      	b.n	8007192 <__pow5mult+0x6a>
 80071c8:	4630      	mov	r0, r6
 80071ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ce:	bf00      	nop
 80071d0:	08009784 	.word	0x08009784
 80071d4:	080095f2 	.word	0x080095f2
 80071d8:	08009672 	.word	0x08009672

080071dc <__lshift>:
 80071dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e0:	460c      	mov	r4, r1
 80071e2:	4607      	mov	r7, r0
 80071e4:	4691      	mov	r9, r2
 80071e6:	6923      	ldr	r3, [r4, #16]
 80071e8:	6849      	ldr	r1, [r1, #4]
 80071ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071ee:	68a3      	ldr	r3, [r4, #8]
 80071f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071f4:	f108 0601 	add.w	r6, r8, #1
 80071f8:	42b3      	cmp	r3, r6
 80071fa:	db0b      	blt.n	8007214 <__lshift+0x38>
 80071fc:	4638      	mov	r0, r7
 80071fe:	f7ff fd9d 	bl	8006d3c <_Balloc>
 8007202:	4605      	mov	r5, r0
 8007204:	b948      	cbnz	r0, 800721a <__lshift+0x3e>
 8007206:	4602      	mov	r2, r0
 8007208:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800720c:	4b27      	ldr	r3, [pc, #156]	@ (80072ac <__lshift+0xd0>)
 800720e:	4828      	ldr	r0, [pc, #160]	@ (80072b0 <__lshift+0xd4>)
 8007210:	f001 fd08 	bl	8008c24 <__assert_func>
 8007214:	3101      	adds	r1, #1
 8007216:	005b      	lsls	r3, r3, #1
 8007218:	e7ee      	b.n	80071f8 <__lshift+0x1c>
 800721a:	2300      	movs	r3, #0
 800721c:	f100 0114 	add.w	r1, r0, #20
 8007220:	f100 0210 	add.w	r2, r0, #16
 8007224:	4618      	mov	r0, r3
 8007226:	4553      	cmp	r3, sl
 8007228:	db33      	blt.n	8007292 <__lshift+0xb6>
 800722a:	6920      	ldr	r0, [r4, #16]
 800722c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007230:	f104 0314 	add.w	r3, r4, #20
 8007234:	f019 091f 	ands.w	r9, r9, #31
 8007238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800723c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007240:	d02b      	beq.n	800729a <__lshift+0xbe>
 8007242:	468a      	mov	sl, r1
 8007244:	2200      	movs	r2, #0
 8007246:	f1c9 0e20 	rsb	lr, r9, #32
 800724a:	6818      	ldr	r0, [r3, #0]
 800724c:	fa00 f009 	lsl.w	r0, r0, r9
 8007250:	4310      	orrs	r0, r2
 8007252:	f84a 0b04 	str.w	r0, [sl], #4
 8007256:	f853 2b04 	ldr.w	r2, [r3], #4
 800725a:	459c      	cmp	ip, r3
 800725c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007260:	d8f3      	bhi.n	800724a <__lshift+0x6e>
 8007262:	ebac 0304 	sub.w	r3, ip, r4
 8007266:	3b15      	subs	r3, #21
 8007268:	f023 0303 	bic.w	r3, r3, #3
 800726c:	3304      	adds	r3, #4
 800726e:	f104 0015 	add.w	r0, r4, #21
 8007272:	4560      	cmp	r0, ip
 8007274:	bf88      	it	hi
 8007276:	2304      	movhi	r3, #4
 8007278:	50ca      	str	r2, [r1, r3]
 800727a:	b10a      	cbz	r2, 8007280 <__lshift+0xa4>
 800727c:	f108 0602 	add.w	r6, r8, #2
 8007280:	3e01      	subs	r6, #1
 8007282:	4638      	mov	r0, r7
 8007284:	4621      	mov	r1, r4
 8007286:	612e      	str	r6, [r5, #16]
 8007288:	f7ff fd98 	bl	8006dbc <_Bfree>
 800728c:	4628      	mov	r0, r5
 800728e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007292:	f842 0f04 	str.w	r0, [r2, #4]!
 8007296:	3301      	adds	r3, #1
 8007298:	e7c5      	b.n	8007226 <__lshift+0x4a>
 800729a:	3904      	subs	r1, #4
 800729c:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a0:	459c      	cmp	ip, r3
 80072a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80072a6:	d8f9      	bhi.n	800729c <__lshift+0xc0>
 80072a8:	e7ea      	b.n	8007280 <__lshift+0xa4>
 80072aa:	bf00      	nop
 80072ac:	08009661 	.word	0x08009661
 80072b0:	08009672 	.word	0x08009672

080072b4 <__mcmp>:
 80072b4:	4603      	mov	r3, r0
 80072b6:	690a      	ldr	r2, [r1, #16]
 80072b8:	6900      	ldr	r0, [r0, #16]
 80072ba:	b530      	push	{r4, r5, lr}
 80072bc:	1a80      	subs	r0, r0, r2
 80072be:	d10e      	bne.n	80072de <__mcmp+0x2a>
 80072c0:	3314      	adds	r3, #20
 80072c2:	3114      	adds	r1, #20
 80072c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072d4:	4295      	cmp	r5, r2
 80072d6:	d003      	beq.n	80072e0 <__mcmp+0x2c>
 80072d8:	d205      	bcs.n	80072e6 <__mcmp+0x32>
 80072da:	f04f 30ff 	mov.w	r0, #4294967295
 80072de:	bd30      	pop	{r4, r5, pc}
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d3f3      	bcc.n	80072cc <__mcmp+0x18>
 80072e4:	e7fb      	b.n	80072de <__mcmp+0x2a>
 80072e6:	2001      	movs	r0, #1
 80072e8:	e7f9      	b.n	80072de <__mcmp+0x2a>
	...

080072ec <__mdiff>:
 80072ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	4689      	mov	r9, r1
 80072f2:	4606      	mov	r6, r0
 80072f4:	4611      	mov	r1, r2
 80072f6:	4648      	mov	r0, r9
 80072f8:	4614      	mov	r4, r2
 80072fa:	f7ff ffdb 	bl	80072b4 <__mcmp>
 80072fe:	1e05      	subs	r5, r0, #0
 8007300:	d112      	bne.n	8007328 <__mdiff+0x3c>
 8007302:	4629      	mov	r1, r5
 8007304:	4630      	mov	r0, r6
 8007306:	f7ff fd19 	bl	8006d3c <_Balloc>
 800730a:	4602      	mov	r2, r0
 800730c:	b928      	cbnz	r0, 800731a <__mdiff+0x2e>
 800730e:	f240 2137 	movw	r1, #567	@ 0x237
 8007312:	4b3e      	ldr	r3, [pc, #248]	@ (800740c <__mdiff+0x120>)
 8007314:	483e      	ldr	r0, [pc, #248]	@ (8007410 <__mdiff+0x124>)
 8007316:	f001 fc85 	bl	8008c24 <__assert_func>
 800731a:	2301      	movs	r3, #1
 800731c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007320:	4610      	mov	r0, r2
 8007322:	b003      	add	sp, #12
 8007324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	bfbc      	itt	lt
 800732a:	464b      	movlt	r3, r9
 800732c:	46a1      	movlt	r9, r4
 800732e:	4630      	mov	r0, r6
 8007330:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007334:	bfba      	itte	lt
 8007336:	461c      	movlt	r4, r3
 8007338:	2501      	movlt	r5, #1
 800733a:	2500      	movge	r5, #0
 800733c:	f7ff fcfe 	bl	8006d3c <_Balloc>
 8007340:	4602      	mov	r2, r0
 8007342:	b918      	cbnz	r0, 800734c <__mdiff+0x60>
 8007344:	f240 2145 	movw	r1, #581	@ 0x245
 8007348:	4b30      	ldr	r3, [pc, #192]	@ (800740c <__mdiff+0x120>)
 800734a:	e7e3      	b.n	8007314 <__mdiff+0x28>
 800734c:	f100 0b14 	add.w	fp, r0, #20
 8007350:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007354:	f109 0310 	add.w	r3, r9, #16
 8007358:	60c5      	str	r5, [r0, #12]
 800735a:	f04f 0c00 	mov.w	ip, #0
 800735e:	f109 0514 	add.w	r5, r9, #20
 8007362:	46d9      	mov	r9, fp
 8007364:	6926      	ldr	r6, [r4, #16]
 8007366:	f104 0e14 	add.w	lr, r4, #20
 800736a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800736e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007372:	9301      	str	r3, [sp, #4]
 8007374:	9b01      	ldr	r3, [sp, #4]
 8007376:	f85e 0b04 	ldr.w	r0, [lr], #4
 800737a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800737e:	b281      	uxth	r1, r0
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	fa1f f38a 	uxth.w	r3, sl
 8007386:	1a5b      	subs	r3, r3, r1
 8007388:	0c00      	lsrs	r0, r0, #16
 800738a:	4463      	add	r3, ip
 800738c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007390:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007394:	b29b      	uxth	r3, r3
 8007396:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800739a:	4576      	cmp	r6, lr
 800739c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073a0:	f849 3b04 	str.w	r3, [r9], #4
 80073a4:	d8e6      	bhi.n	8007374 <__mdiff+0x88>
 80073a6:	1b33      	subs	r3, r6, r4
 80073a8:	3b15      	subs	r3, #21
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	3415      	adds	r4, #21
 80073b0:	3304      	adds	r3, #4
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	bf38      	it	cc
 80073b6:	2304      	movcc	r3, #4
 80073b8:	441d      	add	r5, r3
 80073ba:	445b      	add	r3, fp
 80073bc:	461e      	mov	r6, r3
 80073be:	462c      	mov	r4, r5
 80073c0:	4544      	cmp	r4, r8
 80073c2:	d30e      	bcc.n	80073e2 <__mdiff+0xf6>
 80073c4:	f108 0103 	add.w	r1, r8, #3
 80073c8:	1b49      	subs	r1, r1, r5
 80073ca:	f021 0103 	bic.w	r1, r1, #3
 80073ce:	3d03      	subs	r5, #3
 80073d0:	45a8      	cmp	r8, r5
 80073d2:	bf38      	it	cc
 80073d4:	2100      	movcc	r1, #0
 80073d6:	440b      	add	r3, r1
 80073d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073dc:	b199      	cbz	r1, 8007406 <__mdiff+0x11a>
 80073de:	6117      	str	r7, [r2, #16]
 80073e0:	e79e      	b.n	8007320 <__mdiff+0x34>
 80073e2:	46e6      	mov	lr, ip
 80073e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80073e8:	fa1f fc81 	uxth.w	ip, r1
 80073ec:	44f4      	add	ip, lr
 80073ee:	0c08      	lsrs	r0, r1, #16
 80073f0:	4471      	add	r1, lr
 80073f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80073f6:	b289      	uxth	r1, r1
 80073f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007400:	f846 1b04 	str.w	r1, [r6], #4
 8007404:	e7dc      	b.n	80073c0 <__mdiff+0xd4>
 8007406:	3f01      	subs	r7, #1
 8007408:	e7e6      	b.n	80073d8 <__mdiff+0xec>
 800740a:	bf00      	nop
 800740c:	08009661 	.word	0x08009661
 8007410:	08009672 	.word	0x08009672

08007414 <__ulp>:
 8007414:	4b0e      	ldr	r3, [pc, #56]	@ (8007450 <__ulp+0x3c>)
 8007416:	400b      	ands	r3, r1
 8007418:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800741c:	2b00      	cmp	r3, #0
 800741e:	dc08      	bgt.n	8007432 <__ulp+0x1e>
 8007420:	425b      	negs	r3, r3
 8007422:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007426:	ea4f 5223 	mov.w	r2, r3, asr #20
 800742a:	da04      	bge.n	8007436 <__ulp+0x22>
 800742c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007430:	4113      	asrs	r3, r2
 8007432:	2200      	movs	r2, #0
 8007434:	e008      	b.n	8007448 <__ulp+0x34>
 8007436:	f1a2 0314 	sub.w	r3, r2, #20
 800743a:	2b1e      	cmp	r3, #30
 800743c:	bfd6      	itet	le
 800743e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007442:	2201      	movgt	r2, #1
 8007444:	40da      	lsrle	r2, r3
 8007446:	2300      	movs	r3, #0
 8007448:	4619      	mov	r1, r3
 800744a:	4610      	mov	r0, r2
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	7ff00000 	.word	0x7ff00000

08007454 <__b2d>:
 8007454:	6902      	ldr	r2, [r0, #16]
 8007456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007458:	f100 0614 	add.w	r6, r0, #20
 800745c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8007460:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8007464:	4f1e      	ldr	r7, [pc, #120]	@ (80074e0 <__b2d+0x8c>)
 8007466:	4620      	mov	r0, r4
 8007468:	f7ff fd5a 	bl	8006f20 <__hi0bits>
 800746c:	4603      	mov	r3, r0
 800746e:	f1c0 0020 	rsb	r0, r0, #32
 8007472:	2b0a      	cmp	r3, #10
 8007474:	f1a2 0504 	sub.w	r5, r2, #4
 8007478:	6008      	str	r0, [r1, #0]
 800747a:	dc12      	bgt.n	80074a2 <__b2d+0x4e>
 800747c:	42ae      	cmp	r6, r5
 800747e:	bf2c      	ite	cs
 8007480:	2200      	movcs	r2, #0
 8007482:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8007486:	f1c3 0c0b 	rsb	ip, r3, #11
 800748a:	3315      	adds	r3, #21
 800748c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8007490:	fa04 f303 	lsl.w	r3, r4, r3
 8007494:	fa22 f20c 	lsr.w	r2, r2, ip
 8007498:	ea4e 0107 	orr.w	r1, lr, r7
 800749c:	431a      	orrs	r2, r3
 800749e:	4610      	mov	r0, r2
 80074a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a2:	42ae      	cmp	r6, r5
 80074a4:	bf36      	itet	cc
 80074a6:	f1a2 0508 	subcc.w	r5, r2, #8
 80074aa:	2200      	movcs	r2, #0
 80074ac:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80074b0:	3b0b      	subs	r3, #11
 80074b2:	d012      	beq.n	80074da <__b2d+0x86>
 80074b4:	f1c3 0720 	rsb	r7, r3, #32
 80074b8:	fa22 f107 	lsr.w	r1, r2, r7
 80074bc:	409c      	lsls	r4, r3
 80074be:	430c      	orrs	r4, r1
 80074c0:	42b5      	cmp	r5, r6
 80074c2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80074c6:	bf94      	ite	ls
 80074c8:	2400      	movls	r4, #0
 80074ca:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80074ce:	409a      	lsls	r2, r3
 80074d0:	40fc      	lsrs	r4, r7
 80074d2:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80074d6:	4322      	orrs	r2, r4
 80074d8:	e7e1      	b.n	800749e <__b2d+0x4a>
 80074da:	ea44 0107 	orr.w	r1, r4, r7
 80074de:	e7de      	b.n	800749e <__b2d+0x4a>
 80074e0:	3ff00000 	.word	0x3ff00000

080074e4 <__d2b>:
 80074e4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80074e8:	2101      	movs	r1, #1
 80074ea:	4690      	mov	r8, r2
 80074ec:	4699      	mov	r9, r3
 80074ee:	9e08      	ldr	r6, [sp, #32]
 80074f0:	f7ff fc24 	bl	8006d3c <_Balloc>
 80074f4:	4604      	mov	r4, r0
 80074f6:	b930      	cbnz	r0, 8007506 <__d2b+0x22>
 80074f8:	4602      	mov	r2, r0
 80074fa:	f240 310f 	movw	r1, #783	@ 0x30f
 80074fe:	4b23      	ldr	r3, [pc, #140]	@ (800758c <__d2b+0xa8>)
 8007500:	4823      	ldr	r0, [pc, #140]	@ (8007590 <__d2b+0xac>)
 8007502:	f001 fb8f 	bl	8008c24 <__assert_func>
 8007506:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800750a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800750e:	b10d      	cbz	r5, 8007514 <__d2b+0x30>
 8007510:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f1b8 0300 	subs.w	r3, r8, #0
 800751a:	d024      	beq.n	8007566 <__d2b+0x82>
 800751c:	4668      	mov	r0, sp
 800751e:	9300      	str	r3, [sp, #0]
 8007520:	f7ff fd1d 	bl	8006f5e <__lo0bits>
 8007524:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007528:	b1d8      	cbz	r0, 8007562 <__d2b+0x7e>
 800752a:	f1c0 0320 	rsb	r3, r0, #32
 800752e:	fa02 f303 	lsl.w	r3, r2, r3
 8007532:	430b      	orrs	r3, r1
 8007534:	40c2      	lsrs	r2, r0
 8007536:	6163      	str	r3, [r4, #20]
 8007538:	9201      	str	r2, [sp, #4]
 800753a:	9b01      	ldr	r3, [sp, #4]
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf0c      	ite	eq
 8007540:	2201      	moveq	r2, #1
 8007542:	2202      	movne	r2, #2
 8007544:	61a3      	str	r3, [r4, #24]
 8007546:	6122      	str	r2, [r4, #16]
 8007548:	b1ad      	cbz	r5, 8007576 <__d2b+0x92>
 800754a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800754e:	4405      	add	r5, r0
 8007550:	6035      	str	r5, [r6, #0]
 8007552:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007558:	6018      	str	r0, [r3, #0]
 800755a:	4620      	mov	r0, r4
 800755c:	b002      	add	sp, #8
 800755e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007562:	6161      	str	r1, [r4, #20]
 8007564:	e7e9      	b.n	800753a <__d2b+0x56>
 8007566:	a801      	add	r0, sp, #4
 8007568:	f7ff fcf9 	bl	8006f5e <__lo0bits>
 800756c:	9b01      	ldr	r3, [sp, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	6163      	str	r3, [r4, #20]
 8007572:	3020      	adds	r0, #32
 8007574:	e7e7      	b.n	8007546 <__d2b+0x62>
 8007576:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800757a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800757e:	6030      	str	r0, [r6, #0]
 8007580:	6918      	ldr	r0, [r3, #16]
 8007582:	f7ff fccd 	bl	8006f20 <__hi0bits>
 8007586:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800758a:	e7e4      	b.n	8007556 <__d2b+0x72>
 800758c:	08009661 	.word	0x08009661
 8007590:	08009672 	.word	0x08009672

08007594 <__ratio>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	b085      	sub	sp, #20
 800759a:	e9cd 1000 	strd	r1, r0, [sp]
 800759e:	a902      	add	r1, sp, #8
 80075a0:	f7ff ff58 	bl	8007454 <__b2d>
 80075a4:	468b      	mov	fp, r1
 80075a6:	4606      	mov	r6, r0
 80075a8:	460f      	mov	r7, r1
 80075aa:	9800      	ldr	r0, [sp, #0]
 80075ac:	a903      	add	r1, sp, #12
 80075ae:	f7ff ff51 	bl	8007454 <__b2d>
 80075b2:	460d      	mov	r5, r1
 80075b4:	9b01      	ldr	r3, [sp, #4]
 80075b6:	4689      	mov	r9, r1
 80075b8:	6919      	ldr	r1, [r3, #16]
 80075ba:	9b00      	ldr	r3, [sp, #0]
 80075bc:	4604      	mov	r4, r0
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	4630      	mov	r0, r6
 80075c2:	1ac9      	subs	r1, r1, r3
 80075c4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80075c8:	1a9b      	subs	r3, r3, r2
 80075ca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bfcd      	iteet	gt
 80075d2:	463a      	movgt	r2, r7
 80075d4:	462a      	movle	r2, r5
 80075d6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80075da:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80075de:	bfd8      	it	le
 80075e0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80075e4:	464b      	mov	r3, r9
 80075e6:	4622      	mov	r2, r4
 80075e8:	4659      	mov	r1, fp
 80075ea:	f7f9 f8b7 	bl	800075c <__aeabi_ddiv>
 80075ee:	b005      	add	sp, #20
 80075f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080075f4 <__copybits>:
 80075f4:	3901      	subs	r1, #1
 80075f6:	b570      	push	{r4, r5, r6, lr}
 80075f8:	1149      	asrs	r1, r1, #5
 80075fa:	6914      	ldr	r4, [r2, #16]
 80075fc:	3101      	adds	r1, #1
 80075fe:	f102 0314 	add.w	r3, r2, #20
 8007602:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007606:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800760a:	1f05      	subs	r5, r0, #4
 800760c:	42a3      	cmp	r3, r4
 800760e:	d30c      	bcc.n	800762a <__copybits+0x36>
 8007610:	1aa3      	subs	r3, r4, r2
 8007612:	3b11      	subs	r3, #17
 8007614:	f023 0303 	bic.w	r3, r3, #3
 8007618:	3211      	adds	r2, #17
 800761a:	42a2      	cmp	r2, r4
 800761c:	bf88      	it	hi
 800761e:	2300      	movhi	r3, #0
 8007620:	4418      	add	r0, r3
 8007622:	2300      	movs	r3, #0
 8007624:	4288      	cmp	r0, r1
 8007626:	d305      	bcc.n	8007634 <__copybits+0x40>
 8007628:	bd70      	pop	{r4, r5, r6, pc}
 800762a:	f853 6b04 	ldr.w	r6, [r3], #4
 800762e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007632:	e7eb      	b.n	800760c <__copybits+0x18>
 8007634:	f840 3b04 	str.w	r3, [r0], #4
 8007638:	e7f4      	b.n	8007624 <__copybits+0x30>

0800763a <__any_on>:
 800763a:	f100 0214 	add.w	r2, r0, #20
 800763e:	6900      	ldr	r0, [r0, #16]
 8007640:	114b      	asrs	r3, r1, #5
 8007642:	4298      	cmp	r0, r3
 8007644:	b510      	push	{r4, lr}
 8007646:	db11      	blt.n	800766c <__any_on+0x32>
 8007648:	dd0a      	ble.n	8007660 <__any_on+0x26>
 800764a:	f011 011f 	ands.w	r1, r1, #31
 800764e:	d007      	beq.n	8007660 <__any_on+0x26>
 8007650:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007654:	fa24 f001 	lsr.w	r0, r4, r1
 8007658:	fa00 f101 	lsl.w	r1, r0, r1
 800765c:	428c      	cmp	r4, r1
 800765e:	d10b      	bne.n	8007678 <__any_on+0x3e>
 8007660:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007664:	4293      	cmp	r3, r2
 8007666:	d803      	bhi.n	8007670 <__any_on+0x36>
 8007668:	2000      	movs	r0, #0
 800766a:	bd10      	pop	{r4, pc}
 800766c:	4603      	mov	r3, r0
 800766e:	e7f7      	b.n	8007660 <__any_on+0x26>
 8007670:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007674:	2900      	cmp	r1, #0
 8007676:	d0f5      	beq.n	8007664 <__any_on+0x2a>
 8007678:	2001      	movs	r0, #1
 800767a:	e7f6      	b.n	800766a <__any_on+0x30>

0800767c <sulp>:
 800767c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007680:	460f      	mov	r7, r1
 8007682:	4690      	mov	r8, r2
 8007684:	f7ff fec6 	bl	8007414 <__ulp>
 8007688:	4604      	mov	r4, r0
 800768a:	460d      	mov	r5, r1
 800768c:	f1b8 0f00 	cmp.w	r8, #0
 8007690:	d011      	beq.n	80076b6 <sulp+0x3a>
 8007692:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8007696:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800769a:	2b00      	cmp	r3, #0
 800769c:	dd0b      	ble.n	80076b6 <sulp+0x3a>
 800769e:	2400      	movs	r4, #0
 80076a0:	051b      	lsls	r3, r3, #20
 80076a2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80076a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80076aa:	4622      	mov	r2, r4
 80076ac:	462b      	mov	r3, r5
 80076ae:	f7f8 ff2b 	bl	8000508 <__aeabi_dmul>
 80076b2:	4604      	mov	r4, r0
 80076b4:	460d      	mov	r5, r1
 80076b6:	4620      	mov	r0, r4
 80076b8:	4629      	mov	r1, r5
 80076ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080076c0 <_strtod_l>:
 80076c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076c4:	b09f      	sub	sp, #124	@ 0x7c
 80076c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80076c8:	2200      	movs	r2, #0
 80076ca:	460c      	mov	r4, r1
 80076cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80076ce:	f04f 0a00 	mov.w	sl, #0
 80076d2:	f04f 0b00 	mov.w	fp, #0
 80076d6:	460a      	mov	r2, r1
 80076d8:	9005      	str	r0, [sp, #20]
 80076da:	9219      	str	r2, [sp, #100]	@ 0x64
 80076dc:	7811      	ldrb	r1, [r2, #0]
 80076de:	292b      	cmp	r1, #43	@ 0x2b
 80076e0:	d048      	beq.n	8007774 <_strtod_l+0xb4>
 80076e2:	d836      	bhi.n	8007752 <_strtod_l+0x92>
 80076e4:	290d      	cmp	r1, #13
 80076e6:	d830      	bhi.n	800774a <_strtod_l+0x8a>
 80076e8:	2908      	cmp	r1, #8
 80076ea:	d830      	bhi.n	800774e <_strtod_l+0x8e>
 80076ec:	2900      	cmp	r1, #0
 80076ee:	d039      	beq.n	8007764 <_strtod_l+0xa4>
 80076f0:	2200      	movs	r2, #0
 80076f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80076f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80076f6:	782a      	ldrb	r2, [r5, #0]
 80076f8:	2a30      	cmp	r2, #48	@ 0x30
 80076fa:	f040 80b0 	bne.w	800785e <_strtod_l+0x19e>
 80076fe:	786a      	ldrb	r2, [r5, #1]
 8007700:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007704:	2a58      	cmp	r2, #88	@ 0x58
 8007706:	d16c      	bne.n	80077e2 <_strtod_l+0x122>
 8007708:	9302      	str	r3, [sp, #8]
 800770a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800770c:	4a8f      	ldr	r2, [pc, #572]	@ (800794c <_strtod_l+0x28c>)
 800770e:	9301      	str	r3, [sp, #4]
 8007710:	ab1a      	add	r3, sp, #104	@ 0x68
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	9805      	ldr	r0, [sp, #20]
 8007716:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007718:	a919      	add	r1, sp, #100	@ 0x64
 800771a:	f001 fb1d 	bl	8008d58 <__gethex>
 800771e:	f010 060f 	ands.w	r6, r0, #15
 8007722:	4604      	mov	r4, r0
 8007724:	d005      	beq.n	8007732 <_strtod_l+0x72>
 8007726:	2e06      	cmp	r6, #6
 8007728:	d126      	bne.n	8007778 <_strtod_l+0xb8>
 800772a:	2300      	movs	r3, #0
 800772c:	3501      	adds	r5, #1
 800772e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007730:	930e      	str	r3, [sp, #56]	@ 0x38
 8007732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007734:	2b00      	cmp	r3, #0
 8007736:	f040 8582 	bne.w	800823e <_strtod_l+0xb7e>
 800773a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800773c:	b1bb      	cbz	r3, 800776e <_strtod_l+0xae>
 800773e:	4650      	mov	r0, sl
 8007740:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007744:	b01f      	add	sp, #124	@ 0x7c
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	2920      	cmp	r1, #32
 800774c:	d1d0      	bne.n	80076f0 <_strtod_l+0x30>
 800774e:	3201      	adds	r2, #1
 8007750:	e7c3      	b.n	80076da <_strtod_l+0x1a>
 8007752:	292d      	cmp	r1, #45	@ 0x2d
 8007754:	d1cc      	bne.n	80076f0 <_strtod_l+0x30>
 8007756:	2101      	movs	r1, #1
 8007758:	910e      	str	r1, [sp, #56]	@ 0x38
 800775a:	1c51      	adds	r1, r2, #1
 800775c:	9119      	str	r1, [sp, #100]	@ 0x64
 800775e:	7852      	ldrb	r2, [r2, #1]
 8007760:	2a00      	cmp	r2, #0
 8007762:	d1c7      	bne.n	80076f4 <_strtod_l+0x34>
 8007764:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007766:	9419      	str	r4, [sp, #100]	@ 0x64
 8007768:	2b00      	cmp	r3, #0
 800776a:	f040 8566 	bne.w	800823a <_strtod_l+0xb7a>
 800776e:	4650      	mov	r0, sl
 8007770:	4659      	mov	r1, fp
 8007772:	e7e7      	b.n	8007744 <_strtod_l+0x84>
 8007774:	2100      	movs	r1, #0
 8007776:	e7ef      	b.n	8007758 <_strtod_l+0x98>
 8007778:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800777a:	b13a      	cbz	r2, 800778c <_strtod_l+0xcc>
 800777c:	2135      	movs	r1, #53	@ 0x35
 800777e:	a81c      	add	r0, sp, #112	@ 0x70
 8007780:	f7ff ff38 	bl	80075f4 <__copybits>
 8007784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007786:	9805      	ldr	r0, [sp, #20]
 8007788:	f7ff fb18 	bl	8006dbc <_Bfree>
 800778c:	3e01      	subs	r6, #1
 800778e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007790:	2e04      	cmp	r6, #4
 8007792:	d806      	bhi.n	80077a2 <_strtod_l+0xe2>
 8007794:	e8df f006 	tbb	[pc, r6]
 8007798:	201d0314 	.word	0x201d0314
 800779c:	14          	.byte	0x14
 800779d:	00          	.byte	0x00
 800779e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80077a2:	05e1      	lsls	r1, r4, #23
 80077a4:	bf48      	it	mi
 80077a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80077aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077ae:	0d1b      	lsrs	r3, r3, #20
 80077b0:	051b      	lsls	r3, r3, #20
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1bd      	bne.n	8007732 <_strtod_l+0x72>
 80077b6:	f7fe fb25 	bl	8005e04 <__errno>
 80077ba:	2322      	movs	r3, #34	@ 0x22
 80077bc:	6003      	str	r3, [r0, #0]
 80077be:	e7b8      	b.n	8007732 <_strtod_l+0x72>
 80077c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80077c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80077c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80077cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077d0:	e7e7      	b.n	80077a2 <_strtod_l+0xe2>
 80077d2:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007950 <_strtod_l+0x290>
 80077d6:	e7e4      	b.n	80077a2 <_strtod_l+0xe2>
 80077d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80077dc:	f04f 3aff 	mov.w	sl, #4294967295
 80077e0:	e7df      	b.n	80077a2 <_strtod_l+0xe2>
 80077e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077e4:	1c5a      	adds	r2, r3, #1
 80077e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b30      	cmp	r3, #48	@ 0x30
 80077ec:	d0f9      	beq.n	80077e2 <_strtod_l+0x122>
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d09f      	beq.n	8007732 <_strtod_l+0x72>
 80077f2:	2301      	movs	r3, #1
 80077f4:	2700      	movs	r7, #0
 80077f6:	220a      	movs	r2, #10
 80077f8:	46b9      	mov	r9, r7
 80077fa:	9308      	str	r3, [sp, #32]
 80077fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077fe:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007800:	930c      	str	r3, [sp, #48]	@ 0x30
 8007802:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007804:	7805      	ldrb	r5, [r0, #0]
 8007806:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800780a:	b2d9      	uxtb	r1, r3
 800780c:	2909      	cmp	r1, #9
 800780e:	d928      	bls.n	8007862 <_strtod_l+0x1a2>
 8007810:	2201      	movs	r2, #1
 8007812:	4950      	ldr	r1, [pc, #320]	@ (8007954 <_strtod_l+0x294>)
 8007814:	f001 f9d0 	bl	8008bb8 <strncmp>
 8007818:	2800      	cmp	r0, #0
 800781a:	d032      	beq.n	8007882 <_strtod_l+0x1c2>
 800781c:	2000      	movs	r0, #0
 800781e:	462a      	mov	r2, r5
 8007820:	4603      	mov	r3, r0
 8007822:	464d      	mov	r5, r9
 8007824:	900a      	str	r0, [sp, #40]	@ 0x28
 8007826:	2a65      	cmp	r2, #101	@ 0x65
 8007828:	d001      	beq.n	800782e <_strtod_l+0x16e>
 800782a:	2a45      	cmp	r2, #69	@ 0x45
 800782c:	d114      	bne.n	8007858 <_strtod_l+0x198>
 800782e:	b91d      	cbnz	r5, 8007838 <_strtod_l+0x178>
 8007830:	9a08      	ldr	r2, [sp, #32]
 8007832:	4302      	orrs	r2, r0
 8007834:	d096      	beq.n	8007764 <_strtod_l+0xa4>
 8007836:	2500      	movs	r5, #0
 8007838:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800783a:	1c62      	adds	r2, r4, #1
 800783c:	9219      	str	r2, [sp, #100]	@ 0x64
 800783e:	7862      	ldrb	r2, [r4, #1]
 8007840:	2a2b      	cmp	r2, #43	@ 0x2b
 8007842:	d07a      	beq.n	800793a <_strtod_l+0x27a>
 8007844:	2a2d      	cmp	r2, #45	@ 0x2d
 8007846:	d07e      	beq.n	8007946 <_strtod_l+0x286>
 8007848:	f04f 0c00 	mov.w	ip, #0
 800784c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007850:	2909      	cmp	r1, #9
 8007852:	f240 8085 	bls.w	8007960 <_strtod_l+0x2a0>
 8007856:	9419      	str	r4, [sp, #100]	@ 0x64
 8007858:	f04f 0800 	mov.w	r8, #0
 800785c:	e0a5      	b.n	80079aa <_strtod_l+0x2ea>
 800785e:	2300      	movs	r3, #0
 8007860:	e7c8      	b.n	80077f4 <_strtod_l+0x134>
 8007862:	f1b9 0f08 	cmp.w	r9, #8
 8007866:	bfd8      	it	le
 8007868:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800786a:	f100 0001 	add.w	r0, r0, #1
 800786e:	bfd6      	itet	le
 8007870:	fb02 3301 	mlale	r3, r2, r1, r3
 8007874:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007878:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800787a:	f109 0901 	add.w	r9, r9, #1
 800787e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007880:	e7bf      	b.n	8007802 <_strtod_l+0x142>
 8007882:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007884:	1c5a      	adds	r2, r3, #1
 8007886:	9219      	str	r2, [sp, #100]	@ 0x64
 8007888:	785a      	ldrb	r2, [r3, #1]
 800788a:	f1b9 0f00 	cmp.w	r9, #0
 800788e:	d03b      	beq.n	8007908 <_strtod_l+0x248>
 8007890:	464d      	mov	r5, r9
 8007892:	900a      	str	r0, [sp, #40]	@ 0x28
 8007894:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007898:	2b09      	cmp	r3, #9
 800789a:	d912      	bls.n	80078c2 <_strtod_l+0x202>
 800789c:	2301      	movs	r3, #1
 800789e:	e7c2      	b.n	8007826 <_strtod_l+0x166>
 80078a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078a2:	3001      	adds	r0, #1
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80078a8:	785a      	ldrb	r2, [r3, #1]
 80078aa:	2a30      	cmp	r2, #48	@ 0x30
 80078ac:	d0f8      	beq.n	80078a0 <_strtod_l+0x1e0>
 80078ae:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80078b2:	2b08      	cmp	r3, #8
 80078b4:	f200 84c8 	bhi.w	8008248 <_strtod_l+0xb88>
 80078b8:	900a      	str	r0, [sp, #40]	@ 0x28
 80078ba:	2000      	movs	r0, #0
 80078bc:	4605      	mov	r5, r0
 80078be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80078c2:	3a30      	subs	r2, #48	@ 0x30
 80078c4:	f100 0301 	add.w	r3, r0, #1
 80078c8:	d018      	beq.n	80078fc <_strtod_l+0x23c>
 80078ca:	462e      	mov	r6, r5
 80078cc:	f04f 0e0a 	mov.w	lr, #10
 80078d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078d2:	4419      	add	r1, r3
 80078d4:	910a      	str	r1, [sp, #40]	@ 0x28
 80078d6:	1c71      	adds	r1, r6, #1
 80078d8:	eba1 0c05 	sub.w	ip, r1, r5
 80078dc:	4563      	cmp	r3, ip
 80078de:	dc15      	bgt.n	800790c <_strtod_l+0x24c>
 80078e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80078e4:	182b      	adds	r3, r5, r0
 80078e6:	2b08      	cmp	r3, #8
 80078e8:	f105 0501 	add.w	r5, r5, #1
 80078ec:	4405      	add	r5, r0
 80078ee:	dc1a      	bgt.n	8007926 <_strtod_l+0x266>
 80078f0:	230a      	movs	r3, #10
 80078f2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078f4:	fb03 2301 	mla	r3, r3, r1, r2
 80078f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078fa:	2300      	movs	r3, #0
 80078fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078fe:	4618      	mov	r0, r3
 8007900:	1c51      	adds	r1, r2, #1
 8007902:	9119      	str	r1, [sp, #100]	@ 0x64
 8007904:	7852      	ldrb	r2, [r2, #1]
 8007906:	e7c5      	b.n	8007894 <_strtod_l+0x1d4>
 8007908:	4648      	mov	r0, r9
 800790a:	e7ce      	b.n	80078aa <_strtod_l+0x1ea>
 800790c:	2e08      	cmp	r6, #8
 800790e:	dc05      	bgt.n	800791c <_strtod_l+0x25c>
 8007910:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007912:	fb0e f606 	mul.w	r6, lr, r6
 8007916:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007918:	460e      	mov	r6, r1
 800791a:	e7dc      	b.n	80078d6 <_strtod_l+0x216>
 800791c:	2910      	cmp	r1, #16
 800791e:	bfd8      	it	le
 8007920:	fb0e f707 	mulle.w	r7, lr, r7
 8007924:	e7f8      	b.n	8007918 <_strtod_l+0x258>
 8007926:	2b0f      	cmp	r3, #15
 8007928:	bfdc      	itt	le
 800792a:	230a      	movle	r3, #10
 800792c:	fb03 2707 	mlale	r7, r3, r7, r2
 8007930:	e7e3      	b.n	80078fa <_strtod_l+0x23a>
 8007932:	2300      	movs	r3, #0
 8007934:	930a      	str	r3, [sp, #40]	@ 0x28
 8007936:	2301      	movs	r3, #1
 8007938:	e77a      	b.n	8007830 <_strtod_l+0x170>
 800793a:	f04f 0c00 	mov.w	ip, #0
 800793e:	1ca2      	adds	r2, r4, #2
 8007940:	9219      	str	r2, [sp, #100]	@ 0x64
 8007942:	78a2      	ldrb	r2, [r4, #2]
 8007944:	e782      	b.n	800784c <_strtod_l+0x18c>
 8007946:	f04f 0c01 	mov.w	ip, #1
 800794a:	e7f8      	b.n	800793e <_strtod_l+0x27e>
 800794c:	08009894 	.word	0x08009894
 8007950:	7ff00000 	.word	0x7ff00000
 8007954:	080096cb 	.word	0x080096cb
 8007958:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800795a:	1c51      	adds	r1, r2, #1
 800795c:	9119      	str	r1, [sp, #100]	@ 0x64
 800795e:	7852      	ldrb	r2, [r2, #1]
 8007960:	2a30      	cmp	r2, #48	@ 0x30
 8007962:	d0f9      	beq.n	8007958 <_strtod_l+0x298>
 8007964:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007968:	2908      	cmp	r1, #8
 800796a:	f63f af75 	bhi.w	8007858 <_strtod_l+0x198>
 800796e:	f04f 080a 	mov.w	r8, #10
 8007972:	3a30      	subs	r2, #48	@ 0x30
 8007974:	9209      	str	r2, [sp, #36]	@ 0x24
 8007976:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007978:	920f      	str	r2, [sp, #60]	@ 0x3c
 800797a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800797c:	1c56      	adds	r6, r2, #1
 800797e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007980:	7852      	ldrb	r2, [r2, #1]
 8007982:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007986:	f1be 0f09 	cmp.w	lr, #9
 800798a:	d939      	bls.n	8007a00 <_strtod_l+0x340>
 800798c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800798e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007992:	1a76      	subs	r6, r6, r1
 8007994:	2e08      	cmp	r6, #8
 8007996:	dc03      	bgt.n	80079a0 <_strtod_l+0x2e0>
 8007998:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800799a:	4588      	cmp	r8, r1
 800799c:	bfa8      	it	ge
 800799e:	4688      	movge	r8, r1
 80079a0:	f1bc 0f00 	cmp.w	ip, #0
 80079a4:	d001      	beq.n	80079aa <_strtod_l+0x2ea>
 80079a6:	f1c8 0800 	rsb	r8, r8, #0
 80079aa:	2d00      	cmp	r5, #0
 80079ac:	d14e      	bne.n	8007a4c <_strtod_l+0x38c>
 80079ae:	9908      	ldr	r1, [sp, #32]
 80079b0:	4308      	orrs	r0, r1
 80079b2:	f47f aebe 	bne.w	8007732 <_strtod_l+0x72>
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	f47f aed4 	bne.w	8007764 <_strtod_l+0xa4>
 80079bc:	2a69      	cmp	r2, #105	@ 0x69
 80079be:	d028      	beq.n	8007a12 <_strtod_l+0x352>
 80079c0:	dc25      	bgt.n	8007a0e <_strtod_l+0x34e>
 80079c2:	2a49      	cmp	r2, #73	@ 0x49
 80079c4:	d025      	beq.n	8007a12 <_strtod_l+0x352>
 80079c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80079c8:	f47f aecc 	bne.w	8007764 <_strtod_l+0xa4>
 80079cc:	4999      	ldr	r1, [pc, #612]	@ (8007c34 <_strtod_l+0x574>)
 80079ce:	a819      	add	r0, sp, #100	@ 0x64
 80079d0:	f001 fbe4 	bl	800919c <__match>
 80079d4:	2800      	cmp	r0, #0
 80079d6:	f43f aec5 	beq.w	8007764 <_strtod_l+0xa4>
 80079da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	2b28      	cmp	r3, #40	@ 0x28
 80079e0:	d12e      	bne.n	8007a40 <_strtod_l+0x380>
 80079e2:	4995      	ldr	r1, [pc, #596]	@ (8007c38 <_strtod_l+0x578>)
 80079e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80079e6:	a819      	add	r0, sp, #100	@ 0x64
 80079e8:	f001 fbec 	bl	80091c4 <__hexnan>
 80079ec:	2805      	cmp	r0, #5
 80079ee:	d127      	bne.n	8007a40 <_strtod_l+0x380>
 80079f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80079f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80079f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80079fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80079fe:	e698      	b.n	8007732 <_strtod_l+0x72>
 8007a00:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a02:	fb08 2101 	mla	r1, r8, r1, r2
 8007a06:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a0c:	e7b5      	b.n	800797a <_strtod_l+0x2ba>
 8007a0e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007a10:	e7da      	b.n	80079c8 <_strtod_l+0x308>
 8007a12:	498a      	ldr	r1, [pc, #552]	@ (8007c3c <_strtod_l+0x57c>)
 8007a14:	a819      	add	r0, sp, #100	@ 0x64
 8007a16:	f001 fbc1 	bl	800919c <__match>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	f43f aea2 	beq.w	8007764 <_strtod_l+0xa4>
 8007a20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a22:	4987      	ldr	r1, [pc, #540]	@ (8007c40 <_strtod_l+0x580>)
 8007a24:	3b01      	subs	r3, #1
 8007a26:	a819      	add	r0, sp, #100	@ 0x64
 8007a28:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a2a:	f001 fbb7 	bl	800919c <__match>
 8007a2e:	b910      	cbnz	r0, 8007a36 <_strtod_l+0x376>
 8007a30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a32:	3301      	adds	r3, #1
 8007a34:	9319      	str	r3, [sp, #100]	@ 0x64
 8007a36:	f04f 0a00 	mov.w	sl, #0
 8007a3a:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007c44 <_strtod_l+0x584>
 8007a3e:	e678      	b.n	8007732 <_strtod_l+0x72>
 8007a40:	4881      	ldr	r0, [pc, #516]	@ (8007c48 <_strtod_l+0x588>)
 8007a42:	f001 f8e9 	bl	8008c18 <nan>
 8007a46:	4682      	mov	sl, r0
 8007a48:	468b      	mov	fp, r1
 8007a4a:	e672      	b.n	8007732 <_strtod_l+0x72>
 8007a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a4e:	f1b9 0f00 	cmp.w	r9, #0
 8007a52:	bf08      	it	eq
 8007a54:	46a9      	moveq	r9, r5
 8007a56:	eba8 0303 	sub.w	r3, r8, r3
 8007a5a:	2d10      	cmp	r5, #16
 8007a5c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007a5e:	462c      	mov	r4, r5
 8007a60:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a62:	bfa8      	it	ge
 8007a64:	2410      	movge	r4, #16
 8007a66:	f7f8 fcd5 	bl	8000414 <__aeabi_ui2d>
 8007a6a:	2d09      	cmp	r5, #9
 8007a6c:	4682      	mov	sl, r0
 8007a6e:	468b      	mov	fp, r1
 8007a70:	dc11      	bgt.n	8007a96 <_strtod_l+0x3d6>
 8007a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f43f ae5c 	beq.w	8007732 <_strtod_l+0x72>
 8007a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a7c:	dd76      	ble.n	8007b6c <_strtod_l+0x4ac>
 8007a7e:	2b16      	cmp	r3, #22
 8007a80:	dc5d      	bgt.n	8007b3e <_strtod_l+0x47e>
 8007a82:	4972      	ldr	r1, [pc, #456]	@ (8007c4c <_strtod_l+0x58c>)
 8007a84:	4652      	mov	r2, sl
 8007a86:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a8a:	465b      	mov	r3, fp
 8007a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a90:	f7f8 fd3a 	bl	8000508 <__aeabi_dmul>
 8007a94:	e7d7      	b.n	8007a46 <_strtod_l+0x386>
 8007a96:	4b6d      	ldr	r3, [pc, #436]	@ (8007c4c <_strtod_l+0x58c>)
 8007a98:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a9c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007aa0:	f7f8 fd32 	bl	8000508 <__aeabi_dmul>
 8007aa4:	4682      	mov	sl, r0
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	468b      	mov	fp, r1
 8007aaa:	f7f8 fcb3 	bl	8000414 <__aeabi_ui2d>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4650      	mov	r0, sl
 8007ab4:	4659      	mov	r1, fp
 8007ab6:	f7f8 fb71 	bl	800019c <__adddf3>
 8007aba:	2d0f      	cmp	r5, #15
 8007abc:	4682      	mov	sl, r0
 8007abe:	468b      	mov	fp, r1
 8007ac0:	ddd7      	ble.n	8007a72 <_strtod_l+0x3b2>
 8007ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac4:	1b2c      	subs	r4, r5, r4
 8007ac6:	441c      	add	r4, r3
 8007ac8:	2c00      	cmp	r4, #0
 8007aca:	f340 8093 	ble.w	8007bf4 <_strtod_l+0x534>
 8007ace:	f014 030f 	ands.w	r3, r4, #15
 8007ad2:	d00a      	beq.n	8007aea <_strtod_l+0x42a>
 8007ad4:	495d      	ldr	r1, [pc, #372]	@ (8007c4c <_strtod_l+0x58c>)
 8007ad6:	4652      	mov	r2, sl
 8007ad8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ae0:	465b      	mov	r3, fp
 8007ae2:	f7f8 fd11 	bl	8000508 <__aeabi_dmul>
 8007ae6:	4682      	mov	sl, r0
 8007ae8:	468b      	mov	fp, r1
 8007aea:	f034 040f 	bics.w	r4, r4, #15
 8007aee:	d073      	beq.n	8007bd8 <_strtod_l+0x518>
 8007af0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007af4:	dd49      	ble.n	8007b8a <_strtod_l+0x4ca>
 8007af6:	2400      	movs	r4, #0
 8007af8:	46a0      	mov	r8, r4
 8007afa:	46a1      	mov	r9, r4
 8007afc:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007afe:	2322      	movs	r3, #34	@ 0x22
 8007b00:	f04f 0a00 	mov.w	sl, #0
 8007b04:	9a05      	ldr	r2, [sp, #20]
 8007b06:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007c44 <_strtod_l+0x584>
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f43f ae0f 	beq.w	8007732 <_strtod_l+0x72>
 8007b14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b16:	9805      	ldr	r0, [sp, #20]
 8007b18:	f7ff f950 	bl	8006dbc <_Bfree>
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	9805      	ldr	r0, [sp, #20]
 8007b20:	f7ff f94c 	bl	8006dbc <_Bfree>
 8007b24:	4641      	mov	r1, r8
 8007b26:	9805      	ldr	r0, [sp, #20]
 8007b28:	f7ff f948 	bl	8006dbc <_Bfree>
 8007b2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b2e:	9805      	ldr	r0, [sp, #20]
 8007b30:	f7ff f944 	bl	8006dbc <_Bfree>
 8007b34:	4621      	mov	r1, r4
 8007b36:	9805      	ldr	r0, [sp, #20]
 8007b38:	f7ff f940 	bl	8006dbc <_Bfree>
 8007b3c:	e5f9      	b.n	8007732 <_strtod_l+0x72>
 8007b3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b40:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007b44:	4293      	cmp	r3, r2
 8007b46:	dbbc      	blt.n	8007ac2 <_strtod_l+0x402>
 8007b48:	4c40      	ldr	r4, [pc, #256]	@ (8007c4c <_strtod_l+0x58c>)
 8007b4a:	f1c5 050f 	rsb	r5, r5, #15
 8007b4e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007b52:	4652      	mov	r2, sl
 8007b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b58:	465b      	mov	r3, fp
 8007b5a:	f7f8 fcd5 	bl	8000508 <__aeabi_dmul>
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	1b5d      	subs	r5, r3, r5
 8007b62:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b66:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b6a:	e791      	b.n	8007a90 <_strtod_l+0x3d0>
 8007b6c:	3316      	adds	r3, #22
 8007b6e:	dba8      	blt.n	8007ac2 <_strtod_l+0x402>
 8007b70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b72:	4650      	mov	r0, sl
 8007b74:	eba3 0808 	sub.w	r8, r3, r8
 8007b78:	4b34      	ldr	r3, [pc, #208]	@ (8007c4c <_strtod_l+0x58c>)
 8007b7a:	4659      	mov	r1, fp
 8007b7c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b80:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b84:	f7f8 fdea 	bl	800075c <__aeabi_ddiv>
 8007b88:	e75d      	b.n	8007a46 <_strtod_l+0x386>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	4650      	mov	r0, sl
 8007b8e:	4659      	mov	r1, fp
 8007b90:	461e      	mov	r6, r3
 8007b92:	4f2f      	ldr	r7, [pc, #188]	@ (8007c50 <_strtod_l+0x590>)
 8007b94:	1124      	asrs	r4, r4, #4
 8007b96:	2c01      	cmp	r4, #1
 8007b98:	dc21      	bgt.n	8007bde <_strtod_l+0x51e>
 8007b9a:	b10b      	cbz	r3, 8007ba0 <_strtod_l+0x4e0>
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	468b      	mov	fp, r1
 8007ba0:	492b      	ldr	r1, [pc, #172]	@ (8007c50 <_strtod_l+0x590>)
 8007ba2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007ba6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007baa:	4652      	mov	r2, sl
 8007bac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007bb0:	465b      	mov	r3, fp
 8007bb2:	f7f8 fca9 	bl	8000508 <__aeabi_dmul>
 8007bb6:	4b23      	ldr	r3, [pc, #140]	@ (8007c44 <_strtod_l+0x584>)
 8007bb8:	460a      	mov	r2, r1
 8007bba:	400b      	ands	r3, r1
 8007bbc:	4925      	ldr	r1, [pc, #148]	@ (8007c54 <_strtod_l+0x594>)
 8007bbe:	4682      	mov	sl, r0
 8007bc0:	428b      	cmp	r3, r1
 8007bc2:	d898      	bhi.n	8007af6 <_strtod_l+0x436>
 8007bc4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007bc8:	428b      	cmp	r3, r1
 8007bca:	bf86      	itte	hi
 8007bcc:	f04f 3aff 	movhi.w	sl, #4294967295
 8007bd0:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007c58 <_strtod_l+0x598>
 8007bd4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9308      	str	r3, [sp, #32]
 8007bdc:	e076      	b.n	8007ccc <_strtod_l+0x60c>
 8007bde:	07e2      	lsls	r2, r4, #31
 8007be0:	d504      	bpl.n	8007bec <_strtod_l+0x52c>
 8007be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be6:	f7f8 fc8f 	bl	8000508 <__aeabi_dmul>
 8007bea:	2301      	movs	r3, #1
 8007bec:	3601      	adds	r6, #1
 8007bee:	1064      	asrs	r4, r4, #1
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	e7d0      	b.n	8007b96 <_strtod_l+0x4d6>
 8007bf4:	d0f0      	beq.n	8007bd8 <_strtod_l+0x518>
 8007bf6:	4264      	negs	r4, r4
 8007bf8:	f014 020f 	ands.w	r2, r4, #15
 8007bfc:	d00a      	beq.n	8007c14 <_strtod_l+0x554>
 8007bfe:	4b13      	ldr	r3, [pc, #76]	@ (8007c4c <_strtod_l+0x58c>)
 8007c00:	4650      	mov	r0, sl
 8007c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c06:	4659      	mov	r1, fp
 8007c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0c:	f7f8 fda6 	bl	800075c <__aeabi_ddiv>
 8007c10:	4682      	mov	sl, r0
 8007c12:	468b      	mov	fp, r1
 8007c14:	1124      	asrs	r4, r4, #4
 8007c16:	d0df      	beq.n	8007bd8 <_strtod_l+0x518>
 8007c18:	2c1f      	cmp	r4, #31
 8007c1a:	dd1f      	ble.n	8007c5c <_strtod_l+0x59c>
 8007c1c:	2400      	movs	r4, #0
 8007c1e:	46a0      	mov	r8, r4
 8007c20:	46a1      	mov	r9, r4
 8007c22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c24:	2322      	movs	r3, #34	@ 0x22
 8007c26:	9a05      	ldr	r2, [sp, #20]
 8007c28:	f04f 0a00 	mov.w	sl, #0
 8007c2c:	f04f 0b00 	mov.w	fp, #0
 8007c30:	6013      	str	r3, [r2, #0]
 8007c32:	e76b      	b.n	8007b0c <_strtod_l+0x44c>
 8007c34:	080095b9 	.word	0x080095b9
 8007c38:	08009880 	.word	0x08009880
 8007c3c:	080095b1 	.word	0x080095b1
 8007c40:	080095e8 	.word	0x080095e8
 8007c44:	7ff00000 	.word	0x7ff00000
 8007c48:	08009721 	.word	0x08009721
 8007c4c:	080097b8 	.word	0x080097b8
 8007c50:	08009790 	.word	0x08009790
 8007c54:	7ca00000 	.word	0x7ca00000
 8007c58:	7fefffff 	.word	0x7fefffff
 8007c5c:	f014 0310 	ands.w	r3, r4, #16
 8007c60:	bf18      	it	ne
 8007c62:	236a      	movne	r3, #106	@ 0x6a
 8007c64:	4650      	mov	r0, sl
 8007c66:	9308      	str	r3, [sp, #32]
 8007c68:	4659      	mov	r1, fp
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	4e77      	ldr	r6, [pc, #476]	@ (8007e4c <_strtod_l+0x78c>)
 8007c6e:	07e7      	lsls	r7, r4, #31
 8007c70:	d504      	bpl.n	8007c7c <_strtod_l+0x5bc>
 8007c72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c76:	f7f8 fc47 	bl	8000508 <__aeabi_dmul>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	1064      	asrs	r4, r4, #1
 8007c7e:	f106 0608 	add.w	r6, r6, #8
 8007c82:	d1f4      	bne.n	8007c6e <_strtod_l+0x5ae>
 8007c84:	b10b      	cbz	r3, 8007c8a <_strtod_l+0x5ca>
 8007c86:	4682      	mov	sl, r0
 8007c88:	468b      	mov	fp, r1
 8007c8a:	9b08      	ldr	r3, [sp, #32]
 8007c8c:	b1b3      	cbz	r3, 8007cbc <_strtod_l+0x5fc>
 8007c8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	4659      	mov	r1, fp
 8007c9a:	dd0f      	ble.n	8007cbc <_strtod_l+0x5fc>
 8007c9c:	2b1f      	cmp	r3, #31
 8007c9e:	dd58      	ble.n	8007d52 <_strtod_l+0x692>
 8007ca0:	2b34      	cmp	r3, #52	@ 0x34
 8007ca2:	bfd8      	it	le
 8007ca4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ca8:	f04f 0a00 	mov.w	sl, #0
 8007cac:	bfcf      	iteee	gt
 8007cae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007cb2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007cb6:	4093      	lslle	r3, r2
 8007cb8:	ea03 0b01 	andle.w	fp, r3, r1
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4650      	mov	r0, sl
 8007cc2:	4659      	mov	r1, fp
 8007cc4:	f7f8 fe88 	bl	80009d8 <__aeabi_dcmpeq>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d1a7      	bne.n	8007c1c <_strtod_l+0x55c>
 8007ccc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cce:	464a      	mov	r2, r9
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007cd4:	462b      	mov	r3, r5
 8007cd6:	9805      	ldr	r0, [sp, #20]
 8007cd8:	f7ff f8d8 	bl	8006e8c <__s2b>
 8007cdc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	f43f af09 	beq.w	8007af6 <_strtod_l+0x436>
 8007ce4:	2400      	movs	r4, #0
 8007ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cea:	2a00      	cmp	r2, #0
 8007cec:	eba3 0308 	sub.w	r3, r3, r8
 8007cf0:	bfa8      	it	ge
 8007cf2:	2300      	movge	r3, #0
 8007cf4:	46a0      	mov	r8, r4
 8007cf6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007cf8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007cfc:	9316      	str	r3, [sp, #88]	@ 0x58
 8007cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d00:	9805      	ldr	r0, [sp, #20]
 8007d02:	6859      	ldr	r1, [r3, #4]
 8007d04:	f7ff f81a 	bl	8006d3c <_Balloc>
 8007d08:	4681      	mov	r9, r0
 8007d0a:	2800      	cmp	r0, #0
 8007d0c:	f43f aef7 	beq.w	8007afe <_strtod_l+0x43e>
 8007d10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d12:	300c      	adds	r0, #12
 8007d14:	691a      	ldr	r2, [r3, #16]
 8007d16:	f103 010c 	add.w	r1, r3, #12
 8007d1a:	3202      	adds	r2, #2
 8007d1c:	0092      	lsls	r2, r2, #2
 8007d1e:	f000 ff6d 	bl	8008bfc <memcpy>
 8007d22:	ab1c      	add	r3, sp, #112	@ 0x70
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	9805      	ldr	r0, [sp, #20]
 8007d30:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007d34:	f7ff fbd6 	bl	80074e4 <__d2b>
 8007d38:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	f43f aedf 	beq.w	8007afe <_strtod_l+0x43e>
 8007d40:	2101      	movs	r1, #1
 8007d42:	9805      	ldr	r0, [sp, #20]
 8007d44:	f7ff f938 	bl	8006fb8 <__i2b>
 8007d48:	4680      	mov	r8, r0
 8007d4a:	b948      	cbnz	r0, 8007d60 <_strtod_l+0x6a0>
 8007d4c:	f04f 0800 	mov.w	r8, #0
 8007d50:	e6d5      	b.n	8007afe <_strtod_l+0x43e>
 8007d52:	f04f 32ff 	mov.w	r2, #4294967295
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	ea03 0a0a 	and.w	sl, r3, sl
 8007d5e:	e7ad      	b.n	8007cbc <_strtod_l+0x5fc>
 8007d60:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007d62:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007d64:	2d00      	cmp	r5, #0
 8007d66:	bfab      	itete	ge
 8007d68:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d6a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d6c:	18ef      	addge	r7, r5, r3
 8007d6e:	1b5e      	sublt	r6, r3, r5
 8007d70:	9b08      	ldr	r3, [sp, #32]
 8007d72:	bfa8      	it	ge
 8007d74:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d76:	eba5 0503 	sub.w	r5, r5, r3
 8007d7a:	4415      	add	r5, r2
 8007d7c:	4b34      	ldr	r3, [pc, #208]	@ (8007e50 <_strtod_l+0x790>)
 8007d7e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007d82:	bfb8      	it	lt
 8007d84:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d86:	429d      	cmp	r5, r3
 8007d88:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d8c:	da50      	bge.n	8007e30 <_strtod_l+0x770>
 8007d8e:	1b5b      	subs	r3, r3, r5
 8007d90:	2b1f      	cmp	r3, #31
 8007d92:	f04f 0101 	mov.w	r1, #1
 8007d96:	eba2 0203 	sub.w	r2, r2, r3
 8007d9a:	dc3d      	bgt.n	8007e18 <_strtod_l+0x758>
 8007d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007da0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007da2:	2300      	movs	r3, #0
 8007da4:	9310      	str	r3, [sp, #64]	@ 0x40
 8007da6:	18bd      	adds	r5, r7, r2
 8007da8:	9b08      	ldr	r3, [sp, #32]
 8007daa:	42af      	cmp	r7, r5
 8007dac:	4416      	add	r6, r2
 8007dae:	441e      	add	r6, r3
 8007db0:	463b      	mov	r3, r7
 8007db2:	bfa8      	it	ge
 8007db4:	462b      	movge	r3, r5
 8007db6:	42b3      	cmp	r3, r6
 8007db8:	bfa8      	it	ge
 8007dba:	4633      	movge	r3, r6
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	bfc2      	ittt	gt
 8007dc0:	1aed      	subgt	r5, r5, r3
 8007dc2:	1af6      	subgt	r6, r6, r3
 8007dc4:	1aff      	subgt	r7, r7, r3
 8007dc6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	dd16      	ble.n	8007dfa <_strtod_l+0x73a>
 8007dcc:	4641      	mov	r1, r8
 8007dce:	461a      	mov	r2, r3
 8007dd0:	9805      	ldr	r0, [sp, #20]
 8007dd2:	f7ff f9a9 	bl	8007128 <__pow5mult>
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d0b7      	beq.n	8007d4c <_strtod_l+0x68c>
 8007ddc:	4601      	mov	r1, r0
 8007dde:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007de0:	9805      	ldr	r0, [sp, #20]
 8007de2:	f7ff f8ff 	bl	8006fe4 <__multiply>
 8007de6:	900a      	str	r0, [sp, #40]	@ 0x28
 8007de8:	2800      	cmp	r0, #0
 8007dea:	f43f ae88 	beq.w	8007afe <_strtod_l+0x43e>
 8007dee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007df0:	9805      	ldr	r0, [sp, #20]
 8007df2:	f7fe ffe3 	bl	8006dbc <_Bfree>
 8007df6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007df8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007dfa:	2d00      	cmp	r5, #0
 8007dfc:	dc1d      	bgt.n	8007e3a <_strtod_l+0x77a>
 8007dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	dd27      	ble.n	8007e54 <_strtod_l+0x794>
 8007e04:	4649      	mov	r1, r9
 8007e06:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007e08:	9805      	ldr	r0, [sp, #20]
 8007e0a:	f7ff f98d 	bl	8007128 <__pow5mult>
 8007e0e:	4681      	mov	r9, r0
 8007e10:	bb00      	cbnz	r0, 8007e54 <_strtod_l+0x794>
 8007e12:	f04f 0900 	mov.w	r9, #0
 8007e16:	e672      	b.n	8007afe <_strtod_l+0x43e>
 8007e18:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007e1c:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007e20:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007e24:	35e2      	adds	r5, #226	@ 0xe2
 8007e26:	fa01 f305 	lsl.w	r3, r1, r5
 8007e2a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e2c:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007e2e:	e7ba      	b.n	8007da6 <_strtod_l+0x6e6>
 8007e30:	2300      	movs	r3, #0
 8007e32:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e34:	2301      	movs	r3, #1
 8007e36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e38:	e7b5      	b.n	8007da6 <_strtod_l+0x6e6>
 8007e3a:	462a      	mov	r2, r5
 8007e3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e3e:	9805      	ldr	r0, [sp, #20]
 8007e40:	f7ff f9cc 	bl	80071dc <__lshift>
 8007e44:	901a      	str	r0, [sp, #104]	@ 0x68
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d1d9      	bne.n	8007dfe <_strtod_l+0x73e>
 8007e4a:	e658      	b.n	8007afe <_strtod_l+0x43e>
 8007e4c:	080098a8 	.word	0x080098a8
 8007e50:	fffffc02 	.word	0xfffffc02
 8007e54:	2e00      	cmp	r6, #0
 8007e56:	dd07      	ble.n	8007e68 <_strtod_l+0x7a8>
 8007e58:	4649      	mov	r1, r9
 8007e5a:	4632      	mov	r2, r6
 8007e5c:	9805      	ldr	r0, [sp, #20]
 8007e5e:	f7ff f9bd 	bl	80071dc <__lshift>
 8007e62:	4681      	mov	r9, r0
 8007e64:	2800      	cmp	r0, #0
 8007e66:	d0d4      	beq.n	8007e12 <_strtod_l+0x752>
 8007e68:	2f00      	cmp	r7, #0
 8007e6a:	dd08      	ble.n	8007e7e <_strtod_l+0x7be>
 8007e6c:	4641      	mov	r1, r8
 8007e6e:	463a      	mov	r2, r7
 8007e70:	9805      	ldr	r0, [sp, #20]
 8007e72:	f7ff f9b3 	bl	80071dc <__lshift>
 8007e76:	4680      	mov	r8, r0
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f43f ae40 	beq.w	8007afe <_strtod_l+0x43e>
 8007e7e:	464a      	mov	r2, r9
 8007e80:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e82:	9805      	ldr	r0, [sp, #20]
 8007e84:	f7ff fa32 	bl	80072ec <__mdiff>
 8007e88:	4604      	mov	r4, r0
 8007e8a:	2800      	cmp	r0, #0
 8007e8c:	f43f ae37 	beq.w	8007afe <_strtod_l+0x43e>
 8007e90:	68c3      	ldr	r3, [r0, #12]
 8007e92:	4641      	mov	r1, r8
 8007e94:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e96:	2300      	movs	r3, #0
 8007e98:	60c3      	str	r3, [r0, #12]
 8007e9a:	f7ff fa0b 	bl	80072b4 <__mcmp>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	da3d      	bge.n	8007f1e <_strtod_l+0x85e>
 8007ea2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ea4:	ea53 030a 	orrs.w	r3, r3, sl
 8007ea8:	d163      	bne.n	8007f72 <_strtod_l+0x8b2>
 8007eaa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d15f      	bne.n	8007f72 <_strtod_l+0x8b2>
 8007eb2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007eb6:	0d1b      	lsrs	r3, r3, #20
 8007eb8:	051b      	lsls	r3, r3, #20
 8007eba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ebe:	d958      	bls.n	8007f72 <_strtod_l+0x8b2>
 8007ec0:	6963      	ldr	r3, [r4, #20]
 8007ec2:	b913      	cbnz	r3, 8007eca <_strtod_l+0x80a>
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	dd53      	ble.n	8007f72 <_strtod_l+0x8b2>
 8007eca:	4621      	mov	r1, r4
 8007ecc:	2201      	movs	r2, #1
 8007ece:	9805      	ldr	r0, [sp, #20]
 8007ed0:	f7ff f984 	bl	80071dc <__lshift>
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	f7ff f9ec 	bl	80072b4 <__mcmp>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	dd48      	ble.n	8007f72 <_strtod_l+0x8b2>
 8007ee0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ee4:	9a08      	ldr	r2, [sp, #32]
 8007ee6:	0d1b      	lsrs	r3, r3, #20
 8007ee8:	051b      	lsls	r3, r3, #20
 8007eea:	2a00      	cmp	r2, #0
 8007eec:	d062      	beq.n	8007fb4 <_strtod_l+0x8f4>
 8007eee:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007ef2:	d85f      	bhi.n	8007fb4 <_strtod_l+0x8f4>
 8007ef4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007ef8:	f67f ae94 	bls.w	8007c24 <_strtod_l+0x564>
 8007efc:	4650      	mov	r0, sl
 8007efe:	4659      	mov	r1, fp
 8007f00:	4ba3      	ldr	r3, [pc, #652]	@ (8008190 <_strtod_l+0xad0>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	f7f8 fb00 	bl	8000508 <__aeabi_dmul>
 8007f08:	4ba2      	ldr	r3, [pc, #648]	@ (8008194 <_strtod_l+0xad4>)
 8007f0a:	4682      	mov	sl, r0
 8007f0c:	400b      	ands	r3, r1
 8007f0e:	468b      	mov	fp, r1
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f47f adff 	bne.w	8007b14 <_strtod_l+0x454>
 8007f16:	2322      	movs	r3, #34	@ 0x22
 8007f18:	9a05      	ldr	r2, [sp, #20]
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	e5fa      	b.n	8007b14 <_strtod_l+0x454>
 8007f1e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007f22:	d165      	bne.n	8007ff0 <_strtod_l+0x930>
 8007f24:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007f26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f2a:	b35a      	cbz	r2, 8007f84 <_strtod_l+0x8c4>
 8007f2c:	4a9a      	ldr	r2, [pc, #616]	@ (8008198 <_strtod_l+0xad8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d12b      	bne.n	8007f8a <_strtod_l+0x8ca>
 8007f32:	9b08      	ldr	r3, [sp, #32]
 8007f34:	4651      	mov	r1, sl
 8007f36:	b303      	cbz	r3, 8007f7a <_strtod_l+0x8ba>
 8007f38:	465a      	mov	r2, fp
 8007f3a:	4b96      	ldr	r3, [pc, #600]	@ (8008194 <_strtod_l+0xad4>)
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007f42:	f04f 32ff 	mov.w	r2, #4294967295
 8007f46:	d81b      	bhi.n	8007f80 <_strtod_l+0x8c0>
 8007f48:	0d1b      	lsrs	r3, r3, #20
 8007f4a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	4299      	cmp	r1, r3
 8007f54:	d119      	bne.n	8007f8a <_strtod_l+0x8ca>
 8007f56:	4b91      	ldr	r3, [pc, #580]	@ (800819c <_strtod_l+0xadc>)
 8007f58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d102      	bne.n	8007f64 <_strtod_l+0x8a4>
 8007f5e:	3101      	adds	r1, #1
 8007f60:	f43f adcd 	beq.w	8007afe <_strtod_l+0x43e>
 8007f64:	f04f 0a00 	mov.w	sl, #0
 8007f68:	4b8a      	ldr	r3, [pc, #552]	@ (8008194 <_strtod_l+0xad4>)
 8007f6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f6c:	401a      	ands	r2, r3
 8007f6e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1c1      	bne.n	8007efc <_strtod_l+0x83c>
 8007f78:	e5cc      	b.n	8007b14 <_strtod_l+0x454>
 8007f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f7e:	e7e8      	b.n	8007f52 <_strtod_l+0x892>
 8007f80:	4613      	mov	r3, r2
 8007f82:	e7e6      	b.n	8007f52 <_strtod_l+0x892>
 8007f84:	ea53 030a 	orrs.w	r3, r3, sl
 8007f88:	d0aa      	beq.n	8007ee0 <_strtod_l+0x820>
 8007f8a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f8c:	b1db      	cbz	r3, 8007fc6 <_strtod_l+0x906>
 8007f8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f90:	4213      	tst	r3, r2
 8007f92:	d0ee      	beq.n	8007f72 <_strtod_l+0x8b2>
 8007f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f96:	4650      	mov	r0, sl
 8007f98:	4659      	mov	r1, fp
 8007f9a:	9a08      	ldr	r2, [sp, #32]
 8007f9c:	b1bb      	cbz	r3, 8007fce <_strtod_l+0x90e>
 8007f9e:	f7ff fb6d 	bl	800767c <sulp>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007faa:	f7f8 f8f7 	bl	800019c <__adddf3>
 8007fae:	4682      	mov	sl, r0
 8007fb0:	468b      	mov	fp, r1
 8007fb2:	e7de      	b.n	8007f72 <_strtod_l+0x8b2>
 8007fb4:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007fb8:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007fbc:	f04f 3aff 	mov.w	sl, #4294967295
 8007fc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007fc4:	e7d5      	b.n	8007f72 <_strtod_l+0x8b2>
 8007fc6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fc8:	ea13 0f0a 	tst.w	r3, sl
 8007fcc:	e7e1      	b.n	8007f92 <_strtod_l+0x8d2>
 8007fce:	f7ff fb55 	bl	800767c <sulp>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007fda:	f7f8 f8dd 	bl	8000198 <__aeabi_dsub>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	4682      	mov	sl, r0
 8007fe4:	468b      	mov	fp, r1
 8007fe6:	f7f8 fcf7 	bl	80009d8 <__aeabi_dcmpeq>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d0c1      	beq.n	8007f72 <_strtod_l+0x8b2>
 8007fee:	e619      	b.n	8007c24 <_strtod_l+0x564>
 8007ff0:	4641      	mov	r1, r8
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	f7ff face 	bl	8007594 <__ratio>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ffe:	4606      	mov	r6, r0
 8008000:	460f      	mov	r7, r1
 8008002:	f7f8 fcfd 	bl	8000a00 <__aeabi_dcmple>
 8008006:	2800      	cmp	r0, #0
 8008008:	d06d      	beq.n	80080e6 <_strtod_l+0xa26>
 800800a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800800c:	2b00      	cmp	r3, #0
 800800e:	d178      	bne.n	8008102 <_strtod_l+0xa42>
 8008010:	f1ba 0f00 	cmp.w	sl, #0
 8008014:	d156      	bne.n	80080c4 <_strtod_l+0xa04>
 8008016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800801c:	2b00      	cmp	r3, #0
 800801e:	d158      	bne.n	80080d2 <_strtod_l+0xa12>
 8008020:	2200      	movs	r2, #0
 8008022:	4630      	mov	r0, r6
 8008024:	4639      	mov	r1, r7
 8008026:	4b5e      	ldr	r3, [pc, #376]	@ (80081a0 <_strtod_l+0xae0>)
 8008028:	f7f8 fce0 	bl	80009ec <__aeabi_dcmplt>
 800802c:	2800      	cmp	r0, #0
 800802e:	d157      	bne.n	80080e0 <_strtod_l+0xa20>
 8008030:	4630      	mov	r0, r6
 8008032:	4639      	mov	r1, r7
 8008034:	2200      	movs	r2, #0
 8008036:	4b5b      	ldr	r3, [pc, #364]	@ (80081a4 <_strtod_l+0xae4>)
 8008038:	f7f8 fa66 	bl	8000508 <__aeabi_dmul>
 800803c:	4606      	mov	r6, r0
 800803e:	460f      	mov	r7, r1
 8008040:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008044:	9606      	str	r6, [sp, #24]
 8008046:	9307      	str	r3, [sp, #28]
 8008048:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800804c:	4d51      	ldr	r5, [pc, #324]	@ (8008194 <_strtod_l+0xad4>)
 800804e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008052:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008054:	401d      	ands	r5, r3
 8008056:	4b54      	ldr	r3, [pc, #336]	@ (80081a8 <_strtod_l+0xae8>)
 8008058:	429d      	cmp	r5, r3
 800805a:	f040 80ab 	bne.w	80081b4 <_strtod_l+0xaf4>
 800805e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008060:	4650      	mov	r0, sl
 8008062:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008066:	4659      	mov	r1, fp
 8008068:	f7ff f9d4 	bl	8007414 <__ulp>
 800806c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008070:	f7f8 fa4a 	bl	8000508 <__aeabi_dmul>
 8008074:	4652      	mov	r2, sl
 8008076:	465b      	mov	r3, fp
 8008078:	f7f8 f890 	bl	800019c <__adddf3>
 800807c:	460b      	mov	r3, r1
 800807e:	4945      	ldr	r1, [pc, #276]	@ (8008194 <_strtod_l+0xad4>)
 8008080:	4a4a      	ldr	r2, [pc, #296]	@ (80081ac <_strtod_l+0xaec>)
 8008082:	4019      	ands	r1, r3
 8008084:	4291      	cmp	r1, r2
 8008086:	4682      	mov	sl, r0
 8008088:	d942      	bls.n	8008110 <_strtod_l+0xa50>
 800808a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800808c:	4b43      	ldr	r3, [pc, #268]	@ (800819c <_strtod_l+0xadc>)
 800808e:	429a      	cmp	r2, r3
 8008090:	d103      	bne.n	800809a <_strtod_l+0x9da>
 8008092:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008094:	3301      	adds	r3, #1
 8008096:	f43f ad32 	beq.w	8007afe <_strtod_l+0x43e>
 800809a:	f04f 3aff 	mov.w	sl, #4294967295
 800809e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800819c <_strtod_l+0xadc>
 80080a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080a4:	9805      	ldr	r0, [sp, #20]
 80080a6:	f7fe fe89 	bl	8006dbc <_Bfree>
 80080aa:	4649      	mov	r1, r9
 80080ac:	9805      	ldr	r0, [sp, #20]
 80080ae:	f7fe fe85 	bl	8006dbc <_Bfree>
 80080b2:	4641      	mov	r1, r8
 80080b4:	9805      	ldr	r0, [sp, #20]
 80080b6:	f7fe fe81 	bl	8006dbc <_Bfree>
 80080ba:	4621      	mov	r1, r4
 80080bc:	9805      	ldr	r0, [sp, #20]
 80080be:	f7fe fe7d 	bl	8006dbc <_Bfree>
 80080c2:	e61c      	b.n	8007cfe <_strtod_l+0x63e>
 80080c4:	f1ba 0f01 	cmp.w	sl, #1
 80080c8:	d103      	bne.n	80080d2 <_strtod_l+0xa12>
 80080ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f43f ada9 	beq.w	8007c24 <_strtod_l+0x564>
 80080d2:	2200      	movs	r2, #0
 80080d4:	4b36      	ldr	r3, [pc, #216]	@ (80081b0 <_strtod_l+0xaf0>)
 80080d6:	2600      	movs	r6, #0
 80080d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80080dc:	4f30      	ldr	r7, [pc, #192]	@ (80081a0 <_strtod_l+0xae0>)
 80080de:	e7b3      	b.n	8008048 <_strtod_l+0x988>
 80080e0:	2600      	movs	r6, #0
 80080e2:	4f30      	ldr	r7, [pc, #192]	@ (80081a4 <_strtod_l+0xae4>)
 80080e4:	e7ac      	b.n	8008040 <_strtod_l+0x980>
 80080e6:	4630      	mov	r0, r6
 80080e8:	4639      	mov	r1, r7
 80080ea:	4b2e      	ldr	r3, [pc, #184]	@ (80081a4 <_strtod_l+0xae4>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	f7f8 fa0b 	bl	8000508 <__aeabi_dmul>
 80080f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080f4:	4606      	mov	r6, r0
 80080f6:	460f      	mov	r7, r1
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0a1      	beq.n	8008040 <_strtod_l+0x980>
 80080fc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008100:	e7a2      	b.n	8008048 <_strtod_l+0x988>
 8008102:	2200      	movs	r2, #0
 8008104:	4b26      	ldr	r3, [pc, #152]	@ (80081a0 <_strtod_l+0xae0>)
 8008106:	4616      	mov	r6, r2
 8008108:	461f      	mov	r7, r3
 800810a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800810e:	e79b      	b.n	8008048 <_strtod_l+0x988>
 8008110:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008114:	9b08      	ldr	r3, [sp, #32]
 8008116:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1c1      	bne.n	80080a2 <_strtod_l+0x9e2>
 800811e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008122:	0d1b      	lsrs	r3, r3, #20
 8008124:	051b      	lsls	r3, r3, #20
 8008126:	429d      	cmp	r5, r3
 8008128:	d1bb      	bne.n	80080a2 <_strtod_l+0x9e2>
 800812a:	4630      	mov	r0, r6
 800812c:	4639      	mov	r1, r7
 800812e:	f7f8 ffa9 	bl	8001084 <__aeabi_d2lz>
 8008132:	f7f8 f9bb 	bl	80004ac <__aeabi_l2d>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	4630      	mov	r0, r6
 800813c:	4639      	mov	r1, r7
 800813e:	f7f8 f82b 	bl	8000198 <__aeabi_dsub>
 8008142:	460b      	mov	r3, r1
 8008144:	4602      	mov	r2, r0
 8008146:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800814a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800814e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008150:	ea46 060a 	orr.w	r6, r6, sl
 8008154:	431e      	orrs	r6, r3
 8008156:	d06a      	beq.n	800822e <_strtod_l+0xb6e>
 8008158:	a309      	add	r3, pc, #36	@ (adr r3, 8008180 <_strtod_l+0xac0>)
 800815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815e:	f7f8 fc45 	bl	80009ec <__aeabi_dcmplt>
 8008162:	2800      	cmp	r0, #0
 8008164:	f47f acd6 	bne.w	8007b14 <_strtod_l+0x454>
 8008168:	a307      	add	r3, pc, #28	@ (adr r3, 8008188 <_strtod_l+0xac8>)
 800816a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800816e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008172:	f7f8 fc59 	bl	8000a28 <__aeabi_dcmpgt>
 8008176:	2800      	cmp	r0, #0
 8008178:	d093      	beq.n	80080a2 <_strtod_l+0x9e2>
 800817a:	e4cb      	b.n	8007b14 <_strtod_l+0x454>
 800817c:	f3af 8000 	nop.w
 8008180:	94a03595 	.word	0x94a03595
 8008184:	3fdfffff 	.word	0x3fdfffff
 8008188:	35afe535 	.word	0x35afe535
 800818c:	3fe00000 	.word	0x3fe00000
 8008190:	39500000 	.word	0x39500000
 8008194:	7ff00000 	.word	0x7ff00000
 8008198:	000fffff 	.word	0x000fffff
 800819c:	7fefffff 	.word	0x7fefffff
 80081a0:	3ff00000 	.word	0x3ff00000
 80081a4:	3fe00000 	.word	0x3fe00000
 80081a8:	7fe00000 	.word	0x7fe00000
 80081ac:	7c9fffff 	.word	0x7c9fffff
 80081b0:	bff00000 	.word	0xbff00000
 80081b4:	9b08      	ldr	r3, [sp, #32]
 80081b6:	b323      	cbz	r3, 8008202 <_strtod_l+0xb42>
 80081b8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80081bc:	d821      	bhi.n	8008202 <_strtod_l+0xb42>
 80081be:	a328      	add	r3, pc, #160	@ (adr r3, 8008260 <_strtod_l+0xba0>)
 80081c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c4:	4630      	mov	r0, r6
 80081c6:	4639      	mov	r1, r7
 80081c8:	f7f8 fc1a 	bl	8000a00 <__aeabi_dcmple>
 80081cc:	b1a0      	cbz	r0, 80081f8 <_strtod_l+0xb38>
 80081ce:	4639      	mov	r1, r7
 80081d0:	4630      	mov	r0, r6
 80081d2:	f7f8 fc71 	bl	8000ab8 <__aeabi_d2uiz>
 80081d6:	2801      	cmp	r0, #1
 80081d8:	bf38      	it	cc
 80081da:	2001      	movcc	r0, #1
 80081dc:	f7f8 f91a 	bl	8000414 <__aeabi_ui2d>
 80081e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081e2:	4606      	mov	r6, r0
 80081e4:	460f      	mov	r7, r1
 80081e6:	b9fb      	cbnz	r3, 8008228 <_strtod_l+0xb68>
 80081e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081ec:	9014      	str	r0, [sp, #80]	@ 0x50
 80081ee:	9315      	str	r3, [sp, #84]	@ 0x54
 80081f0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80081f4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081fa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80081fe:	1b5b      	subs	r3, r3, r5
 8008200:	9311      	str	r3, [sp, #68]	@ 0x44
 8008202:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008206:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800820a:	f7ff f903 	bl	8007414 <__ulp>
 800820e:	4602      	mov	r2, r0
 8008210:	460b      	mov	r3, r1
 8008212:	4650      	mov	r0, sl
 8008214:	4659      	mov	r1, fp
 8008216:	f7f8 f977 	bl	8000508 <__aeabi_dmul>
 800821a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800821e:	f7f7 ffbd 	bl	800019c <__adddf3>
 8008222:	4682      	mov	sl, r0
 8008224:	468b      	mov	fp, r1
 8008226:	e775      	b.n	8008114 <_strtod_l+0xa54>
 8008228:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800822c:	e7e0      	b.n	80081f0 <_strtod_l+0xb30>
 800822e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008268 <_strtod_l+0xba8>)
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 fbda 	bl	80009ec <__aeabi_dcmplt>
 8008238:	e79d      	b.n	8008176 <_strtod_l+0xab6>
 800823a:	2300      	movs	r3, #0
 800823c:	930e      	str	r3, [sp, #56]	@ 0x38
 800823e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008240:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008242:	6013      	str	r3, [r2, #0]
 8008244:	f7ff ba79 	b.w	800773a <_strtod_l+0x7a>
 8008248:	2a65      	cmp	r2, #101	@ 0x65
 800824a:	f43f ab72 	beq.w	8007932 <_strtod_l+0x272>
 800824e:	2a45      	cmp	r2, #69	@ 0x45
 8008250:	f43f ab6f 	beq.w	8007932 <_strtod_l+0x272>
 8008254:	2301      	movs	r3, #1
 8008256:	f7ff bbaa 	b.w	80079ae <_strtod_l+0x2ee>
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w
 8008260:	ffc00000 	.word	0xffc00000
 8008264:	41dfffff 	.word	0x41dfffff
 8008268:	94a03595 	.word	0x94a03595
 800826c:	3fcfffff 	.word	0x3fcfffff

08008270 <_strtod_r>:
 8008270:	4b01      	ldr	r3, [pc, #4]	@ (8008278 <_strtod_r+0x8>)
 8008272:	f7ff ba25 	b.w	80076c0 <_strtod_l>
 8008276:	bf00      	nop
 8008278:	2000006c 	.word	0x2000006c

0800827c <_strtol_l.isra.0>:
 800827c:	2b24      	cmp	r3, #36	@ 0x24
 800827e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008282:	4686      	mov	lr, r0
 8008284:	4690      	mov	r8, r2
 8008286:	d801      	bhi.n	800828c <_strtol_l.isra.0+0x10>
 8008288:	2b01      	cmp	r3, #1
 800828a:	d106      	bne.n	800829a <_strtol_l.isra.0+0x1e>
 800828c:	f7fd fdba 	bl	8005e04 <__errno>
 8008290:	2316      	movs	r3, #22
 8008292:	6003      	str	r3, [r0, #0]
 8008294:	2000      	movs	r0, #0
 8008296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829a:	460d      	mov	r5, r1
 800829c:	4833      	ldr	r0, [pc, #204]	@ (800836c <_strtol_l.isra.0+0xf0>)
 800829e:	462a      	mov	r2, r5
 80082a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082a4:	5d06      	ldrb	r6, [r0, r4]
 80082a6:	f016 0608 	ands.w	r6, r6, #8
 80082aa:	d1f8      	bne.n	800829e <_strtol_l.isra.0+0x22>
 80082ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80082ae:	d110      	bne.n	80082d2 <_strtol_l.isra.0+0x56>
 80082b0:	2601      	movs	r6, #1
 80082b2:	782c      	ldrb	r4, [r5, #0]
 80082b4:	1c95      	adds	r5, r2, #2
 80082b6:	f033 0210 	bics.w	r2, r3, #16
 80082ba:	d115      	bne.n	80082e8 <_strtol_l.isra.0+0x6c>
 80082bc:	2c30      	cmp	r4, #48	@ 0x30
 80082be:	d10d      	bne.n	80082dc <_strtol_l.isra.0+0x60>
 80082c0:	782a      	ldrb	r2, [r5, #0]
 80082c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80082c6:	2a58      	cmp	r2, #88	@ 0x58
 80082c8:	d108      	bne.n	80082dc <_strtol_l.isra.0+0x60>
 80082ca:	786c      	ldrb	r4, [r5, #1]
 80082cc:	3502      	adds	r5, #2
 80082ce:	2310      	movs	r3, #16
 80082d0:	e00a      	b.n	80082e8 <_strtol_l.isra.0+0x6c>
 80082d2:	2c2b      	cmp	r4, #43	@ 0x2b
 80082d4:	bf04      	itt	eq
 80082d6:	782c      	ldrbeq	r4, [r5, #0]
 80082d8:	1c95      	addeq	r5, r2, #2
 80082da:	e7ec      	b.n	80082b6 <_strtol_l.isra.0+0x3a>
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d1f6      	bne.n	80082ce <_strtol_l.isra.0+0x52>
 80082e0:	2c30      	cmp	r4, #48	@ 0x30
 80082e2:	bf14      	ite	ne
 80082e4:	230a      	movne	r3, #10
 80082e6:	2308      	moveq	r3, #8
 80082e8:	2200      	movs	r2, #0
 80082ea:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80082ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80082f2:	fbbc f9f3 	udiv	r9, ip, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80082fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008300:	2f09      	cmp	r7, #9
 8008302:	d80f      	bhi.n	8008324 <_strtol_l.isra.0+0xa8>
 8008304:	463c      	mov	r4, r7
 8008306:	42a3      	cmp	r3, r4
 8008308:	dd1b      	ble.n	8008342 <_strtol_l.isra.0+0xc6>
 800830a:	1c57      	adds	r7, r2, #1
 800830c:	d007      	beq.n	800831e <_strtol_l.isra.0+0xa2>
 800830e:	4581      	cmp	r9, r0
 8008310:	d314      	bcc.n	800833c <_strtol_l.isra.0+0xc0>
 8008312:	d101      	bne.n	8008318 <_strtol_l.isra.0+0x9c>
 8008314:	45a2      	cmp	sl, r4
 8008316:	db11      	blt.n	800833c <_strtol_l.isra.0+0xc0>
 8008318:	2201      	movs	r2, #1
 800831a:	fb00 4003 	mla	r0, r0, r3, r4
 800831e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008322:	e7eb      	b.n	80082fc <_strtol_l.isra.0+0x80>
 8008324:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008328:	2f19      	cmp	r7, #25
 800832a:	d801      	bhi.n	8008330 <_strtol_l.isra.0+0xb4>
 800832c:	3c37      	subs	r4, #55	@ 0x37
 800832e:	e7ea      	b.n	8008306 <_strtol_l.isra.0+0x8a>
 8008330:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008334:	2f19      	cmp	r7, #25
 8008336:	d804      	bhi.n	8008342 <_strtol_l.isra.0+0xc6>
 8008338:	3c57      	subs	r4, #87	@ 0x57
 800833a:	e7e4      	b.n	8008306 <_strtol_l.isra.0+0x8a>
 800833c:	f04f 32ff 	mov.w	r2, #4294967295
 8008340:	e7ed      	b.n	800831e <_strtol_l.isra.0+0xa2>
 8008342:	1c53      	adds	r3, r2, #1
 8008344:	d108      	bne.n	8008358 <_strtol_l.isra.0+0xdc>
 8008346:	2322      	movs	r3, #34	@ 0x22
 8008348:	4660      	mov	r0, ip
 800834a:	f8ce 3000 	str.w	r3, [lr]
 800834e:	f1b8 0f00 	cmp.w	r8, #0
 8008352:	d0a0      	beq.n	8008296 <_strtol_l.isra.0+0x1a>
 8008354:	1e69      	subs	r1, r5, #1
 8008356:	e006      	b.n	8008366 <_strtol_l.isra.0+0xea>
 8008358:	b106      	cbz	r6, 800835c <_strtol_l.isra.0+0xe0>
 800835a:	4240      	negs	r0, r0
 800835c:	f1b8 0f00 	cmp.w	r8, #0
 8008360:	d099      	beq.n	8008296 <_strtol_l.isra.0+0x1a>
 8008362:	2a00      	cmp	r2, #0
 8008364:	d1f6      	bne.n	8008354 <_strtol_l.isra.0+0xd8>
 8008366:	f8c8 1000 	str.w	r1, [r8]
 800836a:	e794      	b.n	8008296 <_strtol_l.isra.0+0x1a>
 800836c:	080098d1 	.word	0x080098d1

08008370 <_strtol_r>:
 8008370:	f7ff bf84 	b.w	800827c <_strtol_l.isra.0>

08008374 <__ssputs_r>:
 8008374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008378:	461f      	mov	r7, r3
 800837a:	688e      	ldr	r6, [r1, #8]
 800837c:	4682      	mov	sl, r0
 800837e:	42be      	cmp	r6, r7
 8008380:	460c      	mov	r4, r1
 8008382:	4690      	mov	r8, r2
 8008384:	680b      	ldr	r3, [r1, #0]
 8008386:	d82d      	bhi.n	80083e4 <__ssputs_r+0x70>
 8008388:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800838c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008390:	d026      	beq.n	80083e0 <__ssputs_r+0x6c>
 8008392:	6965      	ldr	r5, [r4, #20]
 8008394:	6909      	ldr	r1, [r1, #16]
 8008396:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800839a:	eba3 0901 	sub.w	r9, r3, r1
 800839e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083a2:	1c7b      	adds	r3, r7, #1
 80083a4:	444b      	add	r3, r9
 80083a6:	106d      	asrs	r5, r5, #1
 80083a8:	429d      	cmp	r5, r3
 80083aa:	bf38      	it	cc
 80083ac:	461d      	movcc	r5, r3
 80083ae:	0553      	lsls	r3, r2, #21
 80083b0:	d527      	bpl.n	8008402 <__ssputs_r+0x8e>
 80083b2:	4629      	mov	r1, r5
 80083b4:	f7fe fc36 	bl	8006c24 <_malloc_r>
 80083b8:	4606      	mov	r6, r0
 80083ba:	b360      	cbz	r0, 8008416 <__ssputs_r+0xa2>
 80083bc:	464a      	mov	r2, r9
 80083be:	6921      	ldr	r1, [r4, #16]
 80083c0:	f000 fc1c 	bl	8008bfc <memcpy>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	6126      	str	r6, [r4, #16]
 80083d2:	444e      	add	r6, r9
 80083d4:	6026      	str	r6, [r4, #0]
 80083d6:	463e      	mov	r6, r7
 80083d8:	6165      	str	r5, [r4, #20]
 80083da:	eba5 0509 	sub.w	r5, r5, r9
 80083de:	60a5      	str	r5, [r4, #8]
 80083e0:	42be      	cmp	r6, r7
 80083e2:	d900      	bls.n	80083e6 <__ssputs_r+0x72>
 80083e4:	463e      	mov	r6, r7
 80083e6:	4632      	mov	r2, r6
 80083e8:	4641      	mov	r1, r8
 80083ea:	6820      	ldr	r0, [r4, #0]
 80083ec:	f000 fbca 	bl	8008b84 <memmove>
 80083f0:	2000      	movs	r0, #0
 80083f2:	68a3      	ldr	r3, [r4, #8]
 80083f4:	1b9b      	subs	r3, r3, r6
 80083f6:	60a3      	str	r3, [r4, #8]
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	4433      	add	r3, r6
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008402:	462a      	mov	r2, r5
 8008404:	f000 ff8b 	bl	800931e <_realloc_r>
 8008408:	4606      	mov	r6, r0
 800840a:	2800      	cmp	r0, #0
 800840c:	d1e0      	bne.n	80083d0 <__ssputs_r+0x5c>
 800840e:	4650      	mov	r0, sl
 8008410:	6921      	ldr	r1, [r4, #16]
 8008412:	f7fe fb95 	bl	8006b40 <_free_r>
 8008416:	230c      	movs	r3, #12
 8008418:	f8ca 3000 	str.w	r3, [sl]
 800841c:	89a3      	ldrh	r3, [r4, #12]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008426:	81a3      	strh	r3, [r4, #12]
 8008428:	e7e9      	b.n	80083fe <__ssputs_r+0x8a>
	...

0800842c <_svfiprintf_r>:
 800842c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008430:	4698      	mov	r8, r3
 8008432:	898b      	ldrh	r3, [r1, #12]
 8008434:	4607      	mov	r7, r0
 8008436:	061b      	lsls	r3, r3, #24
 8008438:	460d      	mov	r5, r1
 800843a:	4614      	mov	r4, r2
 800843c:	b09d      	sub	sp, #116	@ 0x74
 800843e:	d510      	bpl.n	8008462 <_svfiprintf_r+0x36>
 8008440:	690b      	ldr	r3, [r1, #16]
 8008442:	b973      	cbnz	r3, 8008462 <_svfiprintf_r+0x36>
 8008444:	2140      	movs	r1, #64	@ 0x40
 8008446:	f7fe fbed 	bl	8006c24 <_malloc_r>
 800844a:	6028      	str	r0, [r5, #0]
 800844c:	6128      	str	r0, [r5, #16]
 800844e:	b930      	cbnz	r0, 800845e <_svfiprintf_r+0x32>
 8008450:	230c      	movs	r3, #12
 8008452:	603b      	str	r3, [r7, #0]
 8008454:	f04f 30ff 	mov.w	r0, #4294967295
 8008458:	b01d      	add	sp, #116	@ 0x74
 800845a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845e:	2340      	movs	r3, #64	@ 0x40
 8008460:	616b      	str	r3, [r5, #20]
 8008462:	2300      	movs	r3, #0
 8008464:	9309      	str	r3, [sp, #36]	@ 0x24
 8008466:	2320      	movs	r3, #32
 8008468:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800846c:	2330      	movs	r3, #48	@ 0x30
 800846e:	f04f 0901 	mov.w	r9, #1
 8008472:	f8cd 800c 	str.w	r8, [sp, #12]
 8008476:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008610 <_svfiprintf_r+0x1e4>
 800847a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800847e:	4623      	mov	r3, r4
 8008480:	469a      	mov	sl, r3
 8008482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008486:	b10a      	cbz	r2, 800848c <_svfiprintf_r+0x60>
 8008488:	2a25      	cmp	r2, #37	@ 0x25
 800848a:	d1f9      	bne.n	8008480 <_svfiprintf_r+0x54>
 800848c:	ebba 0b04 	subs.w	fp, sl, r4
 8008490:	d00b      	beq.n	80084aa <_svfiprintf_r+0x7e>
 8008492:	465b      	mov	r3, fp
 8008494:	4622      	mov	r2, r4
 8008496:	4629      	mov	r1, r5
 8008498:	4638      	mov	r0, r7
 800849a:	f7ff ff6b 	bl	8008374 <__ssputs_r>
 800849e:	3001      	adds	r0, #1
 80084a0:	f000 80a7 	beq.w	80085f2 <_svfiprintf_r+0x1c6>
 80084a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084a6:	445a      	add	r2, fp
 80084a8:	9209      	str	r2, [sp, #36]	@ 0x24
 80084aa:	f89a 3000 	ldrb.w	r3, [sl]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	f000 809f 	beq.w	80085f2 <_svfiprintf_r+0x1c6>
 80084b4:	2300      	movs	r3, #0
 80084b6:	f04f 32ff 	mov.w	r2, #4294967295
 80084ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084be:	f10a 0a01 	add.w	sl, sl, #1
 80084c2:	9304      	str	r3, [sp, #16]
 80084c4:	9307      	str	r3, [sp, #28]
 80084c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084ca:	931a      	str	r3, [sp, #104]	@ 0x68
 80084cc:	4654      	mov	r4, sl
 80084ce:	2205      	movs	r2, #5
 80084d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d4:	484e      	ldr	r0, [pc, #312]	@ (8008610 <_svfiprintf_r+0x1e4>)
 80084d6:	f7fd fcc2 	bl	8005e5e <memchr>
 80084da:	9a04      	ldr	r2, [sp, #16]
 80084dc:	b9d8      	cbnz	r0, 8008516 <_svfiprintf_r+0xea>
 80084de:	06d0      	lsls	r0, r2, #27
 80084e0:	bf44      	itt	mi
 80084e2:	2320      	movmi	r3, #32
 80084e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084e8:	0711      	lsls	r1, r2, #28
 80084ea:	bf44      	itt	mi
 80084ec:	232b      	movmi	r3, #43	@ 0x2b
 80084ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084f2:	f89a 3000 	ldrb.w	r3, [sl]
 80084f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80084f8:	d015      	beq.n	8008526 <_svfiprintf_r+0xfa>
 80084fa:	4654      	mov	r4, sl
 80084fc:	2000      	movs	r0, #0
 80084fe:	f04f 0c0a 	mov.w	ip, #10
 8008502:	9a07      	ldr	r2, [sp, #28]
 8008504:	4621      	mov	r1, r4
 8008506:	f811 3b01 	ldrb.w	r3, [r1], #1
 800850a:	3b30      	subs	r3, #48	@ 0x30
 800850c:	2b09      	cmp	r3, #9
 800850e:	d94b      	bls.n	80085a8 <_svfiprintf_r+0x17c>
 8008510:	b1b0      	cbz	r0, 8008540 <_svfiprintf_r+0x114>
 8008512:	9207      	str	r2, [sp, #28]
 8008514:	e014      	b.n	8008540 <_svfiprintf_r+0x114>
 8008516:	eba0 0308 	sub.w	r3, r0, r8
 800851a:	fa09 f303 	lsl.w	r3, r9, r3
 800851e:	4313      	orrs	r3, r2
 8008520:	46a2      	mov	sl, r4
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	e7d2      	b.n	80084cc <_svfiprintf_r+0xa0>
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	1d19      	adds	r1, r3, #4
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	9103      	str	r1, [sp, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	bfbb      	ittet	lt
 8008532:	425b      	neglt	r3, r3
 8008534:	f042 0202 	orrlt.w	r2, r2, #2
 8008538:	9307      	strge	r3, [sp, #28]
 800853a:	9307      	strlt	r3, [sp, #28]
 800853c:	bfb8      	it	lt
 800853e:	9204      	strlt	r2, [sp, #16]
 8008540:	7823      	ldrb	r3, [r4, #0]
 8008542:	2b2e      	cmp	r3, #46	@ 0x2e
 8008544:	d10a      	bne.n	800855c <_svfiprintf_r+0x130>
 8008546:	7863      	ldrb	r3, [r4, #1]
 8008548:	2b2a      	cmp	r3, #42	@ 0x2a
 800854a:	d132      	bne.n	80085b2 <_svfiprintf_r+0x186>
 800854c:	9b03      	ldr	r3, [sp, #12]
 800854e:	3402      	adds	r4, #2
 8008550:	1d1a      	adds	r2, r3, #4
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	9203      	str	r2, [sp, #12]
 8008556:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800855a:	9305      	str	r3, [sp, #20]
 800855c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008614 <_svfiprintf_r+0x1e8>
 8008560:	2203      	movs	r2, #3
 8008562:	4650      	mov	r0, sl
 8008564:	7821      	ldrb	r1, [r4, #0]
 8008566:	f7fd fc7a 	bl	8005e5e <memchr>
 800856a:	b138      	cbz	r0, 800857c <_svfiprintf_r+0x150>
 800856c:	2240      	movs	r2, #64	@ 0x40
 800856e:	9b04      	ldr	r3, [sp, #16]
 8008570:	eba0 000a 	sub.w	r0, r0, sl
 8008574:	4082      	lsls	r2, r0
 8008576:	4313      	orrs	r3, r2
 8008578:	3401      	adds	r4, #1
 800857a:	9304      	str	r3, [sp, #16]
 800857c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008580:	2206      	movs	r2, #6
 8008582:	4825      	ldr	r0, [pc, #148]	@ (8008618 <_svfiprintf_r+0x1ec>)
 8008584:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008588:	f7fd fc69 	bl	8005e5e <memchr>
 800858c:	2800      	cmp	r0, #0
 800858e:	d036      	beq.n	80085fe <_svfiprintf_r+0x1d2>
 8008590:	4b22      	ldr	r3, [pc, #136]	@ (800861c <_svfiprintf_r+0x1f0>)
 8008592:	bb1b      	cbnz	r3, 80085dc <_svfiprintf_r+0x1b0>
 8008594:	9b03      	ldr	r3, [sp, #12]
 8008596:	3307      	adds	r3, #7
 8008598:	f023 0307 	bic.w	r3, r3, #7
 800859c:	3308      	adds	r3, #8
 800859e:	9303      	str	r3, [sp, #12]
 80085a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a2:	4433      	add	r3, r6
 80085a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80085a6:	e76a      	b.n	800847e <_svfiprintf_r+0x52>
 80085a8:	460c      	mov	r4, r1
 80085aa:	2001      	movs	r0, #1
 80085ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80085b0:	e7a8      	b.n	8008504 <_svfiprintf_r+0xd8>
 80085b2:	2300      	movs	r3, #0
 80085b4:	f04f 0c0a 	mov.w	ip, #10
 80085b8:	4619      	mov	r1, r3
 80085ba:	3401      	adds	r4, #1
 80085bc:	9305      	str	r3, [sp, #20]
 80085be:	4620      	mov	r0, r4
 80085c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085c4:	3a30      	subs	r2, #48	@ 0x30
 80085c6:	2a09      	cmp	r2, #9
 80085c8:	d903      	bls.n	80085d2 <_svfiprintf_r+0x1a6>
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d0c6      	beq.n	800855c <_svfiprintf_r+0x130>
 80085ce:	9105      	str	r1, [sp, #20]
 80085d0:	e7c4      	b.n	800855c <_svfiprintf_r+0x130>
 80085d2:	4604      	mov	r4, r0
 80085d4:	2301      	movs	r3, #1
 80085d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085da:	e7f0      	b.n	80085be <_svfiprintf_r+0x192>
 80085dc:	ab03      	add	r3, sp, #12
 80085de:	9300      	str	r3, [sp, #0]
 80085e0:	462a      	mov	r2, r5
 80085e2:	4638      	mov	r0, r7
 80085e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008620 <_svfiprintf_r+0x1f4>)
 80085e6:	a904      	add	r1, sp, #16
 80085e8:	f7fc fcb2 	bl	8004f50 <_printf_float>
 80085ec:	1c42      	adds	r2, r0, #1
 80085ee:	4606      	mov	r6, r0
 80085f0:	d1d6      	bne.n	80085a0 <_svfiprintf_r+0x174>
 80085f2:	89ab      	ldrh	r3, [r5, #12]
 80085f4:	065b      	lsls	r3, r3, #25
 80085f6:	f53f af2d 	bmi.w	8008454 <_svfiprintf_r+0x28>
 80085fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085fc:	e72c      	b.n	8008458 <_svfiprintf_r+0x2c>
 80085fe:	ab03      	add	r3, sp, #12
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	462a      	mov	r2, r5
 8008604:	4638      	mov	r0, r7
 8008606:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <_svfiprintf_r+0x1f4>)
 8008608:	a904      	add	r1, sp, #16
 800860a:	f7fc ff3f 	bl	800548c <_printf_i>
 800860e:	e7ed      	b.n	80085ec <_svfiprintf_r+0x1c0>
 8008610:	080096cd 	.word	0x080096cd
 8008614:	080096d3 	.word	0x080096d3
 8008618:	080096d7 	.word	0x080096d7
 800861c:	08004f51 	.word	0x08004f51
 8008620:	08008375 	.word	0x08008375

08008624 <__sfputc_r>:
 8008624:	6893      	ldr	r3, [r2, #8]
 8008626:	b410      	push	{r4}
 8008628:	3b01      	subs	r3, #1
 800862a:	2b00      	cmp	r3, #0
 800862c:	6093      	str	r3, [r2, #8]
 800862e:	da07      	bge.n	8008640 <__sfputc_r+0x1c>
 8008630:	6994      	ldr	r4, [r2, #24]
 8008632:	42a3      	cmp	r3, r4
 8008634:	db01      	blt.n	800863a <__sfputc_r+0x16>
 8008636:	290a      	cmp	r1, #10
 8008638:	d102      	bne.n	8008640 <__sfputc_r+0x1c>
 800863a:	bc10      	pop	{r4}
 800863c:	f000 ba0e 	b.w	8008a5c <__swbuf_r>
 8008640:	6813      	ldr	r3, [r2, #0]
 8008642:	1c58      	adds	r0, r3, #1
 8008644:	6010      	str	r0, [r2, #0]
 8008646:	7019      	strb	r1, [r3, #0]
 8008648:	4608      	mov	r0, r1
 800864a:	bc10      	pop	{r4}
 800864c:	4770      	bx	lr

0800864e <__sfputs_r>:
 800864e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008650:	4606      	mov	r6, r0
 8008652:	460f      	mov	r7, r1
 8008654:	4614      	mov	r4, r2
 8008656:	18d5      	adds	r5, r2, r3
 8008658:	42ac      	cmp	r4, r5
 800865a:	d101      	bne.n	8008660 <__sfputs_r+0x12>
 800865c:	2000      	movs	r0, #0
 800865e:	e007      	b.n	8008670 <__sfputs_r+0x22>
 8008660:	463a      	mov	r2, r7
 8008662:	4630      	mov	r0, r6
 8008664:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008668:	f7ff ffdc 	bl	8008624 <__sfputc_r>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	d1f3      	bne.n	8008658 <__sfputs_r+0xa>
 8008670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008674 <_vfiprintf_r>:
 8008674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008678:	460d      	mov	r5, r1
 800867a:	4614      	mov	r4, r2
 800867c:	4698      	mov	r8, r3
 800867e:	4606      	mov	r6, r0
 8008680:	b09d      	sub	sp, #116	@ 0x74
 8008682:	b118      	cbz	r0, 800868c <_vfiprintf_r+0x18>
 8008684:	6a03      	ldr	r3, [r0, #32]
 8008686:	b90b      	cbnz	r3, 800868c <_vfiprintf_r+0x18>
 8008688:	f7fd fab4 	bl	8005bf4 <__sinit>
 800868c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800868e:	07d9      	lsls	r1, r3, #31
 8008690:	d405      	bmi.n	800869e <_vfiprintf_r+0x2a>
 8008692:	89ab      	ldrh	r3, [r5, #12]
 8008694:	059a      	lsls	r2, r3, #22
 8008696:	d402      	bmi.n	800869e <_vfiprintf_r+0x2a>
 8008698:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800869a:	f7fd fbde 	bl	8005e5a <__retarget_lock_acquire_recursive>
 800869e:	89ab      	ldrh	r3, [r5, #12]
 80086a0:	071b      	lsls	r3, r3, #28
 80086a2:	d501      	bpl.n	80086a8 <_vfiprintf_r+0x34>
 80086a4:	692b      	ldr	r3, [r5, #16]
 80086a6:	b99b      	cbnz	r3, 80086d0 <_vfiprintf_r+0x5c>
 80086a8:	4629      	mov	r1, r5
 80086aa:	4630      	mov	r0, r6
 80086ac:	f000 fa14 	bl	8008ad8 <__swsetup_r>
 80086b0:	b170      	cbz	r0, 80086d0 <_vfiprintf_r+0x5c>
 80086b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086b4:	07dc      	lsls	r4, r3, #31
 80086b6:	d504      	bpl.n	80086c2 <_vfiprintf_r+0x4e>
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	b01d      	add	sp, #116	@ 0x74
 80086be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c2:	89ab      	ldrh	r3, [r5, #12]
 80086c4:	0598      	lsls	r0, r3, #22
 80086c6:	d4f7      	bmi.n	80086b8 <_vfiprintf_r+0x44>
 80086c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086ca:	f7fd fbc7 	bl	8005e5c <__retarget_lock_release_recursive>
 80086ce:	e7f3      	b.n	80086b8 <_vfiprintf_r+0x44>
 80086d0:	2300      	movs	r3, #0
 80086d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80086d4:	2320      	movs	r3, #32
 80086d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086da:	2330      	movs	r3, #48	@ 0x30
 80086dc:	f04f 0901 	mov.w	r9, #1
 80086e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086e4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008890 <_vfiprintf_r+0x21c>
 80086e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086ec:	4623      	mov	r3, r4
 80086ee:	469a      	mov	sl, r3
 80086f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086f4:	b10a      	cbz	r2, 80086fa <_vfiprintf_r+0x86>
 80086f6:	2a25      	cmp	r2, #37	@ 0x25
 80086f8:	d1f9      	bne.n	80086ee <_vfiprintf_r+0x7a>
 80086fa:	ebba 0b04 	subs.w	fp, sl, r4
 80086fe:	d00b      	beq.n	8008718 <_vfiprintf_r+0xa4>
 8008700:	465b      	mov	r3, fp
 8008702:	4622      	mov	r2, r4
 8008704:	4629      	mov	r1, r5
 8008706:	4630      	mov	r0, r6
 8008708:	f7ff ffa1 	bl	800864e <__sfputs_r>
 800870c:	3001      	adds	r0, #1
 800870e:	f000 80a7 	beq.w	8008860 <_vfiprintf_r+0x1ec>
 8008712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008714:	445a      	add	r2, fp
 8008716:	9209      	str	r2, [sp, #36]	@ 0x24
 8008718:	f89a 3000 	ldrb.w	r3, [sl]
 800871c:	2b00      	cmp	r3, #0
 800871e:	f000 809f 	beq.w	8008860 <_vfiprintf_r+0x1ec>
 8008722:	2300      	movs	r3, #0
 8008724:	f04f 32ff 	mov.w	r2, #4294967295
 8008728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800872c:	f10a 0a01 	add.w	sl, sl, #1
 8008730:	9304      	str	r3, [sp, #16]
 8008732:	9307      	str	r3, [sp, #28]
 8008734:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008738:	931a      	str	r3, [sp, #104]	@ 0x68
 800873a:	4654      	mov	r4, sl
 800873c:	2205      	movs	r2, #5
 800873e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008742:	4853      	ldr	r0, [pc, #332]	@ (8008890 <_vfiprintf_r+0x21c>)
 8008744:	f7fd fb8b 	bl	8005e5e <memchr>
 8008748:	9a04      	ldr	r2, [sp, #16]
 800874a:	b9d8      	cbnz	r0, 8008784 <_vfiprintf_r+0x110>
 800874c:	06d1      	lsls	r1, r2, #27
 800874e:	bf44      	itt	mi
 8008750:	2320      	movmi	r3, #32
 8008752:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008756:	0713      	lsls	r3, r2, #28
 8008758:	bf44      	itt	mi
 800875a:	232b      	movmi	r3, #43	@ 0x2b
 800875c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008760:	f89a 3000 	ldrb.w	r3, [sl]
 8008764:	2b2a      	cmp	r3, #42	@ 0x2a
 8008766:	d015      	beq.n	8008794 <_vfiprintf_r+0x120>
 8008768:	4654      	mov	r4, sl
 800876a:	2000      	movs	r0, #0
 800876c:	f04f 0c0a 	mov.w	ip, #10
 8008770:	9a07      	ldr	r2, [sp, #28]
 8008772:	4621      	mov	r1, r4
 8008774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008778:	3b30      	subs	r3, #48	@ 0x30
 800877a:	2b09      	cmp	r3, #9
 800877c:	d94b      	bls.n	8008816 <_vfiprintf_r+0x1a2>
 800877e:	b1b0      	cbz	r0, 80087ae <_vfiprintf_r+0x13a>
 8008780:	9207      	str	r2, [sp, #28]
 8008782:	e014      	b.n	80087ae <_vfiprintf_r+0x13a>
 8008784:	eba0 0308 	sub.w	r3, r0, r8
 8008788:	fa09 f303 	lsl.w	r3, r9, r3
 800878c:	4313      	orrs	r3, r2
 800878e:	46a2      	mov	sl, r4
 8008790:	9304      	str	r3, [sp, #16]
 8008792:	e7d2      	b.n	800873a <_vfiprintf_r+0xc6>
 8008794:	9b03      	ldr	r3, [sp, #12]
 8008796:	1d19      	adds	r1, r3, #4
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	9103      	str	r1, [sp, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	bfbb      	ittet	lt
 80087a0:	425b      	neglt	r3, r3
 80087a2:	f042 0202 	orrlt.w	r2, r2, #2
 80087a6:	9307      	strge	r3, [sp, #28]
 80087a8:	9307      	strlt	r3, [sp, #28]
 80087aa:	bfb8      	it	lt
 80087ac:	9204      	strlt	r2, [sp, #16]
 80087ae:	7823      	ldrb	r3, [r4, #0]
 80087b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80087b2:	d10a      	bne.n	80087ca <_vfiprintf_r+0x156>
 80087b4:	7863      	ldrb	r3, [r4, #1]
 80087b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80087b8:	d132      	bne.n	8008820 <_vfiprintf_r+0x1ac>
 80087ba:	9b03      	ldr	r3, [sp, #12]
 80087bc:	3402      	adds	r4, #2
 80087be:	1d1a      	adds	r2, r3, #4
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	9203      	str	r2, [sp, #12]
 80087c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087c8:	9305      	str	r3, [sp, #20]
 80087ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008894 <_vfiprintf_r+0x220>
 80087ce:	2203      	movs	r2, #3
 80087d0:	4650      	mov	r0, sl
 80087d2:	7821      	ldrb	r1, [r4, #0]
 80087d4:	f7fd fb43 	bl	8005e5e <memchr>
 80087d8:	b138      	cbz	r0, 80087ea <_vfiprintf_r+0x176>
 80087da:	2240      	movs	r2, #64	@ 0x40
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	eba0 000a 	sub.w	r0, r0, sl
 80087e2:	4082      	lsls	r2, r0
 80087e4:	4313      	orrs	r3, r2
 80087e6:	3401      	adds	r4, #1
 80087e8:	9304      	str	r3, [sp, #16]
 80087ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087ee:	2206      	movs	r2, #6
 80087f0:	4829      	ldr	r0, [pc, #164]	@ (8008898 <_vfiprintf_r+0x224>)
 80087f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087f6:	f7fd fb32 	bl	8005e5e <memchr>
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d03f      	beq.n	800887e <_vfiprintf_r+0x20a>
 80087fe:	4b27      	ldr	r3, [pc, #156]	@ (800889c <_vfiprintf_r+0x228>)
 8008800:	bb1b      	cbnz	r3, 800884a <_vfiprintf_r+0x1d6>
 8008802:	9b03      	ldr	r3, [sp, #12]
 8008804:	3307      	adds	r3, #7
 8008806:	f023 0307 	bic.w	r3, r3, #7
 800880a:	3308      	adds	r3, #8
 800880c:	9303      	str	r3, [sp, #12]
 800880e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008810:	443b      	add	r3, r7
 8008812:	9309      	str	r3, [sp, #36]	@ 0x24
 8008814:	e76a      	b.n	80086ec <_vfiprintf_r+0x78>
 8008816:	460c      	mov	r4, r1
 8008818:	2001      	movs	r0, #1
 800881a:	fb0c 3202 	mla	r2, ip, r2, r3
 800881e:	e7a8      	b.n	8008772 <_vfiprintf_r+0xfe>
 8008820:	2300      	movs	r3, #0
 8008822:	f04f 0c0a 	mov.w	ip, #10
 8008826:	4619      	mov	r1, r3
 8008828:	3401      	adds	r4, #1
 800882a:	9305      	str	r3, [sp, #20]
 800882c:	4620      	mov	r0, r4
 800882e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008832:	3a30      	subs	r2, #48	@ 0x30
 8008834:	2a09      	cmp	r2, #9
 8008836:	d903      	bls.n	8008840 <_vfiprintf_r+0x1cc>
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0c6      	beq.n	80087ca <_vfiprintf_r+0x156>
 800883c:	9105      	str	r1, [sp, #20]
 800883e:	e7c4      	b.n	80087ca <_vfiprintf_r+0x156>
 8008840:	4604      	mov	r4, r0
 8008842:	2301      	movs	r3, #1
 8008844:	fb0c 2101 	mla	r1, ip, r1, r2
 8008848:	e7f0      	b.n	800882c <_vfiprintf_r+0x1b8>
 800884a:	ab03      	add	r3, sp, #12
 800884c:	9300      	str	r3, [sp, #0]
 800884e:	462a      	mov	r2, r5
 8008850:	4630      	mov	r0, r6
 8008852:	4b13      	ldr	r3, [pc, #76]	@ (80088a0 <_vfiprintf_r+0x22c>)
 8008854:	a904      	add	r1, sp, #16
 8008856:	f7fc fb7b 	bl	8004f50 <_printf_float>
 800885a:	4607      	mov	r7, r0
 800885c:	1c78      	adds	r0, r7, #1
 800885e:	d1d6      	bne.n	800880e <_vfiprintf_r+0x19a>
 8008860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008862:	07d9      	lsls	r1, r3, #31
 8008864:	d405      	bmi.n	8008872 <_vfiprintf_r+0x1fe>
 8008866:	89ab      	ldrh	r3, [r5, #12]
 8008868:	059a      	lsls	r2, r3, #22
 800886a:	d402      	bmi.n	8008872 <_vfiprintf_r+0x1fe>
 800886c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800886e:	f7fd faf5 	bl	8005e5c <__retarget_lock_release_recursive>
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	065b      	lsls	r3, r3, #25
 8008876:	f53f af1f 	bmi.w	80086b8 <_vfiprintf_r+0x44>
 800887a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800887c:	e71e      	b.n	80086bc <_vfiprintf_r+0x48>
 800887e:	ab03      	add	r3, sp, #12
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	462a      	mov	r2, r5
 8008884:	4630      	mov	r0, r6
 8008886:	4b06      	ldr	r3, [pc, #24]	@ (80088a0 <_vfiprintf_r+0x22c>)
 8008888:	a904      	add	r1, sp, #16
 800888a:	f7fc fdff 	bl	800548c <_printf_i>
 800888e:	e7e4      	b.n	800885a <_vfiprintf_r+0x1e6>
 8008890:	080096cd 	.word	0x080096cd
 8008894:	080096d3 	.word	0x080096d3
 8008898:	080096d7 	.word	0x080096d7
 800889c:	08004f51 	.word	0x08004f51
 80088a0:	0800864f 	.word	0x0800864f

080088a4 <__sflush_r>:
 80088a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	0716      	lsls	r6, r2, #28
 80088ac:	4605      	mov	r5, r0
 80088ae:	460c      	mov	r4, r1
 80088b0:	d454      	bmi.n	800895c <__sflush_r+0xb8>
 80088b2:	684b      	ldr	r3, [r1, #4]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc02      	bgt.n	80088be <__sflush_r+0x1a>
 80088b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	dd48      	ble.n	8008950 <__sflush_r+0xac>
 80088be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088c0:	2e00      	cmp	r6, #0
 80088c2:	d045      	beq.n	8008950 <__sflush_r+0xac>
 80088c4:	2300      	movs	r3, #0
 80088c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088ca:	682f      	ldr	r7, [r5, #0]
 80088cc:	6a21      	ldr	r1, [r4, #32]
 80088ce:	602b      	str	r3, [r5, #0]
 80088d0:	d030      	beq.n	8008934 <__sflush_r+0x90>
 80088d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088d4:	89a3      	ldrh	r3, [r4, #12]
 80088d6:	0759      	lsls	r1, r3, #29
 80088d8:	d505      	bpl.n	80088e6 <__sflush_r+0x42>
 80088da:	6863      	ldr	r3, [r4, #4]
 80088dc:	1ad2      	subs	r2, r2, r3
 80088de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088e0:	b10b      	cbz	r3, 80088e6 <__sflush_r+0x42>
 80088e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088e4:	1ad2      	subs	r2, r2, r3
 80088e6:	2300      	movs	r3, #0
 80088e8:	4628      	mov	r0, r5
 80088ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088ec:	6a21      	ldr	r1, [r4, #32]
 80088ee:	47b0      	blx	r6
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	d106      	bne.n	8008904 <__sflush_r+0x60>
 80088f6:	6829      	ldr	r1, [r5, #0]
 80088f8:	291d      	cmp	r1, #29
 80088fa:	d82b      	bhi.n	8008954 <__sflush_r+0xb0>
 80088fc:	4a28      	ldr	r2, [pc, #160]	@ (80089a0 <__sflush_r+0xfc>)
 80088fe:	40ca      	lsrs	r2, r1
 8008900:	07d6      	lsls	r6, r2, #31
 8008902:	d527      	bpl.n	8008954 <__sflush_r+0xb0>
 8008904:	2200      	movs	r2, #0
 8008906:	6062      	str	r2, [r4, #4]
 8008908:	6922      	ldr	r2, [r4, #16]
 800890a:	04d9      	lsls	r1, r3, #19
 800890c:	6022      	str	r2, [r4, #0]
 800890e:	d504      	bpl.n	800891a <__sflush_r+0x76>
 8008910:	1c42      	adds	r2, r0, #1
 8008912:	d101      	bne.n	8008918 <__sflush_r+0x74>
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	b903      	cbnz	r3, 800891a <__sflush_r+0x76>
 8008918:	6560      	str	r0, [r4, #84]	@ 0x54
 800891a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800891c:	602f      	str	r7, [r5, #0]
 800891e:	b1b9      	cbz	r1, 8008950 <__sflush_r+0xac>
 8008920:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008924:	4299      	cmp	r1, r3
 8008926:	d002      	beq.n	800892e <__sflush_r+0x8a>
 8008928:	4628      	mov	r0, r5
 800892a:	f7fe f909 	bl	8006b40 <_free_r>
 800892e:	2300      	movs	r3, #0
 8008930:	6363      	str	r3, [r4, #52]	@ 0x34
 8008932:	e00d      	b.n	8008950 <__sflush_r+0xac>
 8008934:	2301      	movs	r3, #1
 8008936:	4628      	mov	r0, r5
 8008938:	47b0      	blx	r6
 800893a:	4602      	mov	r2, r0
 800893c:	1c50      	adds	r0, r2, #1
 800893e:	d1c9      	bne.n	80088d4 <__sflush_r+0x30>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0c6      	beq.n	80088d4 <__sflush_r+0x30>
 8008946:	2b1d      	cmp	r3, #29
 8008948:	d001      	beq.n	800894e <__sflush_r+0xaa>
 800894a:	2b16      	cmp	r3, #22
 800894c:	d11d      	bne.n	800898a <__sflush_r+0xe6>
 800894e:	602f      	str	r7, [r5, #0]
 8008950:	2000      	movs	r0, #0
 8008952:	e021      	b.n	8008998 <__sflush_r+0xf4>
 8008954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008958:	b21b      	sxth	r3, r3
 800895a:	e01a      	b.n	8008992 <__sflush_r+0xee>
 800895c:	690f      	ldr	r7, [r1, #16]
 800895e:	2f00      	cmp	r7, #0
 8008960:	d0f6      	beq.n	8008950 <__sflush_r+0xac>
 8008962:	0793      	lsls	r3, r2, #30
 8008964:	bf18      	it	ne
 8008966:	2300      	movne	r3, #0
 8008968:	680e      	ldr	r6, [r1, #0]
 800896a:	bf08      	it	eq
 800896c:	694b      	ldreq	r3, [r1, #20]
 800896e:	1bf6      	subs	r6, r6, r7
 8008970:	600f      	str	r7, [r1, #0]
 8008972:	608b      	str	r3, [r1, #8]
 8008974:	2e00      	cmp	r6, #0
 8008976:	ddeb      	ble.n	8008950 <__sflush_r+0xac>
 8008978:	4633      	mov	r3, r6
 800897a:	463a      	mov	r2, r7
 800897c:	4628      	mov	r0, r5
 800897e:	6a21      	ldr	r1, [r4, #32]
 8008980:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008984:	47e0      	blx	ip
 8008986:	2800      	cmp	r0, #0
 8008988:	dc07      	bgt.n	800899a <__sflush_r+0xf6>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008992:	f04f 30ff 	mov.w	r0, #4294967295
 8008996:	81a3      	strh	r3, [r4, #12]
 8008998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800899a:	4407      	add	r7, r0
 800899c:	1a36      	subs	r6, r6, r0
 800899e:	e7e9      	b.n	8008974 <__sflush_r+0xd0>
 80089a0:	20400001 	.word	0x20400001

080089a4 <_fflush_r>:
 80089a4:	b538      	push	{r3, r4, r5, lr}
 80089a6:	690b      	ldr	r3, [r1, #16]
 80089a8:	4605      	mov	r5, r0
 80089aa:	460c      	mov	r4, r1
 80089ac:	b913      	cbnz	r3, 80089b4 <_fflush_r+0x10>
 80089ae:	2500      	movs	r5, #0
 80089b0:	4628      	mov	r0, r5
 80089b2:	bd38      	pop	{r3, r4, r5, pc}
 80089b4:	b118      	cbz	r0, 80089be <_fflush_r+0x1a>
 80089b6:	6a03      	ldr	r3, [r0, #32]
 80089b8:	b90b      	cbnz	r3, 80089be <_fflush_r+0x1a>
 80089ba:	f7fd f91b 	bl	8005bf4 <__sinit>
 80089be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d0f3      	beq.n	80089ae <_fflush_r+0xa>
 80089c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089c8:	07d0      	lsls	r0, r2, #31
 80089ca:	d404      	bmi.n	80089d6 <_fflush_r+0x32>
 80089cc:	0599      	lsls	r1, r3, #22
 80089ce:	d402      	bmi.n	80089d6 <_fflush_r+0x32>
 80089d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089d2:	f7fd fa42 	bl	8005e5a <__retarget_lock_acquire_recursive>
 80089d6:	4628      	mov	r0, r5
 80089d8:	4621      	mov	r1, r4
 80089da:	f7ff ff63 	bl	80088a4 <__sflush_r>
 80089de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089e0:	4605      	mov	r5, r0
 80089e2:	07da      	lsls	r2, r3, #31
 80089e4:	d4e4      	bmi.n	80089b0 <_fflush_r+0xc>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	059b      	lsls	r3, r3, #22
 80089ea:	d4e1      	bmi.n	80089b0 <_fflush_r+0xc>
 80089ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089ee:	f7fd fa35 	bl	8005e5c <__retarget_lock_release_recursive>
 80089f2:	e7dd      	b.n	80089b0 <_fflush_r+0xc>

080089f4 <_putc_r>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	460d      	mov	r5, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	4606      	mov	r6, r0
 80089fc:	b118      	cbz	r0, 8008a06 <_putc_r+0x12>
 80089fe:	6a03      	ldr	r3, [r0, #32]
 8008a00:	b90b      	cbnz	r3, 8008a06 <_putc_r+0x12>
 8008a02:	f7fd f8f7 	bl	8005bf4 <__sinit>
 8008a06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a08:	07d8      	lsls	r0, r3, #31
 8008a0a:	d405      	bmi.n	8008a18 <_putc_r+0x24>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	0599      	lsls	r1, r3, #22
 8008a10:	d402      	bmi.n	8008a18 <_putc_r+0x24>
 8008a12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a14:	f7fd fa21 	bl	8005e5a <__retarget_lock_acquire_recursive>
 8008a18:	68a3      	ldr	r3, [r4, #8]
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	60a3      	str	r3, [r4, #8]
 8008a20:	da05      	bge.n	8008a2e <_putc_r+0x3a>
 8008a22:	69a2      	ldr	r2, [r4, #24]
 8008a24:	4293      	cmp	r3, r2
 8008a26:	db12      	blt.n	8008a4e <_putc_r+0x5a>
 8008a28:	b2eb      	uxtb	r3, r5
 8008a2a:	2b0a      	cmp	r3, #10
 8008a2c:	d00f      	beq.n	8008a4e <_putc_r+0x5a>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	1c5a      	adds	r2, r3, #1
 8008a32:	6022      	str	r2, [r4, #0]
 8008a34:	701d      	strb	r5, [r3, #0]
 8008a36:	b2ed      	uxtb	r5, r5
 8008a38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008a3a:	07da      	lsls	r2, r3, #31
 8008a3c:	d405      	bmi.n	8008a4a <_putc_r+0x56>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	d402      	bmi.n	8008a4a <_putc_r+0x56>
 8008a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008a46:	f7fd fa09 	bl	8005e5c <__retarget_lock_release_recursive>
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	4629      	mov	r1, r5
 8008a50:	4622      	mov	r2, r4
 8008a52:	4630      	mov	r0, r6
 8008a54:	f000 f802 	bl	8008a5c <__swbuf_r>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	e7ed      	b.n	8008a38 <_putc_r+0x44>

08008a5c <__swbuf_r>:
 8008a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a5e:	460e      	mov	r6, r1
 8008a60:	4614      	mov	r4, r2
 8008a62:	4605      	mov	r5, r0
 8008a64:	b118      	cbz	r0, 8008a6e <__swbuf_r+0x12>
 8008a66:	6a03      	ldr	r3, [r0, #32]
 8008a68:	b90b      	cbnz	r3, 8008a6e <__swbuf_r+0x12>
 8008a6a:	f7fd f8c3 	bl	8005bf4 <__sinit>
 8008a6e:	69a3      	ldr	r3, [r4, #24]
 8008a70:	60a3      	str	r3, [r4, #8]
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	071a      	lsls	r2, r3, #28
 8008a76:	d501      	bpl.n	8008a7c <__swbuf_r+0x20>
 8008a78:	6923      	ldr	r3, [r4, #16]
 8008a7a:	b943      	cbnz	r3, 8008a8e <__swbuf_r+0x32>
 8008a7c:	4621      	mov	r1, r4
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 f82a 	bl	8008ad8 <__swsetup_r>
 8008a84:	b118      	cbz	r0, 8008a8e <__swbuf_r+0x32>
 8008a86:	f04f 37ff 	mov.w	r7, #4294967295
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	6922      	ldr	r2, [r4, #16]
 8008a92:	b2f6      	uxtb	r6, r6
 8008a94:	1a98      	subs	r0, r3, r2
 8008a96:	6963      	ldr	r3, [r4, #20]
 8008a98:	4637      	mov	r7, r6
 8008a9a:	4283      	cmp	r3, r0
 8008a9c:	dc05      	bgt.n	8008aaa <__swbuf_r+0x4e>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4628      	mov	r0, r5
 8008aa2:	f7ff ff7f 	bl	80089a4 <_fflush_r>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	d1ed      	bne.n	8008a86 <__swbuf_r+0x2a>
 8008aaa:	68a3      	ldr	r3, [r4, #8]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	60a3      	str	r3, [r4, #8]
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	6022      	str	r2, [r4, #0]
 8008ab6:	701e      	strb	r6, [r3, #0]
 8008ab8:	6962      	ldr	r2, [r4, #20]
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d004      	beq.n	8008aca <__swbuf_r+0x6e>
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	07db      	lsls	r3, r3, #31
 8008ac4:	d5e1      	bpl.n	8008a8a <__swbuf_r+0x2e>
 8008ac6:	2e0a      	cmp	r6, #10
 8008ac8:	d1df      	bne.n	8008a8a <__swbuf_r+0x2e>
 8008aca:	4621      	mov	r1, r4
 8008acc:	4628      	mov	r0, r5
 8008ace:	f7ff ff69 	bl	80089a4 <_fflush_r>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d0d9      	beq.n	8008a8a <__swbuf_r+0x2e>
 8008ad6:	e7d6      	b.n	8008a86 <__swbuf_r+0x2a>

08008ad8 <__swsetup_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4b29      	ldr	r3, [pc, #164]	@ (8008b80 <__swsetup_r+0xa8>)
 8008adc:	4605      	mov	r5, r0
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	b118      	cbz	r0, 8008aec <__swsetup_r+0x14>
 8008ae4:	6a03      	ldr	r3, [r0, #32]
 8008ae6:	b90b      	cbnz	r3, 8008aec <__swsetup_r+0x14>
 8008ae8:	f7fd f884 	bl	8005bf4 <__sinit>
 8008aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af0:	0719      	lsls	r1, r3, #28
 8008af2:	d422      	bmi.n	8008b3a <__swsetup_r+0x62>
 8008af4:	06da      	lsls	r2, r3, #27
 8008af6:	d407      	bmi.n	8008b08 <__swsetup_r+0x30>
 8008af8:	2209      	movs	r2, #9
 8008afa:	602a      	str	r2, [r5, #0]
 8008afc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b00:	f04f 30ff 	mov.w	r0, #4294967295
 8008b04:	81a3      	strh	r3, [r4, #12]
 8008b06:	e033      	b.n	8008b70 <__swsetup_r+0x98>
 8008b08:	0758      	lsls	r0, r3, #29
 8008b0a:	d512      	bpl.n	8008b32 <__swsetup_r+0x5a>
 8008b0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b0e:	b141      	cbz	r1, 8008b22 <__swsetup_r+0x4a>
 8008b10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b14:	4299      	cmp	r1, r3
 8008b16:	d002      	beq.n	8008b1e <__swsetup_r+0x46>
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f7fe f811 	bl	8006b40 <_free_r>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b28:	81a3      	strh	r3, [r4, #12]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	6023      	str	r3, [r4, #0]
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f043 0308 	orr.w	r3, r3, #8
 8008b38:	81a3      	strh	r3, [r4, #12]
 8008b3a:	6923      	ldr	r3, [r4, #16]
 8008b3c:	b94b      	cbnz	r3, 8008b52 <__swsetup_r+0x7a>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b48:	d003      	beq.n	8008b52 <__swsetup_r+0x7a>
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f000 fc58 	bl	8009402 <__smakebuf_r>
 8008b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b56:	f013 0201 	ands.w	r2, r3, #1
 8008b5a:	d00a      	beq.n	8008b72 <__swsetup_r+0x9a>
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	60a2      	str	r2, [r4, #8]
 8008b60:	6962      	ldr	r2, [r4, #20]
 8008b62:	4252      	negs	r2, r2
 8008b64:	61a2      	str	r2, [r4, #24]
 8008b66:	6922      	ldr	r2, [r4, #16]
 8008b68:	b942      	cbnz	r2, 8008b7c <__swsetup_r+0xa4>
 8008b6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b6e:	d1c5      	bne.n	8008afc <__swsetup_r+0x24>
 8008b70:	bd38      	pop	{r3, r4, r5, pc}
 8008b72:	0799      	lsls	r1, r3, #30
 8008b74:	bf58      	it	pl
 8008b76:	6962      	ldrpl	r2, [r4, #20]
 8008b78:	60a2      	str	r2, [r4, #8]
 8008b7a:	e7f4      	b.n	8008b66 <__swsetup_r+0x8e>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7f7      	b.n	8008b70 <__swsetup_r+0x98>
 8008b80:	2000001c 	.word	0x2000001c

08008b84 <memmove>:
 8008b84:	4288      	cmp	r0, r1
 8008b86:	b510      	push	{r4, lr}
 8008b88:	eb01 0402 	add.w	r4, r1, r2
 8008b8c:	d902      	bls.n	8008b94 <memmove+0x10>
 8008b8e:	4284      	cmp	r4, r0
 8008b90:	4623      	mov	r3, r4
 8008b92:	d807      	bhi.n	8008ba4 <memmove+0x20>
 8008b94:	1e43      	subs	r3, r0, #1
 8008b96:	42a1      	cmp	r1, r4
 8008b98:	d008      	beq.n	8008bac <memmove+0x28>
 8008b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ba2:	e7f8      	b.n	8008b96 <memmove+0x12>
 8008ba4:	4601      	mov	r1, r0
 8008ba6:	4402      	add	r2, r0
 8008ba8:	428a      	cmp	r2, r1
 8008baa:	d100      	bne.n	8008bae <memmove+0x2a>
 8008bac:	bd10      	pop	{r4, pc}
 8008bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bb6:	e7f7      	b.n	8008ba8 <memmove+0x24>

08008bb8 <strncmp>:
 8008bb8:	b510      	push	{r4, lr}
 8008bba:	b16a      	cbz	r2, 8008bd8 <strncmp+0x20>
 8008bbc:	3901      	subs	r1, #1
 8008bbe:	1884      	adds	r4, r0, r2
 8008bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bc4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d103      	bne.n	8008bd4 <strncmp+0x1c>
 8008bcc:	42a0      	cmp	r0, r4
 8008bce:	d001      	beq.n	8008bd4 <strncmp+0x1c>
 8008bd0:	2a00      	cmp	r2, #0
 8008bd2:	d1f5      	bne.n	8008bc0 <strncmp+0x8>
 8008bd4:	1ad0      	subs	r0, r2, r3
 8008bd6:	bd10      	pop	{r4, pc}
 8008bd8:	4610      	mov	r0, r2
 8008bda:	e7fc      	b.n	8008bd6 <strncmp+0x1e>

08008bdc <_sbrk_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	2300      	movs	r3, #0
 8008be0:	4d05      	ldr	r5, [pc, #20]	@ (8008bf8 <_sbrk_r+0x1c>)
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7f9 f958 	bl	8001e9c <_sbrk>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_sbrk_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_sbrk_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	200009ec 	.word	0x200009ec

08008bfc <memcpy>:
 8008bfc:	440a      	add	r2, r1
 8008bfe:	4291      	cmp	r1, r2
 8008c00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c04:	d100      	bne.n	8008c08 <memcpy+0xc>
 8008c06:	4770      	bx	lr
 8008c08:	b510      	push	{r4, lr}
 8008c0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c0e:	4291      	cmp	r1, r2
 8008c10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c14:	d1f9      	bne.n	8008c0a <memcpy+0xe>
 8008c16:	bd10      	pop	{r4, pc}

08008c18 <nan>:
 8008c18:	2000      	movs	r0, #0
 8008c1a:	4901      	ldr	r1, [pc, #4]	@ (8008c20 <nan+0x8>)
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	7ff80000 	.word	0x7ff80000

08008c24 <__assert_func>:
 8008c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c26:	4614      	mov	r4, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	4b09      	ldr	r3, [pc, #36]	@ (8008c50 <__assert_func+0x2c>)
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68d8      	ldr	r0, [r3, #12]
 8008c32:	b14c      	cbz	r4, 8008c48 <__assert_func+0x24>
 8008c34:	4b07      	ldr	r3, [pc, #28]	@ (8008c54 <__assert_func+0x30>)
 8008c36:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c3a:	9100      	str	r1, [sp, #0]
 8008c3c:	462b      	mov	r3, r5
 8008c3e:	4906      	ldr	r1, [pc, #24]	@ (8008c58 <__assert_func+0x34>)
 8008c40:	f000 fba8 	bl	8009394 <fiprintf>
 8008c44:	f000 fc3c 	bl	80094c0 <abort>
 8008c48:	4b04      	ldr	r3, [pc, #16]	@ (8008c5c <__assert_func+0x38>)
 8008c4a:	461c      	mov	r4, r3
 8008c4c:	e7f3      	b.n	8008c36 <__assert_func+0x12>
 8008c4e:	bf00      	nop
 8008c50:	2000001c 	.word	0x2000001c
 8008c54:	080096e6 	.word	0x080096e6
 8008c58:	080096f3 	.word	0x080096f3
 8008c5c:	08009721 	.word	0x08009721

08008c60 <_calloc_r>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	fba1 5402 	umull	r5, r4, r1, r2
 8008c66:	b934      	cbnz	r4, 8008c76 <_calloc_r+0x16>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7fd ffdb 	bl	8006c24 <_malloc_r>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	b928      	cbnz	r0, 8008c7e <_calloc_r+0x1e>
 8008c72:	4630      	mov	r0, r6
 8008c74:	bd70      	pop	{r4, r5, r6, pc}
 8008c76:	220c      	movs	r2, #12
 8008c78:	2600      	movs	r6, #0
 8008c7a:	6002      	str	r2, [r0, #0]
 8008c7c:	e7f9      	b.n	8008c72 <_calloc_r+0x12>
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4621      	mov	r1, r4
 8008c82:	f7fd f86c 	bl	8005d5e <memset>
 8008c86:	e7f4      	b.n	8008c72 <_calloc_r+0x12>

08008c88 <rshift>:
 8008c88:	6903      	ldr	r3, [r0, #16]
 8008c8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c92:	f100 0414 	add.w	r4, r0, #20
 8008c96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c9a:	dd46      	ble.n	8008d2a <rshift+0xa2>
 8008c9c:	f011 011f 	ands.w	r1, r1, #31
 8008ca0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008ca4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008ca8:	d10c      	bne.n	8008cc4 <rshift+0x3c>
 8008caa:	4629      	mov	r1, r5
 8008cac:	f100 0710 	add.w	r7, r0, #16
 8008cb0:	42b1      	cmp	r1, r6
 8008cb2:	d335      	bcc.n	8008d20 <rshift+0x98>
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	1eea      	subs	r2, r5, #3
 8008cba:	4296      	cmp	r6, r2
 8008cbc:	bf38      	it	cc
 8008cbe:	2300      	movcc	r3, #0
 8008cc0:	4423      	add	r3, r4
 8008cc2:	e015      	b.n	8008cf0 <rshift+0x68>
 8008cc4:	46a1      	mov	r9, r4
 8008cc6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008cca:	f1c1 0820 	rsb	r8, r1, #32
 8008cce:	40cf      	lsrs	r7, r1
 8008cd0:	f105 0e04 	add.w	lr, r5, #4
 8008cd4:	4576      	cmp	r6, lr
 8008cd6:	46f4      	mov	ip, lr
 8008cd8:	d816      	bhi.n	8008d08 <rshift+0x80>
 8008cda:	1a9a      	subs	r2, r3, r2
 8008cdc:	0092      	lsls	r2, r2, #2
 8008cde:	3a04      	subs	r2, #4
 8008ce0:	3501      	adds	r5, #1
 8008ce2:	42ae      	cmp	r6, r5
 8008ce4:	bf38      	it	cc
 8008ce6:	2200      	movcc	r2, #0
 8008ce8:	18a3      	adds	r3, r4, r2
 8008cea:	50a7      	str	r7, [r4, r2]
 8008cec:	b107      	cbz	r7, 8008cf0 <rshift+0x68>
 8008cee:	3304      	adds	r3, #4
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	eba3 0204 	sub.w	r2, r3, r4
 8008cf6:	bf08      	it	eq
 8008cf8:	2300      	moveq	r3, #0
 8008cfa:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008cfe:	6102      	str	r2, [r0, #16]
 8008d00:	bf08      	it	eq
 8008d02:	6143      	streq	r3, [r0, #20]
 8008d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d08:	f8dc c000 	ldr.w	ip, [ip]
 8008d0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008d10:	ea4c 0707 	orr.w	r7, ip, r7
 8008d14:	f849 7b04 	str.w	r7, [r9], #4
 8008d18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d1c:	40cf      	lsrs	r7, r1
 8008d1e:	e7d9      	b.n	8008cd4 <rshift+0x4c>
 8008d20:	f851 cb04 	ldr.w	ip, [r1], #4
 8008d24:	f847 cf04 	str.w	ip, [r7, #4]!
 8008d28:	e7c2      	b.n	8008cb0 <rshift+0x28>
 8008d2a:	4623      	mov	r3, r4
 8008d2c:	e7e0      	b.n	8008cf0 <rshift+0x68>

08008d2e <__hexdig_fun>:
 8008d2e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008d32:	2b09      	cmp	r3, #9
 8008d34:	d802      	bhi.n	8008d3c <__hexdig_fun+0xe>
 8008d36:	3820      	subs	r0, #32
 8008d38:	b2c0      	uxtb	r0, r0
 8008d3a:	4770      	bx	lr
 8008d3c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008d40:	2b05      	cmp	r3, #5
 8008d42:	d801      	bhi.n	8008d48 <__hexdig_fun+0x1a>
 8008d44:	3847      	subs	r0, #71	@ 0x47
 8008d46:	e7f7      	b.n	8008d38 <__hexdig_fun+0xa>
 8008d48:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008d4c:	2b05      	cmp	r3, #5
 8008d4e:	d801      	bhi.n	8008d54 <__hexdig_fun+0x26>
 8008d50:	3827      	subs	r0, #39	@ 0x27
 8008d52:	e7f1      	b.n	8008d38 <__hexdig_fun+0xa>
 8008d54:	2000      	movs	r0, #0
 8008d56:	4770      	bx	lr

08008d58 <__gethex>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	468a      	mov	sl, r1
 8008d5e:	4690      	mov	r8, r2
 8008d60:	b085      	sub	sp, #20
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	680b      	ldr	r3, [r1, #0]
 8008d66:	9001      	str	r0, [sp, #4]
 8008d68:	1c9c      	adds	r4, r3, #2
 8008d6a:	46a1      	mov	r9, r4
 8008d6c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008d70:	2830      	cmp	r0, #48	@ 0x30
 8008d72:	d0fa      	beq.n	8008d6a <__gethex+0x12>
 8008d74:	eba9 0303 	sub.w	r3, r9, r3
 8008d78:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d7c:	f7ff ffd7 	bl	8008d2e <__hexdig_fun>
 8008d80:	4605      	mov	r5, r0
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d168      	bne.n	8008e58 <__gethex+0x100>
 8008d86:	2201      	movs	r2, #1
 8008d88:	4648      	mov	r0, r9
 8008d8a:	499f      	ldr	r1, [pc, #636]	@ (8009008 <__gethex+0x2b0>)
 8008d8c:	f7ff ff14 	bl	8008bb8 <strncmp>
 8008d90:	4607      	mov	r7, r0
 8008d92:	2800      	cmp	r0, #0
 8008d94:	d167      	bne.n	8008e66 <__gethex+0x10e>
 8008d96:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008d9a:	4626      	mov	r6, r4
 8008d9c:	f7ff ffc7 	bl	8008d2e <__hexdig_fun>
 8008da0:	2800      	cmp	r0, #0
 8008da2:	d062      	beq.n	8008e6a <__gethex+0x112>
 8008da4:	4623      	mov	r3, r4
 8008da6:	7818      	ldrb	r0, [r3, #0]
 8008da8:	4699      	mov	r9, r3
 8008daa:	2830      	cmp	r0, #48	@ 0x30
 8008dac:	f103 0301 	add.w	r3, r3, #1
 8008db0:	d0f9      	beq.n	8008da6 <__gethex+0x4e>
 8008db2:	f7ff ffbc 	bl	8008d2e <__hexdig_fun>
 8008db6:	fab0 f580 	clz	r5, r0
 8008dba:	f04f 0b01 	mov.w	fp, #1
 8008dbe:	096d      	lsrs	r5, r5, #5
 8008dc0:	464a      	mov	r2, r9
 8008dc2:	4616      	mov	r6, r2
 8008dc4:	7830      	ldrb	r0, [r6, #0]
 8008dc6:	3201      	adds	r2, #1
 8008dc8:	f7ff ffb1 	bl	8008d2e <__hexdig_fun>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	d1f8      	bne.n	8008dc2 <__gethex+0x6a>
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	498c      	ldr	r1, [pc, #560]	@ (8009008 <__gethex+0x2b0>)
 8008dd6:	f7ff feef 	bl	8008bb8 <strncmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	d13f      	bne.n	8008e5e <__gethex+0x106>
 8008dde:	b944      	cbnz	r4, 8008df2 <__gethex+0x9a>
 8008de0:	1c74      	adds	r4, r6, #1
 8008de2:	4622      	mov	r2, r4
 8008de4:	4616      	mov	r6, r2
 8008de6:	7830      	ldrb	r0, [r6, #0]
 8008de8:	3201      	adds	r2, #1
 8008dea:	f7ff ffa0 	bl	8008d2e <__hexdig_fun>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d1f8      	bne.n	8008de4 <__gethex+0x8c>
 8008df2:	1ba4      	subs	r4, r4, r6
 8008df4:	00a7      	lsls	r7, r4, #2
 8008df6:	7833      	ldrb	r3, [r6, #0]
 8008df8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008dfc:	2b50      	cmp	r3, #80	@ 0x50
 8008dfe:	d13e      	bne.n	8008e7e <__gethex+0x126>
 8008e00:	7873      	ldrb	r3, [r6, #1]
 8008e02:	2b2b      	cmp	r3, #43	@ 0x2b
 8008e04:	d033      	beq.n	8008e6e <__gethex+0x116>
 8008e06:	2b2d      	cmp	r3, #45	@ 0x2d
 8008e08:	d034      	beq.n	8008e74 <__gethex+0x11c>
 8008e0a:	2400      	movs	r4, #0
 8008e0c:	1c71      	adds	r1, r6, #1
 8008e0e:	7808      	ldrb	r0, [r1, #0]
 8008e10:	f7ff ff8d 	bl	8008d2e <__hexdig_fun>
 8008e14:	1e43      	subs	r3, r0, #1
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	2b18      	cmp	r3, #24
 8008e1a:	d830      	bhi.n	8008e7e <__gethex+0x126>
 8008e1c:	f1a0 0210 	sub.w	r2, r0, #16
 8008e20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008e24:	f7ff ff83 	bl	8008d2e <__hexdig_fun>
 8008e28:	f100 3cff 	add.w	ip, r0, #4294967295
 8008e2c:	fa5f fc8c 	uxtb.w	ip, ip
 8008e30:	f1bc 0f18 	cmp.w	ip, #24
 8008e34:	f04f 030a 	mov.w	r3, #10
 8008e38:	d91e      	bls.n	8008e78 <__gethex+0x120>
 8008e3a:	b104      	cbz	r4, 8008e3e <__gethex+0xe6>
 8008e3c:	4252      	negs	r2, r2
 8008e3e:	4417      	add	r7, r2
 8008e40:	f8ca 1000 	str.w	r1, [sl]
 8008e44:	b1ed      	cbz	r5, 8008e82 <__gethex+0x12a>
 8008e46:	f1bb 0f00 	cmp.w	fp, #0
 8008e4a:	bf0c      	ite	eq
 8008e4c:	2506      	moveq	r5, #6
 8008e4e:	2500      	movne	r5, #0
 8008e50:	4628      	mov	r0, r5
 8008e52:	b005      	add	sp, #20
 8008e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e58:	2500      	movs	r5, #0
 8008e5a:	462c      	mov	r4, r5
 8008e5c:	e7b0      	b.n	8008dc0 <__gethex+0x68>
 8008e5e:	2c00      	cmp	r4, #0
 8008e60:	d1c7      	bne.n	8008df2 <__gethex+0x9a>
 8008e62:	4627      	mov	r7, r4
 8008e64:	e7c7      	b.n	8008df6 <__gethex+0x9e>
 8008e66:	464e      	mov	r6, r9
 8008e68:	462f      	mov	r7, r5
 8008e6a:	2501      	movs	r5, #1
 8008e6c:	e7c3      	b.n	8008df6 <__gethex+0x9e>
 8008e6e:	2400      	movs	r4, #0
 8008e70:	1cb1      	adds	r1, r6, #2
 8008e72:	e7cc      	b.n	8008e0e <__gethex+0xb6>
 8008e74:	2401      	movs	r4, #1
 8008e76:	e7fb      	b.n	8008e70 <__gethex+0x118>
 8008e78:	fb03 0002 	mla	r0, r3, r2, r0
 8008e7c:	e7ce      	b.n	8008e1c <__gethex+0xc4>
 8008e7e:	4631      	mov	r1, r6
 8008e80:	e7de      	b.n	8008e40 <__gethex+0xe8>
 8008e82:	4629      	mov	r1, r5
 8008e84:	eba6 0309 	sub.w	r3, r6, r9
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	2b07      	cmp	r3, #7
 8008e8c:	dc0a      	bgt.n	8008ea4 <__gethex+0x14c>
 8008e8e:	9801      	ldr	r0, [sp, #4]
 8008e90:	f7fd ff54 	bl	8006d3c <_Balloc>
 8008e94:	4604      	mov	r4, r0
 8008e96:	b940      	cbnz	r0, 8008eaa <__gethex+0x152>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	21e4      	movs	r1, #228	@ 0xe4
 8008e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800900c <__gethex+0x2b4>)
 8008e9e:	485c      	ldr	r0, [pc, #368]	@ (8009010 <__gethex+0x2b8>)
 8008ea0:	f7ff fec0 	bl	8008c24 <__assert_func>
 8008ea4:	3101      	adds	r1, #1
 8008ea6:	105b      	asrs	r3, r3, #1
 8008ea8:	e7ef      	b.n	8008e8a <__gethex+0x132>
 8008eaa:	2300      	movs	r3, #0
 8008eac:	f100 0a14 	add.w	sl, r0, #20
 8008eb0:	4655      	mov	r5, sl
 8008eb2:	469b      	mov	fp, r3
 8008eb4:	45b1      	cmp	r9, r6
 8008eb6:	d337      	bcc.n	8008f28 <__gethex+0x1d0>
 8008eb8:	f845 bb04 	str.w	fp, [r5], #4
 8008ebc:	eba5 050a 	sub.w	r5, r5, sl
 8008ec0:	10ad      	asrs	r5, r5, #2
 8008ec2:	6125      	str	r5, [r4, #16]
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	f7fe f82b 	bl	8006f20 <__hi0bits>
 8008eca:	016d      	lsls	r5, r5, #5
 8008ecc:	f8d8 6000 	ldr.w	r6, [r8]
 8008ed0:	1a2d      	subs	r5, r5, r0
 8008ed2:	42b5      	cmp	r5, r6
 8008ed4:	dd54      	ble.n	8008f80 <__gethex+0x228>
 8008ed6:	1bad      	subs	r5, r5, r6
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4620      	mov	r0, r4
 8008edc:	f7fe fbad 	bl	800763a <__any_on>
 8008ee0:	4681      	mov	r9, r0
 8008ee2:	b178      	cbz	r0, 8008f04 <__gethex+0x1ac>
 8008ee4:	f04f 0901 	mov.w	r9, #1
 8008ee8:	1e6b      	subs	r3, r5, #1
 8008eea:	1159      	asrs	r1, r3, #5
 8008eec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008ef0:	f003 021f 	and.w	r2, r3, #31
 8008ef4:	fa09 f202 	lsl.w	r2, r9, r2
 8008ef8:	420a      	tst	r2, r1
 8008efa:	d003      	beq.n	8008f04 <__gethex+0x1ac>
 8008efc:	454b      	cmp	r3, r9
 8008efe:	dc36      	bgt.n	8008f6e <__gethex+0x216>
 8008f00:	f04f 0902 	mov.w	r9, #2
 8008f04:	4629      	mov	r1, r5
 8008f06:	4620      	mov	r0, r4
 8008f08:	f7ff febe 	bl	8008c88 <rshift>
 8008f0c:	442f      	add	r7, r5
 8008f0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f12:	42bb      	cmp	r3, r7
 8008f14:	da42      	bge.n	8008f9c <__gethex+0x244>
 8008f16:	4621      	mov	r1, r4
 8008f18:	9801      	ldr	r0, [sp, #4]
 8008f1a:	f7fd ff4f 	bl	8006dbc <_Bfree>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f22:	25a3      	movs	r5, #163	@ 0xa3
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	e793      	b.n	8008e50 <__gethex+0xf8>
 8008f28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008f2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8008f2e:	d012      	beq.n	8008f56 <__gethex+0x1fe>
 8008f30:	2b20      	cmp	r3, #32
 8008f32:	d104      	bne.n	8008f3e <__gethex+0x1e6>
 8008f34:	f845 bb04 	str.w	fp, [r5], #4
 8008f38:	f04f 0b00 	mov.w	fp, #0
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	7830      	ldrb	r0, [r6, #0]
 8008f40:	9303      	str	r3, [sp, #12]
 8008f42:	f7ff fef4 	bl	8008d2e <__hexdig_fun>
 8008f46:	9b03      	ldr	r3, [sp, #12]
 8008f48:	f000 000f 	and.w	r0, r0, #15
 8008f4c:	4098      	lsls	r0, r3
 8008f4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f52:	3304      	adds	r3, #4
 8008f54:	e7ae      	b.n	8008eb4 <__gethex+0x15c>
 8008f56:	45b1      	cmp	r9, r6
 8008f58:	d8ea      	bhi.n	8008f30 <__gethex+0x1d8>
 8008f5a:	2201      	movs	r2, #1
 8008f5c:	4630      	mov	r0, r6
 8008f5e:	492a      	ldr	r1, [pc, #168]	@ (8009008 <__gethex+0x2b0>)
 8008f60:	9303      	str	r3, [sp, #12]
 8008f62:	f7ff fe29 	bl	8008bb8 <strncmp>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d1e1      	bne.n	8008f30 <__gethex+0x1d8>
 8008f6c:	e7a2      	b.n	8008eb4 <__gethex+0x15c>
 8008f6e:	4620      	mov	r0, r4
 8008f70:	1ea9      	subs	r1, r5, #2
 8008f72:	f7fe fb62 	bl	800763a <__any_on>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0c2      	beq.n	8008f00 <__gethex+0x1a8>
 8008f7a:	f04f 0903 	mov.w	r9, #3
 8008f7e:	e7c1      	b.n	8008f04 <__gethex+0x1ac>
 8008f80:	da09      	bge.n	8008f96 <__gethex+0x23e>
 8008f82:	1b75      	subs	r5, r6, r5
 8008f84:	4621      	mov	r1, r4
 8008f86:	462a      	mov	r2, r5
 8008f88:	9801      	ldr	r0, [sp, #4]
 8008f8a:	f7fe f927 	bl	80071dc <__lshift>
 8008f8e:	4604      	mov	r4, r0
 8008f90:	1b7f      	subs	r7, r7, r5
 8008f92:	f100 0a14 	add.w	sl, r0, #20
 8008f96:	f04f 0900 	mov.w	r9, #0
 8008f9a:	e7b8      	b.n	8008f0e <__gethex+0x1b6>
 8008f9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008fa0:	42bd      	cmp	r5, r7
 8008fa2:	dd6f      	ble.n	8009084 <__gethex+0x32c>
 8008fa4:	1bed      	subs	r5, r5, r7
 8008fa6:	42ae      	cmp	r6, r5
 8008fa8:	dc34      	bgt.n	8009014 <__gethex+0x2bc>
 8008faa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d022      	beq.n	8008ff8 <__gethex+0x2a0>
 8008fb2:	2b03      	cmp	r3, #3
 8008fb4:	d024      	beq.n	8009000 <__gethex+0x2a8>
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d115      	bne.n	8008fe6 <__gethex+0x28e>
 8008fba:	42ae      	cmp	r6, r5
 8008fbc:	d113      	bne.n	8008fe6 <__gethex+0x28e>
 8008fbe:	2e01      	cmp	r6, #1
 8008fc0:	d10b      	bne.n	8008fda <__gethex+0x282>
 8008fc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008fc6:	9a02      	ldr	r2, [sp, #8]
 8008fc8:	2562      	movs	r5, #98	@ 0x62
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	2301      	movs	r3, #1
 8008fce:	6123      	str	r3, [r4, #16]
 8008fd0:	f8ca 3000 	str.w	r3, [sl]
 8008fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fd6:	601c      	str	r4, [r3, #0]
 8008fd8:	e73a      	b.n	8008e50 <__gethex+0xf8>
 8008fda:	4620      	mov	r0, r4
 8008fdc:	1e71      	subs	r1, r6, #1
 8008fde:	f7fe fb2c 	bl	800763a <__any_on>
 8008fe2:	2800      	cmp	r0, #0
 8008fe4:	d1ed      	bne.n	8008fc2 <__gethex+0x26a>
 8008fe6:	4621      	mov	r1, r4
 8008fe8:	9801      	ldr	r0, [sp, #4]
 8008fea:	f7fd fee7 	bl	8006dbc <_Bfree>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ff2:	2550      	movs	r5, #80	@ 0x50
 8008ff4:	6013      	str	r3, [r2, #0]
 8008ff6:	e72b      	b.n	8008e50 <__gethex+0xf8>
 8008ff8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1f3      	bne.n	8008fe6 <__gethex+0x28e>
 8008ffe:	e7e0      	b.n	8008fc2 <__gethex+0x26a>
 8009000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1dd      	bne.n	8008fc2 <__gethex+0x26a>
 8009006:	e7ee      	b.n	8008fe6 <__gethex+0x28e>
 8009008:	080096cb 	.word	0x080096cb
 800900c:	08009661 	.word	0x08009661
 8009010:	08009722 	.word	0x08009722
 8009014:	1e6f      	subs	r7, r5, #1
 8009016:	f1b9 0f00 	cmp.w	r9, #0
 800901a:	d130      	bne.n	800907e <__gethex+0x326>
 800901c:	b127      	cbz	r7, 8009028 <__gethex+0x2d0>
 800901e:	4639      	mov	r1, r7
 8009020:	4620      	mov	r0, r4
 8009022:	f7fe fb0a 	bl	800763a <__any_on>
 8009026:	4681      	mov	r9, r0
 8009028:	2301      	movs	r3, #1
 800902a:	4629      	mov	r1, r5
 800902c:	1b76      	subs	r6, r6, r5
 800902e:	2502      	movs	r5, #2
 8009030:	117a      	asrs	r2, r7, #5
 8009032:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009036:	f007 071f 	and.w	r7, r7, #31
 800903a:	40bb      	lsls	r3, r7
 800903c:	4213      	tst	r3, r2
 800903e:	4620      	mov	r0, r4
 8009040:	bf18      	it	ne
 8009042:	f049 0902 	orrne.w	r9, r9, #2
 8009046:	f7ff fe1f 	bl	8008c88 <rshift>
 800904a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800904e:	f1b9 0f00 	cmp.w	r9, #0
 8009052:	d047      	beq.n	80090e4 <__gethex+0x38c>
 8009054:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009058:	2b02      	cmp	r3, #2
 800905a:	d015      	beq.n	8009088 <__gethex+0x330>
 800905c:	2b03      	cmp	r3, #3
 800905e:	d017      	beq.n	8009090 <__gethex+0x338>
 8009060:	2b01      	cmp	r3, #1
 8009062:	d109      	bne.n	8009078 <__gethex+0x320>
 8009064:	f019 0f02 	tst.w	r9, #2
 8009068:	d006      	beq.n	8009078 <__gethex+0x320>
 800906a:	f8da 3000 	ldr.w	r3, [sl]
 800906e:	ea49 0903 	orr.w	r9, r9, r3
 8009072:	f019 0f01 	tst.w	r9, #1
 8009076:	d10e      	bne.n	8009096 <__gethex+0x33e>
 8009078:	f045 0510 	orr.w	r5, r5, #16
 800907c:	e032      	b.n	80090e4 <__gethex+0x38c>
 800907e:	f04f 0901 	mov.w	r9, #1
 8009082:	e7d1      	b.n	8009028 <__gethex+0x2d0>
 8009084:	2501      	movs	r5, #1
 8009086:	e7e2      	b.n	800904e <__gethex+0x2f6>
 8009088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800908a:	f1c3 0301 	rsb	r3, r3, #1
 800908e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009090:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009092:	2b00      	cmp	r3, #0
 8009094:	d0f0      	beq.n	8009078 <__gethex+0x320>
 8009096:	f04f 0c00 	mov.w	ip, #0
 800909a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800909e:	f104 0314 	add.w	r3, r4, #20
 80090a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80090a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80090b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80090b4:	d01b      	beq.n	80090ee <__gethex+0x396>
 80090b6:	3201      	adds	r2, #1
 80090b8:	6002      	str	r2, [r0, #0]
 80090ba:	2d02      	cmp	r5, #2
 80090bc:	f104 0314 	add.w	r3, r4, #20
 80090c0:	d13c      	bne.n	800913c <__gethex+0x3e4>
 80090c2:	f8d8 2000 	ldr.w	r2, [r8]
 80090c6:	3a01      	subs	r2, #1
 80090c8:	42b2      	cmp	r2, r6
 80090ca:	d109      	bne.n	80090e0 <__gethex+0x388>
 80090cc:	2201      	movs	r2, #1
 80090ce:	1171      	asrs	r1, r6, #5
 80090d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80090d4:	f006 061f 	and.w	r6, r6, #31
 80090d8:	fa02 f606 	lsl.w	r6, r2, r6
 80090dc:	421e      	tst	r6, r3
 80090de:	d13a      	bne.n	8009156 <__gethex+0x3fe>
 80090e0:	f045 0520 	orr.w	r5, r5, #32
 80090e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80090e6:	601c      	str	r4, [r3, #0]
 80090e8:	9b02      	ldr	r3, [sp, #8]
 80090ea:	601f      	str	r7, [r3, #0]
 80090ec:	e6b0      	b.n	8008e50 <__gethex+0xf8>
 80090ee:	4299      	cmp	r1, r3
 80090f0:	f843 cc04 	str.w	ip, [r3, #-4]
 80090f4:	d8d9      	bhi.n	80090aa <__gethex+0x352>
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	459b      	cmp	fp, r3
 80090fa:	db17      	blt.n	800912c <__gethex+0x3d4>
 80090fc:	6861      	ldr	r1, [r4, #4]
 80090fe:	9801      	ldr	r0, [sp, #4]
 8009100:	3101      	adds	r1, #1
 8009102:	f7fd fe1b 	bl	8006d3c <_Balloc>
 8009106:	4681      	mov	r9, r0
 8009108:	b918      	cbnz	r0, 8009112 <__gethex+0x3ba>
 800910a:	4602      	mov	r2, r0
 800910c:	2184      	movs	r1, #132	@ 0x84
 800910e:	4b19      	ldr	r3, [pc, #100]	@ (8009174 <__gethex+0x41c>)
 8009110:	e6c5      	b.n	8008e9e <__gethex+0x146>
 8009112:	6922      	ldr	r2, [r4, #16]
 8009114:	f104 010c 	add.w	r1, r4, #12
 8009118:	3202      	adds	r2, #2
 800911a:	0092      	lsls	r2, r2, #2
 800911c:	300c      	adds	r0, #12
 800911e:	f7ff fd6d 	bl	8008bfc <memcpy>
 8009122:	4621      	mov	r1, r4
 8009124:	9801      	ldr	r0, [sp, #4]
 8009126:	f7fd fe49 	bl	8006dbc <_Bfree>
 800912a:	464c      	mov	r4, r9
 800912c:	6923      	ldr	r3, [r4, #16]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	6122      	str	r2, [r4, #16]
 8009132:	2201      	movs	r2, #1
 8009134:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009138:	615a      	str	r2, [r3, #20]
 800913a:	e7be      	b.n	80090ba <__gethex+0x362>
 800913c:	6922      	ldr	r2, [r4, #16]
 800913e:	455a      	cmp	r2, fp
 8009140:	dd0b      	ble.n	800915a <__gethex+0x402>
 8009142:	2101      	movs	r1, #1
 8009144:	4620      	mov	r0, r4
 8009146:	f7ff fd9f 	bl	8008c88 <rshift>
 800914a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800914e:	3701      	adds	r7, #1
 8009150:	42bb      	cmp	r3, r7
 8009152:	f6ff aee0 	blt.w	8008f16 <__gethex+0x1be>
 8009156:	2501      	movs	r5, #1
 8009158:	e7c2      	b.n	80090e0 <__gethex+0x388>
 800915a:	f016 061f 	ands.w	r6, r6, #31
 800915e:	d0fa      	beq.n	8009156 <__gethex+0x3fe>
 8009160:	4453      	add	r3, sl
 8009162:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009166:	f7fd fedb 	bl	8006f20 <__hi0bits>
 800916a:	f1c6 0620 	rsb	r6, r6, #32
 800916e:	42b0      	cmp	r0, r6
 8009170:	dbe7      	blt.n	8009142 <__gethex+0x3ea>
 8009172:	e7f0      	b.n	8009156 <__gethex+0x3fe>
 8009174:	08009661 	.word	0x08009661

08009178 <L_shift>:
 8009178:	f1c2 0208 	rsb	r2, r2, #8
 800917c:	0092      	lsls	r2, r2, #2
 800917e:	b570      	push	{r4, r5, r6, lr}
 8009180:	f1c2 0620 	rsb	r6, r2, #32
 8009184:	6843      	ldr	r3, [r0, #4]
 8009186:	6804      	ldr	r4, [r0, #0]
 8009188:	fa03 f506 	lsl.w	r5, r3, r6
 800918c:	432c      	orrs	r4, r5
 800918e:	40d3      	lsrs	r3, r2
 8009190:	6004      	str	r4, [r0, #0]
 8009192:	f840 3f04 	str.w	r3, [r0, #4]!
 8009196:	4288      	cmp	r0, r1
 8009198:	d3f4      	bcc.n	8009184 <L_shift+0xc>
 800919a:	bd70      	pop	{r4, r5, r6, pc}

0800919c <__match>:
 800919c:	b530      	push	{r4, r5, lr}
 800919e:	6803      	ldr	r3, [r0, #0]
 80091a0:	3301      	adds	r3, #1
 80091a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091a6:	b914      	cbnz	r4, 80091ae <__match+0x12>
 80091a8:	6003      	str	r3, [r0, #0]
 80091aa:	2001      	movs	r0, #1
 80091ac:	bd30      	pop	{r4, r5, pc}
 80091ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091b2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80091b6:	2d19      	cmp	r5, #25
 80091b8:	bf98      	it	ls
 80091ba:	3220      	addls	r2, #32
 80091bc:	42a2      	cmp	r2, r4
 80091be:	d0f0      	beq.n	80091a2 <__match+0x6>
 80091c0:	2000      	movs	r0, #0
 80091c2:	e7f3      	b.n	80091ac <__match+0x10>

080091c4 <__hexnan>:
 80091c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c8:	2500      	movs	r5, #0
 80091ca:	680b      	ldr	r3, [r1, #0]
 80091cc:	4682      	mov	sl, r0
 80091ce:	115e      	asrs	r6, r3, #5
 80091d0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091d4:	f013 031f 	ands.w	r3, r3, #31
 80091d8:	bf18      	it	ne
 80091da:	3604      	addne	r6, #4
 80091dc:	1f37      	subs	r7, r6, #4
 80091de:	4690      	mov	r8, r2
 80091e0:	46b9      	mov	r9, r7
 80091e2:	463c      	mov	r4, r7
 80091e4:	46ab      	mov	fp, r5
 80091e6:	b087      	sub	sp, #28
 80091e8:	6801      	ldr	r1, [r0, #0]
 80091ea:	9301      	str	r3, [sp, #4]
 80091ec:	f846 5c04 	str.w	r5, [r6, #-4]
 80091f0:	9502      	str	r5, [sp, #8]
 80091f2:	784a      	ldrb	r2, [r1, #1]
 80091f4:	1c4b      	adds	r3, r1, #1
 80091f6:	9303      	str	r3, [sp, #12]
 80091f8:	b342      	cbz	r2, 800924c <__hexnan+0x88>
 80091fa:	4610      	mov	r0, r2
 80091fc:	9105      	str	r1, [sp, #20]
 80091fe:	9204      	str	r2, [sp, #16]
 8009200:	f7ff fd95 	bl	8008d2e <__hexdig_fun>
 8009204:	2800      	cmp	r0, #0
 8009206:	d151      	bne.n	80092ac <__hexnan+0xe8>
 8009208:	9a04      	ldr	r2, [sp, #16]
 800920a:	9905      	ldr	r1, [sp, #20]
 800920c:	2a20      	cmp	r2, #32
 800920e:	d818      	bhi.n	8009242 <__hexnan+0x7e>
 8009210:	9b02      	ldr	r3, [sp, #8]
 8009212:	459b      	cmp	fp, r3
 8009214:	dd13      	ble.n	800923e <__hexnan+0x7a>
 8009216:	454c      	cmp	r4, r9
 8009218:	d206      	bcs.n	8009228 <__hexnan+0x64>
 800921a:	2d07      	cmp	r5, #7
 800921c:	dc04      	bgt.n	8009228 <__hexnan+0x64>
 800921e:	462a      	mov	r2, r5
 8009220:	4649      	mov	r1, r9
 8009222:	4620      	mov	r0, r4
 8009224:	f7ff ffa8 	bl	8009178 <L_shift>
 8009228:	4544      	cmp	r4, r8
 800922a:	d952      	bls.n	80092d2 <__hexnan+0x10e>
 800922c:	2300      	movs	r3, #0
 800922e:	f1a4 0904 	sub.w	r9, r4, #4
 8009232:	f844 3c04 	str.w	r3, [r4, #-4]
 8009236:	461d      	mov	r5, r3
 8009238:	464c      	mov	r4, r9
 800923a:	f8cd b008 	str.w	fp, [sp, #8]
 800923e:	9903      	ldr	r1, [sp, #12]
 8009240:	e7d7      	b.n	80091f2 <__hexnan+0x2e>
 8009242:	2a29      	cmp	r2, #41	@ 0x29
 8009244:	d157      	bne.n	80092f6 <__hexnan+0x132>
 8009246:	3102      	adds	r1, #2
 8009248:	f8ca 1000 	str.w	r1, [sl]
 800924c:	f1bb 0f00 	cmp.w	fp, #0
 8009250:	d051      	beq.n	80092f6 <__hexnan+0x132>
 8009252:	454c      	cmp	r4, r9
 8009254:	d206      	bcs.n	8009264 <__hexnan+0xa0>
 8009256:	2d07      	cmp	r5, #7
 8009258:	dc04      	bgt.n	8009264 <__hexnan+0xa0>
 800925a:	462a      	mov	r2, r5
 800925c:	4649      	mov	r1, r9
 800925e:	4620      	mov	r0, r4
 8009260:	f7ff ff8a 	bl	8009178 <L_shift>
 8009264:	4544      	cmp	r4, r8
 8009266:	d936      	bls.n	80092d6 <__hexnan+0x112>
 8009268:	4623      	mov	r3, r4
 800926a:	f1a8 0204 	sub.w	r2, r8, #4
 800926e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009272:	429f      	cmp	r7, r3
 8009274:	f842 1f04 	str.w	r1, [r2, #4]!
 8009278:	d2f9      	bcs.n	800926e <__hexnan+0xaa>
 800927a:	1b3b      	subs	r3, r7, r4
 800927c:	f023 0303 	bic.w	r3, r3, #3
 8009280:	3304      	adds	r3, #4
 8009282:	3401      	adds	r4, #1
 8009284:	3e03      	subs	r6, #3
 8009286:	42b4      	cmp	r4, r6
 8009288:	bf88      	it	hi
 800928a:	2304      	movhi	r3, #4
 800928c:	2200      	movs	r2, #0
 800928e:	4443      	add	r3, r8
 8009290:	f843 2b04 	str.w	r2, [r3], #4
 8009294:	429f      	cmp	r7, r3
 8009296:	d2fb      	bcs.n	8009290 <__hexnan+0xcc>
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	b91b      	cbnz	r3, 80092a4 <__hexnan+0xe0>
 800929c:	4547      	cmp	r7, r8
 800929e:	d128      	bne.n	80092f2 <__hexnan+0x12e>
 80092a0:	2301      	movs	r3, #1
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	2005      	movs	r0, #5
 80092a6:	b007      	add	sp, #28
 80092a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ac:	3501      	adds	r5, #1
 80092ae:	2d08      	cmp	r5, #8
 80092b0:	f10b 0b01 	add.w	fp, fp, #1
 80092b4:	dd06      	ble.n	80092c4 <__hexnan+0x100>
 80092b6:	4544      	cmp	r4, r8
 80092b8:	d9c1      	bls.n	800923e <__hexnan+0x7a>
 80092ba:	2300      	movs	r3, #0
 80092bc:	2501      	movs	r5, #1
 80092be:	f844 3c04 	str.w	r3, [r4, #-4]
 80092c2:	3c04      	subs	r4, #4
 80092c4:	6822      	ldr	r2, [r4, #0]
 80092c6:	f000 000f 	and.w	r0, r0, #15
 80092ca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80092ce:	6020      	str	r0, [r4, #0]
 80092d0:	e7b5      	b.n	800923e <__hexnan+0x7a>
 80092d2:	2508      	movs	r5, #8
 80092d4:	e7b3      	b.n	800923e <__hexnan+0x7a>
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0dd      	beq.n	8009298 <__hexnan+0xd4>
 80092dc:	f04f 32ff 	mov.w	r2, #4294967295
 80092e0:	f1c3 0320 	rsb	r3, r3, #32
 80092e4:	40da      	lsrs	r2, r3
 80092e6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80092ea:	4013      	ands	r3, r2
 80092ec:	f846 3c04 	str.w	r3, [r6, #-4]
 80092f0:	e7d2      	b.n	8009298 <__hexnan+0xd4>
 80092f2:	3f04      	subs	r7, #4
 80092f4:	e7d0      	b.n	8009298 <__hexnan+0xd4>
 80092f6:	2004      	movs	r0, #4
 80092f8:	e7d5      	b.n	80092a6 <__hexnan+0xe2>

080092fa <__ascii_mbtowc>:
 80092fa:	b082      	sub	sp, #8
 80092fc:	b901      	cbnz	r1, 8009300 <__ascii_mbtowc+0x6>
 80092fe:	a901      	add	r1, sp, #4
 8009300:	b142      	cbz	r2, 8009314 <__ascii_mbtowc+0x1a>
 8009302:	b14b      	cbz	r3, 8009318 <__ascii_mbtowc+0x1e>
 8009304:	7813      	ldrb	r3, [r2, #0]
 8009306:	600b      	str	r3, [r1, #0]
 8009308:	7812      	ldrb	r2, [r2, #0]
 800930a:	1e10      	subs	r0, r2, #0
 800930c:	bf18      	it	ne
 800930e:	2001      	movne	r0, #1
 8009310:	b002      	add	sp, #8
 8009312:	4770      	bx	lr
 8009314:	4610      	mov	r0, r2
 8009316:	e7fb      	b.n	8009310 <__ascii_mbtowc+0x16>
 8009318:	f06f 0001 	mvn.w	r0, #1
 800931c:	e7f8      	b.n	8009310 <__ascii_mbtowc+0x16>

0800931e <_realloc_r>:
 800931e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009322:	4607      	mov	r7, r0
 8009324:	4614      	mov	r4, r2
 8009326:	460d      	mov	r5, r1
 8009328:	b921      	cbnz	r1, 8009334 <_realloc_r+0x16>
 800932a:	4611      	mov	r1, r2
 800932c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009330:	f7fd bc78 	b.w	8006c24 <_malloc_r>
 8009334:	b92a      	cbnz	r2, 8009342 <_realloc_r+0x24>
 8009336:	f7fd fc03 	bl	8006b40 <_free_r>
 800933a:	4625      	mov	r5, r4
 800933c:	4628      	mov	r0, r5
 800933e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009342:	f000 f8c4 	bl	80094ce <_malloc_usable_size_r>
 8009346:	4284      	cmp	r4, r0
 8009348:	4606      	mov	r6, r0
 800934a:	d802      	bhi.n	8009352 <_realloc_r+0x34>
 800934c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009350:	d8f4      	bhi.n	800933c <_realloc_r+0x1e>
 8009352:	4621      	mov	r1, r4
 8009354:	4638      	mov	r0, r7
 8009356:	f7fd fc65 	bl	8006c24 <_malloc_r>
 800935a:	4680      	mov	r8, r0
 800935c:	b908      	cbnz	r0, 8009362 <_realloc_r+0x44>
 800935e:	4645      	mov	r5, r8
 8009360:	e7ec      	b.n	800933c <_realloc_r+0x1e>
 8009362:	42b4      	cmp	r4, r6
 8009364:	4622      	mov	r2, r4
 8009366:	4629      	mov	r1, r5
 8009368:	bf28      	it	cs
 800936a:	4632      	movcs	r2, r6
 800936c:	f7ff fc46 	bl	8008bfc <memcpy>
 8009370:	4629      	mov	r1, r5
 8009372:	4638      	mov	r0, r7
 8009374:	f7fd fbe4 	bl	8006b40 <_free_r>
 8009378:	e7f1      	b.n	800935e <_realloc_r+0x40>

0800937a <__ascii_wctomb>:
 800937a:	4603      	mov	r3, r0
 800937c:	4608      	mov	r0, r1
 800937e:	b141      	cbz	r1, 8009392 <__ascii_wctomb+0x18>
 8009380:	2aff      	cmp	r2, #255	@ 0xff
 8009382:	d904      	bls.n	800938e <__ascii_wctomb+0x14>
 8009384:	228a      	movs	r2, #138	@ 0x8a
 8009386:	f04f 30ff 	mov.w	r0, #4294967295
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	4770      	bx	lr
 800938e:	2001      	movs	r0, #1
 8009390:	700a      	strb	r2, [r1, #0]
 8009392:	4770      	bx	lr

08009394 <fiprintf>:
 8009394:	b40e      	push	{r1, r2, r3}
 8009396:	b503      	push	{r0, r1, lr}
 8009398:	4601      	mov	r1, r0
 800939a:	ab03      	add	r3, sp, #12
 800939c:	4805      	ldr	r0, [pc, #20]	@ (80093b4 <fiprintf+0x20>)
 800939e:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a2:	6800      	ldr	r0, [r0, #0]
 80093a4:	9301      	str	r3, [sp, #4]
 80093a6:	f7ff f965 	bl	8008674 <_vfiprintf_r>
 80093aa:	b002      	add	sp, #8
 80093ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b0:	b003      	add	sp, #12
 80093b2:	4770      	bx	lr
 80093b4:	2000001c 	.word	0x2000001c

080093b8 <__swhatbuf_r>:
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	460c      	mov	r4, r1
 80093bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c0:	4615      	mov	r5, r2
 80093c2:	2900      	cmp	r1, #0
 80093c4:	461e      	mov	r6, r3
 80093c6:	b096      	sub	sp, #88	@ 0x58
 80093c8:	da0c      	bge.n	80093e4 <__swhatbuf_r+0x2c>
 80093ca:	89a3      	ldrh	r3, [r4, #12]
 80093cc:	2100      	movs	r1, #0
 80093ce:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80093d2:	bf14      	ite	ne
 80093d4:	2340      	movne	r3, #64	@ 0x40
 80093d6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80093da:	2000      	movs	r0, #0
 80093dc:	6031      	str	r1, [r6, #0]
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	b016      	add	sp, #88	@ 0x58
 80093e2:	bd70      	pop	{r4, r5, r6, pc}
 80093e4:	466a      	mov	r2, sp
 80093e6:	f000 f849 	bl	800947c <_fstat_r>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	dbed      	blt.n	80093ca <__swhatbuf_r+0x12>
 80093ee:	9901      	ldr	r1, [sp, #4]
 80093f0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80093f4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80093f8:	4259      	negs	r1, r3
 80093fa:	4159      	adcs	r1, r3
 80093fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009400:	e7eb      	b.n	80093da <__swhatbuf_r+0x22>

08009402 <__smakebuf_r>:
 8009402:	898b      	ldrh	r3, [r1, #12]
 8009404:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009406:	079d      	lsls	r5, r3, #30
 8009408:	4606      	mov	r6, r0
 800940a:	460c      	mov	r4, r1
 800940c:	d507      	bpl.n	800941e <__smakebuf_r+0x1c>
 800940e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	6123      	str	r3, [r4, #16]
 8009416:	2301      	movs	r3, #1
 8009418:	6163      	str	r3, [r4, #20]
 800941a:	b003      	add	sp, #12
 800941c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800941e:	466a      	mov	r2, sp
 8009420:	ab01      	add	r3, sp, #4
 8009422:	f7ff ffc9 	bl	80093b8 <__swhatbuf_r>
 8009426:	9f00      	ldr	r7, [sp, #0]
 8009428:	4605      	mov	r5, r0
 800942a:	4639      	mov	r1, r7
 800942c:	4630      	mov	r0, r6
 800942e:	f7fd fbf9 	bl	8006c24 <_malloc_r>
 8009432:	b948      	cbnz	r0, 8009448 <__smakebuf_r+0x46>
 8009434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009438:	059a      	lsls	r2, r3, #22
 800943a:	d4ee      	bmi.n	800941a <__smakebuf_r+0x18>
 800943c:	f023 0303 	bic.w	r3, r3, #3
 8009440:	f043 0302 	orr.w	r3, r3, #2
 8009444:	81a3      	strh	r3, [r4, #12]
 8009446:	e7e2      	b.n	800940e <__smakebuf_r+0xc>
 8009448:	89a3      	ldrh	r3, [r4, #12]
 800944a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800944e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009452:	81a3      	strh	r3, [r4, #12]
 8009454:	9b01      	ldr	r3, [sp, #4]
 8009456:	6020      	str	r0, [r4, #0]
 8009458:	b15b      	cbz	r3, 8009472 <__smakebuf_r+0x70>
 800945a:	4630      	mov	r0, r6
 800945c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009460:	f000 f81e 	bl	80094a0 <_isatty_r>
 8009464:	b128      	cbz	r0, 8009472 <__smakebuf_r+0x70>
 8009466:	89a3      	ldrh	r3, [r4, #12]
 8009468:	f023 0303 	bic.w	r3, r3, #3
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	89a3      	ldrh	r3, [r4, #12]
 8009474:	431d      	orrs	r5, r3
 8009476:	81a5      	strh	r5, [r4, #12]
 8009478:	e7cf      	b.n	800941a <__smakebuf_r+0x18>
	...

0800947c <_fstat_r>:
 800947c:	b538      	push	{r3, r4, r5, lr}
 800947e:	2300      	movs	r3, #0
 8009480:	4d06      	ldr	r5, [pc, #24]	@ (800949c <_fstat_r+0x20>)
 8009482:	4604      	mov	r4, r0
 8009484:	4608      	mov	r0, r1
 8009486:	4611      	mov	r1, r2
 8009488:	602b      	str	r3, [r5, #0]
 800948a:	f7f8 fce2 	bl	8001e52 <_fstat>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d102      	bne.n	8009498 <_fstat_r+0x1c>
 8009492:	682b      	ldr	r3, [r5, #0]
 8009494:	b103      	cbz	r3, 8009498 <_fstat_r+0x1c>
 8009496:	6023      	str	r3, [r4, #0]
 8009498:	bd38      	pop	{r3, r4, r5, pc}
 800949a:	bf00      	nop
 800949c:	200009ec 	.word	0x200009ec

080094a0 <_isatty_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	2300      	movs	r3, #0
 80094a4:	4d05      	ldr	r5, [pc, #20]	@ (80094bc <_isatty_r+0x1c>)
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	602b      	str	r3, [r5, #0]
 80094ac:	f7f8 fce0 	bl	8001e70 <_isatty>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_isatty_r+0x1a>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_isatty_r+0x1a>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	200009ec 	.word	0x200009ec

080094c0 <abort>:
 80094c0:	2006      	movs	r0, #6
 80094c2:	b508      	push	{r3, lr}
 80094c4:	f000 f834 	bl	8009530 <raise>
 80094c8:	2001      	movs	r0, #1
 80094ca:	f7f8 fc73 	bl	8001db4 <_exit>

080094ce <_malloc_usable_size_r>:
 80094ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094d2:	1f18      	subs	r0, r3, #4
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	bfbc      	itt	lt
 80094d8:	580b      	ldrlt	r3, [r1, r0]
 80094da:	18c0      	addlt	r0, r0, r3
 80094dc:	4770      	bx	lr

080094de <_raise_r>:
 80094de:	291f      	cmp	r1, #31
 80094e0:	b538      	push	{r3, r4, r5, lr}
 80094e2:	4605      	mov	r5, r0
 80094e4:	460c      	mov	r4, r1
 80094e6:	d904      	bls.n	80094f2 <_raise_r+0x14>
 80094e8:	2316      	movs	r3, #22
 80094ea:	6003      	str	r3, [r0, #0]
 80094ec:	f04f 30ff 	mov.w	r0, #4294967295
 80094f0:	bd38      	pop	{r3, r4, r5, pc}
 80094f2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80094f4:	b112      	cbz	r2, 80094fc <_raise_r+0x1e>
 80094f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80094fa:	b94b      	cbnz	r3, 8009510 <_raise_r+0x32>
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 f831 	bl	8009564 <_getpid_r>
 8009502:	4622      	mov	r2, r4
 8009504:	4601      	mov	r1, r0
 8009506:	4628      	mov	r0, r5
 8009508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800950c:	f000 b818 	b.w	8009540 <_kill_r>
 8009510:	2b01      	cmp	r3, #1
 8009512:	d00a      	beq.n	800952a <_raise_r+0x4c>
 8009514:	1c59      	adds	r1, r3, #1
 8009516:	d103      	bne.n	8009520 <_raise_r+0x42>
 8009518:	2316      	movs	r3, #22
 800951a:	6003      	str	r3, [r0, #0]
 800951c:	2001      	movs	r0, #1
 800951e:	e7e7      	b.n	80094f0 <_raise_r+0x12>
 8009520:	2100      	movs	r1, #0
 8009522:	4620      	mov	r0, r4
 8009524:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009528:	4798      	blx	r3
 800952a:	2000      	movs	r0, #0
 800952c:	e7e0      	b.n	80094f0 <_raise_r+0x12>
	...

08009530 <raise>:
 8009530:	4b02      	ldr	r3, [pc, #8]	@ (800953c <raise+0xc>)
 8009532:	4601      	mov	r1, r0
 8009534:	6818      	ldr	r0, [r3, #0]
 8009536:	f7ff bfd2 	b.w	80094de <_raise_r>
 800953a:	bf00      	nop
 800953c:	2000001c 	.word	0x2000001c

08009540 <_kill_r>:
 8009540:	b538      	push	{r3, r4, r5, lr}
 8009542:	2300      	movs	r3, #0
 8009544:	4d06      	ldr	r5, [pc, #24]	@ (8009560 <_kill_r+0x20>)
 8009546:	4604      	mov	r4, r0
 8009548:	4608      	mov	r0, r1
 800954a:	4611      	mov	r1, r2
 800954c:	602b      	str	r3, [r5, #0]
 800954e:	f7f8 fc21 	bl	8001d94 <_kill>
 8009552:	1c43      	adds	r3, r0, #1
 8009554:	d102      	bne.n	800955c <_kill_r+0x1c>
 8009556:	682b      	ldr	r3, [r5, #0]
 8009558:	b103      	cbz	r3, 800955c <_kill_r+0x1c>
 800955a:	6023      	str	r3, [r4, #0]
 800955c:	bd38      	pop	{r3, r4, r5, pc}
 800955e:	bf00      	nop
 8009560:	200009ec 	.word	0x200009ec

08009564 <_getpid_r>:
 8009564:	f7f8 bc0f 	b.w	8001d86 <_getpid>

08009568 <_init>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr

08009574 <_fini>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr
