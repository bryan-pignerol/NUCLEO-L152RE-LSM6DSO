
NUCLEO-L152RE-LSM6DSO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfd0  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013a8  0800d110  0800d110  0000e110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e4b8  0800e4b8  000101ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e4b8  0800e4b8  0000f4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e4c0  0800e4c0  000101ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e4c0  0800e4c0  0000f4c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e4c4  0800e4c4  0000f4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800e4c8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001194  200001ec  0800e6b4  000101ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001380  0800e6b4  00010380  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e61d  00000000  00000000  00010215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ae9  00000000  00000000  0002e832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c50  00000000  00000000  00031320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000160a  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199ef  00000000  00000000  0003457a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aab6  00000000  00000000  0004df69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a209f  00000000  00000000  00068a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  0010aabe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009578  00000000  00000000  0010ab48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  001140c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d0f8 	.word	0x0800d0f8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	0800d0f8 	.word	0x0800d0f8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b9c2 	b.w	8001528 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f83c 	bl	8001228 <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__aeabi_d2lz>:
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	2300      	movs	r3, #0
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	f7ff fc11 	bl	80009ec <__aeabi_dcmplt>
 80011ca:	b928      	cbnz	r0, 80011d8 <__aeabi_d2lz+0x1c>
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d4:	f000 b80a 	b.w	80011ec <__aeabi_d2ulz>
 80011d8:	4620      	mov	r0, r4
 80011da:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011de:	f000 f805 	bl	80011ec <__aeabi_d2ulz>
 80011e2:	4240      	negs	r0, r0
 80011e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	bf00      	nop

080011ec <__aeabi_d2ulz>:
 80011ec:	b5d0      	push	{r4, r6, r7, lr}
 80011ee:	2200      	movs	r2, #0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <__aeabi_d2ulz+0x34>)
 80011f2:	4606      	mov	r6, r0
 80011f4:	460f      	mov	r7, r1
 80011f6:	f7ff f987 	bl	8000508 <__aeabi_dmul>
 80011fa:	f7ff fc5d 	bl	8000ab8 <__aeabi_d2uiz>
 80011fe:	4604      	mov	r4, r0
 8001200:	f7ff f908 	bl	8000414 <__aeabi_ui2d>
 8001204:	2200      	movs	r2, #0
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <__aeabi_d2ulz+0x38>)
 8001208:	f7ff f97e 	bl	8000508 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4630      	mov	r0, r6
 8001212:	4639      	mov	r1, r7
 8001214:	f7fe ffc0 	bl	8000198 <__aeabi_dsub>
 8001218:	f7ff fc4e 	bl	8000ab8 <__aeabi_d2uiz>
 800121c:	4621      	mov	r1, r4
 800121e:	bdd0      	pop	{r4, r6, r7, pc}
 8001220:	3df00000 	.word	0x3df00000
 8001224:	41f00000 	.word	0x41f00000

08001228 <__udivmoddi4>:
 8001228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122c:	9d08      	ldr	r5, [sp, #32]
 800122e:	468e      	mov	lr, r1
 8001230:	4604      	mov	r4, r0
 8001232:	4688      	mov	r8, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d14a      	bne.n	80012ce <__udivmoddi4+0xa6>
 8001238:	428a      	cmp	r2, r1
 800123a:	4617      	mov	r7, r2
 800123c:	d962      	bls.n	8001304 <__udivmoddi4+0xdc>
 800123e:	fab2 f682 	clz	r6, r2
 8001242:	b14e      	cbz	r6, 8001258 <__udivmoddi4+0x30>
 8001244:	f1c6 0320 	rsb	r3, r6, #32
 8001248:	fa01 f806 	lsl.w	r8, r1, r6
 800124c:	fa20 f303 	lsr.w	r3, r0, r3
 8001250:	40b7      	lsls	r7, r6
 8001252:	ea43 0808 	orr.w	r8, r3, r8
 8001256:	40b4      	lsls	r4, r6
 8001258:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800125c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001260:	fa1f fc87 	uxth.w	ip, r7
 8001264:	fb0e 8811 	mls	r8, lr, r1, r8
 8001268:	fb01 f20c 	mul.w	r2, r1, ip
 800126c:	0c23      	lsrs	r3, r4, #16
 800126e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001272:	429a      	cmp	r2, r3
 8001274:	d909      	bls.n	800128a <__udivmoddi4+0x62>
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	f101 30ff 	add.w	r0, r1, #4294967295
 800127c:	f080 80eb 	bcs.w	8001456 <__udivmoddi4+0x22e>
 8001280:	429a      	cmp	r2, r3
 8001282:	f240 80e8 	bls.w	8001456 <__udivmoddi4+0x22e>
 8001286:	3902      	subs	r1, #2
 8001288:	443b      	add	r3, r7
 800128a:	1a9a      	subs	r2, r3, r2
 800128c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001290:	fb0e 2210 	mls	r2, lr, r0, r2
 8001294:	fb00 fc0c 	mul.w	ip, r0, ip
 8001298:	b2a3      	uxth	r3, r4
 800129a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800129e:	459c      	cmp	ip, r3
 80012a0:	d909      	bls.n	80012b6 <__udivmoddi4+0x8e>
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012a8:	f080 80d7 	bcs.w	800145a <__udivmoddi4+0x232>
 80012ac:	459c      	cmp	ip, r3
 80012ae:	f240 80d4 	bls.w	800145a <__udivmoddi4+0x232>
 80012b2:	443b      	add	r3, r7
 80012b4:	3802      	subs	r0, #2
 80012b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012ba:	2100      	movs	r1, #0
 80012bc:	eba3 030c 	sub.w	r3, r3, ip
 80012c0:	b11d      	cbz	r5, 80012ca <__udivmoddi4+0xa2>
 80012c2:	2200      	movs	r2, #0
 80012c4:	40f3      	lsrs	r3, r6
 80012c6:	e9c5 3200 	strd	r3, r2, [r5]
 80012ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ce:	428b      	cmp	r3, r1
 80012d0:	d905      	bls.n	80012de <__udivmoddi4+0xb6>
 80012d2:	b10d      	cbz	r5, 80012d8 <__udivmoddi4+0xb0>
 80012d4:	e9c5 0100 	strd	r0, r1, [r5]
 80012d8:	2100      	movs	r1, #0
 80012da:	4608      	mov	r0, r1
 80012dc:	e7f5      	b.n	80012ca <__udivmoddi4+0xa2>
 80012de:	fab3 f183 	clz	r1, r3
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d146      	bne.n	8001374 <__udivmoddi4+0x14c>
 80012e6:	4573      	cmp	r3, lr
 80012e8:	d302      	bcc.n	80012f0 <__udivmoddi4+0xc8>
 80012ea:	4282      	cmp	r2, r0
 80012ec:	f200 8108 	bhi.w	8001500 <__udivmoddi4+0x2d8>
 80012f0:	1a84      	subs	r4, r0, r2
 80012f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80012f6:	2001      	movs	r0, #1
 80012f8:	4690      	mov	r8, r2
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	d0e5      	beq.n	80012ca <__udivmoddi4+0xa2>
 80012fe:	e9c5 4800 	strd	r4, r8, [r5]
 8001302:	e7e2      	b.n	80012ca <__udivmoddi4+0xa2>
 8001304:	2a00      	cmp	r2, #0
 8001306:	f000 8091 	beq.w	800142c <__udivmoddi4+0x204>
 800130a:	fab2 f682 	clz	r6, r2
 800130e:	2e00      	cmp	r6, #0
 8001310:	f040 80a5 	bne.w	800145e <__udivmoddi4+0x236>
 8001314:	1a8a      	subs	r2, r1, r2
 8001316:	2101      	movs	r1, #1
 8001318:	0c03      	lsrs	r3, r0, #16
 800131a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800131e:	b280      	uxth	r0, r0
 8001320:	b2bc      	uxth	r4, r7
 8001322:	fbb2 fcfe 	udiv	ip, r2, lr
 8001326:	fb0e 221c 	mls	r2, lr, ip, r2
 800132a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800132e:	fb04 f20c 	mul.w	r2, r4, ip
 8001332:	429a      	cmp	r2, r3
 8001334:	d907      	bls.n	8001346 <__udivmoddi4+0x11e>
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	f10c 38ff 	add.w	r8, ip, #4294967295
 800133c:	d202      	bcs.n	8001344 <__udivmoddi4+0x11c>
 800133e:	429a      	cmp	r2, r3
 8001340:	f200 80e3 	bhi.w	800150a <__udivmoddi4+0x2e2>
 8001344:	46c4      	mov	ip, r8
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	fbb3 f2fe 	udiv	r2, r3, lr
 800134c:	fb0e 3312 	mls	r3, lr, r2, r3
 8001350:	fb02 f404 	mul.w	r4, r2, r4
 8001354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001358:	429c      	cmp	r4, r3
 800135a:	d907      	bls.n	800136c <__udivmoddi4+0x144>
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	f102 30ff 	add.w	r0, r2, #4294967295
 8001362:	d202      	bcs.n	800136a <__udivmoddi4+0x142>
 8001364:	429c      	cmp	r4, r3
 8001366:	f200 80cd 	bhi.w	8001504 <__udivmoddi4+0x2dc>
 800136a:	4602      	mov	r2, r0
 800136c:	1b1b      	subs	r3, r3, r4
 800136e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001372:	e7a5      	b.n	80012c0 <__udivmoddi4+0x98>
 8001374:	f1c1 0620 	rsb	r6, r1, #32
 8001378:	408b      	lsls	r3, r1
 800137a:	fa22 f706 	lsr.w	r7, r2, r6
 800137e:	431f      	orrs	r7, r3
 8001380:	fa2e fa06 	lsr.w	sl, lr, r6
 8001384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001388:	fbba f8f9 	udiv	r8, sl, r9
 800138c:	fa0e fe01 	lsl.w	lr, lr, r1
 8001390:	fa20 f306 	lsr.w	r3, r0, r6
 8001394:	fb09 aa18 	mls	sl, r9, r8, sl
 8001398:	fa1f fc87 	uxth.w	ip, r7
 800139c:	ea43 030e 	orr.w	r3, r3, lr
 80013a0:	fa00 fe01 	lsl.w	lr, r0, r1
 80013a4:	fb08 f00c 	mul.w	r0, r8, ip
 80013a8:	0c1c      	lsrs	r4, r3, #16
 80013aa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ae:	42a0      	cmp	r0, r4
 80013b0:	fa02 f201 	lsl.w	r2, r2, r1
 80013b4:	d90a      	bls.n	80013cc <__udivmoddi4+0x1a4>
 80013b6:	193c      	adds	r4, r7, r4
 80013b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013bc:	f080 809e 	bcs.w	80014fc <__udivmoddi4+0x2d4>
 80013c0:	42a0      	cmp	r0, r4
 80013c2:	f240 809b 	bls.w	80014fc <__udivmoddi4+0x2d4>
 80013c6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ca:	443c      	add	r4, r7
 80013cc:	1a24      	subs	r4, r4, r0
 80013ce:	b298      	uxth	r0, r3
 80013d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80013d4:	fb09 4413 	mls	r4, r9, r3, r4
 80013d8:	fb03 fc0c 	mul.w	ip, r3, ip
 80013dc:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013e0:	45a4      	cmp	ip, r4
 80013e2:	d909      	bls.n	80013f8 <__udivmoddi4+0x1d0>
 80013e4:	193c      	adds	r4, r7, r4
 80013e6:	f103 30ff 	add.w	r0, r3, #4294967295
 80013ea:	f080 8085 	bcs.w	80014f8 <__udivmoddi4+0x2d0>
 80013ee:	45a4      	cmp	ip, r4
 80013f0:	f240 8082 	bls.w	80014f8 <__udivmoddi4+0x2d0>
 80013f4:	3b02      	subs	r3, #2
 80013f6:	443c      	add	r4, r7
 80013f8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013fc:	eba4 040c 	sub.w	r4, r4, ip
 8001400:	fba0 8c02 	umull	r8, ip, r0, r2
 8001404:	4564      	cmp	r4, ip
 8001406:	4643      	mov	r3, r8
 8001408:	46e1      	mov	r9, ip
 800140a:	d364      	bcc.n	80014d6 <__udivmoddi4+0x2ae>
 800140c:	d061      	beq.n	80014d2 <__udivmoddi4+0x2aa>
 800140e:	b15d      	cbz	r5, 8001428 <__udivmoddi4+0x200>
 8001410:	ebbe 0203 	subs.w	r2, lr, r3
 8001414:	eb64 0409 	sbc.w	r4, r4, r9
 8001418:	fa04 f606 	lsl.w	r6, r4, r6
 800141c:	fa22 f301 	lsr.w	r3, r2, r1
 8001420:	431e      	orrs	r6, r3
 8001422:	40cc      	lsrs	r4, r1
 8001424:	e9c5 6400 	strd	r6, r4, [r5]
 8001428:	2100      	movs	r1, #0
 800142a:	e74e      	b.n	80012ca <__udivmoddi4+0xa2>
 800142c:	fbb1 fcf2 	udiv	ip, r1, r2
 8001430:	0c01      	lsrs	r1, r0, #16
 8001432:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001436:	b280      	uxth	r0, r0
 8001438:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800143c:	463b      	mov	r3, r7
 800143e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001442:	4638      	mov	r0, r7
 8001444:	463c      	mov	r4, r7
 8001446:	46b8      	mov	r8, r7
 8001448:	46be      	mov	lr, r7
 800144a:	2620      	movs	r6, #32
 800144c:	eba2 0208 	sub.w	r2, r2, r8
 8001450:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001454:	e765      	b.n	8001322 <__udivmoddi4+0xfa>
 8001456:	4601      	mov	r1, r0
 8001458:	e717      	b.n	800128a <__udivmoddi4+0x62>
 800145a:	4610      	mov	r0, r2
 800145c:	e72b      	b.n	80012b6 <__udivmoddi4+0x8e>
 800145e:	f1c6 0120 	rsb	r1, r6, #32
 8001462:	fa2e fc01 	lsr.w	ip, lr, r1
 8001466:	40b7      	lsls	r7, r6
 8001468:	fa0e fe06 	lsl.w	lr, lr, r6
 800146c:	fa20 f101 	lsr.w	r1, r0, r1
 8001470:	ea41 010e 	orr.w	r1, r1, lr
 8001474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001478:	fbbc f8fe 	udiv	r8, ip, lr
 800147c:	b2bc      	uxth	r4, r7
 800147e:	fb0e cc18 	mls	ip, lr, r8, ip
 8001482:	fb08 f904 	mul.w	r9, r8, r4
 8001486:	0c0a      	lsrs	r2, r1, #16
 8001488:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800148c:	40b0      	lsls	r0, r6
 800148e:	4591      	cmp	r9, r2
 8001490:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001494:	b280      	uxth	r0, r0
 8001496:	d93e      	bls.n	8001516 <__udivmoddi4+0x2ee>
 8001498:	18ba      	adds	r2, r7, r2
 800149a:	f108 3cff 	add.w	ip, r8, #4294967295
 800149e:	d201      	bcs.n	80014a4 <__udivmoddi4+0x27c>
 80014a0:	4591      	cmp	r9, r2
 80014a2:	d81f      	bhi.n	80014e4 <__udivmoddi4+0x2bc>
 80014a4:	eba2 0209 	sub.w	r2, r2, r9
 80014a8:	fbb2 f9fe 	udiv	r9, r2, lr
 80014ac:	fb09 f804 	mul.w	r8, r9, r4
 80014b0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014b4:	b28a      	uxth	r2, r1
 80014b6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014ba:	4542      	cmp	r2, r8
 80014bc:	d229      	bcs.n	8001512 <__udivmoddi4+0x2ea>
 80014be:	18ba      	adds	r2, r7, r2
 80014c0:	f109 31ff 	add.w	r1, r9, #4294967295
 80014c4:	d2c2      	bcs.n	800144c <__udivmoddi4+0x224>
 80014c6:	4542      	cmp	r2, r8
 80014c8:	d2c0      	bcs.n	800144c <__udivmoddi4+0x224>
 80014ca:	f1a9 0102 	sub.w	r1, r9, #2
 80014ce:	443a      	add	r2, r7
 80014d0:	e7bc      	b.n	800144c <__udivmoddi4+0x224>
 80014d2:	45c6      	cmp	lr, r8
 80014d4:	d29b      	bcs.n	800140e <__udivmoddi4+0x1e6>
 80014d6:	ebb8 0302 	subs.w	r3, r8, r2
 80014da:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014de:	3801      	subs	r0, #1
 80014e0:	46e1      	mov	r9, ip
 80014e2:	e794      	b.n	800140e <__udivmoddi4+0x1e6>
 80014e4:	eba7 0909 	sub.w	r9, r7, r9
 80014e8:	444a      	add	r2, r9
 80014ea:	fbb2 f9fe 	udiv	r9, r2, lr
 80014ee:	f1a8 0c02 	sub.w	ip, r8, #2
 80014f2:	fb09 f804 	mul.w	r8, r9, r4
 80014f6:	e7db      	b.n	80014b0 <__udivmoddi4+0x288>
 80014f8:	4603      	mov	r3, r0
 80014fa:	e77d      	b.n	80013f8 <__udivmoddi4+0x1d0>
 80014fc:	46d0      	mov	r8, sl
 80014fe:	e765      	b.n	80013cc <__udivmoddi4+0x1a4>
 8001500:	4608      	mov	r0, r1
 8001502:	e6fa      	b.n	80012fa <__udivmoddi4+0xd2>
 8001504:	443b      	add	r3, r7
 8001506:	3a02      	subs	r2, #2
 8001508:	e730      	b.n	800136c <__udivmoddi4+0x144>
 800150a:	f1ac 0c02 	sub.w	ip, ip, #2
 800150e:	443b      	add	r3, r7
 8001510:	e719      	b.n	8001346 <__udivmoddi4+0x11e>
 8001512:	4649      	mov	r1, r9
 8001514:	e79a      	b.n	800144c <__udivmoddi4+0x224>
 8001516:	eba2 0209 	sub.w	r2, r2, r9
 800151a:	fbb2 f9fe 	udiv	r9, r2, lr
 800151e:	46c4      	mov	ip, r8
 8001520:	fb09 f804 	mul.w	r8, r9, r4
 8001524:	e7c4      	b.n	80014b0 <__udivmoddi4+0x288>
 8001526:	bf00      	nop

08001528 <__aeabi_idiv0>:
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001532:	4b46      	ldr	r3, [pc, #280]	@ (800164c <main+0x120>)
 8001534:	4a46      	ldr	r2, [pc, #280]	@ (8001650 <main+0x124>)
 8001536:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001538:	4b44      	ldr	r3, [pc, #272]	@ (800164c <main+0x120>)
 800153a:	4a46      	ldr	r2, [pc, #280]	@ (8001654 <main+0x128>)
 800153c:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 800153e:	4b43      	ldr	r3, [pc, #268]	@ (800164c <main+0x120>)
 8001540:	4a45      	ldr	r2, [pc, #276]	@ (8001658 <main+0x12c>)
 8001542:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001544:	f000 ffd1 	bl	80024ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001548:	f000 f89e 	bl	8001688 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  iks01a3_i2c_stuck_quirk();
 800154c:	f000 fbbe 	bl	8001ccc <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f000 fa04 	bl	800195c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001554:	f000 f93e 	bl	80017d4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001558:	f000 f9d6 	bl	8001908 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800155c:	f000 f968 	bl	8001830 <MX_SPI1_Init>
  MX_TIM6_Init();
 8001560:	f000 f99c 	bl	800189c <MX_TIM6_Init>
  MX_ADC_Init();
 8001564:	f000 f8de 	bl	8001724 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init();
 8001568:	f005 fdf2 	bl	8007150 <MAX7219_Init>
  lsm6dso_initialize();
 800156c:	f000 fb2c 	bl	8001bc8 <lsm6dso_initialize>
  if (NEAI_MODE) {
    neai_state = neai_classification_init(knowledge);
 8001570:	483a      	ldr	r0, [pc, #232]	@ (800165c <main+0x130>)
 8001572:	f005 fea5 	bl	80072c0 <neai_classification_init>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	4b39      	ldr	r3, [pc, #228]	@ (8001660 <main+0x134>)
 800157c:	701a      	strb	r2, [r3, #0]
    printf("Initialize NEAI library. NEAI init return: %d.\n",  neai_state);
 800157e:	4b38      	ldr	r3, [pc, #224]	@ (8001660 <main+0x134>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	4619      	mov	r1, r3
 8001584:	4837      	ldr	r0, [pc, #220]	@ (8001664 <main+0x138>)
 8001586:	f007 fcc3 	bl	8008f10 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (drdy) {
 800158a:	4b37      	ldr	r3, [pc, #220]	@ (8001668 <main+0x13c>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0fa      	beq.n	800158a <main+0x5e>
		  /* Reset data ready condition */
		  drdy = 0;
 8001594:	4b34      	ldr	r3, [pc, #208]	@ (8001668 <main+0x13c>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
		  /* Read acceleration data */
		  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800159a:	2206      	movs	r2, #6
 800159c:	2100      	movs	r1, #0
 800159e:	4833      	ldr	r0, [pc, #204]	@ (800166c <main+0x140>)
 80015a0:	f007 fe20 	bl	80091e4 <memset>
		  lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80015a4:	4931      	ldr	r1, [pc, #196]	@ (800166c <main+0x140>)
 80015a6:	4829      	ldr	r0, [pc, #164]	@ (800164c <main+0x120>)
 80015a8:	f004 fe12 	bl	80061d0 <lsm6dso_acceleration_raw_get>
		  for (uint8_t i = 0; i < AXIS; i++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	e015      	b.n	80015de <main+0xb2>
			  neai_buffer[(AXIS * drdy_counter) + i] = lsm6dso_convert_accel_data_to_mg(data_raw_acceleration[i]);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	4a2d      	ldr	r2, [pc, #180]	@ (800166c <main+0x140>)
 80015b6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80015ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001670 <main+0x144>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	441a      	add	r2, r3
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	18d4      	adds	r4, r2, r3
 80015ca:	4608      	mov	r0, r1
 80015cc:	f000 fb6a 	bl	8001ca4 <lsm6dso_convert_accel_data_to_mg>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a28      	ldr	r2, [pc, #160]	@ (8001674 <main+0x148>)
 80015d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  for (uint8_t i = 0; i < AXIS; i++) {
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	3301      	adds	r3, #1
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d9e6      	bls.n	80015b2 <main+0x86>
		  }
		  drdy_counter++;
 80015e4:	4b22      	ldr	r3, [pc, #136]	@ (8001670 <main+0x144>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	3301      	adds	r3, #1
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <main+0x144>)
 80015ee:	801a      	strh	r2, [r3, #0]
		  if (drdy_counter >= SAMPLES) {
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <main+0x144>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80015f6:	d9c8      	bls.n	800158a <main+0x5e>
			  /* Set Output Data Rate */
			  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_OFF);
 80015f8:	2100      	movs	r1, #0
 80015fa:	4814      	ldr	r0, [pc, #80]	@ (800164c <main+0x120>)
 80015fc:	f004 fcee 	bl	8005fdc <lsm6dso_xl_data_rate_set>
#if (NEAI_MODE)
			  neai_state = neai_classification(neai_buffer, class_output_buffer, &id_class);
 8001600:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <main+0x14c>)
 8001602:	491e      	ldr	r1, [pc, #120]	@ (800167c <main+0x150>)
 8001604:	481b      	ldr	r0, [pc, #108]	@ (8001674 <main+0x148>)
 8001606:	f005 ff2d 	bl	8007464 <neai_classification>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <main+0x134>)
 8001610:	701a      	strb	r2, [r3, #0]
			  printf("Class: %s. NEAI classification return: %d.\r\n", id2class[id_class], neai_state);
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <main+0x14c>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <main+0x154>)
 800161a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161e:	4a10      	ldr	r2, [pc, #64]	@ (8001660 <main+0x134>)
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	4619      	mov	r1, r3
 8001624:	4817      	ldr	r0, [pc, #92]	@ (8001684 <main+0x158>)
 8001626:	f007 fc73 	bl	8008f10 <iprintf>
			  handleMovementActions();
 800162a:	f000 fc5b 	bl	8001ee4 <handleMovementActions>
				  printf("%.3f ", neai_buffer[i]);
			  }
			  printf("\r\n");
#endif
			  /* Reset drdy_counter in order to get a new buffer */
			  drdy_counter = 0;
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <main+0x144>)
 8001630:	2200      	movs	r2, #0
 8001632:	801a      	strh	r2, [r3, #0]
			  /* Clean neai buffer */
			  memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 8001634:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001638:	2100      	movs	r1, #0
 800163a:	480e      	ldr	r0, [pc, #56]	@ (8001674 <main+0x148>)
 800163c:	f007 fdd2 	bl	80091e4 <memset>
			  /* Set Output Data Rate */
			  lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001640:	2106      	movs	r1, #6
 8001642:	4802      	ldr	r0, [pc, #8]	@ (800164c <main+0x120>)
 8001644:	f004 fcca 	bl	8005fdc <lsm6dso_xl_data_rate_set>
	  if (drdy) {
 8001648:	e79f      	b.n	800158a <main+0x5e>
 800164a:	bf00      	nop
 800164c:	200009a0 	.word	0x200009a0
 8001650:	08001b55 	.word	0x08001b55
 8001654:	08001b8f 	.word	0x08001b8f
 8001658:	2000025c 	.word	0x2000025c
 800165c:	0800d210 	.word	0x0800d210
 8001660:	20000398 	.word	0x20000398
 8001664:	0800d144 	.word	0x0800d144
 8001668:	2000039c 	.word	0x2000039c
 800166c:	20000390 	.word	0x20000390
 8001670:	2000039e 	.word	0x2000039e
 8001674:	200003a0 	.word	0x200003a0
 8001678:	2000039a 	.word	0x2000039a
 800167c:	200009bc 	.word	0x200009bc
 8001680:	20000000 	.word	0x20000000
 8001684:	0800d174 	.word	0x0800d174

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b092      	sub	sp, #72	@ 0x48
 800168c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	2234      	movs	r2, #52	@ 0x34
 8001694:	2100      	movs	r1, #0
 8001696:	4618      	mov	r0, r3
 8001698:	f007 fda4 	bl	80091e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800169c:	463b      	mov	r3, r7
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <SystemClock_Config+0x98>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80016b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001720 <SystemClock_Config+0x98>)
 80016b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016b8:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016ba:	2302      	movs	r3, #2
 80016bc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016be:	2301      	movs	r3, #1
 80016c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c2:	2310      	movs	r3, #16
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c6:	2302      	movs	r3, #2
 80016c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ca:	2300      	movs	r3, #0
 80016cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016ce:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80016d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80016d4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80016d8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4618      	mov	r0, r3
 80016e0:	f002 fe6e 	bl	80043c0 <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016ea:	f000 fc37 	bl	8001f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f2:	2303      	movs	r3, #3
 80016f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001702:	463b      	mov	r3, r7
 8001704:	2101      	movs	r1, #1
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f98a 	bl	8004a20 <HAL_RCC_ClockConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001712:	f000 fc23 	bl	8001f5c <Error_Handler>
  }
}
 8001716:	bf00      	nop
 8001718:	3748      	adds	r7, #72	@ 0x48
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000

08001724 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001736:	4a26      	ldr	r2, [pc, #152]	@ (80017d0 <MX_ADC_Init+0xac>)
 8001738:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800173a:	4b24      	ldr	r3, [pc, #144]	@ (80017cc <MX_ADC_Init+0xa8>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001740:	4b22      	ldr	r3, [pc, #136]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <MX_ADC_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001752:	4b1e      	ldr	r3, [pc, #120]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <MX_ADC_Init+0xa8>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 800176a:	4b18      	ldr	r3, [pc, #96]	@ (80017cc <MX_ADC_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc.Init.NbrOfConversion = 1;
 8001772:	4b16      	ldr	r3, [pc, #88]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001774:	2201      	movs	r2, #1
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001778:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <MX_ADC_Init+0xa8>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001780:	4b12      	ldr	r3, [pc, #72]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001782:	2210      	movs	r2, #16
 8001784:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001786:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001788:	2200      	movs	r2, #0
 800178a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 800178c:	4b0f      	ldr	r3, [pc, #60]	@ (80017cc <MX_ADC_Init+0xa8>)
 800178e:	2200      	movs	r2, #0
 8001790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001794:	480d      	ldr	r0, [pc, #52]	@ (80017cc <MX_ADC_Init+0xa8>)
 8001796:	f000 ff39 	bl	800260c <HAL_ADC_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80017a0:	f000 fbdc 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a8:	2301      	movs	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 80017ac:	2300      	movs	r3, #0
 80017ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_ADC_Init+0xa8>)
 80017b6:	f001 f981 	bl	8002abc <HAL_ADC_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 80017c0:	f000 fbcc 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80017c4:	bf00      	nop
 80017c6:	3710      	adds	r7, #16
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000208 	.word	0x20000208
 80017d0:	40012400 	.word	0x40012400

080017d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <MX_I2C1_Init+0x54>)
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <MX_I2C1_Init+0x58>)
 80017dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400;
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <MX_I2C1_Init+0x54>)
 80017e0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80017e4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017e6:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_I2C1_Init+0x54>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_I2C1_Init+0x54>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <MX_I2C1_Init+0x54>)
 80017f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <MX_I2C1_Init+0x54>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <MX_I2C1_Init+0x54>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <MX_I2C1_Init+0x54>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_I2C1_Init+0x54>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_I2C1_Init+0x54>)
 8001814:	f001 fdb0 	bl	8003378 <HAL_I2C_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800181e:	f000 fb9d 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000025c 	.word	0x2000025c
 800182c:	40005400 	.word	0x40005400

08001830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001834:	4b17      	ldr	r3, [pc, #92]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001836:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <MX_SPI1_Init+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800183a:	4b16      	ldr	r3, [pc, #88]	@ (8001894 <MX_SPI1_Init+0x64>)
 800183c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001842:	4b14      	ldr	r3, [pc, #80]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001848:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <MX_SPI1_Init+0x64>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800184e:	4b11      	ldr	r3, [pc, #68]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001854:	4b0f      	ldr	r3, [pc, #60]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <MX_SPI1_Init+0x64>)
 800185c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001868:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <MX_SPI1_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800186e:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001874:	4b07      	ldr	r3, [pc, #28]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800187a:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <MX_SPI1_Init+0x64>)
 800187c:	220a      	movs	r2, #10
 800187e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001880:	4804      	ldr	r0, [pc, #16]	@ (8001894 <MX_SPI1_Init+0x64>)
 8001882:	f003 fb93 	bl	8004fac <HAL_SPI_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800188c:	f000 fb66 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200002b0 	.word	0x200002b0
 8001898:	40013000 	.word	0x40013000

0800189c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80018aa:	4b15      	ldr	r3, [pc, #84]	@ (8001900 <MX_TIM6_Init+0x64>)
 80018ac:	4a15      	ldr	r2, [pc, #84]	@ (8001904 <MX_TIM6_Init+0x68>)
 80018ae:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31999;
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <MX_TIM6_Init+0x64>)
 80018b2:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80018b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <MX_TIM6_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200;
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <MX_TIM6_Init+0x64>)
 80018c0:	22c8      	movs	r2, #200	@ 0xc8
 80018c2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001900 <MX_TIM6_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80018ca:	480d      	ldr	r0, [pc, #52]	@ (8001900 <MX_TIM6_Init+0x64>)
 80018cc:	f003 fe18 	bl	8005500 <HAL_TIM_Base_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80018d6:	f000 fb41 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018da:	2300      	movs	r3, #0
 80018dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80018e2:	463b      	mov	r3, r7
 80018e4:	4619      	mov	r1, r3
 80018e6:	4806      	ldr	r0, [pc, #24]	@ (8001900 <MX_TIM6_Init+0x64>)
 80018e8:	f004 f828 	bl	800593c <HAL_TIMEx_MasterConfigSynchronization>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80018f2:	f000 fb33 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000308 	.word	0x20000308
 8001904:	40001000 	.word	0x40001000

08001908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <MX_USART2_UART_Init+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	@ (8001954 <MX_USART2_UART_Init+0x4c>)
 8001940:	f004 f85a 	bl	80059f8 <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800194a:	f000 fb07 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000348 	.word	0x20000348
 8001958:	40004400 	.word	0x40004400

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 030c 	add.w	r3, r7, #12
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]
 8001970:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b45      	ldr	r3, [pc, #276]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 8001974:	69db      	ldr	r3, [r3, #28]
 8001976:	4a44      	ldr	r2, [pc, #272]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	61d3      	str	r3, [r2, #28]
 800197e:	4b42      	ldr	r3, [pc, #264]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	f003 0304 	and.w	r3, r3, #4
 8001986:	60bb      	str	r3, [r7, #8]
 8001988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 8001990:	f043 0301 	orr.w	r3, r3, #1
 8001994:	61d3      	str	r3, [r2, #28]
 8001996:	4b3c      	ldr	r3, [pc, #240]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a2:	4b39      	ldr	r3, [pc, #228]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	4a38      	ldr	r2, [pc, #224]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	61d3      	str	r3, [r2, #28]
 80019ae:	4b36      	ldr	r3, [pc, #216]	@ (8001a88 <MX_GPIO_Init+0x12c>)
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	603b      	str	r3, [r7, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, L0_Pin|L1_Pin|L2_Pin|L3_Pin
 80019ba:	2200      	movs	r2, #0
 80019bc:	f64f 4106 	movw	r1, #64518	@ 0xfc06
 80019c0:	4832      	ldr	r0, [pc, #200]	@ (8001a8c <MX_GPIO_Init+0x130>)
 80019c2:	f001 fc8f 	bl	80032e4 <HAL_GPIO_WritePin>
                          |L4_Pin|L5_Pin|L6_Pin|L7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019cc:	4830      	ldr	r0, [pc, #192]	@ (8001a90 <MX_GPIO_Init+0x134>)
 80019ce:	f001 fc89 	bl	80032e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019e2:	f107 030c 	add.w	r3, r7, #12
 80019e6:	4619      	mov	r1, r3
 80019e8:	482a      	ldr	r0, [pc, #168]	@ (8001a94 <MX_GPIO_Init+0x138>)
 80019ea:	f001 faeb 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : L0_Pin L1_Pin L2_Pin L3_Pin
                           L4_Pin L5_Pin L6_Pin L7_Pin */
  GPIO_InitStruct.Pin = L0_Pin|L1_Pin|L2_Pin|L3_Pin
 80019ee:	f64f 4306 	movw	r3, #64518	@ 0xfc06
 80019f2:	60fb      	str	r3, [r7, #12]
                          |L4_Pin|L5_Pin|L6_Pin|L7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f4:	2301      	movs	r3, #1
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fc:	2300      	movs	r3, #0
 80019fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	4821      	ldr	r0, [pc, #132]	@ (8001a8c <MX_GPIO_Init+0x130>)
 8001a08:	f001 fadc 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001a0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a16:	2301      	movs	r3, #1
 8001a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	4619      	mov	r1, r3
 8001a24:	481a      	ldr	r0, [pc, #104]	@ (8001a90 <MX_GPIO_Init+0x134>)
 8001a26:	f001 facd 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP1_increaseSpeed_Pin BP2_reduceSpeed_Pin */
  GPIO_InitStruct.Pin = BP1_increaseSpeed_Pin|BP2_reduceSpeed_Pin;
 8001a2a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4813      	ldr	r0, [pc, #76]	@ (8001a90 <MX_GPIO_Init+0x134>)
 8001a42:	f001 fabf 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_ACC_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 8001a46:	2320      	movs	r3, #32
 8001a48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a4a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 030c 	add.w	r3, r7, #12
 8001a58:	4619      	mov	r1, r3
 8001a5a:	480c      	ldr	r0, [pc, #48]	@ (8001a8c <MX_GPIO_Init+0x130>)
 8001a5c:	f001 fab2 	bl	8002fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2017      	movs	r0, #23
 8001a66:	f001 fa76 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a6a:	2017      	movs	r0, #23
 8001a6c:	f001 fa8f 	bl	8002f8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a70:	2200      	movs	r2, #0
 8001a72:	2100      	movs	r1, #0
 8001a74:	2028      	movs	r0, #40	@ 0x28
 8001a76:	f001 fa6e 	bl	8002f56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a7a:	2028      	movs	r0, #40	@ 0x28
 8001a7c:	f001 fa87 	bl	8002f8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a80:	bf00      	nop
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020400 	.word	0x40020400
 8001a90:	40020000 	.word	0x40020000
 8001a94:	40020800 	.word	0x40020800

08001a98 <__io_putchar>:
  * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
  * @retval
  * @param
  */
int __io_putchar(int ch)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001aa6:	f107 010c 	add.w	r1, r7, #12
 8001aaa:	230a      	movs	r3, #10
 8001aac:	2201      	movs	r2, #1
 8001aae:	4804      	ldr	r0, [pc, #16]	@ (8001ac0 <__io_putchar+0x28>)
 8001ab0:	f003 fff2 	bl	8005a98 <HAL_UART_Transmit>
 return ch;
 8001ab4:	687b      	ldr	r3, [r7, #4]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000348 	.word	0x20000348

08001ac4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin) {
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ad4:	d01e      	beq.n	8001b14 <HAL_GPIO_EXTI_Callback+0x50>
 8001ad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ada:	dc2c      	bgt.n	8001b36 <HAL_GPIO_EXTI_Callback+0x72>
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	d003      	beq.n	8001ae8 <HAL_GPIO_EXTI_Callback+0x24>
 8001ae0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ae4:	d005      	beq.n	8001af2 <HAL_GPIO_EXTI_Callback+0x2e>
			  __HAL_TIM_SET_COUNTER(&htim6, 0);
			  HAL_TIM_Base_Start_IT(&htim6);
			  printf("Motor speed reduced\r\n");
		  }
	}
}
 8001ae6:	e026      	b.n	8001b36 <HAL_GPIO_EXTI_Callback+0x72>
		  drdy = 1;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	701a      	strb	r2, [r3, #0]
		  break;
 8001aee:	bf00      	nop
}
 8001af0:	e021      	b.n	8001b36 <HAL_GPIO_EXTI_Callback+0x72>
		  if (!debounce_flag) {
 8001af2:	4b14      	ldr	r3, [pc, #80]	@ (8001b44 <HAL_GPIO_EXTI_Callback+0x80>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d10c      	bne.n	8001b14 <HAL_GPIO_EXTI_Callback+0x50>
			  debounce_flag = 1;
 8001afa:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <HAL_GPIO_EXTI_Callback+0x80>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	625a      	str	r2, [r3, #36]	@ 0x24
			  HAL_TIM_Base_Start_IT(&htim6);
 8001b08:	480f      	ldr	r0, [pc, #60]	@ (8001b48 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b0a:	f003 fd39 	bl	8005580 <HAL_TIM_Base_Start_IT>
			  printf("Motor speed increased\r\n");
 8001b0e:	480f      	ldr	r0, [pc, #60]	@ (8001b4c <HAL_GPIO_EXTI_Callback+0x88>)
 8001b10:	f007 fa66 	bl	8008fe0 <puts>
		  if (!debounce_flag) {
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_GPIO_EXTI_Callback+0x80>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10c      	bne.n	8001b36 <HAL_GPIO_EXTI_Callback+0x72>
			  debounce_flag = 1;
 8001b1c:	4b09      	ldr	r3, [pc, #36]	@ (8001b44 <HAL_GPIO_EXTI_Callback+0x80>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
			  __HAL_TIM_SET_COUNTER(&htim6, 0);
 8001b22:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	@ 0x24
			  HAL_TIM_Base_Start_IT(&htim6);
 8001b2a:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <HAL_GPIO_EXTI_Callback+0x84>)
 8001b2c:	f003 fd28 	bl	8005580 <HAL_TIM_Base_Start_IT>
			  printf("Motor speed reduced\r\n");
 8001b30:	4807      	ldr	r0, [pc, #28]	@ (8001b50 <HAL_GPIO_EXTI_Callback+0x8c>)
 8001b32:	f007 fa55 	bl	8008fe0 <puts>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000039c 	.word	0x2000039c
 8001b44:	200009b8 	.word	0x200009b8
 8001b48:	20000308 	.word	0x20000308
 8001b4c:	0800d1a4 	.word	0x0800d1a4
 8001b50:	0800d1bc 	.word	0x0800d1bc

08001b54 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af04      	add	r7, sp, #16
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	460b      	mov	r3, r1
 8001b62:	72fb      	strb	r3, [r7, #11]
 8001b64:	4613      	mov	r3, r2
 8001b66:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b70:	9302      	str	r3, [sp, #8]
 8001b72:	893b      	ldrh	r3, [r7, #8]
 8001b74:	9301      	str	r3, [sp, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	21d7      	movs	r1, #215	@ 0xd7
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f001 fd3e 	bl	8003600 <HAL_I2C_Mem_Write>
  return 0;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b088      	sub	sp, #32
 8001b92:	af04      	add	r7, sp, #16
 8001b94:	60f8      	str	r0, [r7, #12]
 8001b96:	607a      	str	r2, [r7, #4]
 8001b98:	461a      	mov	r2, r3
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	72fb      	strb	r3, [r7, #11]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	b29a      	uxth	r2, r3
 8001ba6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	893b      	ldrh	r3, [r7, #8]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	21d7      	movs	r1, #215	@ 0xd7
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f001 fe1b 	bl	80037f4 <HAL_I2C_Mem_Read>
  return 0;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3710      	adds	r7, #16
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <lsm6dso_initialize>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  lsm6dso_initialize_basics();
 8001bcc:	f000 f80e 	bl	8001bec <lsm6dso_initialize_basics>
#ifdef ACCELEROMETER
  /* Accelelerometer configuration */
  lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001bd0:	2106      	movs	r1, #6
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <lsm6dso_initialize+0x20>)
 8001bd4:	f004 fa02 	bl	8005fdc <lsm6dso_xl_data_rate_set>
  lsm6dso_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4803      	ldr	r0, [pc, #12]	@ (8001be8 <lsm6dso_initialize+0x20>)
 8001bdc:	f004 f9d8 	bl	8005f90 <lsm6dso_xl_full_scale_set>
#else
  /* Gyroscope configuration */
  lsm6dso_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
  lsm6dso_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
  lsm6dso_initialize_fifo();
 8001be0:	f000 f82c 	bl	8001c3c <lsm6dso_initialize_fifo>
}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	200009a0 	.word	0x200009a0

08001bec <lsm6dso_initialize_basics>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_basics()
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c30 <lsm6dso_initialize_basics+0x44>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]

  do {
    HAL_Delay(20);
 8001bf6:	2014      	movs	r0, #20
 8001bf8:	f000 fce6 	bl	80025c8 <HAL_Delay>
    lsm6dso_device_id_get(&dev_ctx, &whoamI);
 8001bfc:	490c      	ldr	r1, [pc, #48]	@ (8001c30 <lsm6dso_initialize_basics+0x44>)
 8001bfe:	480d      	ldr	r0, [pc, #52]	@ (8001c34 <lsm6dso_initialize_basics+0x48>)
 8001c00:	f004 fb4b 	bl	800629a <lsm6dso_device_id_get>
  } while(whoamI != LSM6DSO_ID);
 8001c04:	4b0a      	ldr	r3, [pc, #40]	@ (8001c30 <lsm6dso_initialize_basics+0x44>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b6c      	cmp	r3, #108	@ 0x6c
 8001c0a:	d1f4      	bne.n	8001bf6 <lsm6dso_initialize_basics+0xa>

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <lsm6dso_initialize_basics+0x48>)
 8001c10:	f004 fb54 	bl	80062bc <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 8001c14:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <lsm6dso_initialize_basics+0x4c>)
 8001c16:	4807      	ldr	r0, [pc, #28]	@ (8001c34 <lsm6dso_initialize_basics+0x48>)
 8001c18:	f004 fb76 	bl	8006308 <lsm6dso_reset_get>
  } while (rst);
 8001c1c:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <lsm6dso_initialize_basics+0x4c>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1f7      	bne.n	8001c14 <lsm6dso_initialize_basics+0x28>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 8001c24:	2180      	movs	r1, #128	@ 0x80
 8001c26:	4803      	ldr	r0, [pc, #12]	@ (8001c34 <lsm6dso_initialize_basics+0x48>)
 8001c28:	f004 fb87 	bl	800633a <lsm6dso_i3c_disable_set>
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000396 	.word	0x20000396
 8001c34:	200009a0 	.word	0x200009a0
 8001c38:	20000397 	.word	0x20000397

08001c3c <lsm6dso_initialize_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_fifo()
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
#ifdef ACCELEROMETER
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 8001c42:	2106      	movs	r1, #6
 8001c44:	4815      	ldr	r0, [pc, #84]	@ (8001c9c <lsm6dso_initialize_fifo+0x60>)
 8001c46:	f004 fbf8 	bl	800643a <lsm6dso_fifo_xl_batch_set>
  lsm6dso_fifo_gy_batch_set(&dev_ctx, 0);
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4813      	ldr	r0, [pc, #76]	@ (8001c9c <lsm6dso_initialize_fifo+0x60>)
 8001c4e:	f004 fc1a 	bl	8006486 <lsm6dso_fifo_gy_batch_set>
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, 0);
  lsm6dso_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
  /* FIFO MODE */
  lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 8001c52:	2101      	movs	r1, #1
 8001c54:	4811      	ldr	r0, [pc, #68]	@ (8001c9c <lsm6dso_initialize_fifo+0x60>)
 8001c56:	f004 fc3c 	bl	80064d2 <lsm6dso_fifo_mode_set>
  /* Watermark config */
  if (SAMPLES <= MAX_FIFO_SIZE) {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 8001c5a:	2180      	movs	r1, #128	@ 0x80
 8001c5c:	480f      	ldr	r0, [pc, #60]	@ (8001c9c <lsm6dso_initialize_fifo+0x60>)
 8001c5e:	f004 fbb4 	bl	80063ca <lsm6dso_fifo_watermark_set>
  }
  else {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
  }
  /* Need to enable interrupt pin when wtm is reached */
  uint8_t ctrl = 0x08;
 8001c62:	2308      	movs	r3, #8
 8001c64:	71fb      	strb	r3, [r7, #7]
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_INT1_CTRL, (uint8_t *) &ctrl, 1);
 8001c66:	1dfa      	adds	r2, r7, #7
 8001c68:	2301      	movs	r3, #1
 8001c6a:	210d      	movs	r1, #13
 8001c6c:	480b      	ldr	r0, [pc, #44]	@ (8001c9c <lsm6dso_initialize_fifo+0x60>)
 8001c6e:	f004 f95b 	bl	8005f28 <lsm6dso_write_reg>

  /* Configuration de l'interrupt DATA_READY sur INT1 */
  lsm6dso_pin_int1_route_t int1_route = {0};
 8001c72:	463b      	mov	r3, r7
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	809a      	strh	r2, [r3, #4]
  int1_route.drdy_xl = 1;  // Active l'interrupt data-ready pour l'accéléromètre
 8001c7a:	783b      	ldrb	r3, [r7, #0]
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	703b      	strb	r3, [r7, #0]
  lsm6dso_pin_int1_route_set(&dev_ctx, int1_route);
 8001c82:	463b      	mov	r3, r7
 8001c84:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001c88:	4804      	ldr	r0, [pc, #16]	@ (8001c9c <lsm6dso_initialize_fifo+0x60>)
 8001c8a:	f004 fcb7 	bl	80065fc <lsm6dso_pin_int1_route_set>

  printf("Interrupt DATA_READY configuree sur INT1\n");
 8001c8e:	4804      	ldr	r0, [pc, #16]	@ (8001ca0 <lsm6dso_initialize_fifo+0x64>)
 8001c90:	f007 f9a6 	bl	8008fe0 <puts>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	200009a0 	.word	0x200009a0
 8001ca0:	0800d1d4 	.word	0x0800d1d4

08001ca4 <lsm6dso_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lsm6dso_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
  float accel_data_mg = 0.0;
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
  {
  case LSM6DSO_2g:
    accel_data_mg = lsm6dso_from_fs2_to_mg(accel_raw_data);
    break;
  case LSM6DSO_4g:
    accel_data_mg = lsm6dso_from_fs4_to_mg(accel_raw_data);
 8001cb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f953 	bl	8005f64 <lsm6dso_from_fs4_to_mg>
 8001cbe:	60f8      	str	r0, [r7, #12]
    break;
 8001cc0:	bf00      	nop
  default:
    accel_data_mg = 0.0;
    break;
  }
#endif
  return accel_data_mg;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <iks01a3_i2c_stuck_quirk+0x98>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8001d64 <iks01a3_i2c_stuck_quirk+0x98>)
 8001ce8:	f043 0302 	orr.w	r3, r3, #2
 8001cec:	61d3      	str	r3, [r2, #28]
 8001cee:	4b1d      	ldr	r3, [pc, #116]	@ (8001d64 <iks01a3_i2c_stuck_quirk+0x98>)
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]

  /* Configure SCL as a GPIO */
  GPIO_InitStruct.Pin = SCL_PIN;
 8001cfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d0c:	2304      	movs	r3, #4
 8001d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8001d10:	f107 0308 	add.w	r3, r7, #8
 8001d14:	4619      	mov	r1, r3
 8001d16:	4814      	ldr	r0, [pc, #80]	@ (8001d68 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001d18:	f001 f954 	bl	8002fc4 <HAL_GPIO_Init>

  /* Send a burst of pulses on SCL */
  int pulses = 20;
 8001d1c:	2314      	movs	r3, #20
 8001d1e:	61fb      	str	r3, [r7, #28]
  do {
    HAL_Delay(1);
 8001d20:	2001      	movs	r0, #1
 8001d22:	f000 fc51 	bl	80025c8 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001d26:	2200      	movs	r2, #0
 8001d28:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d2c:	480e      	ldr	r0, [pc, #56]	@ (8001d68 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001d2e:	f001 fad9 	bl	80032e4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f000 fc48 	bl	80025c8 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d3e:	480a      	ldr	r0, [pc, #40]	@ (8001d68 <iks01a3_i2c_stuck_quirk+0x9c>)
 8001d40:	f001 fad0 	bl	80032e4 <HAL_GPIO_WritePin>
  } while (pulses--);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	61fa      	str	r2, [r7, #28]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1e8      	bne.n	8001d20 <iks01a3_i2c_stuck_quirk+0x54>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <iks01a3_i2c_stuck_quirk+0x98>)
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	4a04      	ldr	r2, [pc, #16]	@ (8001d64 <iks01a3_i2c_stuck_quirk+0x98>)
 8001d54:	f023 0302 	bic.w	r3, r3, #2
 8001d58:	61d3      	str	r3, [r2, #28]
}
 8001d5a:	bf00      	nop
 8001d5c:	3720      	adds	r7, #32
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40020400 	.word	0x40020400

08001d6c <clearAllLEDs>:


void clearAllLEDs(void) {
 8001d6c:	b590      	push	{r4, r7, lr}
 8001d6e:	b087      	sub	sp, #28
 8001d70:	af00      	add	r7, sp, #0
    uint16_t L_Pin[8] = {L0_Pin, L1_Pin, L2_Pin, L3_Pin, L4_Pin, L5_Pin, L6_Pin, L7_Pin};
 8001d72:	4b0f      	ldr	r3, [pc, #60]	@ (8001db0 <clearAllLEDs+0x44>)
 8001d74:	1d3c      	adds	r4, r7, #4
 8001d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < 8; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e00d      	b.n	8001d9e <clearAllLEDs+0x32>
        HAL_GPIO_WritePin(L0_GPIO_Port, L_Pin[i], GPIO_PIN_RESET);
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	3318      	adds	r3, #24
 8001d88:	443b      	add	r3, r7
 8001d8a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4619      	mov	r1, r3
 8001d92:	4808      	ldr	r0, [pc, #32]	@ (8001db4 <clearAllLEDs+0x48>)
 8001d94:	f001 faa6 	bl	80032e4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 8; i++) {
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2b07      	cmp	r3, #7
 8001da2:	ddee      	ble.n	8001d82 <clearAllLEDs+0x16>
    }
    MAX7219_Clear();
 8001da4:	f005 fa0b 	bl	80071be <MAX7219_Clear>
}
 8001da8:	bf00      	nop
 8001daa:	371c      	adds	r7, #28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd90      	pop	{r4, r7, pc}
 8001db0:	0800d200 	.word	0x0800d200
 8001db4:	40020400 	.word	0x40020400

08001db8 <staticSequence>:


void staticSequence(void) {
 8001db8:	b590      	push	{r4, r7, lr}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
	uint16_t L_Pin[8] = {L0_Pin, L1_Pin, L2_Pin, L3_Pin, L4_Pin, L5_Pin, L6_Pin, L7_Pin};
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <staticSequence+0x64>)
 8001dc0:	1d3c      	adds	r4, r7, #4
 8001dc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	MAX7219_DisplayChar(1, 'S');
 8001dc8:	2153      	movs	r1, #83	@ 0x53
 8001dca:	2001      	movs	r0, #1
 8001dcc:	f005 fa0d 	bl	80071ea <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, 'T');
 8001dd0:	2154      	movs	r1, #84	@ 0x54
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f005 fa09 	bl	80071ea <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, 'A');
 8001dd8:	2141      	movs	r1, #65	@ 0x41
 8001dda:	2003      	movs	r0, #3
 8001ddc:	f005 fa05 	bl	80071ea <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, 'T');
 8001de0:	2154      	movs	r1, #84	@ 0x54
 8001de2:	2004      	movs	r0, #4
 8001de4:	f005 fa01 	bl	80071ea <MAX7219_DisplayChar>
	for (int i = 0; i < 8; i++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
 8001dec:	e00d      	b.n	8001e0a <staticSequence+0x52>
		HAL_GPIO_WritePin(L0_GPIO_Port, L_Pin[i], GPIO_PIN_SET);
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	3318      	adds	r3, #24
 8001df4:	443b      	add	r3, r7
 8001df6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4808      	ldr	r0, [pc, #32]	@ (8001e20 <staticSequence+0x68>)
 8001e00:	f001 fa70 	bl	80032e4 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	ddee      	ble.n	8001dee <staticSequence+0x36>
	}
}
 8001e10:	bf00      	nop
 8001e12:	bf00      	nop
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd90      	pop	{r4, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	0800d200 	.word	0x0800d200
 8001e20:	40020400 	.word	0x40020400

08001e24 <forwardBackwardSequence>:


void forwardBackwardSequence(void) {
 8001e24:	b590      	push	{r4, r7, lr}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
	uint16_t L_Pin[8] = {L0_Pin, L1_Pin, L2_Pin, L3_Pin, L4_Pin, L5_Pin, L6_Pin, L7_Pin};
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001edc <forwardBackwardSequence+0xb8>)
 8001e2c:	463c      	mov	r4, r7
 8001e2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	MAX7219_DisplayChar(1, 'F');
 8001e34:	2146      	movs	r1, #70	@ 0x46
 8001e36:	2001      	movs	r0, #1
 8001e38:	f005 f9d7 	bl	80071ea <MAX7219_DisplayChar>
	MAX7219_DisplayChar(2, 'O');
 8001e3c:	214f      	movs	r1, #79	@ 0x4f
 8001e3e:	2002      	movs	r0, #2
 8001e40:	f005 f9d3 	bl	80071ea <MAX7219_DisplayChar>
	MAX7219_DisplayChar(3, 'B');
 8001e44:	2142      	movs	r1, #66	@ 0x42
 8001e46:	2003      	movs	r0, #3
 8001e48:	f005 f9cf 	bl	80071ea <MAX7219_DisplayChar>
	MAX7219_DisplayChar(4, 'A');
 8001e4c:	2141      	movs	r1, #65	@ 0x41
 8001e4e:	2004      	movs	r0, #4
 8001e50:	f005 f9cb 	bl	80071ea <MAX7219_DisplayChar>

	for (int i = 0; i < 2; i++) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	e018      	b.n	8001e8c <forwardBackwardSequence+0x68>
		for (int j = 7; j > -1; j--) {
 8001e5a:	2307      	movs	r3, #7
 8001e5c:	61bb      	str	r3, [r7, #24]
 8001e5e:	e00f      	b.n	8001e80 <forwardBackwardSequence+0x5c>
			HAL_GPIO_TogglePin(L0_GPIO_Port, L_Pin[j]);
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	3320      	adds	r3, #32
 8001e66:	443b      	add	r3, r7
 8001e68:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	481c      	ldr	r0, [pc, #112]	@ (8001ee0 <forwardBackwardSequence+0xbc>)
 8001e70:	f001 fa50 	bl	8003314 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8001e74:	2032      	movs	r0, #50	@ 0x32
 8001e76:	f000 fba7 	bl	80025c8 <HAL_Delay>
		for (int j = 7; j > -1; j--) {
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	daec      	bge.n	8001e60 <forwardBackwardSequence+0x3c>
	for (int i = 0; i < 2; i++) {
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	dde3      	ble.n	8001e5a <forwardBackwardSequence+0x36>
		}
	}
	for (int i = 0; i < 2; i++) {
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e018      	b.n	8001eca <forwardBackwardSequence+0xa6>
		for (int j = 0; j < 8; j++) {
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	e00f      	b.n	8001ebe <forwardBackwardSequence+0x9a>
			HAL_GPIO_TogglePin(L0_GPIO_Port, L_Pin[j]);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	3320      	adds	r3, #32
 8001ea4:	443b      	add	r3, r7
 8001ea6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480c      	ldr	r0, [pc, #48]	@ (8001ee0 <forwardBackwardSequence+0xbc>)
 8001eae:	f001 fa31 	bl	8003314 <HAL_GPIO_TogglePin>
			HAL_Delay(50);
 8001eb2:	2032      	movs	r0, #50	@ 0x32
 8001eb4:	f000 fb88 	bl	80025c8 <HAL_Delay>
		for (int j = 0; j < 8; j++) {
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	2b07      	cmp	r3, #7
 8001ec2:	ddec      	ble.n	8001e9e <forwardBackwardSequence+0x7a>
	for (int i = 0; i < 2; i++) {
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	dde3      	ble.n	8001e98 <forwardBackwardSequence+0x74>
		}
	}
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	@ 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd90      	pop	{r4, r7, pc}
 8001eda:	bf00      	nop
 8001edc:	0800d200 	.word	0x0800d200
 8001ee0:	40020400 	.word	0x40020400

08001ee4 <handleMovementActions>:

/* Fonction principale de gestion des mouvements */
void handleMovementActions(void) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001eea:	f000 fb63 	bl	80025b4 <HAL_GetTick>
 8001eee:	6078      	str	r0, [r7, #4]

    // Éviter les exécutions trop fréquentes (minimum 2 secondes entre les actions)
    if (current_time - last_movement_time < 2000) {
 8001ef0:	4b17      	ldr	r3, [pc, #92]	@ (8001f50 <handleMovementActions+0x6c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001efc:	d324      	bcc.n	8001f48 <handleMovementActions+0x64>
        return;
    }
	clearAllLEDs();  // Nettoyer l'affichage précédent
 8001efe:	f7ff ff35 	bl	8001d6c <clearAllLEDs>
	HAL_Delay(100);
 8001f02:	2064      	movs	r0, #100	@ 0x64
 8001f04:	f000 fb60 	bl	80025c8 <HAL_Delay>

	// Exécuter l'action correspondant au mouvement détecté
	switch(id_class) {
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <handleMovementActions+0x70>)
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	2b03      	cmp	r3, #3
 8001f10:	d810      	bhi.n	8001f34 <handleMovementActions+0x50>
 8001f12:	a201      	add	r2, pc, #4	@ (adr r2, 8001f18 <handleMovementActions+0x34>)
 8001f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f18:	08001f35 	.word	0x08001f35
 8001f1c:	08001f29 	.word	0x08001f29
 8001f20:	08001f2f 	.word	0x08001f2f
 8001f24:	08001f35 	.word	0x08001f35
		case 1: // "up-down"
			// upDownSequence();
			break;

		case 2: // "forward-backward"
			forwardBackwardSequence();
 8001f28:	f7ff ff7c 	bl	8001e24 <forwardBackwardSequence>
			break;
 8001f2c:	e003      	b.n	8001f36 <handleMovementActions+0x52>

		case 3: // "static"
			staticSequence();
 8001f2e:	f7ff ff43 	bl	8001db8 <staticSequence>
			break;
 8001f32:	e000      	b.n	8001f36 <handleMovementActions+0x52>
			break;

		case 0: // "unknown"
		default:
			// unknownSequence();
			break;
 8001f34:	bf00      	nop
	}

	previous_class = id_class;
 8001f36:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <handleMovementActions+0x70>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <handleMovementActions+0x74>)
 8001f3e:	701a      	strb	r2, [r3, #0]
	last_movement_time = current_time;
 8001f40:	4a03      	ldr	r2, [pc, #12]	@ (8001f50 <handleMovementActions+0x6c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e000      	b.n	8001f4a <handleMovementActions+0x66>
        return;
 8001f48:	bf00      	nop
}
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200009b4 	.word	0x200009b4
 8001f54:	2000039a 	.word	0x2000039a
 8001f58:	200009b0 	.word	0x200009b0

08001f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <Error_Handler+0x8>

08001f68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001f6e:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f72:	4a14      	ldr	r2, [pc, #80]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001f78:	6253      	str	r3, [r2, #36]	@ 0x24
 8001f7a:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f86:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6213      	str	r3, [r2, #32]
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001f94:	6a1b      	ldr	r3, [r3, #32]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	4a08      	ldr	r2, [pc, #32]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	6253      	str	r3, [r2, #36]	@ 0x24
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_MspInit+0x5c>)
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb2:	607b      	str	r3, [r7, #4]
 8001fb4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001fb6:	2007      	movs	r0, #7
 8001fb8:	f000 ffc2 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08a      	sub	sp, #40	@ 0x28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_ADC_MspInit+0x84>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d12b      	bne.n	8002042 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_ADC_MspInit+0x88>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <HAL_ADC_MspInit+0x88>)
 8001ff0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <HAL_ADC_MspInit+0x88>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002002:	4b13      	ldr	r3, [pc, #76]	@ (8002050 <HAL_ADC_MspInit+0x88>)
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <HAL_ADC_MspInit+0x88>)
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	61d3      	str	r3, [r2, #28]
 800200e:	4b10      	ldr	r3, [pc, #64]	@ (8002050 <HAL_ADC_MspInit+0x88>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	60fb      	str	r3, [r7, #12]
 8002018:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800201a:	2301      	movs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800201e:	2303      	movs	r3, #3
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	4619      	mov	r1, r3
 800202c:	4809      	ldr	r0, [pc, #36]	@ (8002054 <HAL_ADC_MspInit+0x8c>)
 800202e:	f000 ffc9 	bl	8002fc4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2012      	movs	r0, #18
 8002038:	f000 ff8d 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800203c:	2012      	movs	r0, #18
 800203e:	f000 ffa6 	bl	8002f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	@ 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40012400 	.word	0x40012400
 8002050:	40023800 	.word	0x40023800
 8002054:	40020000 	.word	0x40020000

08002058 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b08a      	sub	sp, #40	@ 0x28
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a17      	ldr	r2, [pc, #92]	@ (80020d4 <HAL_I2C_MspInit+0x7c>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d128      	bne.n	80020cc <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	@ (80020d8 <HAL_I2C_MspInit+0x80>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <HAL_I2C_MspInit+0x80>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	61d3      	str	r3, [r2, #28]
 8002086:	4b14      	ldr	r3, [pc, #80]	@ (80020d8 <HAL_I2C_MspInit+0x80>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002092:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002098:	2312      	movs	r3, #18
 800209a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020a4:	2304      	movs	r3, #4
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	4619      	mov	r1, r3
 80020ae:	480b      	ldr	r0, [pc, #44]	@ (80020dc <HAL_I2C_MspInit+0x84>)
 80020b0:	f000 ff88 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_I2C_MspInit+0x80>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	4a07      	ldr	r2, [pc, #28]	@ (80020d8 <HAL_I2C_MspInit+0x80>)
 80020ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020be:	6253      	str	r3, [r2, #36]	@ 0x24
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <HAL_I2C_MspInit+0x80>)
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020cc:	bf00      	nop
 80020ce:	3728      	adds	r7, #40	@ 0x28
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40005400 	.word	0x40005400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020400 	.word	0x40020400

080020e0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	@ 0x28
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
 80020f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a17      	ldr	r2, [pc, #92]	@ (800215c <HAL_SPI_MspInit+0x7c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d127      	bne.n	8002152 <HAL_SPI_MspInit+0x72>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002102:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_SPI_MspInit+0x80>)
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	4a16      	ldr	r2, [pc, #88]	@ (8002160 <HAL_SPI_MspInit+0x80>)
 8002108:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800210c:	6213      	str	r3, [r2, #32]
 800210e:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <HAL_SPI_MspInit+0x80>)
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002116:	613b      	str	r3, [r7, #16]
 8002118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211a:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <HAL_SPI_MspInit+0x80>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	4a10      	ldr	r2, [pc, #64]	@ (8002160 <HAL_SPI_MspInit+0x80>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	61d3      	str	r3, [r2, #28]
 8002126:	4b0e      	ldr	r3, [pc, #56]	@ (8002160 <HAL_SPI_MspInit+0x80>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8002132:	23e0      	movs	r3, #224	@ 0xe0
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002142:	2305      	movs	r3, #5
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	@ (8002164 <HAL_SPI_MspInit+0x84>)
 800214e:	f000 ff39 	bl	8002fc4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	@ 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40013000 	.word	0x40013000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000

08002168 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a0d      	ldr	r2, [pc, #52]	@ (80021ac <HAL_TIM_Base_MspInit+0x44>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d113      	bne.n	80021a2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800217a:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <HAL_TIM_Base_MspInit+0x48>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	4a0c      	ldr	r2, [pc, #48]	@ (80021b0 <HAL_TIM_Base_MspInit+0x48>)
 8002180:	f043 0310 	orr.w	r3, r3, #16
 8002184:	6253      	str	r3, [r2, #36]	@ 0x24
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_TIM_Base_MspInit+0x48>)
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2100      	movs	r1, #0
 8002196:	202b      	movs	r0, #43	@ 0x2b
 8002198:	f000 fedd 	bl	8002f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800219c:	202b      	movs	r0, #43	@ 0x2b
 800219e:	f000 fef6 	bl	8002f8e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM6_MspInit 1 */

  }

}
 80021a2:	bf00      	nop
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40001000 	.word	0x40001000
 80021b0:	40023800 	.word	0x40023800

080021b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b08a      	sub	sp, #40	@ 0x28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 0314 	add.w	r3, r7, #20
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a17      	ldr	r2, [pc, #92]	@ (8002230 <HAL_UART_MspInit+0x7c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d127      	bne.n	8002226 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021d6:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <HAL_UART_MspInit+0x80>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <HAL_UART_MspInit+0x80>)
 80021dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e0:	6253      	str	r3, [r2, #36]	@ 0x24
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <HAL_UART_MspInit+0x80>)
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_UART_MspInit+0x80>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a10      	ldr	r2, [pc, #64]	@ (8002234 <HAL_UART_MspInit+0x80>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	61d3      	str	r3, [r2, #28]
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <HAL_UART_MspInit+0x80>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002206:	230c      	movs	r3, #12
 8002208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002212:	2303      	movs	r3, #3
 8002214:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002216:	2307      	movs	r3, #7
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	@ (8002238 <HAL_UART_MspInit+0x84>)
 8002222:	f000 fecf 	bl	8002fc4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002226:	bf00      	nop
 8002228:	3728      	adds	r7, #40	@ 0x28
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40004400 	.word	0x40004400
 8002234:	40023800 	.word	0x40023800
 8002238:	40020000 	.word	0x40020000

0800223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002240:	bf00      	nop
 8002242:	e7fd      	b.n	8002240 <NMI_Handler+0x4>

08002244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <HardFault_Handler+0x4>

0800224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002250:	bf00      	nop
 8002252:	e7fd      	b.n	8002250 <MemManage_Handler+0x4>

08002254 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002258:	bf00      	nop
 800225a:	e7fd      	b.n	8002258 <BusFault_Handler+0x4>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002260:	bf00      	nop
 8002262:	e7fd      	b.n	8002260 <UsageFault_Handler+0x4>

08002264 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr

08002270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr

08002288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800228c:	f000 f980 	bl	8002590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	bd80      	pop	{r7, pc}

08002294 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002298:	4802      	ldr	r0, [pc, #8]	@ (80022a4 <ADC1_IRQHandler+0x10>)
 800229a:	f000 fafd 	bl	8002898 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000208 	.word	0x20000208

080022a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_ACC_INT_Pin);
 80022ac:	2020      	movs	r0, #32
 80022ae:	f001 f84b 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BP1_increaseSpeed_Pin);
 80022ba:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80022be:	f001 f843 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BP2_reduceSpeed_Pin);
 80022c2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80022c6:	f001 f83f 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80022ca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80022ce:	f001 f83b 	bl	8003348 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80022dc:	4802      	ldr	r0, [pc, #8]	@ (80022e8 <TIM6_IRQHandler+0x10>)
 80022de:	f003 f9c7 	bl	8005670 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20000308 	.word	0x20000308

080022ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	debounce_flag = 0;
 80022f4:	4b04      	ldr	r3, [pc, #16]	@ (8002308 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 80022fa:	4804      	ldr	r0, [pc, #16]	@ (800230c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022fc:	f003 f992 	bl	8005624 <HAL_TIM_Base_Stop_IT>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	200009b8 	.word	0x200009b8
 800230c:	20000308 	.word	0x20000308

08002310 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002310:	b480      	push	{r7}
 8002312:	af00      	add	r7, sp, #0
  return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <_kill>:

int _kill(int pid, int sig)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002328:	f006 ffae 	bl	8009288 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	2216      	movs	r2, #22
 8002330:	601a      	str	r2, [r3, #0]
  return -1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002336:	4618      	mov	r0, r3
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <_exit>:

void _exit (int status)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002346:	f04f 31ff 	mov.w	r1, #4294967295
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff ffe7 	bl	800231e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <_exit+0x12>

08002354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e00a      	b.n	800237c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002366:	f3af 8000 	nop.w
 800236a:	4601      	mov	r1, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	60ba      	str	r2, [r7, #8]
 8002372:	b2ca      	uxtb	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf0      	blt.n	8002366 <_read+0x12>
  }

  return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e009      	b.n	80023b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	60ba      	str	r2, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fb75 	bl	8001a98 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	dbf1      	blt.n	80023a0 <_write+0x12>
  }
  return len;
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_close>:

int _close(int file)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr

080023dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023ec:	605a      	str	r2, [r3, #4]
  return 0;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bc80      	pop	{r7}
 80023f8:	4770      	bx	lr

080023fa <_isatty>:

int _isatty(int file)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002402:	2301      	movs	r3, #1
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
	...

08002428 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002430:	4a14      	ldr	r2, [pc, #80]	@ (8002484 <_sbrk+0x5c>)
 8002432:	4b15      	ldr	r3, [pc, #84]	@ (8002488 <_sbrk+0x60>)
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d102      	bne.n	800244a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <_sbrk+0x64>)
 8002446:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <_sbrk+0x68>)
 8002448:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <_sbrk+0x64>)
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4413      	add	r3, r2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	429a      	cmp	r2, r3
 8002456:	d207      	bcs.n	8002468 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002458:	f006 ff16 	bl	8009288 <__errno>
 800245c:	4603      	mov	r3, r0
 800245e:	220c      	movs	r2, #12
 8002460:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e009      	b.n	800247c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002468:	4b08      	ldr	r3, [pc, #32]	@ (800248c <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800246e:	4b07      	ldr	r3, [pc, #28]	@ (800248c <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <_sbrk+0x64>)
 8002478:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247a:	68fb      	ldr	r3, [r7, #12]
}
 800247c:	4618      	mov	r0, r3
 800247e:	3718      	adds	r7, #24
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}
 8002484:	20014000 	.word	0x20014000
 8002488:	00000400 	.word	0x00000400
 800248c:	200009c8 	.word	0x200009c8
 8002490:	20001380 	.word	0x20001380

08002494 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr

080024a0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 80024a0:	f7ff fff8 	bl	8002494 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480b      	ldr	r0, [pc, #44]	@ (80024d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024a6:	490c      	ldr	r1, [pc, #48]	@ (80024d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024a8:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a09      	ldr	r2, [pc, #36]	@ (80024e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024bc:	4c09      	ldr	r4, [pc, #36]	@ (80024e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024ca:	f006 fee3 	bl	8009294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ce:	f7ff f82d 	bl	800152c <main>
  bx lr
 80024d2:	4770      	bx	lr
  ldr r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024d8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80024dc:	0800e4c8 	.word	0x0800e4c8
  ldr r2, =_sbss
 80024e0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80024e4:	20001380 	.word	0x20001380

080024e8 <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024e8:	e7fe      	b.n	80024e8 <COMP_ACQ_IRQHandler>

080024ea <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024f4:	2003      	movs	r0, #3
 80024f6:	f000 fd23 	bl	8002f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024fa:	2000      	movs	r0, #0
 80024fc:	f000 f80e 	bl	800251c <HAL_InitTick>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d002      	beq.n	800250c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	71fb      	strb	r3, [r7, #7]
 800250a:	e001      	b.n	8002510 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800250c:	f7ff fd2c 	bl	8001f68 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002510:	79fb      	ldrb	r3, [r7, #7]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
	...

0800251c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002528:	4b16      	ldr	r3, [pc, #88]	@ (8002584 <HAL_InitTick+0x68>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d022      	beq.n	8002576 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002530:	4b15      	ldr	r3, [pc, #84]	@ (8002588 <HAL_InitTick+0x6c>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b13      	ldr	r3, [pc, #76]	@ (8002584 <HAL_InitTick+0x68>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800253c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002540:	fbb2 f3f3 	udiv	r3, r2, r3
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fd30 	bl	8002faa <HAL_SYSTICK_Config>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10f      	bne.n	8002570 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	d809      	bhi.n	800256a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002556:	2200      	movs	r2, #0
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	f04f 30ff 	mov.w	r0, #4294967295
 800255e:	f000 fcfa 	bl	8002f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002562:	4a0a      	ldr	r2, [pc, #40]	@ (800258c <HAL_InitTick+0x70>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	e007      	b.n	800257a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	73fb      	strb	r3, [r7, #15]
 800256e:	e004      	b.n	800257a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	73fb      	strb	r3, [r7, #15]
 8002574:	e001      	b.n	800257a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	2000001c 	.word	0x2000001c
 8002588:	20000014 	.word	0x20000014
 800258c:	20000018 	.word	0x20000018

08002590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_IncTick+0x1c>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_IncTick+0x20>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4413      	add	r3, r2
 800259e:	4a03      	ldr	r2, [pc, #12]	@ (80025ac <HAL_IncTick+0x1c>)
 80025a0:	6013      	str	r3, [r2, #0]
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	200009cc 	.word	0x200009cc
 80025b0:	2000001c 	.word	0x2000001c

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b02      	ldr	r3, [pc, #8]	@ (80025c4 <HAL_GetTick+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr
 80025c4:	200009cc 	.word	0x200009cc

080025c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025d0:	f7ff fff0 	bl	80025b4 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e0:	d004      	beq.n	80025ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_Delay+0x40>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4413      	add	r3, r2
 80025ea:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025ec:	bf00      	nop
 80025ee:	f7ff ffe1 	bl	80025b4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d8f7      	bhi.n	80025ee <HAL_Delay+0x26>
  {
  }
}
 80025fe:	bf00      	nop
 8002600:	bf00      	nop
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000001c 	.word	0x2000001c

0800260c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b08e      	sub	sp, #56	@ 0x38
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t tmp_cr1 = 0;
 800261a:	2300      	movs	r3, #0
 800261c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t tmp_cr2 = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e127      	b.n	800287c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d115      	bne.n	8002666 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	651a      	str	r2, [r3, #80]	@ 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002648:	4b8e      	ldr	r3, [pc, #568]	@ (8002884 <HAL_ADC_Init+0x278>)
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	4a8d      	ldr	r2, [pc, #564]	@ (8002884 <HAL_ADC_Init+0x278>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	6213      	str	r3, [r2, #32]
 8002654:	4b8b      	ldr	r3, [pc, #556]	@ (8002884 <HAL_ADC_Init+0x278>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	60bb      	str	r3, [r7, #8]
 800265e:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f7ff fcb1 	bl	8001fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800266a:	f003 0310 	and.w	r3, r3, #16
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 80ff 	bne.w	8002872 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002678:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800267c:	f023 0302 	bic.w	r3, r3, #2
 8002680:	f043 0202 	orr.w	r2, r3, #2
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	64da      	str	r2, [r3, #76]	@ 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002688:	4b7f      	ldr	r3, [pc, #508]	@ (8002888 <HAL_ADC_Init+0x27c>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	497c      	ldr	r1, [pc, #496]	@ (8002888 <HAL_ADC_Init+0x27c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80026a2:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026aa:	4619      	mov	r1, r3
 80026ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026b0:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	fa93 f3a3 	rbit	r3, r3
 80026b8:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	fab3 f383 	clz	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80026c6:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80026cc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026d4:	4619      	mov	r1, r3
 80026d6:	2302      	movs	r3, #2
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	fa93 f3a3 	rbit	r3, r3
 80026e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80026ee:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80026f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026f2:	4313      	orrs	r3, r2
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d007      	beq.n	800270e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002706:	4313      	orrs	r3, r2
 8002708:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800270a:	4313      	orrs	r3, r2
 800270c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002718:	2b40      	cmp	r3, #64	@ 0x40
 800271a:	d04f      	beq.n	80027bc <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002722:	4313      	orrs	r3, r2
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800272e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6912      	ldr	r2, [r2, #16]
 8002734:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8002738:	d003      	beq.n	8002742 <HAL_ADC_Init+0x136>
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	6912      	ldr	r2, [r2, #16]
 800273e:	2a01      	cmp	r2, #1
 8002740:	d102      	bne.n	8002748 <HAL_ADC_Init+0x13c>
 8002742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002746:	e000      	b.n	800274a <HAL_ADC_Init+0x13e>
 8002748:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 800274a:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800274c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800274e:	4313      	orrs	r3, r2
 8002750:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d125      	bne.n	80027a8 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d114      	bne.n	8002790 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	3b01      	subs	r3, #1
 800276c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8002770:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	fa92 f2a2 	rbit	r2, r2
 8002778:	617a      	str	r2, [r7, #20]
  return result;
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	fab2 f282 	clz	r2, r2
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	4093      	lsls	r3, r2
 8002784:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002788:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800278a:	4313      	orrs	r3, r2
 800278c:	633b      	str	r3, [r7, #48]	@ 0x30
 800278e:	e00b      	b.n	80027a8 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	64da      	str	r2, [r3, #76]	@ 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	651a      	str	r2, [r3, #80]	@ 0x50
      else
      {
        /* do nothing */
      }
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	4b37      	ldr	r3, [pc, #220]	@ (800288c <HAL_ADC_Init+0x280>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6812      	ldr	r2, [r2, #0]
 80027b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <HAL_ADC_Init+0x284>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027d8:	d003      	beq.n	80027e2 <HAL_ADC_Init+0x1d6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d119      	bne.n	8002816 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e8:	f023 71f8 	bic.w	r1, r3, #32505856	@ 0x1f00000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	3b01      	subs	r3, #1
 80027f2:	f04f 72f8 	mov.w	r2, #32505856	@ 0x1f00000
 80027f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	fa92 f2a2 	rbit	r2, r2
 80027fe:	60fa      	str	r2, [r7, #12]
  return result;
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	fab2 f282 	clz	r2, r2
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	fa03 f202 	lsl.w	r2, r3, r2
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	631a      	str	r2, [r3, #48]	@ 0x30
 8002814:	e007      	b.n	8002826 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 72f8 	bic.w	r2, r2, #32505856	@ 0x1f00000
 8002824:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	4b19      	ldr	r3, [pc, #100]	@ (8002894 <HAL_ADC_Init+0x288>)
 800282e:	4013      	ands	r3, r2
 8002830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002832:	429a      	cmp	r2, r3
 8002834:	d10b      	bne.n	800284e <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002840:	f023 0303 	bic.w	r3, r3, #3
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800284c:	e014      	b.n	8002878 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002852:	f023 0312 	bic.w	r3, r3, #18
 8002856:	f043 0210 	orr.w	r2, r3, #16
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	64da      	str	r2, [r3, #76]	@ 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002862:	f043 0201 	orr.w	r2, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	651a      	str	r2, [r3, #80]	@ 0x50
      
      tmp_hal_status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002870:	e002      	b.n	8002878 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002878:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800287c:	4618      	mov	r0, r3
 800287e:	3738      	adds	r7, #56	@ 0x38
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40023800 	.word	0x40023800
 8002888:	40012700 	.word	0x40012700
 800288c:	fcfc16ff 	.word	0xfcfc16ff
 8002890:	c0fff189 	.word	0xc0fff189
 8002894:	bf80fffe 	.word	0xbf80fffe

08002898 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d04c      	beq.n	8002954 <HAL_ADC_IRQHandler+0xbc>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d047      	beq.n	8002954 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d12c      	bne.n	8002944 <HAL_ADC_IRQHandler+0xac>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d127      	bne.n	8002944 <HAL_ADC_IRQHandler+0xac>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fa:	f003 73f8 	and.w	r3, r3, #32505856	@ 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d006      	beq.n	8002910 <HAL_ADC_IRQHandler+0x78>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800290c:	2b00      	cmp	r3, #0
 800290e:	d119      	bne.n	8002944 <HAL_ADC_IRQHandler+0xac>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0220 	bic.w	r2, r2, #32
 800291e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	64da      	str	r2, [r3, #76]	@ 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_IRQHandler+0xac>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293c:	f043 0201 	orr.w	r2, r3, #1
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f89e 	bl	8002a86 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f06f 0212 	mvn.w	r2, #18
 8002952:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800295a:	2b00      	cmp	r3, #0
 800295c:	d05a      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x17c>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0304 	and.w	r3, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	d055      	beq.n	8002a14 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296c:	f003 0310 	and.w	r3, r3, #16
 8002970:	2b00      	cmp	r3, #0
 8002972:	d105      	bne.n	8002980 <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002978:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d13a      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002994:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d12c      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d125      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d11e      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d119      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029de:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	64da      	str	r2, [r3, #76]	@ 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d105      	bne.n	8002a04 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	64da      	str	r2, [r3, #76]	@ 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f9c5 	bl	8002d94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f06f 020c 	mvn.w	r2, #12
 8002a12:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d012      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x1ac>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00d      	beq.n	8002a44 <HAL_ADC_IRQHandler+0x1ac>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a2c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	64da      	str	r2, [r3, #76]	@ 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f82f 	bl	8002a98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f06f 0201 	mvn.w	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if((tmp_cr1 & ADC_IT_OVR) == ADC_IT_OVR)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d017      	beq.n	8002a7e <HAL_ADC_IRQHandler+0x1e6>
  {
    if((tmp_sr & ADC_FLAG_OVR) == ADC_FLAG_OVR)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <HAL_ADC_IRQHandler+0x1e6>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5c:	f043 0202 	orr.w	r2, r3, #2
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	651a      	str	r2, [r3, #80]	@ 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0220 	mvn.w	r2, #32
 8002a6c:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f81b 	bl	8002aaa <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0220 	mvn.w	r2, #32
 8002a7c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002aa0:	bf00      	nop
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr

08002aaa <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d101      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x20>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e14f      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x2c0>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b06      	cmp	r3, #6
 8002aea:	d81c      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	3b05      	subs	r3, #5
 8002afe:	221f      	movs	r2, #31
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43db      	mvns	r3, r3
 8002b06:	4019      	ands	r1, r3
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6818      	ldr	r0, [r3, #0]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	3b05      	subs	r3, #5
 8002b18:	fa00 f203 	lsl.w	r2, r0, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b24:	e07e      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d81c      	bhi.n	8002b68 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685a      	ldr	r2, [r3, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3b23      	subs	r3, #35	@ 0x23
 8002b40:	221f      	movs	r2, #31
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	4019      	ands	r1, r3
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685a      	ldr	r2, [r3, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	3b23      	subs	r3, #35	@ 0x23
 8002b5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b66:	e05d      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b12      	cmp	r3, #18
 8002b6e:	d81c      	bhi.n	8002baa <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b41      	subs	r3, #65	@ 0x41
 8002b82:	221f      	movs	r2, #31
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6818      	ldr	r0, [r3, #0]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b41      	subs	r3, #65	@ 0x41
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ba8:	e03c      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b18      	cmp	r3, #24
 8002bb0:	d81c      	bhi.n	8002bec <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b5f      	subs	r3, #95	@ 0x5f
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4019      	ands	r1, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	3b5f      	subs	r3, #95	@ 0x5f
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bea:	e01b      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3b7d      	subs	r3, #125	@ 0x7d
 8002bfe:	221f      	movs	r2, #31
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	43db      	mvns	r3, r3
 8002c06:	4019      	ands	r1, r3
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	4413      	add	r3, r2
 8002c16:	3b7d      	subs	r3, #125	@ 0x7d
 8002c18:	fa00 f203 	lsl.w	r2, r0, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b09      	cmp	r3, #9
 8002c2a:	d81a      	bhi.n	8002c62 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6959      	ldr	r1, [r3, #20]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	2207      	movs	r2, #7
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4019      	ands	r1, r3
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6898      	ldr	r0, [r3, #8]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	fa00 f203 	lsl.w	r2, r0, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	615a      	str	r2, [r3, #20]
 8002c60:	e05d      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2b13      	cmp	r3, #19
 8002c68:	d81c      	bhi.n	8002ca4 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6919      	ldr	r1, [r3, #16]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b1e      	subs	r3, #30
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	4019      	ands	r1, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6898      	ldr	r0, [r3, #8]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	3b1e      	subs	r3, #30
 8002c96:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	611a      	str	r2, [r3, #16]
 8002ca2:	e03c      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b1d      	cmp	r3, #29
 8002caa:	d81c      	bhi.n	8002ce6 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68d9      	ldr	r1, [r3, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b3c      	subs	r3, #60	@ 0x3c
 8002cbe:	2207      	movs	r2, #7
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	4019      	ands	r1, r3
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	6898      	ldr	r0, [r3, #8]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	3b3c      	subs	r3, #60	@ 0x3c
 8002cd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e01b      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3b5a      	subs	r3, #90	@ 0x5a
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43db      	mvns	r3, r3
 8002d00:	4019      	ands	r1, r3
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6898      	ldr	r0, [r3, #8]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	3b5a      	subs	r3, #90	@ 0x5a
 8002d12:	fa00 f203 	lsl.w	r2, r0, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b10      	cmp	r3, #16
 8002d24:	d003      	beq.n	8002d2e <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d2a:	2b11      	cmp	r3, #17
 8002d2c:	d121      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002d2e:	4b16      	ldr	r3, [pc, #88]	@ (8002d88 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d11b      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002d3a:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4a12      	ldr	r2, [pc, #72]	@ (8002d88 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d44:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d111      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d8c <HAL_ADC_ConfigChannel+0x2d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a0f      	ldr	r2, [pc, #60]	@ (8002d90 <HAL_ADC_ConfigChannel+0x2d4>)
 8002d54:	fba2 2303 	umull	r2, r3, r2, r3
 8002d58:	0c9a      	lsrs	r2, r3, #18
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	4413      	add	r3, r2
 8002d60:	005b      	lsls	r3, r3, #1
 8002d62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002d64:	e002      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3b01      	subs	r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1f9      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40012700 	.word	0x40012700
 8002d8c:	20000014 	.word	0x20000014
 8002d90:	431bde83 	.word	0x431bde83

08002d94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
	...

08002da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db8:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dbe:	68ba      	ldr	r2, [r7, #8]
 8002dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dda:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <__NVIC_SetPriorityGrouping+0x44>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	60d3      	str	r3, [r2, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df4:	4b04      	ldr	r3, [pc, #16]	@ (8002e08 <__NVIC_GetPriorityGrouping+0x18>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0a1b      	lsrs	r3, r3, #8
 8002dfa:	f003 0307 	and.w	r3, r3, #7
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	db0b      	blt.n	8002e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	f003 021f 	and.w	r2, r3, #31
 8002e24:	4906      	ldr	r1, [pc, #24]	@ (8002e40 <__NVIC_EnableIRQ+0x34>)
 8002e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2a:	095b      	lsrs	r3, r3, #5
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	@ (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	@ (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bc80      	pop	{r7}
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	@ 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	@ 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f0c:	d301      	bcc.n	8002f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e00f      	b.n	8002f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f12:	4a0a      	ldr	r2, [pc, #40]	@ (8002f3c <SysTick_Config+0x40>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1a:	210f      	movs	r1, #15
 8002f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f20:	f7ff ff90 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f24:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <SysTick_Config+0x40>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2a:	4b04      	ldr	r3, [pc, #16]	@ (8002f3c <SysTick_Config+0x40>)
 8002f2c:	2207      	movs	r2, #7
 8002f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	e000e010 	.word	0xe000e010

08002f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f7ff ff2d 	bl	8002da8 <__NVIC_SetPriorityGrouping>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b086      	sub	sp, #24
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	607a      	str	r2, [r7, #4]
 8002f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f64:	2300      	movs	r3, #0
 8002f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff42 	bl	8002df0 <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff35 	bl	8002e0c <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa2 	bl	8002efc <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fda:	e160      	b.n	800329e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 8152 	beq.w	8003298 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d005      	beq.n	800300c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003008:	2b02      	cmp	r3, #2
 800300a:	d130      	bne.n	800306e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	693a      	ldr	r2, [r7, #16]
 800303a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003042:	2201      	movs	r2, #1
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	43db      	mvns	r3, r3
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	4013      	ands	r3, r2
 8003050:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	091b      	lsrs	r3, r3, #4
 8003058:	f003 0201 	and.w	r2, r3, #1
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b03      	cmp	r3, #3
 8003078:	d017      	beq.n	80030aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2203      	movs	r2, #3
 8003086:	fa02 f303 	lsl.w	r3, r2, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689a      	ldr	r2, [r3, #8]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	693a      	ldr	r2, [r7, #16]
 80030a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d123      	bne.n	80030fe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	08da      	lsrs	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3208      	adds	r2, #8
 80030be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	220f      	movs	r2, #15
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	6939      	ldr	r1, [r7, #16]
 80030fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	2203      	movs	r2, #3
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4013      	ands	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80ac 	beq.w	8003298 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003140:	4b5e      	ldr	r3, [pc, #376]	@ (80032bc <HAL_GPIO_Init+0x2f8>)
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	4a5d      	ldr	r2, [pc, #372]	@ (80032bc <HAL_GPIO_Init+0x2f8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6213      	str	r3, [r2, #32]
 800314c:	4b5b      	ldr	r3, [pc, #364]	@ (80032bc <HAL_GPIO_Init+0x2f8>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003158:	4a59      	ldr	r2, [pc, #356]	@ (80032c0 <HAL_GPIO_Init+0x2fc>)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003164:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a51      	ldr	r2, [pc, #324]	@ (80032c4 <HAL_GPIO_Init+0x300>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d025      	beq.n	80031d0 <HAL_GPIO_Init+0x20c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a50      	ldr	r2, [pc, #320]	@ (80032c8 <HAL_GPIO_Init+0x304>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d01f      	beq.n	80031cc <HAL_GPIO_Init+0x208>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a4f      	ldr	r2, [pc, #316]	@ (80032cc <HAL_GPIO_Init+0x308>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d019      	beq.n	80031c8 <HAL_GPIO_Init+0x204>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a4e      	ldr	r2, [pc, #312]	@ (80032d0 <HAL_GPIO_Init+0x30c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_GPIO_Init+0x200>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a4d      	ldr	r2, [pc, #308]	@ (80032d4 <HAL_GPIO_Init+0x310>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00d      	beq.n	80031c0 <HAL_GPIO_Init+0x1fc>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a4c      	ldr	r2, [pc, #304]	@ (80032d8 <HAL_GPIO_Init+0x314>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <HAL_GPIO_Init+0x1f8>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a4b      	ldr	r2, [pc, #300]	@ (80032dc <HAL_GPIO_Init+0x318>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d101      	bne.n	80031b8 <HAL_GPIO_Init+0x1f4>
 80031b4:	2306      	movs	r3, #6
 80031b6:	e00c      	b.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031b8:	2307      	movs	r3, #7
 80031ba:	e00a      	b.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031bc:	2305      	movs	r3, #5
 80031be:	e008      	b.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031c0:	2304      	movs	r3, #4
 80031c2:	e006      	b.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031c4:	2303      	movs	r3, #3
 80031c6:	e004      	b.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e002      	b.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031d0:	2300      	movs	r3, #0
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	f002 0203 	and.w	r2, r2, #3
 80031d8:	0092      	lsls	r2, r2, #2
 80031da:	4093      	lsls	r3, r2
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80031e2:	4937      	ldr	r1, [pc, #220]	@ (80032c0 <HAL_GPIO_Init+0x2fc>)
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	089b      	lsrs	r3, r3, #2
 80031e8:	3302      	adds	r3, #2
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031f0:	4b3b      	ldr	r3, [pc, #236]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	4013      	ands	r3, r2
 80031fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4313      	orrs	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003214:	4a32      	ldr	r2, [pc, #200]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800321a:	4b31      	ldr	r3, [pc, #196]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	43db      	mvns	r3, r3
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4013      	ands	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800323e:	4a28      	ldr	r2, [pc, #160]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003244:	4b26      	ldr	r3, [pc, #152]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	43db      	mvns	r3, r3
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	4313      	orrs	r3, r2
 8003266:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003268:	4a1d      	ldr	r2, [pc, #116]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800326e:	4b1c      	ldr	r3, [pc, #112]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	43db      	mvns	r3, r3
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4013      	ands	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003292:	4a13      	ldr	r2, [pc, #76]	@ (80032e0 <HAL_GPIO_Init+0x31c>)
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	3301      	adds	r3, #1
 800329c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fa22 f303 	lsr.w	r3, r2, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f47f ae97 	bne.w	8002fdc <HAL_GPIO_Init+0x18>
  }
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	371c      	adds	r7, #28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800
 80032c0:	40010000 	.word	0x40010000
 80032c4:	40020000 	.word	0x40020000
 80032c8:	40020400 	.word	0x40020400
 80032cc:	40020800 	.word	0x40020800
 80032d0:	40020c00 	.word	0x40020c00
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40021400 	.word	0x40021400
 80032dc:	40021800 	.word	0x40021800
 80032e0:	40010400 	.word	0x40010400

080032e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	460b      	mov	r3, r1
 80032ee:	807b      	strh	r3, [r7, #2]
 80032f0:	4613      	mov	r3, r2
 80032f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f4:	787b      	ldrb	r3, [r7, #1]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032fa:	887a      	ldrh	r2, [r7, #2]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003300:	e003      	b.n	800330a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	041a      	lsls	r2, r3, #16
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	041a      	lsls	r2, r3, #16
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	43d9      	mvns	r1, r3
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	400b      	ands	r3, r1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	619a      	str	r2, [r3, #24]
}
 800333c:	bf00      	nop
 800333e:	3714      	adds	r7, #20
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr
	...

08003348 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	4603      	mov	r3, r0
 8003350:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003352:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	4013      	ands	r3, r2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d006      	beq.n	800336c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800335e:	4a05      	ldr	r2, [pc, #20]	@ (8003374 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003360:	88fb      	ldrh	r3, [r7, #6]
 8003362:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fbac 	bl	8001ac4 <HAL_GPIO_EXTI_Callback>
  }
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e12b      	b.n	80035e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fe5a 	bl	8002058 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	@ 0x24
 80033a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0201 	bic.w	r2, r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033dc:	f001 fd5e 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 80033e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	4a81      	ldr	r2, [pc, #516]	@ (80035ec <HAL_I2C_Init+0x274>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d807      	bhi.n	80033fc <HAL_I2C_Init+0x84>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a80      	ldr	r2, [pc, #512]	@ (80035f0 <HAL_I2C_Init+0x278>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	bf94      	ite	ls
 80033f4:	2301      	movls	r3, #1
 80033f6:	2300      	movhi	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	e006      	b.n	800340a <HAL_I2C_Init+0x92>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a7d      	ldr	r2, [pc, #500]	@ (80035f4 <HAL_I2C_Init+0x27c>)
 8003400:	4293      	cmp	r3, r2
 8003402:	bf94      	ite	ls
 8003404:	2301      	movls	r3, #1
 8003406:	2300      	movhi	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0e7      	b.n	80035e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	4a78      	ldr	r2, [pc, #480]	@ (80035f8 <HAL_I2C_Init+0x280>)
 8003416:	fba2 2303 	umull	r2, r3, r2, r3
 800341a:	0c9b      	lsrs	r3, r3, #18
 800341c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a6a      	ldr	r2, [pc, #424]	@ (80035ec <HAL_I2C_Init+0x274>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d802      	bhi.n	800344c <HAL_I2C_Init+0xd4>
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	3301      	adds	r3, #1
 800344a:	e009      	b.n	8003460 <HAL_I2C_Init+0xe8>
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003452:	fb02 f303 	mul.w	r3, r2, r3
 8003456:	4a69      	ldr	r2, [pc, #420]	@ (80035fc <HAL_I2C_Init+0x284>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	099b      	lsrs	r3, r3, #6
 800345e:	3301      	adds	r3, #1
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	430b      	orrs	r3, r1
 8003466:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003472:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	495c      	ldr	r1, [pc, #368]	@ (80035ec <HAL_I2C_Init+0x274>)
 800347c:	428b      	cmp	r3, r1
 800347e:	d819      	bhi.n	80034b4 <HAL_I2C_Init+0x13c>
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1e59      	subs	r1, r3, #1
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fbb1 f3f3 	udiv	r3, r1, r3
 800348e:	1c59      	adds	r1, r3, #1
 8003490:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003494:	400b      	ands	r3, r1
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <HAL_I2C_Init+0x138>
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	1e59      	subs	r1, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034ae:	e051      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 80034b0:	2304      	movs	r3, #4
 80034b2:	e04f      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d111      	bne.n	80034e0 <HAL_I2C_Init+0x168>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	1e58      	subs	r0, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6859      	ldr	r1, [r3, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	440b      	add	r3, r1
 80034ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ce:	3301      	adds	r3, #1
 80034d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e012      	b.n	8003506 <HAL_I2C_Init+0x18e>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1e58      	subs	r0, r3, #1
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6859      	ldr	r1, [r3, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	0099      	lsls	r1, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_I2C_Init+0x196>
 800350a:	2301      	movs	r3, #1
 800350c:	e022      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10e      	bne.n	8003534 <HAL_I2C_Init+0x1bc>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1e58      	subs	r0, r3, #1
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	440b      	add	r3, r1
 8003524:	fbb0 f3f3 	udiv	r3, r0, r3
 8003528:	3301      	adds	r3, #1
 800352a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800352e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003532:	e00f      	b.n	8003554 <HAL_I2C_Init+0x1dc>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	1e58      	subs	r0, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6859      	ldr	r1, [r3, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	0099      	lsls	r1, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	fbb0 f3f3 	udiv	r3, r0, r3
 800354a:	3301      	adds	r3, #1
 800354c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003550:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	6809      	ldr	r1, [r1, #0]
 8003558:	4313      	orrs	r3, r2
 800355a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003582:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6911      	ldr	r1, [r2, #16]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68d2      	ldr	r2, [r2, #12]
 800358e:	4311      	orrs	r1, r2
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	6812      	ldr	r2, [r2, #0]
 8003594:	430b      	orrs	r3, r1
 8003596:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695a      	ldr	r2, [r3, #20]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	000186a0 	.word	0x000186a0
 80035f0:	001e847f 	.word	0x001e847f
 80035f4:	003d08ff 	.word	0x003d08ff
 80035f8:	431bde83 	.word	0x431bde83
 80035fc:	10624dd3 	.word	0x10624dd3

08003600 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b088      	sub	sp, #32
 8003604:	af02      	add	r7, sp, #8
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	461a      	mov	r2, r3
 800360e:	4603      	mov	r3, r0
 8003610:	817b      	strh	r3, [r7, #10]
 8003612:	460b      	mov	r3, r1
 8003614:	813b      	strh	r3, [r7, #8]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800361a:	f7fe ffcb 	bl	80025b4 <HAL_GetTick>
 800361e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b20      	cmp	r3, #32
 800362a:	f040 80d9 	bne.w	80037e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2319      	movs	r3, #25
 8003634:	2201      	movs	r2, #1
 8003636:	496d      	ldr	r1, [pc, #436]	@ (80037ec <HAL_I2C_Mem_Write+0x1ec>)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fc8b 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003644:	2302      	movs	r3, #2
 8003646:	e0cc      	b.n	80037e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_I2C_Mem_Write+0x56>
 8003652:	2302      	movs	r3, #2
 8003654:	e0c5      	b.n	80037e2 <HAL_I2C_Mem_Write+0x1e2>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	d007      	beq.n	800367c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800368a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2221      	movs	r2, #33	@ 0x21
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2240      	movs	r2, #64	@ 0x40
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80036ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4a4d      	ldr	r2, [pc, #308]	@ (80037f0 <HAL_I2C_Mem_Write+0x1f0>)
 80036bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036be:	88f8      	ldrh	r0, [r7, #6]
 80036c0:	893a      	ldrh	r2, [r7, #8]
 80036c2:	8979      	ldrh	r1, [r7, #10]
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4603      	mov	r3, r0
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 fac2 	bl	8003c58 <I2C_RequestMemoryWrite>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d052      	beq.n	8003780 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e081      	b.n	80037e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fd50 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00d      	beq.n	800370a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d107      	bne.n	8003706 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003704:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e06b      	b.n	80037e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370e:	781a      	ldrb	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003724:	3b01      	subs	r3, #1
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b04      	cmp	r3, #4
 8003746:	d11b      	bne.n	8003780 <HAL_I2C_Mem_Write+0x180>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	d017      	beq.n	8003780 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	781a      	ldrb	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003760:	1c5a      	adds	r2, r3, #1
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800376a:	3b01      	subs	r3, #1
 800376c:	b29a      	uxth	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1aa      	bne.n	80036de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fd43 	bl	8004218 <I2C_WaitOnBTFFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379c:	2b04      	cmp	r3, #4
 800379e:	d107      	bne.n	80037b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e016      	b.n	80037e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	e000      	b.n	80037e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037e0:	2302      	movs	r3, #2
  }
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	00100002 	.word	0x00100002
 80037f0:	ffff0000 	.word	0xffff0000

080037f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08c      	sub	sp, #48	@ 0x30
 80037f8:	af02      	add	r7, sp, #8
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	4608      	mov	r0, r1
 80037fe:	4611      	mov	r1, r2
 8003800:	461a      	mov	r2, r3
 8003802:	4603      	mov	r3, r0
 8003804:	817b      	strh	r3, [r7, #10]
 8003806:	460b      	mov	r3, r1
 8003808:	813b      	strh	r3, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800380e:	f7fe fed1 	bl	80025b4 <HAL_GetTick>
 8003812:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b20      	cmp	r3, #32
 800381e:	f040 8214 	bne.w	8003c4a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	2319      	movs	r3, #25
 8003828:	2201      	movs	r2, #1
 800382a:	497b      	ldr	r1, [pc, #492]	@ (8003a18 <HAL_I2C_Mem_Read+0x224>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fb91 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
 800383a:	e207      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_I2C_Mem_Read+0x56>
 8003846:	2302      	movs	r3, #2
 8003848:	e200      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d007      	beq.n	8003870 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800387e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2222      	movs	r2, #34	@ 0x22
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2240      	movs	r2, #64	@ 0x40
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80038a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a5b      	ldr	r2, [pc, #364]	@ (8003a1c <HAL_I2C_Mem_Read+0x228>)
 80038b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038b2:	88f8      	ldrh	r0, [r7, #6]
 80038b4:	893a      	ldrh	r2, [r7, #8]
 80038b6:	8979      	ldrh	r1, [r7, #10]
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	4603      	mov	r3, r0
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 fa5e 	bl	8003d84 <I2C_RequestMemoryRead>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d001      	beq.n	80038d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e1bc      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d113      	bne.n	8003902 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	695b      	ldr	r3, [r3, #20]
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	623b      	str	r3, [r7, #32]
 80038ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	e190      	b.n	8003c24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	2b01      	cmp	r3, #1
 8003908:	d11b      	bne.n	8003942 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003918:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800391a:	2300      	movs	r3, #0
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	e170      	b.n	8003c24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	2b02      	cmp	r3, #2
 8003948:	d11b      	bne.n	8003982 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003958:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003968:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	61bb      	str	r3, [r7, #24]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	e150      	b.n	8003c24 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	617b      	str	r3, [r7, #20]
 8003996:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003998:	e144      	b.n	8003c24 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399e:	2b03      	cmp	r3, #3
 80039a0:	f200 80f1 	bhi.w	8003b86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d123      	bne.n	80039f4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fc79 	bl	80042a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d001      	beq.n	80039c0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e145      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039f2:	e117      	b.n	8003c24 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d14e      	bne.n	8003a9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a02:	2200      	movs	r2, #0
 8003a04:	4906      	ldr	r1, [pc, #24]	@ (8003a20 <HAL_I2C_Mem_Read+0x22c>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 faa4 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d008      	beq.n	8003a24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e11a      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
 8003a16:	bf00      	nop
 8003a18:	00100002 	.word	0x00100002
 8003a1c:	ffff0000 	.word	0xffff0000
 8003a20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	3b01      	subs	r3, #1
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a98:	e0c4      	b.n	8003c24 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	496c      	ldr	r1, [pc, #432]	@ (8003c54 <HAL_I2C_Mem_Read+0x460>)
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 fa55 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e0cb      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ac2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	1c5a      	adds	r2, r3, #1
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003afc:	2200      	movs	r2, #0
 8003afe:	4955      	ldr	r1, [pc, #340]	@ (8003c54 <HAL_I2C_Mem_Read+0x460>)
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fa27 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e09d      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	691a      	ldr	r2, [r3, #16]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	1c5a      	adds	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	691a      	ldr	r2, [r3, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5c:	b2d2      	uxtb	r2, r2
 8003b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b84:	e04e      	b.n	8003c24 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fb8c 	bl	80042a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e058      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d124      	bne.n	8003c24 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d107      	bne.n	8003bf2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bf0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f47f aeb6 	bne.w	800399a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2220      	movs	r2, #32
 8003c32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e000      	b.n	8003c4c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003c4a:	2302      	movs	r3, #2
  }
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3728      	adds	r7, #40	@ 0x28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	00010004 	.word	0x00010004

08003c58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b088      	sub	sp, #32
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	4608      	mov	r0, r1
 8003c62:	4611      	mov	r1, r2
 8003c64:	461a      	mov	r2, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	817b      	strh	r3, [r7, #10]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	813b      	strh	r3, [r7, #8]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 f960 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca8:	d103      	bne.n	8003cb2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e05f      	b.n	8003d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cb6:	897b      	ldrh	r3, [r7, #10]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	6a3a      	ldr	r2, [r7, #32]
 8003cca:	492d      	ldr	r1, [pc, #180]	@ (8003d80 <I2C_RequestMemoryWrite+0x128>)
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f9bb 	bl	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e04c      	b.n	8003d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	617b      	str	r3, [r7, #20]
 8003cf0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf4:	6a39      	ldr	r1, [r7, #32]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fa46 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00d      	beq.n	8003d1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d107      	bne.n	8003d1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e02b      	b.n	8003d76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d105      	bne.n	8003d30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d24:	893b      	ldrh	r3, [r7, #8]
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	611a      	str	r2, [r3, #16]
 8003d2e:	e021      	b.n	8003d74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003d30:	893b      	ldrh	r3, [r7, #8]
 8003d32:	0a1b      	lsrs	r3, r3, #8
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d40:	6a39      	ldr	r1, [r7, #32]
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa20 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e005      	b.n	8003d76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d6a:	893b      	ldrh	r3, [r7, #8]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3718      	adds	r7, #24
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	00010002 	.word	0x00010002

08003d84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	4608      	mov	r0, r1
 8003d8e:	4611      	mov	r1, r2
 8003d90:	461a      	mov	r2, r3
 8003d92:	4603      	mov	r3, r0
 8003d94:	817b      	strh	r3, [r7, #10]
 8003d96:	460b      	mov	r3, r1
 8003d98:	813b      	strh	r3, [r7, #8]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003dac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	6a3b      	ldr	r3, [r7, #32]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f8c2 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003de4:	d103      	bne.n	8003dee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003dec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e0aa      	b.n	8003f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003df2:	897b      	ldrh	r3, [r7, #10]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	6a3a      	ldr	r2, [r7, #32]
 8003e06:	4952      	ldr	r1, [pc, #328]	@ (8003f50 <I2C_RequestMemoryRead+0x1cc>)
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f000 f91d 	bl	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e097      	b.n	8003f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e30:	6a39      	ldr	r1, [r7, #32]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f9a8 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00d      	beq.n	8003e5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d107      	bne.n	8003e56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e076      	b.n	8003f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e5a:	88fb      	ldrh	r3, [r7, #6]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d105      	bne.n	8003e6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e60:	893b      	ldrh	r3, [r7, #8]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	611a      	str	r2, [r3, #16]
 8003e6a:	e021      	b.n	8003eb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e6c:	893b      	ldrh	r3, [r7, #8]
 8003e6e:	0a1b      	lsrs	r3, r3, #8
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	b2da      	uxtb	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e7c:	6a39      	ldr	r1, [r7, #32]
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f000 f982 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00d      	beq.n	8003ea6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d107      	bne.n	8003ea2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e050      	b.n	8003f48 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ea6:	893b      	ldrh	r3, [r7, #8]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb2:	6a39      	ldr	r1, [r7, #32]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 f967 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d107      	bne.n	8003ed8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ed6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e035      	b.n	8003f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f000 f82b 	bl	8003f54 <I2C_WaitOnFlagUntilTimeout>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00d      	beq.n	8003f20 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f12:	d103      	bne.n	8003f1c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e013      	b.n	8003f48 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f20:	897b      	ldrh	r3, [r7, #10]
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	b2da      	uxtb	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	6a3a      	ldr	r2, [r7, #32]
 8003f34:	4906      	ldr	r1, [pc, #24]	@ (8003f50 <I2C_RequestMemoryRead+0x1cc>)
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f000 f886 	bl	8004048 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003f46:	2300      	movs	r3, #0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	00010002 	.word	0x00010002

08003f54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f64:	e048      	b.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6c:	d044      	beq.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7fe fb21 	bl	80025b4 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d302      	bcc.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d139      	bne.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	0c1b      	lsrs	r3, r3, #16
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d10d      	bne.n	8003faa <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	43da      	mvns	r2, r3
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bf0c      	ite	eq
 8003fa0:	2301      	moveq	r3, #1
 8003fa2:	2300      	movne	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	e00c      	b.n	8003fc4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	79fb      	ldrb	r3, [r7, #7]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d116      	bne.n	8003ff8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe4:	f043 0220 	orr.w	r2, r3, #32
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e023      	b.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	0c1b      	lsrs	r3, r3, #16
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d10d      	bne.n	800401e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	43da      	mvns	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	e00c      	b.n	8004038 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	429a      	cmp	r2, r3
 800403c:	d093      	beq.n	8003f66 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004056:	e071      	b.n	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004062:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004066:	d123      	bne.n	80040b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004076:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004080:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2220      	movs	r2, #32
 800408c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409c:	f043 0204 	orr.w	r2, r3, #4
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e067      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b6:	d041      	beq.n	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b8:	f7fe fa7c 	bl	80025b4 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d136      	bne.n	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	0c1b      	lsrs	r3, r3, #16
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d10c      	bne.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	43da      	mvns	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	4013      	ands	r3, r2
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bf14      	ite	ne
 80040ea:	2301      	movne	r3, #1
 80040ec:	2300      	moveq	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	e00b      	b.n	800410a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	43da      	mvns	r2, r3
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	b29b      	uxth	r3, r3
 8004100:	2b00      	cmp	r3, #0
 8004102:	bf14      	ite	ne
 8004104:	2301      	movne	r3, #1
 8004106:	2300      	moveq	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004128:	f043 0220 	orr.w	r2, r3, #32
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e021      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	0c1b      	lsrs	r3, r3, #16
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d10c      	bne.n	8004160 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	43da      	mvns	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4013      	ands	r3, r2
 8004152:	b29b      	uxth	r3, r3
 8004154:	2b00      	cmp	r3, #0
 8004156:	bf14      	ite	ne
 8004158:	2301      	movne	r3, #1
 800415a:	2300      	moveq	r3, #0
 800415c:	b2db      	uxtb	r3, r3
 800415e:	e00b      	b.n	8004178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4013      	ands	r3, r2
 800416c:	b29b      	uxth	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	bf14      	ite	ne
 8004172:	2301      	movne	r3, #1
 8004174:	2300      	moveq	r3, #0
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	f47f af6d 	bne.w	8004058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004194:	e034      	b.n	8004200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f8e3 	bl	8004362 <I2C_IsAcknowledgeFailed>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e034      	b.n	8004210 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d028      	beq.n	8004200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fe fa01 	bl	80025b4 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11d      	bne.n	8004200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ce:	2b80      	cmp	r3, #128	@ 0x80
 80041d0:	d016      	beq.n	8004200 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	f043 0220 	orr.w	r2, r3, #32
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e007      	b.n	8004210 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420a:	2b80      	cmp	r3, #128	@ 0x80
 800420c:	d1c3      	bne.n	8004196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004224:	e034      	b.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f89b 	bl	8004362 <I2C_IsAcknowledgeFailed>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e034      	b.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d028      	beq.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800423e:	f7fe f9b9 	bl	80025b4 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	68ba      	ldr	r2, [r7, #8]
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11d      	bne.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0304 	and.w	r3, r3, #4
 800425e:	2b04      	cmp	r3, #4
 8004260:	d016      	beq.n	8004290 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e007      	b.n	80042a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f003 0304 	and.w	r3, r3, #4
 800429a:	2b04      	cmp	r3, #4
 800429c:	d1c3      	bne.n	8004226 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042b4:	e049      	b.n	800434a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b10      	cmp	r3, #16
 80042c2:	d119      	bne.n	80042f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0210 	mvn.w	r2, #16
 80042cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e030      	b.n	800435a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f8:	f7fe f95c 	bl	80025b4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	68ba      	ldr	r2, [r7, #8]
 8004304:	429a      	cmp	r2, r3
 8004306:	d302      	bcc.n	800430e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d11d      	bne.n	800434a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004318:	2b40      	cmp	r3, #64	@ 0x40
 800431a:	d016      	beq.n	800434a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	f043 0220 	orr.w	r2, r3, #32
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e007      	b.n	800435a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b40      	cmp	r3, #64	@ 0x40
 8004356:	d1ae      	bne.n	80042b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004362:	b480      	push	{r7}
 8004364:	b083      	sub	sp, #12
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004378:	d11b      	bne.n	80043b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004382:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2220      	movs	r2, #32
 800438e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	f043 0204 	orr.w	r2, r3, #4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bc80      	pop	{r7}
 80043bc:	4770      	bx	lr
	...

080043c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e31d      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	4b94      	ldr	r3, [pc, #592]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	f003 030c 	and.w	r3, r3, #12
 80043da:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043dc:	4b91      	ldr	r3, [pc, #580]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043e4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d07b      	beq.n	80044ea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d006      	beq.n	8004406 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d10f      	bne.n	800441e <HAL_RCC_OscConfig+0x5e>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004404:	d10b      	bne.n	800441e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004406:	4b87      	ldr	r3, [pc, #540]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d06a      	beq.n	80044e8 <HAL_RCC_OscConfig+0x128>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d166      	bne.n	80044e8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e2f7      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d106      	bne.n	8004434 <HAL_RCC_OscConfig+0x74>
 8004426:	4b7f      	ldr	r3, [pc, #508]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a7e      	ldr	r2, [pc, #504]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004430:	6013      	str	r3, [r2, #0]
 8004432:	e02d      	b.n	8004490 <HAL_RCC_OscConfig+0xd0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10c      	bne.n	8004456 <HAL_RCC_OscConfig+0x96>
 800443c:	4b79      	ldr	r3, [pc, #484]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a78      	ldr	r2, [pc, #480]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	4b76      	ldr	r3, [pc, #472]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a75      	ldr	r2, [pc, #468]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800444e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	e01c      	b.n	8004490 <HAL_RCC_OscConfig+0xd0>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b05      	cmp	r3, #5
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0xb8>
 800445e:	4b71      	ldr	r3, [pc, #452]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a70      	ldr	r2, [pc, #448]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b6e      	ldr	r3, [pc, #440]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a6d      	ldr	r2, [pc, #436]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xd0>
 8004478:	4b6a      	ldr	r3, [pc, #424]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a69      	ldr	r2, [pc, #420]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b67      	ldr	r3, [pc, #412]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a66      	ldr	r2, [pc, #408]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004498:	f7fe f88c 	bl	80025b4 <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fe f888 	bl	80025b4 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	@ 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e2ad      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xe0>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c0:	f7fe f878 	bl	80025b4 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fe f874 	bl	80025b4 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e299      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044da:	4b52      	ldr	r3, [pc, #328]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x108>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d05a      	beq.n	80045ac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	d119      	bne.n	8004536 <HAL_RCC_OscConfig+0x176>
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004508:	4b46      	ldr	r3, [pc, #280]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_OscConfig+0x160>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d001      	beq.n	8004520 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e276      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004520:	4b40      	ldr	r3, [pc, #256]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	021b      	lsls	r3, r3, #8
 800452e:	493d      	ldr	r1, [pc, #244]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004530:	4313      	orrs	r3, r2
 8004532:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004534:	e03a      	b.n	80045ac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d020      	beq.n	8004580 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800453e:	4b3a      	ldr	r3, [pc, #232]	@ (8004628 <HAL_RCC_OscConfig+0x268>)
 8004540:	2201      	movs	r2, #1
 8004542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004544:	f7fe f836 	bl	80025b4 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800454c:	f7fe f832 	bl	80025b4 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e257      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800455e:	4b31      	ldr	r3, [pc, #196]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456a:	4b2e      	ldr	r3, [pc, #184]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	492a      	ldr	r1, [pc, #168]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
 800457e:	e015      	b.n	80045ac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004580:	4b29      	ldr	r3, [pc, #164]	@ (8004628 <HAL_RCC_OscConfig+0x268>)
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004586:	f7fe f815 	bl	80025b4 <HAL_GetTick>
 800458a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800458c:	e008      	b.n	80045a0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800458e:	f7fe f811 	bl	80025b4 <HAL_GetTick>
 8004592:	4602      	mov	r2, r0
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	2b02      	cmp	r3, #2
 800459a:	d901      	bls.n	80045a0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e236      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80045a0:	4b20      	ldr	r3, [pc, #128]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1f0      	bne.n	800458e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 80b8 	beq.w	800472a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d170      	bne.n	80046a2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045c0:	4b18      	ldr	r3, [pc, #96]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_RCC_OscConfig+0x218>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e21a      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a1a      	ldr	r2, [r3, #32]
 80045dc:	4b11      	ldr	r3, [pc, #68]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d921      	bls.n	800462c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fc7d 	bl	8004eec <RCC_SetFlashLatencyFromMSIRange>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e208      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045fc:	4b09      	ldr	r3, [pc, #36]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	4906      	ldr	r1, [pc, #24]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800460a:	4313      	orrs	r3, r2
 800460c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460e:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	4901      	ldr	r1, [pc, #4]	@ (8004624 <HAL_RCC_OscConfig+0x264>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
 8004622:	e020      	b.n	8004666 <HAL_RCC_OscConfig+0x2a6>
 8004624:	40023800 	.word	0x40023800
 8004628:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800462c:	4b99      	ldr	r3, [pc, #612]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a1b      	ldr	r3, [r3, #32]
 8004638:	4996      	ldr	r1, [pc, #600]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800463e:	4b95      	ldr	r3, [pc, #596]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	061b      	lsls	r3, r3, #24
 800464c:	4991      	ldr	r1, [pc, #580]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800464e:	4313      	orrs	r3, r2
 8004650:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 fc48 	bl	8004eec <RCC_SetFlashLatencyFromMSIRange>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e1d3      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	0b5b      	lsrs	r3, r3, #13
 800466c:	3301      	adds	r3, #1
 800466e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004676:	4a87      	ldr	r2, [pc, #540]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004678:	6892      	ldr	r2, [r2, #8]
 800467a:	0912      	lsrs	r2, r2, #4
 800467c:	f002 020f 	and.w	r2, r2, #15
 8004680:	4985      	ldr	r1, [pc, #532]	@ (8004898 <HAL_RCC_OscConfig+0x4d8>)
 8004682:	5c8a      	ldrb	r2, [r1, r2]
 8004684:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004686:	4a85      	ldr	r2, [pc, #532]	@ (800489c <HAL_RCC_OscConfig+0x4dc>)
 8004688:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800468a:	4b85      	ldr	r3, [pc, #532]	@ (80048a0 <HAL_RCC_OscConfig+0x4e0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fd ff44 	bl	800251c <HAL_InitTick>
 8004694:	4603      	mov	r3, r0
 8004696:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d045      	beq.n	800472a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	e1b5      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d029      	beq.n	80046fe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80046aa:	4b7e      	ldr	r3, [pc, #504]	@ (80048a4 <HAL_RCC_OscConfig+0x4e4>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fd ff80 	bl	80025b4 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046b8:	f7fd ff7c 	bl	80025b4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1a1      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80046ca:	4b72      	ldr	r3, [pc, #456]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d0f0      	beq.n	80046b8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80046d6:	4b6f      	ldr	r3, [pc, #444]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	496c      	ldr	r1, [pc, #432]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	061b      	lsls	r3, r3, #24
 80046f6:	4967      	ldr	r1, [pc, #412]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	604b      	str	r3, [r1, #4]
 80046fc:	e015      	b.n	800472a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046fe:	4b69      	ldr	r3, [pc, #420]	@ (80048a4 <HAL_RCC_OscConfig+0x4e4>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fd ff56 	bl	80025b4 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800470c:	f7fd ff52 	bl	80025b4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e177      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800471e:	4b5d      	ldr	r3, [pc, #372]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d030      	beq.n	8004798 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473e:	4b5a      	ldr	r3, [pc, #360]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004744:	f7fd ff36 	bl	80025b4 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800474c:	f7fd ff32 	bl	80025b4 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e157      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800475e:	4b4d      	ldr	r3, [pc, #308]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x38c>
 800476a:	e015      	b.n	8004798 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476c:	4b4e      	ldr	r3, [pc, #312]	@ (80048a8 <HAL_RCC_OscConfig+0x4e8>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004772:	f7fd ff1f 	bl	80025b4 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477a:	f7fd ff1b 	bl	80025b4 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e140      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800478c:	4b41      	ldr	r3, [pc, #260]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800478e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 80b5 	beq.w	8004910 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047a6:	2300      	movs	r3, #0
 80047a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047aa:	4b3a      	ldr	r3, [pc, #232]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b6:	4b37      	ldr	r3, [pc, #220]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	4a36      	ldr	r2, [pc, #216]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047c0:	6253      	str	r3, [r2, #36]	@ 0x24
 80047c2:	4b34      	ldr	r3, [pc, #208]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 80047c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ca:	60bb      	str	r3, [r7, #8]
 80047cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ce:	2301      	movs	r3, #1
 80047d0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047d2:	4b36      	ldr	r3, [pc, #216]	@ (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d118      	bne.n	8004810 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047de:	4b33      	ldr	r3, [pc, #204]	@ (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a32      	ldr	r2, [pc, #200]	@ (80048ac <HAL_RCC_OscConfig+0x4ec>)
 80047e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047ea:	f7fd fee3 	bl	80025b4 <HAL_GetTick>
 80047ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	e008      	b.n	8004804 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047f2:	f7fd fedf 	bl	80025b4 <HAL_GetTick>
 80047f6:	4602      	mov	r2, r0
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	2b64      	cmp	r3, #100	@ 0x64
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e104      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	4b29      	ldr	r3, [pc, #164]	@ (80048ac <HAL_RCC_OscConfig+0x4ec>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d0f0      	beq.n	80047f2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d106      	bne.n	8004826 <HAL_RCC_OscConfig+0x466>
 8004818:	4b1e      	ldr	r3, [pc, #120]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800481a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800481c:	4a1d      	ldr	r2, [pc, #116]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004822:	6353      	str	r3, [r2, #52]	@ 0x34
 8004824:	e02d      	b.n	8004882 <HAL_RCC_OscConfig+0x4c2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10c      	bne.n	8004848 <HAL_RCC_OscConfig+0x488>
 800482e:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004832:	4a18      	ldr	r2, [pc, #96]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004838:	6353      	str	r3, [r2, #52]	@ 0x34
 800483a:	4b16      	ldr	r3, [pc, #88]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800483c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800483e:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004840:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004844:	6353      	str	r3, [r2, #52]	@ 0x34
 8004846:	e01c      	b.n	8004882 <HAL_RCC_OscConfig+0x4c2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	2b05      	cmp	r3, #5
 800484e:	d10c      	bne.n	800486a <HAL_RCC_OscConfig+0x4aa>
 8004850:	4b10      	ldr	r3, [pc, #64]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004854:	4a0f      	ldr	r2, [pc, #60]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004856:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800485a:	6353      	str	r3, [r2, #52]	@ 0x34
 800485c:	4b0d      	ldr	r3, [pc, #52]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800485e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004860:	4a0c      	ldr	r2, [pc, #48]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004862:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004866:	6353      	str	r3, [r2, #52]	@ 0x34
 8004868:	e00b      	b.n	8004882 <HAL_RCC_OscConfig+0x4c2>
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800486c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800486e:	4a09      	ldr	r2, [pc, #36]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004874:	6353      	str	r3, [r2, #52]	@ 0x34
 8004876:	4b07      	ldr	r3, [pc, #28]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	4a06      	ldr	r2, [pc, #24]	@ (8004894 <HAL_RCC_OscConfig+0x4d4>)
 800487c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004880:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d024      	beq.n	80048d4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488a:	f7fd fe93 	bl	80025b4 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004890:	e019      	b.n	80048c6 <HAL_RCC_OscConfig+0x506>
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	0800e008 	.word	0x0800e008
 800489c:	20000014 	.word	0x20000014
 80048a0:	20000018 	.word	0x20000018
 80048a4:	42470020 	.word	0x42470020
 80048a8:	42470680 	.word	0x42470680
 80048ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd fe80 	bl	80025b4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0a3      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048c6:	4b54      	ldr	r3, [pc, #336]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 80048c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0ee      	beq.n	80048b0 <HAL_RCC_OscConfig+0x4f0>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d4:	f7fd fe6e 	bl	80025b4 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048da:	e00a      	b.n	80048f2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048dc:	f7fd fe6a 	bl	80025b4 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e08d      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048f2:	4b49      	ldr	r3, [pc, #292]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 80048f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1ee      	bne.n	80048dc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048fe:	7ffb      	ldrb	r3, [r7, #31]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d105      	bne.n	8004910 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004904:	4b44      	ldr	r3, [pc, #272]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	4a43      	ldr	r2, [pc, #268]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 800490a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800490e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	2b00      	cmp	r3, #0
 8004916:	d079      	beq.n	8004a0c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d056      	beq.n	80049cc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004922:	2b02      	cmp	r3, #2
 8004924:	d13b      	bne.n	800499e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b3d      	ldr	r3, [pc, #244]	@ (8004a1c <HAL_RCC_OscConfig+0x65c>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fd fe42 	bl	80025b4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004934:	f7fd fe3e 	bl	80025b4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e063      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004946:	4b34      	ldr	r3, [pc, #208]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004952:	4b31      	ldr	r3, [pc, #196]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004962:	4319      	orrs	r1, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	430b      	orrs	r3, r1
 800496a:	492b      	ldr	r1, [pc, #172]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 800496c:	4313      	orrs	r3, r2
 800496e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004970:	4b2a      	ldr	r3, [pc, #168]	@ (8004a1c <HAL_RCC_OscConfig+0x65c>)
 8004972:	2201      	movs	r2, #1
 8004974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004976:	f7fd fe1d 	bl	80025b4 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800497e:	f7fd fe19 	bl	80025b4 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e03e      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004990:	4b21      	ldr	r3, [pc, #132]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0f0      	beq.n	800497e <HAL_RCC_OscConfig+0x5be>
 800499c:	e036      	b.n	8004a0c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800499e:	4b1f      	ldr	r3, [pc, #124]	@ (8004a1c <HAL_RCC_OscConfig+0x65c>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a4:	f7fd fe06 	bl	80025b4 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049ac:	f7fd fe02 	bl	80025b4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e027      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049be:	4b16      	ldr	r3, [pc, #88]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1f0      	bne.n	80049ac <HAL_RCC_OscConfig+0x5ec>
 80049ca:	e01f      	b.n	8004a0c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e01a      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049d8:	4b0f      	ldr	r3, [pc, #60]	@ (8004a18 <HAL_RCC_OscConfig+0x658>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d106      	bne.n	8004a08 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d001      	beq.n	8004a0c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e000      	b.n	8004a0e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	42470060 	.word	0x42470060

08004a20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e11a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a34:	4b8f      	ldr	r3, [pc, #572]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d919      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d105      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x34>
 8004a48:	4b8a      	ldr	r3, [pc, #552]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a89      	ldr	r2, [pc, #548]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a4e:	f043 0304 	orr.w	r3, r3, #4
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b87      	ldr	r3, [pc, #540]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 0201 	bic.w	r2, r3, #1
 8004a5c:	4985      	ldr	r1, [pc, #532]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a64:	4b83      	ldr	r3, [pc, #524]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d001      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e0f9      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a82:	4b7d      	ldr	r3, [pc, #500]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	497a      	ldr	r1, [pc, #488]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 808e 	beq.w	8004bbe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aaa:	4b73      	ldr	r3, [pc, #460]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d121      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e0d7      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d115      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0cb      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ada:	4b67      	ldr	r3, [pc, #412]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d109      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0bf      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004aea:	4b63      	ldr	r3, [pc, #396]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0b7      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004afa:	4b5f      	ldr	r3, [pc, #380]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f023 0203 	bic.w	r2, r3, #3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	495c      	ldr	r1, [pc, #368]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b0c:	f7fd fd52 	bl	80025b4 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d112      	bne.n	8004b40 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b1a:	e00a      	b.n	8004b32 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b1c:	f7fd fd4a 	bl	80025b4 <HAL_GetTick>
 8004b20:	4602      	mov	r2, r0
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d901      	bls.n	8004b32 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e09b      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b32:	4b51      	ldr	r3, [pc, #324]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 030c 	and.w	r3, r3, #12
 8004b3a:	2b08      	cmp	r3, #8
 8004b3c:	d1ee      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xfc>
 8004b3e:	e03e      	b.n	8004bbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d112      	bne.n	8004b6e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b48:	e00a      	b.n	8004b60 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4a:	f7fd fd33 	bl	80025b4 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e084      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b60:	4b45      	ldr	r3, [pc, #276]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f003 030c 	and.w	r3, r3, #12
 8004b68:	2b0c      	cmp	r3, #12
 8004b6a:	d1ee      	bne.n	8004b4a <HAL_RCC_ClockConfig+0x12a>
 8004b6c:	e027      	b.n	8004bbe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d11d      	bne.n	8004bb2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b76:	e00a      	b.n	8004b8e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b78:	f7fd fd1c 	bl	80025b4 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e06d      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	d1ee      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x158>
 8004b9a:	e010      	b.n	8004bbe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fd fd0a 	bl	80025b4 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e05b      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004bb2:	4b31      	ldr	r3, [pc, #196]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d219      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d105      	bne.n	8004bde <HAL_RCC_ClockConfig+0x1be>
 8004bd2:	4b28      	ldr	r3, [pc, #160]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a27      	ldr	r2, [pc, #156]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bd8:	f043 0304 	orr.w	r3, r3, #4
 8004bdc:	6013      	str	r3, [r2, #0]
 8004bde:	4b25      	ldr	r3, [pc, #148]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	4923      	ldr	r1, [pc, #140]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b21      	ldr	r3, [pc, #132]	@ (8004c74 <HAL_RCC_ClockConfig+0x254>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e034      	b.n	8004c6a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0304 	and.w	r3, r3, #4
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d008      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4917      	ldr	r1, [pc, #92]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c2a:	4b13      	ldr	r3, [pc, #76]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	00db      	lsls	r3, r3, #3
 8004c38:	490f      	ldr	r1, [pc, #60]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c3e:	f000 f823 	bl	8004c88 <HAL_RCC_GetSysClockFreq>
 8004c42:	4602      	mov	r2, r0
 8004c44:	4b0c      	ldr	r3, [pc, #48]	@ (8004c78 <HAL_RCC_ClockConfig+0x258>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	490b      	ldr	r1, [pc, #44]	@ (8004c7c <HAL_RCC_ClockConfig+0x25c>)
 8004c50:	5ccb      	ldrb	r3, [r1, r3]
 8004c52:	fa22 f303 	lsr.w	r3, r2, r3
 8004c56:	4a0a      	ldr	r2, [pc, #40]	@ (8004c80 <HAL_RCC_ClockConfig+0x260>)
 8004c58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <HAL_RCC_ClockConfig+0x264>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd fc5c 	bl	800251c <HAL_InitTick>
 8004c64:	4603      	mov	r3, r0
 8004c66:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c68:	7afb      	ldrb	r3, [r7, #11]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023c00 	.word	0x40023c00
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	0800e008 	.word	0x0800e008
 8004c80:	20000014 	.word	0x20000014
 8004c84:	20000018 	.word	0x20000018

08004c88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c8c:	b092      	sub	sp, #72	@ 0x48
 8004c8e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004c90:	4b79      	ldr	r3, [pc, #484]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c98:	f003 030c 	and.w	r3, r3, #12
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	d00d      	beq.n	8004cbc <HAL_RCC_GetSysClockFreq+0x34>
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f200 80d5 	bhi.w	8004e50 <HAL_RCC_GetSysClockFreq+0x1c8>
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d002      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x28>
 8004caa:	2b08      	cmp	r3, #8
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_GetSysClockFreq+0x2e>
 8004cae:	e0cf      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cb0:	4b72      	ldr	r3, [pc, #456]	@ (8004e7c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004cb2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004cb4:	e0da      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004cb6:	4b72      	ldr	r3, [pc, #456]	@ (8004e80 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004cb8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004cba:	e0d7      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cbe:	0c9b      	lsrs	r3, r3, #18
 8004cc0:	f003 020f 	and.w	r2, r3, #15
 8004cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8004e84 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8004cc6:	5c9b      	ldrb	r3, [r3, r2]
 8004cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ccc:	0d9b      	lsrs	r3, r3, #22
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd6:	4b68      	ldr	r3, [pc, #416]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d05d      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	4611      	mov	r1, r2
 8004cea:	4604      	mov	r4, r0
 8004cec:	460d      	mov	r5, r1
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	f04f 0000 	mov.w	r0, #0
 8004cf6:	f04f 0100 	mov.w	r1, #0
 8004cfa:	0159      	lsls	r1, r3, #5
 8004cfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d00:	0150      	lsls	r0, r2, #5
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4621      	mov	r1, r4
 8004d08:	1a51      	subs	r1, r2, r1
 8004d0a:	6139      	str	r1, [r7, #16]
 8004d0c:	4629      	mov	r1, r5
 8004d0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d20:	4659      	mov	r1, fp
 8004d22:	018b      	lsls	r3, r1, #6
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	018a      	lsls	r2, r1, #6
 8004d2e:	46d4      	mov	ip, sl
 8004d30:	ebb2 080c 	subs.w	r8, r2, ip
 8004d34:	4659      	mov	r1, fp
 8004d36:	eb63 0901 	sbc.w	r9, r3, r1
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d4e:	4690      	mov	r8, r2
 8004d50:	4699      	mov	r9, r3
 8004d52:	4623      	mov	r3, r4
 8004d54:	eb18 0303 	adds.w	r3, r8, r3
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	462b      	mov	r3, r5
 8004d5c:	eb49 0303 	adc.w	r3, r9, r3
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004d6e:	4629      	mov	r1, r5
 8004d70:	024b      	lsls	r3, r1, #9
 8004d72:	4620      	mov	r0, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	4604      	mov	r4, r0
 8004d78:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8004d7c:	4601      	mov	r1, r0
 8004d7e:	024a      	lsls	r2, r1, #9
 8004d80:	4610      	mov	r0, r2
 8004d82:	4619      	mov	r1, r3
 8004d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d86:	2200      	movs	r2, #0
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d90:	f7fc f9fc 	bl	800118c <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d9c:	e055      	b.n	8004e4a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da0:	2200      	movs	r2, #0
 8004da2:	623b      	str	r3, [r7, #32]
 8004da4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004da6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004daa:	4642      	mov	r2, r8
 8004dac:	464b      	mov	r3, r9
 8004dae:	f04f 0000 	mov.w	r0, #0
 8004db2:	f04f 0100 	mov.w	r1, #0
 8004db6:	0159      	lsls	r1, r3, #5
 8004db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dbc:	0150      	lsls	r0, r2, #5
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	46c4      	mov	ip, r8
 8004dc4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8004dc8:	4640      	mov	r0, r8
 8004dca:	4649      	mov	r1, r9
 8004dcc:	468c      	mov	ip, r1
 8004dce:	eb63 0b0c 	sbc.w	fp, r3, ip
 8004dd2:	f04f 0200 	mov.w	r2, #0
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004dde:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004de2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004de6:	ebb2 040a 	subs.w	r4, r2, sl
 8004dea:	eb63 050b 	sbc.w	r5, r3, fp
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	00eb      	lsls	r3, r5, #3
 8004df8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dfc:	00e2      	lsls	r2, r4, #3
 8004dfe:	4614      	mov	r4, r2
 8004e00:	461d      	mov	r5, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	18e3      	adds	r3, r4, r3
 8004e06:	603b      	str	r3, [r7, #0]
 8004e08:	460b      	mov	r3, r1
 8004e0a:	eb45 0303 	adc.w	r3, r5, r3
 8004e0e:	607b      	str	r3, [r7, #4]
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	028b      	lsls	r3, r1, #10
 8004e20:	4620      	mov	r0, r4
 8004e22:	4629      	mov	r1, r5
 8004e24:	4604      	mov	r4, r0
 8004e26:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	028a      	lsls	r2, r1, #10
 8004e2e:	4610      	mov	r0, r2
 8004e30:	4619      	mov	r1, r3
 8004e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e34:	2200      	movs	r2, #0
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	61fa      	str	r2, [r7, #28]
 8004e3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e3e:	f7fc f9a5 	bl	800118c <__aeabi_uldivmod>
 8004e42:	4602      	mov	r2, r0
 8004e44:	460b      	mov	r3, r1
 8004e46:	4613      	mov	r3, r2
 8004e48:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 8004e4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e4c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004e4e:	e00d      	b.n	8004e6c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004e50:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	0b5b      	lsrs	r3, r3, #13
 8004e56:	f003 0307 	and.w	r3, r3, #7
 8004e5a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8004e6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3748      	adds	r7, #72	@ 0x48
 8004e72:	46bd      	mov	sp, r7
 8004e74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e78:	40023800 	.word	0x40023800
 8004e7c:	00f42400 	.word	0x00f42400
 8004e80:	007a1200 	.word	0x007a1200
 8004e84:	0800dffc 	.word	0x0800dffc

08004e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e8c:	4b02      	ldr	r3, [pc, #8]	@ (8004e98 <HAL_RCC_GetHCLKFreq+0x10>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bc80      	pop	{r7}
 8004e96:	4770      	bx	lr
 8004e98:	20000014 	.word	0x20000014

08004e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ea0:	f7ff fff2 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0a1b      	lsrs	r3, r3, #8
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4903      	ldr	r1, [pc, #12]	@ (8004ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40023800 	.word	0x40023800
 8004ec0:	0800e018 	.word	0x0800e018

08004ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ec8:	f7ff ffde 	bl	8004e88 <HAL_RCC_GetHCLKFreq>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	4b05      	ldr	r3, [pc, #20]	@ (8004ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	0adb      	lsrs	r3, r3, #11
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	4903      	ldr	r1, [pc, #12]	@ (8004ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	0800e018 	.word	0x0800e018

08004eec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ef8:	4b29      	ldr	r3, [pc, #164]	@ (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d12c      	bne.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f04:	4b26      	ldr	r3, [pc, #152]	@ (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f10:	4b24      	ldr	r3, [pc, #144]	@ (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e016      	b.n	8004f4a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	4b20      	ldr	r3, [pc, #128]	@ (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f20:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f26:	6253      	str	r3, [r2, #36]	@ 0x24
 8004f28:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004f34:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004f3c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3e:	4b18      	ldr	r3, [pc, #96]	@ (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f42:	4a17      	ldr	r2, [pc, #92]	@ (8004fa0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004f44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f48:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004f50:	d105      	bne.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004f58:	d101      	bne.n	8004f5e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d105      	bne.n	8004f70 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004f64:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a0f      	ldr	r2, [pc, #60]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f6a:	f043 0304 	orr.w	r3, r3, #4
 8004f6e:	6013      	str	r3, [r2, #0]
 8004f70:	4b0d      	ldr	r3, [pc, #52]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 0201 	bic.w	r2, r3, #1
 8004f78:	490b      	ldr	r1, [pc, #44]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f80:	4b09      	ldr	r3, [pc, #36]	@ (8004fa8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d001      	beq.n	8004f92 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e000      	b.n	8004f94 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bc80      	pop	{r7}
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	40023c00 	.word	0x40023c00

08004fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e07b      	b.n	80050b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d108      	bne.n	8004fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fce:	d009      	beq.n	8004fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	61da      	str	r2, [r3, #28]
 8004fd6:	e005      	b.n	8004fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d106      	bne.n	8005004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f7fd f86e 	bl	80020e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2202      	movs	r2, #2
 8005008:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005068:	ea42 0103 	orr.w	r1, r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	0c1b      	lsrs	r3, r3, #16
 8005082:	f003 0104 	and.w	r1, r3, #4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508a:	f003 0210 	and.w	r2, r3, #16
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b088      	sub	sp, #32
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050ce:	f7fd fa71 	bl	80025b4 <HAL_GetTick>
 80050d2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d001      	beq.n	80050e8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80050e4:	2302      	movs	r3, #2
 80050e6:	e12a      	b.n	800533e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d002      	beq.n	80050f4 <HAL_SPI_Transmit+0x36>
 80050ee:	88fb      	ldrh	r3, [r7, #6]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e122      	b.n	800533e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d101      	bne.n	8005106 <HAL_SPI_Transmit+0x48>
 8005102:	2302      	movs	r3, #2
 8005104:	e11b      	b.n	800533e <HAL_SPI_Transmit+0x280>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2201      	movs	r2, #1
 800510a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2203      	movs	r2, #3
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	88fa      	ldrh	r2, [r7, #6]
 8005126:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	88fa      	ldrh	r2, [r7, #6]
 800512c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005154:	d10f      	bne.n	8005176 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005164:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005174:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005180:	2b40      	cmp	r3, #64	@ 0x40
 8005182:	d007      	beq.n	8005194 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005192:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800519c:	d152      	bne.n	8005244 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d002      	beq.n	80051ac <HAL_SPI_Transmit+0xee>
 80051a6:	8b7b      	ldrh	r3, [r7, #26]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d145      	bne.n	8005238 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b0:	881a      	ldrh	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	1c9a      	adds	r2, r3, #2
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051d0:	e032      	b.n	8005238 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d112      	bne.n	8005206 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e4:	881a      	ldrh	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f0:	1c9a      	adds	r2, r3, #2
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005204:	e018      	b.n	8005238 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005206:	f7fd f9d5 	bl	80025b4 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d803      	bhi.n	800521e <HAL_SPI_Transmit+0x160>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800521c:	d102      	bne.n	8005224 <HAL_SPI_Transmit+0x166>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d109      	bne.n	8005238 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e082      	b.n	800533e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1c7      	bne.n	80051d2 <HAL_SPI_Transmit+0x114>
 8005242:	e053      	b.n	80052ec <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_SPI_Transmit+0x194>
 800524c:	8b7b      	ldrh	r3, [r7, #26]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d147      	bne.n	80052e2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005278:	e033      	b.n	80052e2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	2b02      	cmp	r3, #2
 8005286:	d113      	bne.n	80052b0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	7812      	ldrb	r2, [r2, #0]
 8005294:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80052ae:	e018      	b.n	80052e2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052b0:	f7fd f980 	bl	80025b4 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d803      	bhi.n	80052c8 <HAL_SPI_Transmit+0x20a>
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d102      	bne.n	80052ce <HAL_SPI_Transmit+0x210>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d109      	bne.n	80052e2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e02d      	b.n	800533e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1c6      	bne.n	800527a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	f000 f8b1 	bl	8005458 <SPI_EndRxTxTransaction>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d002      	beq.n	8005302 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2220      	movs	r2, #32
 8005300:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e000      	b.n	800533e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800533c:	2300      	movs	r3, #0
  }
}
 800533e:	4618      	mov	r0, r3
 8005340:	3720      	adds	r7, #32
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	4613      	mov	r3, r2
 8005356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005358:	f7fd f92c 	bl	80025b4 <HAL_GetTick>
 800535c:	4602      	mov	r2, r0
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	4413      	add	r3, r2
 8005366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005368:	f7fd f924 	bl	80025b4 <HAL_GetTick>
 800536c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800536e:	4b39      	ldr	r3, [pc, #228]	@ (8005454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	015b      	lsls	r3, r3, #5
 8005374:	0d1b      	lsrs	r3, r3, #20
 8005376:	69fa      	ldr	r2, [r7, #28]
 8005378:	fb02 f303 	mul.w	r3, r2, r3
 800537c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800537e:	e054      	b.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005386:	d050      	beq.n	800542a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005388:	f7fd f914 	bl	80025b4 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	69fa      	ldr	r2, [r7, #28]
 8005394:	429a      	cmp	r2, r3
 8005396:	d902      	bls.n	800539e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d13d      	bne.n	800541a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053b6:	d111      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053c0:	d004      	beq.n	80053cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053ca:	d107      	bne.n	80053dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e4:	d10f      	bne.n	8005406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80053f4:	601a      	str	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e017      	b.n	800544a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d101      	bne.n	8005424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	3b01      	subs	r3, #1
 8005428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	429a      	cmp	r2, r3
 8005438:	bf0c      	ite	eq
 800543a:	2301      	moveq	r3, #1
 800543c:	2300      	movne	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	79fb      	ldrb	r3, [r7, #7]
 8005444:	429a      	cmp	r2, r3
 8005446:	d19b      	bne.n	8005380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3720      	adds	r7, #32
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20000014 	.word	0x20000014

08005458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2201      	movs	r2, #1
 800546c:	2102      	movs	r1, #2
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f7ff ff6a 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005486:	2303      	movs	r3, #3
 8005488:	e032      	b.n	80054f0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800548a:	4b1b      	ldr	r3, [pc, #108]	@ (80054f8 <SPI_EndRxTxTransaction+0xa0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a1b      	ldr	r2, [pc, #108]	@ (80054fc <SPI_EndRxTxTransaction+0xa4>)
 8005490:	fba2 2303 	umull	r2, r3, r2, r3
 8005494:	0d5b      	lsrs	r3, r3, #21
 8005496:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800549a:	fb02 f303 	mul.w	r3, r2, r3
 800549e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054a8:	d112      	bne.n	80054d0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	2180      	movs	r1, #128	@ 0x80
 80054b4:	68f8      	ldr	r0, [r7, #12]
 80054b6:	f7ff ff47 	bl	8005348 <SPI_WaitFlagStateUntilTimeout>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d016      	beq.n	80054ee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054c4:	f043 0220 	orr.w	r2, r3, #32
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e00f      	b.n	80054f0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	3b01      	subs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e6:	2b80      	cmp	r3, #128	@ 0x80
 80054e8:	d0f2      	beq.n	80054d0 <SPI_EndRxTxTransaction+0x78>
 80054ea:	e000      	b.n	80054ee <SPI_EndRxTxTransaction+0x96>
        break;
 80054ec:	bf00      	nop
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	20000014 	.word	0x20000014
 80054fc:	165e9f81 	.word	0x165e9f81

08005500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800550e:	2301      	movs	r3, #1
 8005510:	e031      	b.n	8005576 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d106      	bne.n	800552c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fc fe1e 	bl	8002168 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2202      	movs	r2, #2
 8005530:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	3304      	adds	r3, #4
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 f986 	bl	8005850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3708      	adds	r7, #8
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
	...

08005580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b01      	cmp	r3, #1
 8005592:	d001      	beq.n	8005598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e03a      	b.n	800560e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2202      	movs	r2, #2
 800559c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0201 	orr.w	r2, r2, #1
 80055ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055b8:	d00e      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x58>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a16      	ldr	r2, [pc, #88]	@ (8005618 <HAL_TIM_Base_Start_IT+0x98>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d009      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x58>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a14      	ldr	r2, [pc, #80]	@ (800561c <HAL_TIM_Base_Start_IT+0x9c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d004      	beq.n	80055d8 <HAL_TIM_Base_Start_IT+0x58>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a13      	ldr	r2, [pc, #76]	@ (8005620 <HAL_TIM_Base_Start_IT+0xa0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d111      	bne.n	80055fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	f003 0307 	and.w	r3, r3, #7
 80055e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b06      	cmp	r3, #6
 80055e8:	d010      	beq.n	800560c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f042 0201 	orr.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fa:	e007      	b.n	800560c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40010800 	.word	0x40010800

08005624 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 0201 	bic.w	r2, r2, #1
 800563a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	6a1a      	ldr	r2, [r3, #32]
 8005642:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005646:	4013      	ands	r3, r2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d107      	bne.n	800565c <HAL_TIM_Base_Stop_IT+0x38>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f022 0201 	bic.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr

08005670 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0302 	and.w	r3, r3, #2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0202 	mvn.w	r2, #2
 80056a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	f003 0303 	and.w	r3, r3, #3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8ad 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8a0 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8af 	bl	800582c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d020      	beq.n	8005720 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01b      	beq.n	8005720 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0204 	mvn.w	r2, #4
 80056f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2202      	movs	r2, #2
 80056f6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f887 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 800570c:	e005      	b.n	800571a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f87a 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f889 	bl	800582c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d020      	beq.n	800576c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f003 0308 	and.w	r3, r3, #8
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f06f 0208 	mvn.w	r2, #8
 800573c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2204      	movs	r2, #4
 8005742:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	f003 0303 	and.w	r3, r3, #3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d003      	beq.n	800575a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f861 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 8005758:	e005      	b.n	8005766 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f854 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f863 	bl	800582c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	f003 0310 	and.w	r3, r3, #16
 8005772:	2b00      	cmp	r3, #0
 8005774:	d020      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	d01b      	beq.n	80057b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f06f 0210 	mvn.w	r2, #16
 8005788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2208      	movs	r2, #8
 800578e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f83b 	bl	800581a <HAL_TIM_IC_CaptureCallback>
 80057a4:	e005      	b.n	80057b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 f82e 	bl	8005808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f83d 	bl	800582c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f003 0301 	and.w	r3, r3, #1
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f06f 0201 	mvn.w	r2, #1
 80057d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fc fd88 	bl	80022ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00c      	beq.n	8005800 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f81f 	bl	800583e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005800:	bf00      	nop
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	bc80      	pop	{r7}
 8005818:	4770      	bx	lr

0800581a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800581a:	b480      	push	{r7}
 800581c:	b083      	sub	sp, #12
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	bc80      	pop	{r7}
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr

08005850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005866:	d00f      	beq.n	8005888 <TIM_Base_SetConfig+0x38>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a2e      	ldr	r2, [pc, #184]	@ (8005924 <TIM_Base_SetConfig+0xd4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_Base_SetConfig+0x38>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a2d      	ldr	r2, [pc, #180]	@ (8005928 <TIM_Base_SetConfig+0xd8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_Base_SetConfig+0x38>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a2c      	ldr	r2, [pc, #176]	@ (800592c <TIM_Base_SetConfig+0xdc>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_Base_SetConfig+0x38>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a2b      	ldr	r2, [pc, #172]	@ (8005930 <TIM_Base_SetConfig+0xe0>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d108      	bne.n	800589a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800588e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	4313      	orrs	r3, r2
 8005898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058a0:	d017      	beq.n	80058d2 <TIM_Base_SetConfig+0x82>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a1f      	ldr	r2, [pc, #124]	@ (8005924 <TIM_Base_SetConfig+0xd4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d013      	beq.n	80058d2 <TIM_Base_SetConfig+0x82>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a1e      	ldr	r2, [pc, #120]	@ (8005928 <TIM_Base_SetConfig+0xd8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d00f      	beq.n	80058d2 <TIM_Base_SetConfig+0x82>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	@ (800592c <TIM_Base_SetConfig+0xdc>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00b      	beq.n	80058d2 <TIM_Base_SetConfig+0x82>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a1c      	ldr	r2, [pc, #112]	@ (8005930 <TIM_Base_SetConfig+0xe0>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d007      	beq.n	80058d2 <TIM_Base_SetConfig+0x82>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a1b      	ldr	r2, [pc, #108]	@ (8005934 <TIM_Base_SetConfig+0xe4>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d003      	beq.n	80058d2 <TIM_Base_SetConfig+0x82>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a1a      	ldr	r2, [pc, #104]	@ (8005938 <TIM_Base_SetConfig+0xe8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d108      	bne.n	80058e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f043 0204 	orr.w	r2, r3, #4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2201      	movs	r2, #1
 8005912:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	601a      	str	r2, [r3, #0]
}
 800591a:	bf00      	nop
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40010800 	.word	0x40010800
 8005934:	40010c00 	.word	0x40010c00
 8005938:	40011000 	.word	0x40011000

0800593c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005950:	2302      	movs	r3, #2
 8005952:	e046      	b.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	4313      	orrs	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005996:	d00e      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a13      	ldr	r2, [pc, #76]	@ (80059ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a12      	ldr	r2, [pc, #72]	@ (80059f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a10      	ldr	r2, [pc, #64]	@ (80059f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d10c      	bne.n	80059d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80059bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr
 80059ec:	40000400 	.word	0x40000400
 80059f0:	40000800 	.word	0x40000800
 80059f4:	40010800 	.word	0x40010800

080059f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e042      	b.n	8005a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d106      	bne.n	8005a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7fc fbc8 	bl	80021b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2224      	movs	r2, #36	@ 0x24
 8005a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68da      	ldr	r2, [r3, #12]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f971 	bl	8005d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	691a      	ldr	r2, [r3, #16]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695a      	ldr	r2, [r3, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2220      	movs	r2, #32
 8005a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	@ 0x28
 8005a9c:	af02      	add	r7, sp, #8
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	d175      	bne.n	8005ba4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <HAL_UART_Transmit+0x2c>
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e06e      	b.n	8005ba6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2221      	movs	r2, #33	@ 0x21
 8005ad2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ad6:	f7fc fd6d 	bl	80025b4 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	88fa      	ldrh	r2, [r7, #6]
 8005ae6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af0:	d108      	bne.n	8005b04 <HAL_UART_Transmit+0x6c>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d104      	bne.n	8005b04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	e003      	b.n	8005b0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b0c:	e02e      	b.n	8005b6c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	2200      	movs	r2, #0
 8005b16:	2180      	movs	r1, #128	@ 0x80
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 f848 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e03a      	b.n	8005ba6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10b      	bne.n	8005b4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	881b      	ldrh	r3, [r3, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	3302      	adds	r3, #2
 8005b4a:	61bb      	str	r3, [r7, #24]
 8005b4c:	e007      	b.n	8005b5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	781a      	ldrb	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1cb      	bne.n	8005b0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2140      	movs	r1, #64	@ 0x40
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f814 	bl	8005bae <UART_WaitOnFlagUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d005      	beq.n	8005b98 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2220      	movs	r2, #32
 8005b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3720      	adds	r7, #32
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bbe:	e03b      	b.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc6:	d037      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bc8:	f7fc fcf4 	bl	80025b4 <HAL_GetTick>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	6a3a      	ldr	r2, [r7, #32]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d302      	bcc.n	8005bde <UART_WaitOnFlagUntilTimeout+0x30>
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e03a      	b.n	8005c58 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d023      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b80      	cmp	r3, #128	@ 0x80
 8005bf4:	d020      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b40      	cmp	r3, #64	@ 0x40
 8005bfa:	d01d      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f003 0308 	and.w	r3, r3, #8
 8005c06:	2b08      	cmp	r3, #8
 8005c08:	d116      	bne.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c20:	68f8      	ldr	r0, [r7, #12]
 8005c22:	f000 f81d 	bl	8005c60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2208      	movs	r2, #8
 8005c2a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e00f      	b.n	8005c58 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4013      	ands	r3, r2
 8005c42:	68ba      	ldr	r2, [r7, #8]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	bf0c      	ite	eq
 8005c48:	2301      	moveq	r3, #1
 8005c4a:	2300      	movne	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d0b4      	beq.n	8005bc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b095      	sub	sp, #84	@ 0x54
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c72:	e853 3f00 	ldrex	r3, [r3]
 8005c76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c88:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c90:	e841 2300 	strex	r3, r2, [r1]
 8005c94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e5      	bne.n	8005c68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3314      	adds	r3, #20
 8005ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f023 0301 	bic.w	r3, r3, #1
 8005cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3314      	adds	r3, #20
 8005cba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d119      	bne.n	8005d0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	330c      	adds	r3, #12
 8005cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	e853 3f00 	ldrex	r3, [r3]
 8005ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f023 0310 	bic.w	r3, r3, #16
 8005cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cf8:	61ba      	str	r2, [r7, #24]
 8005cfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6979      	ldr	r1, [r7, #20]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	613b      	str	r3, [r7, #16]
   return(result);
 8005d06:	693b      	ldr	r3, [r7, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e5      	bne.n	8005cd8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d1a:	bf00      	nop
 8005d1c:	3754      	adds	r7, #84	@ 0x54
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68da      	ldr	r2, [r3, #12]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	431a      	orrs	r2, r3
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8005d64:	f023 030c 	bic.w	r3, r3, #12
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	430b      	orrs	r3, r1
 8005d70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a55      	ldr	r2, [pc, #340]	@ (8005ee4 <UART_SetConfig+0x1c0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d103      	bne.n	8005d9a <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d92:	f7ff f897 	bl	8004ec4 <HAL_RCC_GetPCLK2Freq>
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	e002      	b.n	8005da0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005d9a:	f7ff f87f 	bl	8004e9c <HAL_RCC_GetPCLK1Freq>
 8005d9e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	69db      	ldr	r3, [r3, #28]
 8005da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005da8:	d14c      	bne.n	8005e44 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009a      	lsls	r2, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	005b      	lsls	r3, r3, #1
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	4a49      	ldr	r2, [pc, #292]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	0119      	lsls	r1, r3, #4
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009a      	lsls	r2, r3, #2
 8005dd4:	441a      	add	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005de0:	4b41      	ldr	r3, [pc, #260]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005de2:	fba3 0302 	umull	r0, r3, r3, r2
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	2064      	movs	r0, #100	@ 0x64
 8005dea:	fb00 f303 	mul.w	r3, r0, r3
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	3332      	adds	r3, #50	@ 0x32
 8005df4:	4a3c      	ldr	r2, [pc, #240]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e02:	4419      	add	r1, r3
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009a      	lsls	r2, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	005b      	lsls	r3, r3, #1
 8005e16:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e1a:	4b33      	ldr	r3, [pc, #204]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005e1c:	fba3 0302 	umull	r0, r3, r3, r2
 8005e20:	095b      	lsrs	r3, r3, #5
 8005e22:	2064      	movs	r0, #100	@ 0x64
 8005e24:	fb00 f303 	mul.w	r3, r0, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	00db      	lsls	r3, r3, #3
 8005e2c:	3332      	adds	r3, #50	@ 0x32
 8005e2e:	4a2e      	ldr	r2, [pc, #184]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005e30:	fba2 2303 	umull	r2, r3, r2, r3
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	f003 0207 	and.w	r2, r3, #7
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	440a      	add	r2, r1
 8005e40:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e42:	e04a      	b.n	8005eda <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	009a      	lsls	r2, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e5a:	4a23      	ldr	r2, [pc, #140]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	095b      	lsrs	r3, r3, #5
 8005e62:	0119      	lsls	r1, r3, #4
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	009a      	lsls	r2, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005e7c:	fba3 0302 	umull	r0, r3, r3, r2
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	2064      	movs	r0, #100	@ 0x64
 8005e84:	fb00 f303 	mul.w	r3, r0, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	3332      	adds	r3, #50	@ 0x32
 8005e8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e9a:	4419      	add	r1, r3
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	009b      	lsls	r3, r3, #2
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009a      	lsls	r2, r3, #2
 8005ea6:	441a      	add	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	fbb2 f2f3 	udiv	r2, r2, r3
 8005eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005eb4:	fba3 0302 	umull	r0, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	2064      	movs	r0, #100	@ 0x64
 8005ebc:	fb00 f303 	mul.w	r3, r0, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	3332      	adds	r3, #50	@ 0x32
 8005ec6:	4a08      	ldr	r2, [pc, #32]	@ (8005ee8 <UART_SetConfig+0x1c4>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	f003 020f 	and.w	r2, r3, #15
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	440a      	add	r2, r1
 8005ed8:	609a      	str	r2, [r3, #8]
}
 8005eda:	bf00      	nop
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	40013800 	.word	0x40013800
 8005ee8:	51eb851f 	.word	0x51eb851f

08005eec <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 8005eec:	b590      	push	{r4, r7, lr}
 8005eee:	b087      	sub	sp, #28
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	460b      	mov	r3, r1
 8005efa:	72fb      	strb	r3, [r7, #11]
 8005efc:	4613      	mov	r3, r2
 8005efe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d102      	bne.n	8005f0c <lsm6dso_read_reg+0x20>
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295
 8005f0a:	e009      	b.n	8005f20 <lsm6dso_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	685c      	ldr	r4, [r3, #4]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	68d8      	ldr	r0, [r3, #12]
 8005f14:	893b      	ldrh	r3, [r7, #8]
 8005f16:	7af9      	ldrb	r1, [r7, #11]
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	47a0      	blx	r4
 8005f1c:	6178      	str	r0, [r7, #20]

  return ret;
 8005f1e:	697b      	ldr	r3, [r7, #20]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd90      	pop	{r4, r7, pc}

08005f28 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8005f28:	b590      	push	{r4, r7, lr}
 8005f2a:	b087      	sub	sp, #28
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	607a      	str	r2, [r7, #4]
 8005f32:	461a      	mov	r2, r3
 8005f34:	460b      	mov	r3, r1
 8005f36:	72fb      	strb	r3, [r7, #11]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d102      	bne.n	8005f48 <lsm6dso_write_reg+0x20>
 8005f42:	f04f 33ff 	mov.w	r3, #4294967295
 8005f46:	e009      	b.n	8005f5c <lsm6dso_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681c      	ldr	r4, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68d8      	ldr	r0, [r3, #12]
 8005f50:	893b      	ldrh	r3, [r7, #8]
 8005f52:	7af9      	ldrb	r1, [r7, #11]
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	47a0      	blx	r4
 8005f58:	6178      	str	r0, [r7, #20]

  return ret;
 8005f5a:	697b      	ldr	r3, [r7, #20]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	371c      	adds	r7, #28
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd90      	pop	{r4, r7, pc}

08005f64 <lsm6dso_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dso_from_fs4_to_mg(int16_t lsb)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 8005f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fa feca 	bl	8000d0c <__aeabi_i2f>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4904      	ldr	r1, [pc, #16]	@ (8005f8c <lsm6dso_from_fs4_to_mg+0x28>)
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7fa ff19 	bl	8000db4 <__aeabi_fmul>
 8005f82:	4603      	mov	r3, r0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	3df9db23 	.word	0x3df9db23

08005f90 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005f9c:	f107 0208 	add.w	r2, r7, #8
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	2110      	movs	r1, #16
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff ffa1 	bl	8005eec <lsm6dso_read_reg>
 8005faa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10f      	bne.n	8005fd2 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8005fb2:	78fb      	ldrb	r3, [r7, #3]
 8005fb4:	f003 0303 	and.w	r3, r3, #3
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	7a3b      	ldrb	r3, [r7, #8]
 8005fbc:	f362 0383 	bfi	r3, r2, #2, #2
 8005fc0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8005fc2:	f107 0208 	add.w	r2, r7, #8
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	2110      	movs	r1, #16
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff ffac 	bl	8005f28 <lsm6dso_write_reg>
 8005fd0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8005fe8:	78fb      	ldrb	r3, [r7, #3]
 8005fea:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8005fec:	f107 030c 	add.w	r3, r7, #12
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fa93 	bl	800651e <lsm6dso_fsm_enable_get>
 8005ff8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d001      	beq.n	8006004 <lsm6dso_xl_data_rate_set+0x28>
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	e0e0      	b.n	80061c6 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006004:	7b3b      	ldrb	r3, [r7, #12]
 8006006:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800600a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 800600c:	7b3b      	ldrb	r3, [r7, #12]
 800600e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006012:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8006014:	4313      	orrs	r3, r2
 8006016:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8006018:	7b3b      	ldrb	r3, [r7, #12]
 800601a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800601e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8006020:	4313      	orrs	r3, r2
 8006022:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8006024:	7b3b      	ldrb	r3, [r7, #12]
 8006026:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800602a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800602c:	4313      	orrs	r3, r2
 800602e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8006030:	7b3b      	ldrb	r3, [r7, #12]
 8006032:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006036:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8006038:	4313      	orrs	r3, r2
 800603a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800603c:	7b3b      	ldrb	r3, [r7, #12]
 800603e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006042:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8006044:	4313      	orrs	r3, r2
 8006046:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8006048:	7b3b      	ldrb	r3, [r7, #12]
 800604a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800604e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8006050:	4313      	orrs	r3, r2
 8006052:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8006054:	7b3b      	ldrb	r3, [r7, #12]
 8006056:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800605a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800605c:	4313      	orrs	r3, r2
 800605e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8006060:	7b7b      	ldrb	r3, [r7, #13]
 8006062:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006066:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8006068:	4313      	orrs	r3, r2
 800606a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800606c:	7b7b      	ldrb	r3, [r7, #13]
 800606e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006072:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8006074:	4313      	orrs	r3, r2
 8006076:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8006078:	7b7b      	ldrb	r3, [r7, #13]
 800607a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800607e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8006080:	4313      	orrs	r3, r2
 8006082:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8006084:	7b7b      	ldrb	r3, [r7, #13]
 8006086:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800608a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800608c:	4313      	orrs	r3, r2
 800608e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8006090:	7b7b      	ldrb	r3, [r7, #13]
 8006092:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006096:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8006098:	4313      	orrs	r3, r2
 800609a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800609c:	7b7b      	ldrb	r3, [r7, #13]
 800609e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80060a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80060a4:	4313      	orrs	r3, r2
 80060a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80060a8:	7b7b      	ldrb	r3, [r7, #13]
 80060aa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80060ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80060b0:	4313      	orrs	r3, r2
 80060b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80060b4:	7b7b      	ldrb	r3, [r7, #13]
 80060b6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80060ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80060bc:	4313      	orrs	r3, r2
 80060be:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d164      	bne.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80060c4:	f107 030b 	add.w	r3, r7, #11
 80060c8:	4619      	mov	r1, r3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 fa48 	bl	8006560 <lsm6dso_fsm_data_rate_get>
 80060d0:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d001      	beq.n	80060dc <lsm6dso_xl_data_rate_set+0x100>
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	e074      	b.n	80061c6 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	2b03      	cmp	r3, #3
 80060e0:	d852      	bhi.n	8006188 <lsm6dso_xl_data_rate_set+0x1ac>
 80060e2:	a201      	add	r2, pc, #4	@ (adr r2, 80060e8 <lsm6dso_xl_data_rate_set+0x10c>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	080060f9 	.word	0x080060f9
 80060ec:	0800610b 	.word	0x0800610b
 80060f0:	08006129 	.word	0x08006129
 80060f4:	08006153 	.word	0x08006153
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80060f8:	78fb      	ldrb	r3, [r7, #3]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80060fe:	2301      	movs	r3, #1
 8006100:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8006102:	e044      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8006104:	78fb      	ldrb	r3, [r7, #3]
 8006106:	75fb      	strb	r3, [r7, #23]
        break;
 8006108:	e041      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800610a:	78fb      	ldrb	r3, [r7, #3]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8006110:	2302      	movs	r3, #2
 8006112:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8006114:	e03b      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006116:	78fb      	ldrb	r3, [r7, #3]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d102      	bne.n	8006122 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 800611c:	2302      	movs	r3, #2
 800611e:	75fb      	strb	r3, [r7, #23]
        break;
 8006120:	e035      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	75fb      	strb	r3, [r7, #23]
        break;
 8006126:	e032      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8006128:	78fb      	ldrb	r3, [r7, #3]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d102      	bne.n	8006134 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800612e:	2303      	movs	r3, #3
 8006130:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8006132:	e02c      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d102      	bne.n	8006140 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800613a:	2303      	movs	r3, #3
 800613c:	75fb      	strb	r3, [r7, #23]
        break;
 800613e:	e026      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	2b02      	cmp	r3, #2
 8006144:	d102      	bne.n	800614c <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8006146:	2303      	movs	r3, #3
 8006148:	75fb      	strb	r3, [r7, #23]
        break;
 800614a:	e020      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	75fb      	strb	r3, [r7, #23]
        break;
 8006150:	e01d      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d102      	bne.n	800615e <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006158:	2304      	movs	r3, #4
 800615a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800615c:	e017      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d102      	bne.n	800616a <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006164:	2304      	movs	r3, #4
 8006166:	75fb      	strb	r3, [r7, #23]
        break;
 8006168:	e011      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d102      	bne.n	8006176 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8006170:	2304      	movs	r3, #4
 8006172:	75fb      	strb	r3, [r7, #23]
        break;
 8006174:	e00b      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8006176:	78fb      	ldrb	r3, [r7, #3]
 8006178:	2b03      	cmp	r3, #3
 800617a:	d102      	bne.n	8006182 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800617c:	2304      	movs	r3, #4
 800617e:	75fb      	strb	r3, [r7, #23]
        break;
 8006180:	e005      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	75fb      	strb	r3, [r7, #23]
        break;
 8006186:	e002      	b.n	800618e <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	75fb      	strb	r3, [r7, #23]
        break;
 800618c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800618e:	f107 0208 	add.w	r2, r7, #8
 8006192:	2301      	movs	r3, #1
 8006194:	2110      	movs	r1, #16
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7ff fea8 	bl	8005eec <lsm6dso_read_reg>
 800619c:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 800619e:	7dfb      	ldrb	r3, [r7, #23]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	b2da      	uxtb	r2, r3
 80061a6:	7a3b      	ldrb	r3, [r7, #8]
 80061a8:	f362 1307 	bfi	r3, r2, #4, #4
 80061ac:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80061ae:	f107 0208 	add.w	r2, r7, #8
 80061b2:	2301      	movs	r3, #1
 80061b4:	2110      	movs	r1, #16
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7ff feb6 	bl	8005f28 <lsm6dso_write_reg>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	613b      	str	r3, [r7, #16]

  return ret;
 80061c4:	693b      	ldr	r3, [r7, #16]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop

080061d0 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80061da:	f107 020c 	add.w	r2, r7, #12
 80061de:	2306      	movs	r3, #6
 80061e0:	2128      	movs	r1, #40	@ 0x28
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fe82 	bl	8005eec <lsm6dso_read_reg>
 80061e8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80061ea:	7b7b      	ldrb	r3, [r7, #13]
 80061ec:	b21a      	sxth	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	021b      	lsls	r3, r3, #8
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	7b3a      	ldrb	r2, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	b29b      	uxth	r3, r3
 8006204:	b21a      	sxth	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800620a:	7bfa      	ldrb	r2, [r7, #15]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	3302      	adds	r3, #2
 8006210:	b212      	sxth	r2, r2
 8006212:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	3302      	adds	r3, #2
 8006218:	f9b3 3000 	ldrsh.w	r3, [r3]
 800621c:	b29b      	uxth	r3, r3
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	7bba      	ldrb	r2, [r7, #14]
 8006224:	4413      	add	r3, r2
 8006226:	b29a      	uxth	r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	3302      	adds	r3, #2
 800622c:	b212      	sxth	r2, r2
 800622e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8006230:	7c7a      	ldrb	r2, [r7, #17]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	3304      	adds	r3, #4
 8006236:	b212      	sxth	r2, r2
 8006238:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	3304      	adds	r3, #4
 800623e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006242:	b29b      	uxth	r3, r3
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	b29b      	uxth	r3, r3
 8006248:	7c3a      	ldrb	r2, [r7, #16]
 800624a:	4413      	add	r3, r2
 800624c:	b29a      	uxth	r2, r3
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	3304      	adds	r3, #4
 8006252:	b212      	sxth	r2, r2
 8006254:	801a      	strh	r2, [r3, #0]

  return ret;
 8006256:	697b      	ldr	r3, [r7, #20]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3718      	adds	r7, #24
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(const stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 800626c:	2300      	movs	r3, #0
 800626e:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8006270:	78fb      	ldrb	r3, [r7, #3]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	b2da      	uxtb	r2, r3
 8006278:	7a3b      	ldrb	r3, [r7, #8]
 800627a:	f362 1387 	bfi	r3, r2, #6, #2
 800627e:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8006280:	f107 0208 	add.w	r2, r7, #8
 8006284:	2301      	movs	r3, #1
 8006286:	2101      	movs	r1, #1
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fe4d 	bl	8005f28 <lsm6dso_write_reg>
 800628e:	60f8      	str	r0, [r7, #12]

  return ret;
 8006290:	68fb      	ldr	r3, [r7, #12]
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b084      	sub	sp, #16
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
 80062a2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80062a4:	2301      	movs	r3, #1
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	210f      	movs	r1, #15
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7ff fe1e 	bl	8005eec <lsm6dso_read_reg>
 80062b0:	60f8      	str	r0, [r7, #12]

  return ret;
 80062b2:	68fb      	ldr	r3, [r7, #12]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	3710      	adds	r7, #16
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	460b      	mov	r3, r1
 80062c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80062c8:	f107 0208 	add.w	r2, r7, #8
 80062cc:	2301      	movs	r3, #1
 80062ce:	2112      	movs	r1, #18
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff fe0b 	bl	8005eec <lsm6dso_read_reg>
 80062d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10f      	bne.n	80062fe <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 0301 	and.w	r3, r3, #1
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	7a3b      	ldrb	r3, [r7, #8]
 80062e8:	f362 0300 	bfi	r3, r2, #0, #1
 80062ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80062ee:	f107 0208 	add.w	r2, r7, #8
 80062f2:	2301      	movs	r3, #1
 80062f4:	2112      	movs	r1, #18
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7ff fe16 	bl	8005f28 <lsm6dso_write_reg>
 80062fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80062fe:	68fb      	ldr	r3, [r7, #12]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <lsm6dso_reset_get>:
  * @param  val      Get the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8006312:	f107 0208 	add.w	r2, r7, #8
 8006316:	2301      	movs	r3, #1
 8006318:	2112      	movs	r1, #18
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff fde6 	bl	8005eec <lsm6dso_read_reg>
 8006320:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8006322:	7a3b      	ldrb	r3, [r7, #8]
 8006324:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006328:	b2db      	uxtb	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	701a      	strb	r2, [r3, #0]

  return ret;
 8006330:	68fb      	ldr	r3, [r7, #12]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(const stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b086      	sub	sp, #24
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8006346:	f107 020c 	add.w	r2, r7, #12
 800634a:	2301      	movs	r3, #1
 800634c:	2118      	movs	r1, #24
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff fdcc 	bl	8005eec <lsm6dso_read_reg>
 8006354:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8006356:	78fb      	ldrb	r3, [r7, #3]
 8006358:	09db      	lsrs	r3, r3, #7
 800635a:	b2db      	uxtb	r3, r3
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	b2da      	uxtb	r2, r3
 8006362:	7b3b      	ldrb	r3, [r7, #12]
 8006364:	f362 0341 	bfi	r3, r2, #1, #1
 8006368:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 800636a:	f107 020c 	add.w	r2, r7, #12
 800636e:	2301      	movs	r3, #1
 8006370:	2118      	movs	r1, #24
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7ff fdd8 	bl	8005f28 <lsm6dso_write_reg>
 8006378:	4602      	mov	r2, r0
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	4413      	add	r3, r2
 800637e:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <lsm6dso_i3c_disable_set+0x50>
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	e01b      	b.n	80063c2 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 800638a:	f107 0210 	add.w	r2, r7, #16
 800638e:	2301      	movs	r3, #1
 8006390:	2162      	movs	r1, #98	@ 0x62
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7ff fdaa 	bl	8005eec <lsm6dso_read_reg>
 8006398:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	f003 0303 	and.w	r3, r3, #3
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	7c3b      	ldrb	r3, [r7, #16]
 80063a4:	f362 03c4 	bfi	r3, r2, #3, #2
 80063a8:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 80063aa:	f107 0210 	add.w	r2, r7, #16
 80063ae:	2301      	movs	r3, #1
 80063b0:	2162      	movs	r1, #98	@ 0x62
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7ff fdb8 	bl	8005f28 <lsm6dso_write_reg>
 80063b8:	4602      	mov	r2, r0
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	4413      	add	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

  return ret;
 80063c0:	697b      	ldr	r3, [r7, #20]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b086      	sub	sp, #24
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	6078      	str	r0, [r7, #4]
 80063d2:	460b      	mov	r3, r1
 80063d4:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 80063d6:	f107 020c 	add.w	r2, r7, #12
 80063da:	2301      	movs	r3, #1
 80063dc:	2108      	movs	r1, #8
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff fd84 	bl	8005eec <lsm6dso_read_reg>
 80063e4:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <lsm6dso_fifo_watermark_set+0x26>
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	e020      	b.n	8006432 <lsm6dso_fifo_watermark_set+0x68>

  fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	743b      	strb	r3, [r7, #16]
  fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 80063f6:	887b      	ldrh	r3, [r7, #2]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	f003 0301 	and.w	r3, r3, #1
 8006400:	b2da      	uxtb	r2, r3
 8006402:	7b3b      	ldrb	r3, [r7, #12]
 8006404:	f362 0300 	bfi	r3, r2, #0, #1
 8006408:	733b      	strb	r3, [r7, #12]

  ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 800640a:	f107 0210 	add.w	r2, r7, #16
 800640e:	2301      	movs	r3, #1
 8006410:	2107      	movs	r1, #7
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7ff fd88 	bl	8005f28 <lsm6dso_write_reg>
 8006418:	6178      	str	r0, [r7, #20]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 800641a:	f107 020c 	add.w	r2, r7, #12
 800641e:	2301      	movs	r3, #1
 8006420:	2108      	movs	r1, #8
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7ff fd80 	bl	8005f28 <lsm6dso_write_reg>
 8006428:	4602      	mov	r2, r0
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

  return ret;
 8006430:	697b      	ldr	r3, [r7, #20]
}
 8006432:	4618      	mov	r0, r3
 8006434:	3718      	adds	r7, #24
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
 8006442:	460b      	mov	r3, r1
 8006444:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8006446:	f107 0208 	add.w	r2, r7, #8
 800644a:	2301      	movs	r3, #1
 800644c:	2109      	movs	r1, #9
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff fd4c 	bl	8005eec <lsm6dso_read_reg>
 8006454:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10f      	bne.n	800647c <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 800645c:	78fb      	ldrb	r3, [r7, #3]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	b2da      	uxtb	r2, r3
 8006464:	7a3b      	ldrb	r3, [r7, #8]
 8006466:	f362 0303 	bfi	r3, r2, #0, #4
 800646a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 800646c:	f107 0208 	add.w	r2, r7, #8
 8006470:	2301      	movs	r3, #1
 8006472:	2109      	movs	r1, #9
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f7ff fd57 	bl	8005f28 <lsm6dso_write_reg>
 800647a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800647c:	68fb      	ldr	r3, [r7, #12]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <lsm6dso_fifo_gy_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_gy_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_gy_t val)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8006492:	f107 0208 	add.w	r2, r7, #8
 8006496:	2301      	movs	r3, #1
 8006498:	2109      	movs	r1, #9
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7ff fd26 	bl	8005eec <lsm6dso_read_reg>
 80064a0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10f      	bne.n	80064c8 <lsm6dso_fifo_gy_batch_set+0x42>
  {
    reg.bdr_gy = (uint8_t)val;
 80064a8:	78fb      	ldrb	r3, [r7, #3]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	7a3b      	ldrb	r3, [r7, #8]
 80064b2:	f362 1307 	bfi	r3, r2, #4, #4
 80064b6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 80064b8:	f107 0208 	add.w	r2, r7, #8
 80064bc:	2301      	movs	r3, #1
 80064be:	2109      	movs	r1, #9
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fd31 	bl	8005f28 <lsm6dso_write_reg>
 80064c6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80064c8:	68fb      	ldr	r3, [r7, #12]
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 80064de:	f107 0208 	add.w	r2, r7, #8
 80064e2:	2301      	movs	r3, #1
 80064e4:	210a      	movs	r1, #10
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff fd00 	bl	8005eec <lsm6dso_read_reg>
 80064ec:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10f      	bne.n	8006514 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 80064f4:	78fb      	ldrb	r3, [r7, #3]
 80064f6:	f003 0307 	and.w	r3, r3, #7
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	7a3b      	ldrb	r3, [r7, #8]
 80064fe:	f362 0302 	bfi	r3, r2, #0, #3
 8006502:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8006504:	f107 0208 	add.w	r2, r7, #8
 8006508:	2301      	movs	r3, #1
 800650a:	210a      	movs	r1, #10
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fd0b 	bl	8005f28 <lsm6dso_write_reg>
 8006512:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8006514:	68fb      	ldr	r3, [r7, #12]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(const stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006528:	2102      	movs	r1, #2
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fe98 	bl	8006260 <lsm6dso_mem_bank_set>
 8006530:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8006532:	2302      	movs	r3, #2
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	2146      	movs	r1, #70	@ 0x46
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff fcd7 	bl	8005eec <lsm6dso_read_reg>
 800653e:	4602      	mov	r2, r0
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	4413      	add	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006546:	2100      	movs	r1, #0
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe89 	bl	8006260 <lsm6dso_mem_bank_set>
 800654e:	4602      	mov	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	4413      	add	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  return ret;
 8006556:	68fb      	ldr	r3, [r7, #12]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 800656a:	2102      	movs	r1, #2
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f7ff fe77 	bl	8006260 <lsm6dso_mem_bank_set>
 8006572:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <lsm6dso_fsm_data_rate_get+0x1e>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	e03a      	b.n	80065f4 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 800657e:	f107 0208 	add.w	r2, r7, #8
 8006582:	2301      	movs	r3, #1
 8006584:	215f      	movs	r1, #95	@ 0x5f
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff fcb0 	bl	8005eec <lsm6dso_read_reg>
 800658c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d125      	bne.n	80065e0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8006594:	7a3b      	ldrb	r3, [r7, #8]
 8006596:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b03      	cmp	r3, #3
 800659e:	d81b      	bhi.n	80065d8 <lsm6dso_fsm_data_rate_get+0x78>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <lsm6dso_fsm_data_rate_get+0x48>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065b9 	.word	0x080065b9
 80065ac:	080065c1 	.word	0x080065c1
 80065b0:	080065c9 	.word	0x080065c9
 80065b4:	080065d1 	.word	0x080065d1
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2200      	movs	r2, #0
 80065bc:	701a      	strb	r2, [r3, #0]
      break;
 80065be:	e010      	b.n	80065e2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2201      	movs	r2, #1
 80065c4:	701a      	strb	r2, [r3, #0]
      break;
 80065c6:	e00c      	b.n	80065e2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2202      	movs	r2, #2
 80065cc:	701a      	strb	r2, [r3, #0]
      break;
 80065ce:	e008      	b.n	80065e2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2203      	movs	r2, #3
 80065d4:	701a      	strb	r2, [r3, #0]
      break;
 80065d6:	e004      	b.n	80065e2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2200      	movs	r2, #0
 80065dc:	701a      	strb	r2, [r3, #0]
      break;
 80065de:	e000      	b.n	80065e2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 80065e0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80065e2:	2100      	movs	r1, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fe3b 	bl	8006260 <lsm6dso_mem_bank_set>
 80065ea:	4602      	mov	r2, r0
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]

  return ret;
 80065f2:	68fb      	ldr	r3, [r7, #12]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b090      	sub	sp, #64	@ 0x40
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	1d3b      	adds	r3, r7, #4
 8006606:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 800660a:	2300      	movs	r3, #0
 800660c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8006610:	793b      	ldrb	r3, [r7, #4]
 8006612:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800661c:	f362 0300 	bfi	r3, r2, #0, #1
 8006620:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8006624:	793b      	ldrb	r3, [r7, #4]
 8006626:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800662a:	b2da      	uxtb	r2, r3
 800662c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006630:	f362 0341 	bfi	r3, r2, #1, #1
 8006634:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8006638:	793b      	ldrb	r3, [r7, #4]
 800663a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800663e:	b2da      	uxtb	r2, r3
 8006640:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006644:	f362 0382 	bfi	r3, r2, #2, #1
 8006648:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 800664c:	793b      	ldrb	r3, [r7, #4]
 800664e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006652:	b2da      	uxtb	r2, r3
 8006654:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006658:	f362 03c3 	bfi	r3, r2, #3, #1
 800665c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8006660:	793b      	ldrb	r3, [r7, #4]
 8006662:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006666:	b2da      	uxtb	r2, r3
 8006668:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800666c:	f362 1304 	bfi	r3, r2, #4, #1
 8006670:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8006674:	793b      	ldrb	r3, [r7, #4]
 8006676:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800667a:	b2da      	uxtb	r2, r3
 800667c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006680:	f362 1345 	bfi	r3, r2, #5, #1
 8006684:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8006688:	793b      	ldrb	r3, [r7, #4]
 800668a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006694:	f362 1386 	bfi	r3, r2, #6, #1
 8006698:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 800669c:	797b      	ldrb	r3, [r7, #5]
 800669e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80066a8:	f362 13c7 	bfi	r3, r2, #7, #1
 80066ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80066b0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80066b4:	2301      	movs	r3, #1
 80066b6:	210d      	movs	r1, #13
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff fc35 	bl	8005f28 <lsm6dso_write_reg>
 80066be:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80066c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <lsm6dso_pin_int1_route_set+0xce>
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	e33a      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80066ca:	f107 0210 	add.w	r2, r7, #16
 80066ce:	2301      	movs	r3, #1
 80066d0:	2113      	movs	r1, #19
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f7ff fc0a 	bl	8005eec <lsm6dso_read_reg>
 80066d8:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80066da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d001      	beq.n	80066e4 <lsm6dso_pin_int1_route_set+0xe8>
 80066e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e2:	e32d      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 80066e4:	793b      	ldrb	r3, [r7, #4]
 80066e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	797b      	ldrb	r3, [r7, #5]
 80066ee:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	4313      	orrs	r3, r2
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 80066fc:	7c3b      	ldrb	r3, [r7, #16]
 80066fe:	f043 0320 	orr.w	r3, r3, #32
 8006702:	743b      	strb	r3, [r7, #16]
 8006704:	e003      	b.n	800670e <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8006706:	7c3b      	ldrb	r3, [r7, #16]
 8006708:	f023 0320 	bic.w	r3, r3, #32
 800670c:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800670e:	f107 0210 	add.w	r2, r7, #16
 8006712:	2301      	movs	r3, #1
 8006714:	2113      	movs	r1, #19
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f7ff fc06 	bl	8005f28 <lsm6dso_write_reg>
 800671c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800671e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <lsm6dso_pin_int1_route_set+0x12c>
 8006724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006726:	e30b      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8006728:	f107 0220 	add.w	r2, r7, #32
 800672c:	2301      	movs	r3, #1
 800672e:	210e      	movs	r1, #14
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff fbdb 	bl	8005eec <lsm6dso_read_reg>
 8006736:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8006738:	793b      	ldrb	r3, [r7, #4]
 800673a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800673e:	b2da      	uxtb	r2, r3
 8006740:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006744:	f362 0382 	bfi	r3, r2, #2, #1
 8006748:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 800674c:	f107 0220 	add.w	r2, r7, #32
 8006750:	2301      	movs	r3, #1
 8006752:	210e      	movs	r1, #14
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff fbe7 	bl	8005f28 <lsm6dso_write_reg>
 800675a:	4602      	mov	r2, r0
 800675c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800675e:	4413      	add	r3, r2
 8006760:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8006762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <lsm6dso_pin_int1_route_set+0x170>
 8006768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800676a:	e2e9      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800676c:	f107 0218 	add.w	r2, r7, #24
 8006770:	2301      	movs	r3, #1
 8006772:	215f      	movs	r1, #95	@ 0x5f
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fbb9 	bl	8005eec <lsm6dso_read_reg>
 800677a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 800677c:	797b      	ldrb	r3, [r7, #5]
 800677e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006782:	b2da      	uxtb	r2, r3
 8006784:	7e3b      	ldrb	r3, [r7, #24]
 8006786:	f362 0300 	bfi	r3, r2, #0, #1
 800678a:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800678c:	f107 0218 	add.w	r2, r7, #24
 8006790:	2301      	movs	r3, #1
 8006792:	215f      	movs	r1, #95	@ 0x5f
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff fbc7 	bl	8005f28 <lsm6dso_write_reg>
 800679a:	4602      	mov	r2, r0
 800679c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800679e:	4413      	add	r3, r2
 80067a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80067a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d001      	beq.n	80067ac <lsm6dso_pin_int1_route_set+0x1b0>
 80067a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067aa:	e2c9      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 80067ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067b0:	f023 0307 	bic.w	r3, r3, #7
 80067b4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 80067b8:	79bb      	ldrb	r3, [r7, #6]
 80067ba:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067c4:	f362 03c3 	bfi	r3, r2, #3, #1
 80067c8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 80067cc:	79bb      	ldrb	r3, [r7, #6]
 80067ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067d8:	f362 1304 	bfi	r3, r2, #4, #1
 80067dc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 80067e0:	79bb      	ldrb	r3, [r7, #6]
 80067e2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067ec:	f362 1345 	bfi	r3, r2, #5, #1
 80067f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 80067f4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80067f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067fc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8006800:	79bb      	ldrb	r3, [r7, #6]
 8006802:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006806:	b2da      	uxtb	r2, r3
 8006808:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800680c:	f362 13c7 	bfi	r3, r2, #7, #1
 8006810:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8006814:	79bb      	ldrb	r3, [r7, #6]
 8006816:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800681a:	b2da      	uxtb	r2, r3
 800681c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006820:	f362 0300 	bfi	r3, r2, #0, #1
 8006824:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8006828:	79bb      	ldrb	r3, [r7, #6]
 800682a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800682e:	b2da      	uxtb	r2, r3
 8006830:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006834:	f362 0341 	bfi	r3, r2, #1, #1
 8006838:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 800683c:	79bb      	ldrb	r3, [r7, #6]
 800683e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006842:	b2da      	uxtb	r2, r3
 8006844:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006848:	f362 0382 	bfi	r3, r2, #2, #1
 800684c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8006850:	79fb      	ldrb	r3, [r7, #7]
 8006852:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006856:	b2da      	uxtb	r2, r3
 8006858:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800685c:	f362 03c3 	bfi	r3, r2, #3, #1
 8006860:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800686a:	b2da      	uxtb	r2, r3
 800686c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006870:	f362 1304 	bfi	r3, r2, #4, #1
 8006874:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006884:	f362 1345 	bfi	r3, r2, #5, #1
 8006888:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006892:	b2da      	uxtb	r2, r3
 8006894:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006898:	f362 1386 	bfi	r3, r2, #6, #1
 800689c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068ac:	f362 13c7 	bfi	r3, r2, #7, #1
 80068b0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068c0:	f362 0300 	bfi	r3, r2, #0, #1
 80068c4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 80068c8:	79fb      	ldrb	r3, [r7, #7]
 80068ca:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068d4:	f362 0341 	bfi	r3, r2, #1, #1
 80068d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80068e2:	b2da      	uxtb	r2, r3
 80068e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068e8:	f362 0382 	bfi	r3, r2, #2, #1
 80068ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 80068f0:	7a3b      	ldrb	r3, [r7, #8]
 80068f2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068fc:	f362 03c3 	bfi	r3, r2, #3, #1
 8006900:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 8006904:	7a3b      	ldrb	r3, [r7, #8]
 8006906:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800690a:	b2da      	uxtb	r2, r3
 800690c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006910:	f362 1304 	bfi	r3, r2, #4, #1
 8006914:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 8006918:	7a3b      	ldrb	r3, [r7, #8]
 800691a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800691e:	b2da      	uxtb	r2, r3
 8006920:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006924:	f362 1345 	bfi	r3, r2, #5, #1
 8006928:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 800692c:	7a3b      	ldrb	r3, [r7, #8]
 800692e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006932:	b2da      	uxtb	r2, r3
 8006934:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006938:	f362 1386 	bfi	r3, r2, #6, #1
 800693c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8006940:	7a3b      	ldrb	r3, [r7, #8]
 8006942:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006946:	b2da      	uxtb	r2, r3
 8006948:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800694c:	f362 13c7 	bfi	r3, r2, #7, #1
 8006950:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006954:	2102      	movs	r1, #2
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff fc82 	bl	8006260 <lsm6dso_mem_bank_set>
 800695c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800695e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <lsm6dso_pin_int1_route_set+0x36c>
 8006964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006966:	e1eb      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 8006968:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800696c:	2301      	movs	r3, #1
 800696e:	210a      	movs	r1, #10
 8006970:	68f8      	ldr	r0, [r7, #12]
 8006972:	f7ff fad9 	bl	8005f28 <lsm6dso_write_reg>
 8006976:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 8006978:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800697c:	2301      	movs	r3, #1
 800697e:	210b      	movs	r1, #11
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f7ff fad1 	bl	8005f28 <lsm6dso_write_reg>
 8006986:	4602      	mov	r2, r0
 8006988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800698a:	4413      	add	r3, r2
 800698c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 800698e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006992:	2301      	movs	r3, #1
 8006994:	210c      	movs	r1, #12
 8006996:	68f8      	ldr	r0, [r7, #12]
 8006998:	f7ff fac6 	bl	8005f28 <lsm6dso_write_reg>
 800699c:	4602      	mov	r2, r0
 800699e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a0:	4413      	add	r3, r2
 80069a2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80069a4:	2100      	movs	r1, #0
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff fc5a 	bl	8006260 <lsm6dso_mem_bank_set>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b0:	4413      	add	r3, r2
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 80069b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d001      	beq.n	80069be <lsm6dso_pin_int1_route_set+0x3c2>
 80069ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069bc:	e1c0      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 80069be:	797b      	ldrb	r3, [r7, #5]
 80069c0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	7d3b      	ldrb	r3, [r7, #20]
 80069c8:	f362 0300 	bfi	r3, r2, #0, #1
 80069cc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 80069ce:	797b      	ldrb	r3, [r7, #5]
 80069d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80069d4:	b2da      	uxtb	r2, r3
 80069d6:	7d3b      	ldrb	r3, [r7, #20]
 80069d8:	f362 0382 	bfi	r3, r2, #2, #1
 80069dc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 80069de:	797b      	ldrb	r3, [r7, #5]
 80069e0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80069e4:	b2da      	uxtb	r2, r3
 80069e6:	7d3b      	ldrb	r3, [r7, #20]
 80069e8:	f362 03c3 	bfi	r3, r2, #3, #1
 80069ec:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 80069ee:	797b      	ldrb	r3, [r7, #5]
 80069f0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	7d3b      	ldrb	r3, [r7, #20]
 80069f8:	f362 1304 	bfi	r3, r2, #4, #1
 80069fc:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 80069fe:	797b      	ldrb	r3, [r7, #5]
 8006a00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	7d3b      	ldrb	r3, [r7, #20]
 8006a08:	f362 1345 	bfi	r3, r2, #5, #1
 8006a0c:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 8006a0e:	797b      	ldrb	r3, [r7, #5]
 8006a10:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	7d3b      	ldrb	r3, [r7, #20]
 8006a18:	f362 1386 	bfi	r3, r2, #6, #1
 8006a1c:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 8006a1e:	79bb      	ldrb	r3, [r7, #6]
 8006a20:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7d3b      	ldrb	r3, [r7, #20]
 8006a28:	f362 13c7 	bfi	r3, r2, #7, #1
 8006a2c:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 8006a2e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006a32:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006a36:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 8006a38:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006a3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	4313      	orrs	r3, r2
 8006a44:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 8006a46:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006a4a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 8006a54:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8006a58:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 8006a62:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a66:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 8006a70:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a74:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 8006a7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a82:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 8006a8c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	4313      	orrs	r3, r2
 8006a98:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 8006a9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006a9e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 8006aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006aac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 8006ab6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006aba:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 8006ac4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ac8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 8006ad2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ad6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	4313      	orrs	r3, r2
 8006ade:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 8006ae0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ae4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	4313      	orrs	r3, r2
 8006aec:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 8006aee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006af2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 8006afc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b00:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 8006b0a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b0e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	4313      	orrs	r3, r2
 8006b16:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 8006b18:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b1c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	4313      	orrs	r3, r2
 8006b24:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 8006b26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b2a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	4313      	orrs	r3, r2
 8006b32:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 8006b34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b38:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 8006b46:	7d3b      	ldrb	r3, [r7, #20]
 8006b48:	f043 0302 	orr.w	r3, r3, #2
 8006b4c:	753b      	strb	r3, [r7, #20]
 8006b4e:	e003      	b.n	8006b58 <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8006b50:	7d3b      	ldrb	r3, [r7, #20]
 8006b52:	f023 0302 	bic.w	r3, r3, #2
 8006b56:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8006b58:	f107 0214 	add.w	r2, r7, #20
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	215e      	movs	r1, #94	@ 0x5e
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f7ff f9e1 	bl	8005f28 <lsm6dso_write_reg>
 8006b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8006b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <lsm6dso_pin_int1_route_set+0x576>
 8006b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b70:	e0e6      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8006b72:	f107 021c 	add.w	r2, r7, #28
 8006b76:	2301      	movs	r3, #1
 8006b78:	2158      	movs	r1, #88	@ 0x58
 8006b7a:	68f8      	ldr	r0, [r7, #12]
 8006b7c:	f7ff f9b6 	bl	8005eec <lsm6dso_read_reg>
 8006b80:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8006b82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8006b86:	461a      	mov	r2, r3
 8006b88:	2100      	movs	r1, #0
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f8dc 	bl	8006d48 <lsm6dso_pin_int2_route_get>
 8006b90:	4602      	mov	r2, r0
 8006b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b94:	4413      	add	r3, r2
 8006b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8006b98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d001      	beq.n	8006ba2 <lsm6dso_pin_int1_route_set+0x5a6>
 8006b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ba0:	e0ce      	b.n	8006d40 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 8006ba2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006ba6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006baa:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 8006bac:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bb0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 8006bba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bbe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 8006bc8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bcc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 8006bd6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bda:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	4313      	orrs	r3, r2
 8006be2:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 8006be4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006be8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 8006bf2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006bf6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 8006c00:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 8006c0e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c12:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 8006c1c:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c20:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	4313      	orrs	r3, r2
 8006c28:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 8006c2a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c2e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4313      	orrs	r3, r2
 8006c36:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 8006c38:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	4313      	orrs	r3, r2
 8006c44:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 8006c46:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006c4a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	4313      	orrs	r3, r2
 8006c52:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 8006c54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c58:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 8006c62:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8006c70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c74:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 8006c7e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c82:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 8006c8c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c90:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	4313      	orrs	r3, r2
 8006c98:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 8006c9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006c9e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 8006ca8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 8006cb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006cba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 8006cc4:	7d3b      	ldrb	r3, [r7, #20]
 8006cc6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 8006cd0:	7d3b      	ldrb	r3, [r7, #20]
 8006cd2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 8006cdc:	7d3b      	ldrb	r3, [r7, #20]
 8006cde:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 8006ce8:	7d3b      	ldrb	r3, [r7, #20]
 8006cea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 8006cf4:	7d3b      	ldrb	r3, [r7, #20]
 8006cf6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 8006d00:	7d3b      	ldrb	r3, [r7, #20]
 8006d02:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 8006d0c:	7d3b      	ldrb	r3, [r7, #20]
 8006d0e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	4313      	orrs	r3, r2
 8006d16:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d004      	beq.n	8006d26 <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 8006d1c:	7f3b      	ldrb	r3, [r7, #28]
 8006d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d22:	773b      	strb	r3, [r7, #28]
 8006d24:	e003      	b.n	8006d2e <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 8006d26:	7f3b      	ldrb	r3, [r7, #28]
 8006d28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d2c:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8006d2e:	f107 021c 	add.w	r2, r7, #28
 8006d32:	2301      	movs	r3, #1
 8006d34:	2158      	movs	r1, #88	@ 0x58
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff f8f6 	bl	8005f28 <lsm6dso_write_reg>
 8006d3c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3740      	adds	r7, #64	@ 0x40
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(const stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08c      	sub	sp, #48	@ 0x30
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	60f8      	str	r0, [r7, #12]
 8006d50:	60b9      	str	r1, [r7, #8]
 8006d52:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d010      	beq.n	8006d80 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 8006d5e:	f107 0210 	add.w	r2, r7, #16
 8006d62:	2301      	movs	r3, #1
 8006d64:	216f      	movs	r1, #111	@ 0x6f
 8006d66:	68b8      	ldr	r0, [r7, #8]
 8006d68:	f7ff f8c0 	bl	8005eec <lsm6dso_read_reg>
 8006d6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8006d6e:	7c3b      	ldrb	r3, [r7, #16]
 8006d70:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006d74:	b2d9      	uxtb	r1, r3
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	7813      	ldrb	r3, [r2, #0]
 8006d7a:	f361 0300 	bfi	r3, r1, #0, #1
 8006d7e:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 81c7 	beq.w	8007116 <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 8006d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d104      	bne.n	8006d98 <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8006d8e:	2102      	movs	r1, #2
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f7ff fa65 	bl	8006260 <lsm6dso_mem_bank_set>
 8006d96:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8006d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d107      	bne.n	8006dae <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 8006d9e:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006da2:	2301      	movs	r3, #1
 8006da4:	210e      	movs	r1, #14
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f7ff f8a0 	bl	8005eec <lsm6dso_read_reg>
 8006dac:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8006dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d107      	bne.n	8006dc4 <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8006db4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8006db8:	2301      	movs	r3, #1
 8006dba:	210f      	movs	r1, #15
 8006dbc:	68f8      	ldr	r0, [r7, #12]
 8006dbe:	f7ff f895 	bl	8005eec <lsm6dso_read_reg>
 8006dc2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8006dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d107      	bne.n	8006dda <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 8006dca:	f107 0220 	add.w	r2, r7, #32
 8006dce:	2301      	movs	r3, #1
 8006dd0:	2110      	movs	r1, #16
 8006dd2:	68f8      	ldr	r0, [r7, #12]
 8006dd4:	f7ff f88a 	bl	8005eec <lsm6dso_read_reg>
 8006dd8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8006de0:	2100      	movs	r1, #0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff fa3c 	bl	8006260 <lsm6dso_mem_bank_set>
 8006de8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 8006dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d107      	bne.n	8006e00 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8006df0:	f107 021c 	add.w	r2, r7, #28
 8006df4:	2301      	movs	r3, #1
 8006df6:	210e      	movs	r1, #14
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff f877 	bl	8005eec <lsm6dso_read_reg>
 8006dfe:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 8006e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d107      	bne.n	8006e16 <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 8006e06:	f107 0218 	add.w	r2, r7, #24
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	215f      	movs	r1, #95	@ 0x5f
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f7ff f86c 	bl	8005eec <lsm6dso_read_reg>
 8006e14:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 8006e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d107      	bne.n	8006e2c <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8006e1c:	f107 0214 	add.w	r2, r7, #20
 8006e20:	2301      	movs	r3, #1
 8006e22:	2113      	movs	r1, #19
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff f861 	bl	8005eec <lsm6dso_read_reg>
 8006e2a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 8006e2c:	7d3b      	ldrb	r3, [r7, #20]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d128      	bne.n	8006e8a <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 8006e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d110      	bne.n	8006e60 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8006e3e:	f107 021c 	add.w	r2, r7, #28
 8006e42:	2301      	movs	r3, #1
 8006e44:	210e      	movs	r1, #14
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff f850 	bl	8005eec <lsm6dso_read_reg>
 8006e4c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8006e4e:	7f3b      	ldrb	r3, [r7, #28]
 8006e50:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006e54:	b2d9      	uxtb	r1, r3
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	7813      	ldrb	r3, [r2, #0]
 8006e5a:	f361 03c3 	bfi	r3, r1, #3, #1
 8006e5e:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8006e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d11b      	bne.n	8006e9e <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8006e66:	f107 0218 	add.w	r2, r7, #24
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	215f      	movs	r1, #95	@ 0x5f
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff f83c 	bl	8005eec <lsm6dso_read_reg>
 8006e74:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 8006e76:	7e3b      	ldrb	r3, [r7, #24]
 8006e78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e7c:	b2d9      	uxtb	r1, r3
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	7853      	ldrb	r3, [r2, #1]
 8006e82:	f361 0300 	bfi	r3, r1, #0, #1
 8006e86:	7053      	strb	r3, [r2, #1]
 8006e88:	e009      	b.n	8006e9e <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	7813      	ldrb	r3, [r2, #0]
 8006e8e:	f023 0308 	bic.w	r3, r3, #8
 8006e92:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	7853      	ldrb	r3, [r2, #1]
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8006e9e:	7f3b      	ldrb	r3, [r7, #28]
 8006ea0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006ea4:	b2d9      	uxtb	r1, r3
 8006ea6:	687a      	ldr	r2, [r7, #4]
 8006ea8:	7813      	ldrb	r3, [r2, #0]
 8006eaa:	f361 0341 	bfi	r3, r1, #1, #1
 8006eae:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 8006eb0:	7f3b      	ldrb	r3, [r7, #28]
 8006eb2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006eb6:	b2d9      	uxtb	r1, r3
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	7813      	ldrb	r3, [r2, #0]
 8006ebc:	f361 0382 	bfi	r3, r1, #2, #1
 8006ec0:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8006ec2:	7f3b      	ldrb	r3, [r7, #28]
 8006ec4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ec8:	b2d9      	uxtb	r1, r3
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	7813      	ldrb	r3, [r2, #0]
 8006ece:	f361 03c3 	bfi	r3, r1, #3, #1
 8006ed2:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8006ed4:	7f3b      	ldrb	r3, [r7, #28]
 8006ed6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006eda:	b2d9      	uxtb	r1, r3
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	7813      	ldrb	r3, [r2, #0]
 8006ee0:	f361 1304 	bfi	r3, r1, #4, #1
 8006ee4:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 8006ee6:	7f3b      	ldrb	r3, [r7, #28]
 8006ee8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006eec:	b2d9      	uxtb	r1, r3
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	7813      	ldrb	r3, [r2, #0]
 8006ef2:	f361 1345 	bfi	r3, r1, #5, #1
 8006ef6:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 8006ef8:	7f3b      	ldrb	r3, [r7, #28]
 8006efa:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006efe:	b2d9      	uxtb	r1, r3
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	7813      	ldrb	r3, [r2, #0]
 8006f04:	f361 1386 	bfi	r3, r1, #6, #1
 8006f08:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 8006f0a:	7f3b      	ldrb	r3, [r7, #28]
 8006f0c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006f10:	b2d9      	uxtb	r1, r3
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	7813      	ldrb	r3, [r2, #0]
 8006f16:	f361 13c7 	bfi	r3, r1, #7, #1
 8006f1a:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 8006f1c:	7e3b      	ldrb	r3, [r7, #24]
 8006f1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006f22:	b2d9      	uxtb	r1, r3
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	7853      	ldrb	r3, [r2, #1]
 8006f28:	f361 0300 	bfi	r3, r1, #0, #1
 8006f2c:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 8006f2e:	7e3b      	ldrb	r3, [r7, #24]
 8006f30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006f34:	b2d9      	uxtb	r1, r3
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	7853      	ldrb	r3, [r2, #1]
 8006f3a:	f361 0341 	bfi	r3, r1, #1, #1
 8006f3e:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8006f40:	7e3b      	ldrb	r3, [r7, #24]
 8006f42:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006f46:	b2d9      	uxtb	r1, r3
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	7853      	ldrb	r3, [r2, #1]
 8006f4c:	f361 0382 	bfi	r3, r1, #2, #1
 8006f50:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 8006f52:	7e3b      	ldrb	r3, [r7, #24]
 8006f54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006f58:	b2d9      	uxtb	r1, r3
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	7853      	ldrb	r3, [r2, #1]
 8006f5e:	f361 03c3 	bfi	r3, r1, #3, #1
 8006f62:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 8006f64:	7e3b      	ldrb	r3, [r7, #24]
 8006f66:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8006f6a:	b2d9      	uxtb	r1, r3
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7853      	ldrb	r3, [r2, #1]
 8006f70:	f361 1304 	bfi	r3, r1, #4, #1
 8006f74:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 8006f76:	7e3b      	ldrb	r3, [r7, #24]
 8006f78:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8006f7c:	b2d9      	uxtb	r1, r3
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	7853      	ldrb	r3, [r2, #1]
 8006f82:	f361 1345 	bfi	r3, r1, #5, #1
 8006f86:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 8006f88:	7e3b      	ldrb	r3, [r7, #24]
 8006f8a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006f8e:	b2d9      	uxtb	r1, r3
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	7853      	ldrb	r3, [r2, #1]
 8006f94:	f361 1386 	bfi	r3, r1, #6, #1
 8006f98:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 8006f9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006fa2:	b2d9      	uxtb	r1, r3
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	7853      	ldrb	r3, [r2, #1]
 8006fa8:	f361 13c7 	bfi	r3, r1, #7, #1
 8006fac:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8006fae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fb2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006fb6:	b2d9      	uxtb	r1, r3
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	7893      	ldrb	r3, [r2, #2]
 8006fbc:	f361 0300 	bfi	r3, r1, #0, #1
 8006fc0:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8006fc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006fc6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006fca:	b2d9      	uxtb	r1, r3
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	7893      	ldrb	r3, [r2, #2]
 8006fd0:	f361 0382 	bfi	r3, r1, #2, #1
 8006fd4:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 8006fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fda:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006fde:	b2d9      	uxtb	r1, r3
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7893      	ldrb	r3, [r2, #2]
 8006fe4:	f361 03c3 	bfi	r3, r1, #3, #1
 8006fe8:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 8006fea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006fee:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006ff2:	b2d9      	uxtb	r1, r3
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7893      	ldrb	r3, [r2, #2]
 8006ff8:	f361 1304 	bfi	r3, r1, #4, #1
 8006ffc:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 8006ffe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007002:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007006:	b2d9      	uxtb	r1, r3
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7893      	ldrb	r3, [r2, #2]
 800700c:	f361 1345 	bfi	r3, r1, #5, #1
 8007010:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 8007012:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007016:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800701a:	b2d9      	uxtb	r1, r3
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	7893      	ldrb	r3, [r2, #2]
 8007020:	f361 1386 	bfi	r3, r1, #6, #1
 8007024:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 8007026:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800702a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800702e:	b2d9      	uxtb	r1, r3
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	7893      	ldrb	r3, [r2, #2]
 8007034:	f361 13c7 	bfi	r3, r1, #7, #1
 8007038:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 800703a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800703e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007042:	b2d9      	uxtb	r1, r3
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	78d3      	ldrb	r3, [r2, #3]
 8007048:	f361 0300 	bfi	r3, r1, #0, #1
 800704c:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 800704e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007052:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007056:	b2d9      	uxtb	r1, r3
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	78d3      	ldrb	r3, [r2, #3]
 800705c:	f361 0341 	bfi	r3, r1, #1, #1
 8007060:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 8007062:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007066:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800706a:	b2d9      	uxtb	r1, r3
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	78d3      	ldrb	r3, [r2, #3]
 8007070:	f361 0382 	bfi	r3, r1, #2, #1
 8007074:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 8007076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800707a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800707e:	b2d9      	uxtb	r1, r3
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	78d3      	ldrb	r3, [r2, #3]
 8007084:	f361 03c3 	bfi	r3, r1, #3, #1
 8007088:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800708a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800708e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007092:	b2d9      	uxtb	r1, r3
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	78d3      	ldrb	r3, [r2, #3]
 8007098:	f361 1304 	bfi	r3, r1, #4, #1
 800709c:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 800709e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80070a6:	b2d9      	uxtb	r1, r3
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	78d3      	ldrb	r3, [r2, #3]
 80070ac:	f361 1345 	bfi	r3, r1, #5, #1
 80070b0:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 80070b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070b6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80070ba:	b2d9      	uxtb	r1, r3
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	78d3      	ldrb	r3, [r2, #3]
 80070c0:	f361 1386 	bfi	r3, r1, #6, #1
 80070c4:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 80070c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80070ce:	b2d9      	uxtb	r1, r3
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	78d3      	ldrb	r3, [r2, #3]
 80070d4:	f361 13c7 	bfi	r3, r1, #7, #1
 80070d8:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 80070da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80070e2:	b2d9      	uxtb	r1, r3
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	7913      	ldrb	r3, [r2, #4]
 80070e8:	f361 0300 	bfi	r3, r1, #0, #1
 80070ec:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 80070ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80070f2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80070f6:	b2d9      	uxtb	r1, r3
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	7913      	ldrb	r3, [r2, #4]
 80070fc:	f361 0341 	bfi	r3, r1, #1, #1
 8007100:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 8007102:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007106:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800710a:	b2d9      	uxtb	r1, r3
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	7913      	ldrb	r3, [r2, #4]
 8007110:	f361 0382 	bfi	r3, r1, #2, #1
 8007114:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007118:	4618      	mov	r0, r3
 800711a:	3730      	adds	r7, #48	@ 0x30
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <SPI_CS_High>:
#define LOAD_0()      SPI_CS_High()
#define LOAD_1()      SPI_CS_Low()


 void SPI_CS_High()
{
 8007120:	b580      	push	{r7, lr}
 8007122:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8007124:	2201      	movs	r2, #1
 8007126:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800712a:	4802      	ldr	r0, [pc, #8]	@ (8007134 <SPI_CS_High+0x14>)
 800712c:	f7fc f8da 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8007130:	bf00      	nop
 8007132:	bd80      	pop	{r7, pc}
 8007134:	40020000 	.word	0x40020000

08007138 <SPI_CS_Low>:

 void SPI_CS_Low()
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800713c:	2200      	movs	r2, #0
 800713e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007142:	4802      	ldr	r0, [pc, #8]	@ (800714c <SPI_CS_Low+0x14>)
 8007144:	f7fc f8ce 	bl	80032e4 <HAL_GPIO_WritePin>
}
 8007148:	bf00      	nop
 800714a:	bd80      	pop	{r7, pc}
 800714c:	40020000 	.word	0x40020000

08007150 <MAX7219_Init>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Init (void)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	af00      	add	r7, sp, #0
  //DATA_DDR |= DATA_BIT;                               // configure "DATA" as output
  //CLK_DDR  |= CLK_BIT;                                // configure "CLK"  as output
  //LOAD_DDR |= LOAD_BIT;                               // configure "LOAD" as output

  MAX7219_Write(REG_SCAN_LIMIT, 7);                   // set up to scan all eight digits
 8007154:	2107      	movs	r1, #7
 8007156:	200b      	movs	r0, #11
 8007158:	f000 f884 	bl	8007264 <MAX7219_Write>
  MAX7219_Write(REG_DECODE, 0x00);                    // set to "no decode" for all digits
 800715c:	2100      	movs	r1, #0
 800715e:	2009      	movs	r0, #9
 8007160:	f000 f880 	bl	8007264 <MAX7219_Write>
  MAX7219_ShutdownStop();                             // select normal operation (i.e. not shutdown)
 8007164:	f000 f809 	bl	800717a <MAX7219_ShutdownStop>
  MAX7219_DisplayTestStop();                          // select normal operation (i.e. not test mode)
 8007168:	f000 f80f 	bl	800718a <MAX7219_DisplayTestStop>
  MAX7219_Clear();                                    // clear all digits
 800716c:	f000 f827 	bl	80071be <MAX7219_Clear>
  MAX7219_SetBrightness(INTENSITY_MAX);               // set to maximum intensity
 8007170:	200f      	movs	r0, #15
 8007172:	f000 f812 	bl	800719a <MAX7219_SetBrightness>
}
 8007176:	bf00      	nop
 8007178:	bd80      	pop	{r7, pc}

0800717a <MAX7219_ShutdownStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_ShutdownStop (void)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_SHUTDOWN, 1);                     // put MAX7219 into "normal" mode
 800717e:	2101      	movs	r1, #1
 8007180:	200c      	movs	r0, #12
 8007182:	f000 f86f 	bl	8007264 <MAX7219_Write>
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}

0800718a <MAX7219_DisplayTestStop>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayTestStop (void)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	af00      	add	r7, sp, #0
  MAX7219_Write(REG_DISPLAY_TEST, 0);                 // put MAX7219 into "normal" mode
 800718e:	2100      	movs	r1, #0
 8007190:	200f      	movs	r0, #15
 8007192:	f000 f867 	bl	8007264 <MAX7219_Write>
}
 8007196:	bf00      	nop
 8007198:	bd80      	pop	{r7, pc}

0800719a <MAX7219_SetBrightness>:
* Arguments  : brightness (0-15)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_SetBrightness (char brightness)
{
 800719a:	b580      	push	{r7, lr}
 800719c:	b082      	sub	sp, #8
 800719e:	af00      	add	r7, sp, #0
 80071a0:	4603      	mov	r3, r0
 80071a2:	71fb      	strb	r3, [r7, #7]
  brightness &= 0x0f;                                 // mask off extra bits
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	71fb      	strb	r3, [r7, #7]
  MAX7219_Write(REG_INTENSITY, brightness);           // set brightness
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	4619      	mov	r1, r3
 80071b0:	200a      	movs	r0, #10
 80071b2:	f000 f857 	bl	8007264 <MAX7219_Write>
}
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <MAX7219_Clear>:
* Arguments  : none
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_Clear (void)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
  char i;
  for (i=0; i < 8; i++)
 80071c4:	2300      	movs	r3, #0
 80071c6:	71fb      	strb	r3, [r7, #7]
 80071c8:	e007      	b.n	80071da <MAX7219_Clear+0x1c>
    MAX7219_Write(i, 0x00);                           // turn all segments off
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2100      	movs	r1, #0
 80071ce:	4618      	mov	r0, r3
 80071d0:	f000 f848 	bl	8007264 <MAX7219_Write>
  for (i=0; i < 8; i++)
 80071d4:	79fb      	ldrb	r3, [r7, #7]
 80071d6:	3301      	adds	r3, #1
 80071d8:	71fb      	strb	r3, [r7, #7]
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	2b07      	cmp	r3, #7
 80071de:	d9f4      	bls.n	80071ca <MAX7219_Clear+0xc>
}
 80071e0:	bf00      	nop
 80071e2:	bf00      	nop
 80071e4:	3708      	adds	r7, #8
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}

080071ea <MAX7219_DisplayChar>:
*              character = character to display (0-9, A-Z)
* Returns    : none
*********************************************************************************************************
*/
void MAX7219_DisplayChar (char digit, char character)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b082      	sub	sp, #8
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	4603      	mov	r3, r0
 80071f2:	460a      	mov	r2, r1
 80071f4:	71fb      	strb	r3, [r7, #7]
 80071f6:	4613      	mov	r3, r2
 80071f8:	71bb      	strb	r3, [r7, #6]
  MAX7219_Write(digit, MAX7219_LookupCode(character));
 80071fa:	79bb      	ldrb	r3, [r7, #6]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f000 f80b 	bl	8007218 <MAX7219_LookupCode>
 8007202:	4603      	mov	r3, r0
 8007204:	461a      	mov	r2, r3
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	4611      	mov	r1, r2
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f82a 	bl	8007264 <MAX7219_Write>
}
 8007210:	bf00      	nop
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <MAX7219_LookupCode>:
* Arguments  : character to display
* Returns    : segment code
*********************************************************************************************************
*/
static unsigned char MAX7219_LookupCode (char character)
{
 8007218:	b480      	push	{r7}
 800721a:	b085      	sub	sp, #20
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	71fb      	strb	r3, [r7, #7]
  char i;
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8007222:	2300      	movs	r3, #0
 8007224:	73fb      	strb	r3, [r7, #15]
 8007226:	e00f      	b.n	8007248 <MAX7219_LookupCode+0x30>
    if (character == MAX7219_Font[i].ascii)
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	4a0d      	ldr	r2, [pc, #52]	@ (8007260 <MAX7219_LookupCode+0x48>)
 800722c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007230:	79fa      	ldrb	r2, [r7, #7]
 8007232:	429a      	cmp	r2, r3
 8007234:	d105      	bne.n	8007242 <MAX7219_LookupCode+0x2a>
      return MAX7219_Font[i].segs;                    // return segments code
 8007236:	7bfb      	ldrb	r3, [r7, #15]
 8007238:	4a09      	ldr	r2, [pc, #36]	@ (8007260 <MAX7219_LookupCode+0x48>)
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	785b      	ldrb	r3, [r3, #1]
 8007240:	e009      	b.n	8007256 <MAX7219_LookupCode+0x3e>
  for (i = 0; MAX7219_Font[i].ascii; i++)             // scan font table for ascii code
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	3301      	adds	r3, #1
 8007246:	73fb      	strb	r3, [r7, #15]
 8007248:	7bfb      	ldrb	r3, [r7, #15]
 800724a:	4a05      	ldr	r2, [pc, #20]	@ (8007260 <MAX7219_LookupCode+0x48>)
 800724c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e9      	bne.n	8007228 <MAX7219_LookupCode+0x10>
  return 0;                                           // code not found, return null (blank)
 8007254:	2300      	movs	r3, #0
}
 8007256:	4618      	mov	r0, r3
 8007258:	3714      	adds	r7, #20
 800725a:	46bd      	mov	sp, r7
 800725c:	bc80      	pop	{r7}
 800725e:	4770      	bx	lr
 8007260:	0800e020 	.word	0x0800e020

08007264 <MAX7219_Write>:
*              dataout = data to write to MAX7219
* Returns    : none
*********************************************************************************************************
*/
static void MAX7219_Write (unsigned char reg_number, unsigned char dataout)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	460a      	mov	r2, r1
 800726e:	71fb      	strb	r3, [r7, #7]
 8007270:	4613      	mov	r3, r2
 8007272:	71bb      	strb	r3, [r7, #6]
  LOAD_1();                                           // take LOAD high to begin
 8007274:	f7ff ff60 	bl	8007138 <SPI_CS_Low>
  MAX7219_SendByte(reg_number);                       // write register number to MAX7219
 8007278:	79fb      	ldrb	r3, [r7, #7]
 800727a:	4618      	mov	r0, r3
 800727c:	f000 f80c 	bl	8007298 <MAX7219_SendByte>
  MAX7219_SendByte(dataout);                          // write data to MAX7219
 8007280:	79bb      	ldrb	r3, [r7, #6]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 f808 	bl	8007298 <MAX7219_SendByte>
  LOAD_0();                                           // take LOAD low to latch in data
 8007288:	f7ff ff4a 	bl	8007120 <SPI_CS_High>
  LOAD_1();                                           // take LOAD high to end
 800728c:	f7ff ff54 	bl	8007138 <SPI_CS_Low>
}
 8007290:	bf00      	nop
 8007292:	3708      	adds	r7, #8
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <MAX7219_SendByte>:
      DATA_0();                                       //  "0"
    CLK_1();                                          // bring CLK high
	}
}*/
static void MAX7219_SendByte (unsigned char dataout)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	4603      	mov	r3, r0
 80072a0:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi1, &dataout, 1, 1000);
 80072a2:	1df9      	adds	r1, r7, #7
 80072a4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80072a8:	2201      	movs	r2, #1
 80072aa:	4803      	ldr	r0, [pc, #12]	@ (80072b8 <MAX7219_SendByte+0x20>)
 80072ac:	f7fd ff07 	bl	80050be <HAL_SPI_Transmit>
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	200002b0 	.word	0x200002b0

080072bc <_fminf>:
 80072bc:	f005 bdd2 	b.w	800ce64 <fminf>

080072c0 <neai_classification_init>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	4605      	mov	r5, r0
 80072c4:	4958      	ldr	r1, [pc, #352]	@ (8007428 <neai_classification_init+0x168>)
 80072c6:	4b59      	ldr	r3, [pc, #356]	@ (800742c <neai_classification_init+0x16c>)
 80072c8:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	600d      	str	r5, [r1, #0]
 80072d0:	f8d0 0c00 	ldr.w	r0, [r0, #3072]	@ 0xc00
 80072d4:	f7f9 ff34 	bl	8001140 <__aeabi_f2iz>
 80072d8:	2300      	movs	r3, #0
 80072da:	2107      	movs	r1, #7
 80072dc:	4a54      	ldr	r2, [pc, #336]	@ (8007430 <neai_classification_init+0x170>)
 80072de:	4e55      	ldr	r6, [pc, #340]	@ (8007434 <neai_classification_init+0x174>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	6033      	str	r3, [r6, #0]
 80072e4:	4b54      	ldr	r3, [pc, #336]	@ (8007438 <neai_classification_init+0x178>)
 80072e6:	4c55      	ldr	r4, [pc, #340]	@ (800743c <neai_classification_init+0x17c>)
 80072e8:	6019      	str	r1, [r3, #0]
 80072ea:	4b55      	ldr	r3, [pc, #340]	@ (8007440 <neai_classification_init+0x180>)
 80072ec:	4955      	ldr	r1, [pc, #340]	@ (8007444 <neai_classification_init+0x184>)
 80072ee:	6018      	str	r0, [r3, #0]
 80072f0:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 80072f4:	6020      	str	r0, [r4, #0]
 80072f6:	4e54      	ldr	r6, [pc, #336]	@ (8007448 <neai_classification_init+0x188>)
 80072f8:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 80072fc:	6053      	str	r3, [r2, #4]
 80072fe:	f203 3301 	addw	r3, r3, #769	@ 0x301
 8007302:	f204 3405 	addw	r4, r4, #773	@ 0x305
 8007306:	f605 4704 	addw	r7, r5, #3076	@ 0xc04
 800730a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800730e:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8007312:	600f      	str	r7, [r1, #0]
 8007314:	6033      	str	r3, [r6, #0]
 8007316:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800731a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800731e:	f7f9 fedd 	bl	80010dc <__aeabi_fcmpeq>
 8007322:	2800      	cmp	r0, #0
 8007324:	d06f      	beq.n	8007406 <neai_classification_init+0x146>
 8007326:	4949      	ldr	r1, [pc, #292]	@ (800744c <neai_classification_init+0x18c>)
 8007328:	6860      	ldr	r0, [r4, #4]
 800732a:	f7f9 fed7 	bl	80010dc <__aeabi_fcmpeq>
 800732e:	2800      	cmp	r0, #0
 8007330:	d069      	beq.n	8007406 <neai_classification_init+0x146>
 8007332:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 8007336:	68a0      	ldr	r0, [r4, #8]
 8007338:	f7f9 fed0 	bl	80010dc <__aeabi_fcmpeq>
 800733c:	2800      	cmp	r0, #0
 800733e:	d062      	beq.n	8007406 <neai_classification_init+0x146>
 8007340:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007344:	68e0      	ldr	r0, [r4, #12]
 8007346:	f7f9 fec9 	bl	80010dc <__aeabi_fcmpeq>
 800734a:	2800      	cmp	r0, #0
 800734c:	d05b      	beq.n	8007406 <neai_classification_init+0x146>
 800734e:	2100      	movs	r1, #0
 8007350:	6920      	ldr	r0, [r4, #16]
 8007352:	f7f9 fec3 	bl	80010dc <__aeabi_fcmpeq>
 8007356:	2800      	cmp	r0, #0
 8007358:	d055      	beq.n	8007406 <neai_classification_init+0x146>
 800735a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800735e:	6960      	ldr	r0, [r4, #20]
 8007360:	f7f9 febc 	bl	80010dc <__aeabi_fcmpeq>
 8007364:	2800      	cmp	r0, #0
 8007366:	d04e      	beq.n	8007406 <neai_classification_init+0x146>
 8007368:	2100      	movs	r1, #0
 800736a:	69a0      	ldr	r0, [r4, #24]
 800736c:	f7f9 feb6 	bl	80010dc <__aeabi_fcmpeq>
 8007370:	2800      	cmp	r0, #0
 8007372:	d048      	beq.n	8007406 <neai_classification_init+0x146>
 8007374:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007378:	69e0      	ldr	r0, [r4, #28]
 800737a:	f7f9 feaf 	bl	80010dc <__aeabi_fcmpeq>
 800737e:	2800      	cmp	r0, #0
 8007380:	d041      	beq.n	8007406 <neai_classification_init+0x146>
 8007382:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007386:	6a20      	ldr	r0, [r4, #32]
 8007388:	f7f9 fea8 	bl	80010dc <__aeabi_fcmpeq>
 800738c:	2800      	cmp	r0, #0
 800738e:	d03a      	beq.n	8007406 <neai_classification_init+0x146>
 8007390:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007394:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007396:	f7f9 fea1 	bl	80010dc <__aeabi_fcmpeq>
 800739a:	2800      	cmp	r0, #0
 800739c:	d033      	beq.n	8007406 <neai_classification_init+0x146>
 800739e:	2100      	movs	r1, #0
 80073a0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80073a2:	f7f9 fe9b 	bl	80010dc <__aeabi_fcmpeq>
 80073a6:	b370      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073a8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80073ac:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80073ae:	f7f9 fe95 	bl	80010dc <__aeabi_fcmpeq>
 80073b2:	b340      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073b4:	2100      	movs	r1, #0
 80073b6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80073b8:	f7f9 fe90 	bl	80010dc <__aeabi_fcmpeq>
 80073bc:	b318      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073be:	2100      	movs	r1, #0
 80073c0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80073c2:	f7f9 fe8b 	bl	80010dc <__aeabi_fcmpeq>
 80073c6:	b1f0      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073c8:	2100      	movs	r1, #0
 80073ca:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80073cc:	f7f9 fe86 	bl	80010dc <__aeabi_fcmpeq>
 80073d0:	b1c8      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073d2:	491f      	ldr	r1, [pc, #124]	@ (8007450 <neai_classification_init+0x190>)
 80073d4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80073d6:	f7f9 fe81 	bl	80010dc <__aeabi_fcmpeq>
 80073da:	b1a0      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073dc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80073e0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80073e2:	f7f9 fe7b 	bl	80010dc <__aeabi_fcmpeq>
 80073e6:	b170      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073e8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80073ec:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80073ee:	f7f9 fe75 	bl	80010dc <__aeabi_fcmpeq>
 80073f2:	b140      	cbz	r0, 8007406 <neai_classification_init+0x146>
 80073f4:	4917      	ldr	r1, [pc, #92]	@ (8007454 <neai_classification_init+0x194>)
 80073f6:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 80073f8:	f7f9 fe70 	bl	80010dc <__aeabi_fcmpeq>
 80073fc:	2800      	cmp	r0, #0
 80073fe:	bf0c      	ite	eq
 8007400:	237d      	moveq	r3, #125	@ 0x7d
 8007402:	2300      	movne	r3, #0
 8007404:	e000      	b.n	8007408 <neai_classification_init+0x148>
 8007406:	237d      	movs	r3, #125	@ 0x7d
 8007408:	4c13      	ldr	r4, [pc, #76]	@ (8007458 <neai_classification_init+0x198>)
 800740a:	4914      	ldr	r1, [pc, #80]	@ (800745c <neai_classification_init+0x19c>)
 800740c:	4814      	ldr	r0, [pc, #80]	@ (8007460 <neai_classification_init+0x1a0>)
 800740e:	7023      	strb	r3, [r4, #0]
 8007410:	f7ff ff54 	bl	80072bc <_fminf>
 8007414:	4912      	ldr	r1, [pc, #72]	@ (8007460 <neai_classification_init+0x1a0>)
 8007416:	f7f9 fe61 	bl	80010dc <__aeabi_fcmpeq>
 800741a:	b108      	cbz	r0, 8007420 <neai_classification_init+0x160>
 800741c:	7820      	ldrb	r0, [r4, #0]
 800741e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007420:	2381      	movs	r3, #129	@ 0x81
 8007422:	7023      	strb	r3, [r4, #0]
 8007424:	4618      	mov	r0, r3
 8007426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007428:	20001214 	.word	0x20001214
 800742c:	20001218 	.word	0x20001218
 8007430:	200009f4 	.word	0x200009f4
 8007434:	20000a04 	.word	0x20000a04
 8007438:	20000a00 	.word	0x20000a00
 800743c:	20000a08 	.word	0x20000a08
 8007440:	200009fc 	.word	0x200009fc
 8007444:	20000a10 	.word	0x20000a10
 8007448:	20000a0c 	.word	0x20000a0c
 800744c:	40400000 	.word	0x40400000
 8007450:	49742400 	.word	0x49742400
 8007454:	41100000 	.word	0x41100000
 8007458:	20000020 	.word	0x20000020
 800745c:	40066666 	.word	0x40066666
 8007460:	3f8ccccd 	.word	0x3f8ccccd

08007464 <neai_classification>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	4bab      	ldr	r3, [pc, #684]	@ (8007718 <neai_classification+0x2b4>)
 800746a:	b08d      	sub	sp, #52	@ 0x34
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	9102      	str	r1, [sp, #8]
 8007470:	930a      	str	r3, [sp, #40]	@ 0x28
 8007472:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007474:	b113      	cbz	r3, 800747c <neai_classification+0x18>
 8007476:	2b81      	cmp	r3, #129	@ 0x81
 8007478:	f040 860f 	bne.w	800809a <neai_classification+0xc36>
 800747c:	4da7      	ldr	r5, [pc, #668]	@ (800771c <neai_classification+0x2b8>)
 800747e:	4ba8      	ldr	r3, [pc, #672]	@ (8007720 <neai_classification+0x2bc>)
 8007480:	462c      	mov	r4, r5
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	1f06      	subs	r6, r0, #4
 8007486:	f1a3 0904 	sub.w	r9, r3, #4
 800748a:	4ba6      	ldr	r3, [pc, #664]	@ (8007724 <neai_classification+0x2c0>)
 800748c:	f505 68c0 	add.w	r8, r5, #1536	@ 0x600
 8007490:	681f      	ldr	r7, [r3, #0]
 8007492:	3f04      	subs	r7, #4
 8007494:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8007498:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800749c:	f7f9 fb80 	bl	8000ba0 <__aeabi_fsub>
 80074a0:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80074a4:	f7f9 fc86 	bl	8000db4 <__aeabi_fmul>
 80074a8:	f844 0b04 	str.w	r0, [r4], #4
 80074ac:	45a0      	cmp	r8, r4
 80074ae:	d1f1      	bne.n	8007494 <neai_classification+0x30>
 80074b0:	2700      	movs	r7, #0
 80074b2:	4b9d      	ldr	r3, [pc, #628]	@ (8007728 <neai_classification+0x2c4>)
 80074b4:	4e9d      	ldr	r6, [pc, #628]	@ (800772c <neai_classification+0x2c8>)
 80074b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80074b8:	2300      	movs	r3, #0
 80074ba:	4a9d      	ldr	r2, [pc, #628]	@ (8007730 <neai_classification+0x2cc>)
 80074bc:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80074c0:	3303      	adds	r3, #3
 80074c2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 80074c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80074ca:	d1f7      	bne.n	80074bc <neai_classification+0x58>
 80074cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ce:	f8d3 8000 	ldr.w	r8, [r3]
 80074d2:	4b95      	ldr	r3, [pc, #596]	@ (8007728 <neai_classification+0x2c4>)
 80074d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80074d8:	461c      	mov	r4, r3
 80074da:	9309      	str	r3, [sp, #36]	@ 0x24
 80074dc:	f854 9f04 	ldr.w	r9, [r4, #4]!
 80074e0:	4641      	mov	r1, r8
 80074e2:	4648      	mov	r0, r9
 80074e4:	f7f9 fe04 	bl	80010f0 <__aeabi_fcmplt>
 80074e8:	b100      	cbz	r0, 80074ec <neai_classification+0x88>
 80074ea:	46c8      	mov	r8, r9
 80074ec:	4b91      	ldr	r3, [pc, #580]	@ (8007734 <neai_classification+0x2d0>)
 80074ee:	42a3      	cmp	r3, r4
 80074f0:	d1f4      	bne.n	80074dc <neai_classification+0x78>
 80074f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80074f6:	4640      	mov	r0, r8
 80074f8:	f7f9 fb52 	bl	8000ba0 <__aeabi_fsub>
 80074fc:	f04f 0b00 	mov.w	fp, #0
 8007500:	4682      	mov	sl, r0
 8007502:	4634      	mov	r4, r6
 8007504:	4b89      	ldr	r3, [pc, #548]	@ (800772c <neai_classification+0x2c8>)
 8007506:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800750a:	f8cd b000 	str.w	fp, [sp]
 800750e:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8007512:	9706      	str	r7, [sp, #24]
 8007514:	f10b 0701 	add.w	r7, fp, #1
 8007518:	9401      	str	r4, [sp, #4]
 800751a:	4638      	mov	r0, r7
 800751c:	f844 ab04 	str.w	sl, [r4], #4
 8007520:	f7f9 fbf4 	bl	8000d0c <__aeabi_i2f>
 8007524:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 8007528:	f7f9 fc44 	bl	8000db4 <__aeabi_fmul>
 800752c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8007530:	f7f9 fb36 	bl	8000ba0 <__aeabi_fsub>
 8007534:	4605      	mov	r5, r0
 8007536:	9800      	ldr	r0, [sp, #0]
 8007538:	f7f9 fbe4 	bl	8000d04 <__aeabi_ui2f>
 800753c:	4601      	mov	r1, r0
 800753e:	4628      	mov	r0, r5
 8007540:	f7f9 fdea 	bl	8001118 <__aeabi_fcmpge>
 8007544:	4656      	mov	r6, sl
 8007546:	2800      	cmp	r0, #0
 8007548:	d02e      	beq.n	80075a8 <neai_classification+0x144>
 800754a:	2300      	movs	r3, #0
 800754c:	4622      	mov	r2, r4
 800754e:	462c      	mov	r4, r5
 8007550:	461d      	mov	r5, r3
 8007552:	4613      	mov	r3, r2
 8007554:	b2aa      	uxth	r2, r5
 8007556:	4610      	mov	r0, r2
 8007558:	9308      	str	r3, [sp, #32]
 800755a:	9207      	str	r2, [sp, #28]
 800755c:	f7f9 fbd6 	bl	8000d0c <__aeabi_i2f>
 8007560:	4631      	mov	r1, r6
 8007562:	f7f9 fc27 	bl	8000db4 <__aeabi_fmul>
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	4a6f      	ldr	r2, [pc, #444]	@ (8007728 <neai_classification+0x2c4>)
 800756a:	3501      	adds	r5, #1
 800756c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007570:	f7f9 fb18 	bl	8000ba4 <__addsf3>
 8007574:	9a07      	ldr	r2, [sp, #28]
 8007576:	4606      	mov	r6, r0
 8007578:	1c50      	adds	r0, r2, #1
 800757a:	f7f9 fbc7 	bl	8000d0c <__aeabi_i2f>
 800757e:	4601      	mov	r1, r0
 8007580:	4630      	mov	r0, r6
 8007582:	f7f9 fccb 	bl	8000f1c <__aeabi_fdiv>
 8007586:	9b00      	ldr	r3, [sp, #0]
 8007588:	4606      	mov	r6, r0
 800758a:	1c5a      	adds	r2, r3, #1
 800758c:	b293      	uxth	r3, r2
 800758e:	4618      	mov	r0, r3
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	f7f9 fbb7 	bl	8000d04 <__aeabi_ui2f>
 8007596:	4621      	mov	r1, r4
 8007598:	f7f9 fdb4 	bl	8001104 <__aeabi_fcmple>
 800759c:	9b08      	ldr	r3, [sp, #32]
 800759e:	2800      	cmp	r0, #0
 80075a0:	d1d8      	bne.n	8007554 <neai_classification+0xf0>
 80075a2:	461c      	mov	r4, r3
 80075a4:	f843 6c04 	str.w	r6, [r3, #-4]
 80075a8:	4641      	mov	r1, r8
 80075aa:	f8d9 0000 	ldr.w	r0, [r9]
 80075ae:	f7f9 fd9f 	bl	80010f0 <__aeabi_fcmplt>
 80075b2:	b120      	cbz	r0, 80075be <neai_classification+0x15a>
 80075b4:	9b03      	ldr	r3, [sp, #12]
 80075b6:	f8c9 3000 	str.w	r3, [r9]
 80075ba:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80075be:	4631      	mov	r1, r6
 80075c0:	4640      	mov	r0, r8
 80075c2:	f7f9 fdb3 	bl	800112c <__aeabi_fcmpgt>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f000 856b 	beq.w	80080a2 <neai_classification+0xc3e>
 80075cc:	f1bb 0f00 	cmp.w	fp, #0
 80075d0:	f000 8567 	beq.w	80080a2 <neai_classification+0xc3e>
 80075d4:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 80075d8:	4b54      	ldr	r3, [pc, #336]	@ (800772c <neai_classification+0x2c8>)
 80075da:	9a01      	ldr	r2, [sp, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	9f06      	ldr	r7, [sp, #24]
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	3701      	adds	r7, #1
 80075e4:	2f03      	cmp	r7, #3
 80075e6:	f106 0608 	add.w	r6, r6, #8
 80075ea:	f105 0504 	add.w	r5, r5, #4
 80075ee:	f47f af63 	bne.w	80074b8 <neai_classification+0x54>
 80075f2:	4b4e      	ldr	r3, [pc, #312]	@ (800772c <neai_classification+0x2c8>)
 80075f4:	2100      	movs	r1, #0
 80075f6:	681c      	ldr	r4, [r3, #0]
 80075f8:	4620      	mov	r0, r4
 80075fa:	f7f9 fd79 	bl	80010f0 <__aeabi_fcmplt>
 80075fe:	b108      	cbz	r0, 8007604 <neai_classification+0x1a0>
 8007600:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8007604:	4b49      	ldr	r3, [pc, #292]	@ (800772c <neai_classification+0x2c8>)
 8007606:	2100      	movs	r1, #0
 8007608:	601c      	str	r4, [r3, #0]
 800760a:	685c      	ldr	r4, [r3, #4]
 800760c:	4620      	mov	r0, r4
 800760e:	f7f9 fd6f 	bl	80010f0 <__aeabi_fcmplt>
 8007612:	b108      	cbz	r0, 8007618 <neai_classification+0x1b4>
 8007614:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8007618:	4b44      	ldr	r3, [pc, #272]	@ (800772c <neai_classification+0x2c8>)
 800761a:	2100      	movs	r1, #0
 800761c:	605c      	str	r4, [r3, #4]
 800761e:	689c      	ldr	r4, [r3, #8]
 8007620:	4620      	mov	r0, r4
 8007622:	f7f9 fd65 	bl	80010f0 <__aeabi_fcmplt>
 8007626:	b108      	cbz	r0, 800762c <neai_classification+0x1c8>
 8007628:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 800762c:	4b3f      	ldr	r3, [pc, #252]	@ (800772c <neai_classification+0x2c8>)
 800762e:	2100      	movs	r1, #0
 8007630:	609c      	str	r4, [r3, #8]
 8007632:	68dc      	ldr	r4, [r3, #12]
 8007634:	4620      	mov	r0, r4
 8007636:	f7f9 fd5b 	bl	80010f0 <__aeabi_fcmplt>
 800763a:	b108      	cbz	r0, 8007640 <neai_classification+0x1dc>
 800763c:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8007640:	4b3a      	ldr	r3, [pc, #232]	@ (800772c <neai_classification+0x2c8>)
 8007642:	2100      	movs	r1, #0
 8007644:	60dc      	str	r4, [r3, #12]
 8007646:	691c      	ldr	r4, [r3, #16]
 8007648:	4620      	mov	r0, r4
 800764a:	f7f9 fd51 	bl	80010f0 <__aeabi_fcmplt>
 800764e:	b108      	cbz	r0, 8007654 <neai_classification+0x1f0>
 8007650:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8007654:	4b35      	ldr	r3, [pc, #212]	@ (800772c <neai_classification+0x2c8>)
 8007656:	2100      	movs	r1, #0
 8007658:	611c      	str	r4, [r3, #16]
 800765a:	695c      	ldr	r4, [r3, #20]
 800765c:	4620      	mov	r0, r4
 800765e:	f7f9 fd47 	bl	80010f0 <__aeabi_fcmplt>
 8007662:	b108      	cbz	r0, 8007668 <neai_classification+0x204>
 8007664:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8007668:	4b30      	ldr	r3, [pc, #192]	@ (800772c <neai_classification+0x2c8>)
 800766a:	615c      	str	r4, [r3, #20]
 800766c:	4b32      	ldr	r3, [pc, #200]	@ (8007738 <neai_classification+0x2d4>)
 800766e:	681e      	ldr	r6, [r3, #0]
 8007670:	4b32      	ldr	r3, [pc, #200]	@ (800773c <neai_classification+0x2d8>)
 8007672:	2e00      	cmp	r6, #0
 8007674:	681f      	ldr	r7, [r3, #0]
 8007676:	f340 8271 	ble.w	8007b5c <neai_classification+0x6f8>
 800767a:	4b31      	ldr	r3, [pc, #196]	@ (8007740 <neai_classification+0x2dc>)
 800767c:	4d31      	ldr	r5, [pc, #196]	@ (8007744 <neai_classification+0x2e0>)
 800767e:	f8d3 8000 	ldr.w	r8, [r3]
 8007682:	4b31      	ldr	r3, [pc, #196]	@ (8007748 <neai_classification+0x2e4>)
 8007684:	4c31      	ldr	r4, [pc, #196]	@ (800774c <neai_classification+0x2e8>)
 8007686:	f8d3 b000 	ldr.w	fp, [r3]
 800768a:	686b      	ldr	r3, [r5, #4]
 800768c:	eb04 008b 	add.w	r0, r4, fp, lsl #2
 8007690:	1b9b      	subs	r3, r3, r6
 8007692:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 8007696:	00b3      	lsls	r3, r6, #2
 8007698:	461a      	mov	r2, r3
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	f001 fe2f 	bl	80092fe <memcpy>
 80076a0:	2f01      	cmp	r7, #1
 80076a2:	f340 81e1 	ble.w	8007a68 <neai_classification+0x604>
 80076a6:	2f03      	cmp	r7, #3
 80076a8:	bfd8      	it	le
 80076aa:	2200      	movle	r2, #0
 80076ac:	f8d5 a000 	ldr.w	sl, [r5]
 80076b0:	f340 8133 	ble.w	800791a <neai_classification+0x4b6>
 80076b4:	2300      	movs	r3, #0
 80076b6:	1f3a      	subs	r2, r7, #4
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	f022 0201 	bic.w	r2, r2, #1
 80076be:	eb06 030a 	add.w	r3, r6, sl
 80076c2:	e9cd 8a06 	strd	r8, sl, [sp, #24]
 80076c6:	3202      	adds	r2, #2
 80076c8:	eb08 0983 	add.w	r9, r8, r3, lsl #2
 80076cc:	00f3      	lsls	r3, r6, #3
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	eb08 058a 	add.w	r5, r8, sl, lsl #2
 80076d4:	9201      	str	r2, [sp, #4]
 80076d6:	9708      	str	r7, [sp, #32]
 80076d8:	9b00      	ldr	r3, [sp, #0]
 80076da:	4a14      	ldr	r2, [pc, #80]	@ (800772c <neai_classification+0x2c8>)
 80076dc:	6829      	ldr	r1, [r5, #0]
 80076de:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80076e2:	3204      	adds	r2, #4
 80076e4:	4640      	mov	r0, r8
 80076e6:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 80076ea:	f7f9 fb63 	bl	8000db4 <__aeabi_fmul>
 80076ee:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 80076f2:	f7f9 fa57 	bl	8000ba4 <__addsf3>
 80076f6:	4682      	mov	sl, r0
 80076f8:	f844 a02b 	str.w	sl, [r4, fp, lsl #2]
 80076fc:	f8d9 1000 	ldr.w	r1, [r9]
 8007700:	4638      	mov	r0, r7
 8007702:	f7f9 fb57 	bl	8000db4 <__aeabi_fmul>
 8007706:	4651      	mov	r1, sl
 8007708:	f7f9 fa4c 	bl	8000ba4 <__addsf3>
 800770c:	2e01      	cmp	r6, #1
 800770e:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8007712:	f000 80f5 	beq.w	8007900 <neai_classification+0x49c>
 8007716:	e01b      	b.n	8007750 <neai_classification+0x2ec>
 8007718:	20000020 	.word	0x20000020
 800771c:	20000c14 	.word	0x20000c14
 8007720:	20001214 	.word	0x20001214
 8007724:	20001218 	.word	0x20001218
 8007728:	20000a14 	.word	0x20000a14
 800772c:	2000121c 	.word	0x2000121c
 8007730:	20000a10 	.word	0x20000a10
 8007734:	20000c10 	.word	0x20000c10
 8007738:	200009fc 	.word	0x200009fc
 800773c:	20000a00 	.word	0x20000a00
 8007740:	20000a10 	.word	0x20000a10
 8007744:	200009f4 	.word	0x200009f4
 8007748:	20000a04 	.word	0x20000a04
 800774c:	200009d0 	.word	0x200009d0
 8007750:	6869      	ldr	r1, [r5, #4]
 8007752:	f10b 0a01 	add.w	sl, fp, #1
 8007756:	4640      	mov	r0, r8
 8007758:	f7f9 fb2c 	bl	8000db4 <__aeabi_fmul>
 800775c:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8007760:	f7f9 fa20 	bl	8000ba4 <__addsf3>
 8007764:	4603      	mov	r3, r0
 8007766:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 800776a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800776e:	4638      	mov	r0, r7
 8007770:	9305      	str	r3, [sp, #20]
 8007772:	f7f9 fb1f 	bl	8000db4 <__aeabi_fmul>
 8007776:	9b05      	ldr	r3, [sp, #20]
 8007778:	4619      	mov	r1, r3
 800777a:	f7f9 fa13 	bl	8000ba4 <__addsf3>
 800777e:	2e02      	cmp	r6, #2
 8007780:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8007784:	f000 80bc 	beq.w	8007900 <neai_classification+0x49c>
 8007788:	68a9      	ldr	r1, [r5, #8]
 800778a:	f10b 0a02 	add.w	sl, fp, #2
 800778e:	4640      	mov	r0, r8
 8007790:	f7f9 fb10 	bl	8000db4 <__aeabi_fmul>
 8007794:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8007798:	f7f9 fa04 	bl	8000ba4 <__addsf3>
 800779c:	4603      	mov	r3, r0
 800779e:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 80077a2:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80077a6:	4638      	mov	r0, r7
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	f7f9 fb03 	bl	8000db4 <__aeabi_fmul>
 80077ae:	9b05      	ldr	r3, [sp, #20]
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7f9 f9f7 	bl	8000ba4 <__addsf3>
 80077b6:	2e03      	cmp	r6, #3
 80077b8:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 80077bc:	f000 80a0 	beq.w	8007900 <neai_classification+0x49c>
 80077c0:	68e9      	ldr	r1, [r5, #12]
 80077c2:	f10b 0a03 	add.w	sl, fp, #3
 80077c6:	4640      	mov	r0, r8
 80077c8:	f7f9 faf4 	bl	8000db4 <__aeabi_fmul>
 80077cc:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 80077d0:	f7f9 f9e8 	bl	8000ba4 <__addsf3>
 80077d4:	4603      	mov	r3, r0
 80077d6:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 80077da:	f8d9 100c 	ldr.w	r1, [r9, #12]
 80077de:	4638      	mov	r0, r7
 80077e0:	9305      	str	r3, [sp, #20]
 80077e2:	f7f9 fae7 	bl	8000db4 <__aeabi_fmul>
 80077e6:	9b05      	ldr	r3, [sp, #20]
 80077e8:	4619      	mov	r1, r3
 80077ea:	f7f9 f9db 	bl	8000ba4 <__addsf3>
 80077ee:	2e04      	cmp	r6, #4
 80077f0:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 80077f4:	f000 8084 	beq.w	8007900 <neai_classification+0x49c>
 80077f8:	6929      	ldr	r1, [r5, #16]
 80077fa:	f10b 0a04 	add.w	sl, fp, #4
 80077fe:	4640      	mov	r0, r8
 8007800:	f7f9 fad8 	bl	8000db4 <__aeabi_fmul>
 8007804:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8007808:	f7f9 f9cc 	bl	8000ba4 <__addsf3>
 800780c:	4603      	mov	r3, r0
 800780e:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8007812:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8007816:	4638      	mov	r0, r7
 8007818:	9305      	str	r3, [sp, #20]
 800781a:	f7f9 facb 	bl	8000db4 <__aeabi_fmul>
 800781e:	9b05      	ldr	r3, [sp, #20]
 8007820:	4619      	mov	r1, r3
 8007822:	f7f9 f9bf 	bl	8000ba4 <__addsf3>
 8007826:	2e05      	cmp	r6, #5
 8007828:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 800782c:	d068      	beq.n	8007900 <neai_classification+0x49c>
 800782e:	6969      	ldr	r1, [r5, #20]
 8007830:	f10b 0a05 	add.w	sl, fp, #5
 8007834:	4640      	mov	r0, r8
 8007836:	f7f9 fabd 	bl	8000db4 <__aeabi_fmul>
 800783a:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 800783e:	f7f9 f9b1 	bl	8000ba4 <__addsf3>
 8007842:	4603      	mov	r3, r0
 8007844:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8007848:	f8d9 1014 	ldr.w	r1, [r9, #20]
 800784c:	4638      	mov	r0, r7
 800784e:	9305      	str	r3, [sp, #20]
 8007850:	f7f9 fab0 	bl	8000db4 <__aeabi_fmul>
 8007854:	9b05      	ldr	r3, [sp, #20]
 8007856:	4619      	mov	r1, r3
 8007858:	f7f9 f9a4 	bl	8000ba4 <__addsf3>
 800785c:	2e06      	cmp	r6, #6
 800785e:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8007862:	d04d      	beq.n	8007900 <neai_classification+0x49c>
 8007864:	69a9      	ldr	r1, [r5, #24]
 8007866:	f10b 0a06 	add.w	sl, fp, #6
 800786a:	4640      	mov	r0, r8
 800786c:	f7f9 faa2 	bl	8000db4 <__aeabi_fmul>
 8007870:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8007874:	f7f9 f996 	bl	8000ba4 <__addsf3>
 8007878:	4603      	mov	r3, r0
 800787a:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 800787e:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8007882:	4638      	mov	r0, r7
 8007884:	9305      	str	r3, [sp, #20]
 8007886:	f7f9 fa95 	bl	8000db4 <__aeabi_fmul>
 800788a:	9b05      	ldr	r3, [sp, #20]
 800788c:	4619      	mov	r1, r3
 800788e:	f7f9 f989 	bl	8000ba4 <__addsf3>
 8007892:	2e07      	cmp	r6, #7
 8007894:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8007898:	d032      	beq.n	8007900 <neai_classification+0x49c>
 800789a:	69e9      	ldr	r1, [r5, #28]
 800789c:	f10b 0a07 	add.w	sl, fp, #7
 80078a0:	4640      	mov	r0, r8
 80078a2:	f7f9 fa87 	bl	8000db4 <__aeabi_fmul>
 80078a6:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 80078aa:	f7f9 f97b 	bl	8000ba4 <__addsf3>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 80078b4:	f8d9 101c 	ldr.w	r1, [r9, #28]
 80078b8:	4638      	mov	r0, r7
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	f7f9 fa7a 	bl	8000db4 <__aeabi_fmul>
 80078c0:	9b05      	ldr	r3, [sp, #20]
 80078c2:	4619      	mov	r1, r3
 80078c4:	f7f9 f96e 	bl	8000ba4 <__addsf3>
 80078c8:	2e08      	cmp	r6, #8
 80078ca:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 80078ce:	d017      	beq.n	8007900 <neai_classification+0x49c>
 80078d0:	6a29      	ldr	r1, [r5, #32]
 80078d2:	4640      	mov	r0, r8
 80078d4:	f10b 0808 	add.w	r8, fp, #8
 80078d8:	f7f9 fa6c 	bl	8000db4 <__aeabi_fmul>
 80078dc:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 80078e0:	f7f9 f960 	bl	8000ba4 <__addsf3>
 80078e4:	4603      	mov	r3, r0
 80078e6:	4638      	mov	r0, r7
 80078e8:	461f      	mov	r7, r3
 80078ea:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
 80078ee:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80078f2:	f7f9 fa5f 	bl	8000db4 <__aeabi_fmul>
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f9 f954 	bl	8000ba4 <__addsf3>
 80078fc:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
 8007900:	9a03      	ldr	r2, [sp, #12]
 8007902:	9b00      	ldr	r3, [sp, #0]
 8007904:	4415      	add	r5, r2
 8007906:	4491      	add	r9, r2
 8007908:	9a01      	ldr	r2, [sp, #4]
 800790a:	3302      	adds	r3, #2
 800790c:	429a      	cmp	r2, r3
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	f47f aee2 	bne.w	80076d8 <neai_classification+0x274>
 8007914:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
 8007918:	9f08      	ldr	r7, [sp, #32]
 800791a:	fb02 a106 	mla	r1, r2, r6, sl
 800791e:	f10b 0a02 	add.w	sl, fp, #2
 8007922:	f8cd a000 	str.w	sl, [sp]
 8007926:	4692      	mov	sl, r2
 8007928:	1e7b      	subs	r3, r7, #1
 800792a:	eb08 0581 	add.w	r5, r8, r1, lsl #2
 800792e:	9306      	str	r3, [sp, #24]
 8007930:	f102 4880 	add.w	r8, r2, #1073741824	@ 0x40000000
 8007934:	4bc3      	ldr	r3, [pc, #780]	@ (8007c44 <neai_classification+0x7e0>)
 8007936:	f108 38ff 	add.w	r8, r8, #4294967295
 800793a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800793e:	f10b 0303 	add.w	r3, fp, #3
 8007942:	9301      	str	r3, [sp, #4]
 8007944:	f10b 0304 	add.w	r3, fp, #4
 8007948:	9303      	str	r3, [sp, #12]
 800794a:	f10b 0305 	add.w	r3, fp, #5
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	f10b 0306 	add.w	r3, fp, #6
 8007954:	9307      	str	r3, [sp, #28]
 8007956:	f10b 0307 	add.w	r3, fp, #7
 800795a:	9308      	str	r3, [sp, #32]
 800795c:	f10b 0308 	add.w	r3, fp, #8
 8007960:	f10b 0901 	add.w	r9, fp, #1
 8007964:	9309      	str	r3, [sp, #36]	@ 0x24
 8007966:	f858 7f04 	ldr.w	r7, [r8, #4]!
 800796a:	6829      	ldr	r1, [r5, #0]
 800796c:	4638      	mov	r0, r7
 800796e:	f7f9 fa21 	bl	8000db4 <__aeabi_fmul>
 8007972:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 8007976:	f7f9 f915 	bl	8000ba4 <__addsf3>
 800797a:	2e01      	cmp	r6, #1
 800797c:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8007980:	d06a      	beq.n	8007a58 <neai_classification+0x5f4>
 8007982:	6869      	ldr	r1, [r5, #4]
 8007984:	4638      	mov	r0, r7
 8007986:	f7f9 fa15 	bl	8000db4 <__aeabi_fmul>
 800798a:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 800798e:	f7f9 f909 	bl	8000ba4 <__addsf3>
 8007992:	2e02      	cmp	r6, #2
 8007994:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
 8007998:	d05e      	beq.n	8007a58 <neai_classification+0x5f4>
 800799a:	68a9      	ldr	r1, [r5, #8]
 800799c:	4638      	mov	r0, r7
 800799e:	f7f9 fa09 	bl	8000db4 <__aeabi_fmul>
 80079a2:	9b00      	ldr	r3, [sp, #0]
 80079a4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80079a8:	f7f9 f8fc 	bl	8000ba4 <__addsf3>
 80079ac:	9b00      	ldr	r3, [sp, #0]
 80079ae:	2e03      	cmp	r6, #3
 80079b0:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 80079b4:	d050      	beq.n	8007a58 <neai_classification+0x5f4>
 80079b6:	68e9      	ldr	r1, [r5, #12]
 80079b8:	4638      	mov	r0, r7
 80079ba:	f7f9 f9fb 	bl	8000db4 <__aeabi_fmul>
 80079be:	9b01      	ldr	r3, [sp, #4]
 80079c0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80079c4:	f7f9 f8ee 	bl	8000ba4 <__addsf3>
 80079c8:	9b01      	ldr	r3, [sp, #4]
 80079ca:	2e04      	cmp	r6, #4
 80079cc:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 80079d0:	d042      	beq.n	8007a58 <neai_classification+0x5f4>
 80079d2:	6929      	ldr	r1, [r5, #16]
 80079d4:	4638      	mov	r0, r7
 80079d6:	f7f9 f9ed 	bl	8000db4 <__aeabi_fmul>
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80079e0:	f7f9 f8e0 	bl	8000ba4 <__addsf3>
 80079e4:	9b03      	ldr	r3, [sp, #12]
 80079e6:	2e05      	cmp	r6, #5
 80079e8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 80079ec:	d034      	beq.n	8007a58 <neai_classification+0x5f4>
 80079ee:	6969      	ldr	r1, [r5, #20]
 80079f0:	4638      	mov	r0, r7
 80079f2:	f7f9 f9df 	bl	8000db4 <__aeabi_fmul>
 80079f6:	9b05      	ldr	r3, [sp, #20]
 80079f8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80079fc:	f7f9 f8d2 	bl	8000ba4 <__addsf3>
 8007a00:	9b05      	ldr	r3, [sp, #20]
 8007a02:	2e06      	cmp	r6, #6
 8007a04:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8007a08:	d026      	beq.n	8007a58 <neai_classification+0x5f4>
 8007a0a:	69a9      	ldr	r1, [r5, #24]
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	f7f9 f9d1 	bl	8000db4 <__aeabi_fmul>
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007a18:	f7f9 f8c4 	bl	8000ba4 <__addsf3>
 8007a1c:	9b07      	ldr	r3, [sp, #28]
 8007a1e:	2e07      	cmp	r6, #7
 8007a20:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8007a24:	d018      	beq.n	8007a58 <neai_classification+0x5f4>
 8007a26:	69e9      	ldr	r1, [r5, #28]
 8007a28:	4638      	mov	r0, r7
 8007a2a:	f7f9 f9c3 	bl	8000db4 <__aeabi_fmul>
 8007a2e:	9b08      	ldr	r3, [sp, #32]
 8007a30:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8007a34:	f7f9 f8b6 	bl	8000ba4 <__addsf3>
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	2e08      	cmp	r6, #8
 8007a3c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8007a40:	d00a      	beq.n	8007a58 <neai_classification+0x5f4>
 8007a42:	6a29      	ldr	r1, [r5, #32]
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7f9 f9b5 	bl	8000db4 <__aeabi_fmul>
 8007a4a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007a4c:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 8007a50:	f7f9 f8a8 	bl	8000ba4 <__addsf3>
 8007a54:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
 8007a58:	9b04      	ldr	r3, [sp, #16]
 8007a5a:	f10a 0a01 	add.w	sl, sl, #1
 8007a5e:	441d      	add	r5, r3
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	4553      	cmp	r3, sl
 8007a64:	f73f af7f 	bgt.w	8007966 <neai_classification+0x502>
 8007a68:	f854 002b 	ldr.w	r0, [r4, fp, lsl #2]
 8007a6c:	f7f8 fcf4 	bl	8000458 <__aeabi_f2d>
 8007a70:	f004 fef4 	bl	800c85c <tanh>
 8007a74:	f7f9 f840 	bl	8000af8 <__aeabi_d2f>
 8007a78:	2e01      	cmp	r6, #1
 8007a7a:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8007a7e:	d06d      	beq.n	8007b5c <neai_classification+0x6f8>
 8007a80:	f10b 0501 	add.w	r5, fp, #1
 8007a84:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007a88:	f7f8 fce6 	bl	8000458 <__aeabi_f2d>
 8007a8c:	f004 fee6 	bl	800c85c <tanh>
 8007a90:	f7f9 f832 	bl	8000af8 <__aeabi_d2f>
 8007a94:	2e02      	cmp	r6, #2
 8007a96:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8007a9a:	d05f      	beq.n	8007b5c <neai_classification+0x6f8>
 8007a9c:	f10b 0502 	add.w	r5, fp, #2
 8007aa0:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007aa4:	f7f8 fcd8 	bl	8000458 <__aeabi_f2d>
 8007aa8:	f004 fed8 	bl	800c85c <tanh>
 8007aac:	f7f9 f824 	bl	8000af8 <__aeabi_d2f>
 8007ab0:	2e03      	cmp	r6, #3
 8007ab2:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8007ab6:	d051      	beq.n	8007b5c <neai_classification+0x6f8>
 8007ab8:	f10b 0503 	add.w	r5, fp, #3
 8007abc:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007ac0:	f7f8 fcca 	bl	8000458 <__aeabi_f2d>
 8007ac4:	f004 feca 	bl	800c85c <tanh>
 8007ac8:	f7f9 f816 	bl	8000af8 <__aeabi_d2f>
 8007acc:	2e04      	cmp	r6, #4
 8007ace:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8007ad2:	d043      	beq.n	8007b5c <neai_classification+0x6f8>
 8007ad4:	f10b 0504 	add.w	r5, fp, #4
 8007ad8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007adc:	f7f8 fcbc 	bl	8000458 <__aeabi_f2d>
 8007ae0:	f004 febc 	bl	800c85c <tanh>
 8007ae4:	f7f9 f808 	bl	8000af8 <__aeabi_d2f>
 8007ae8:	2e05      	cmp	r6, #5
 8007aea:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8007aee:	d035      	beq.n	8007b5c <neai_classification+0x6f8>
 8007af0:	f10b 0505 	add.w	r5, fp, #5
 8007af4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007af8:	f7f8 fcae 	bl	8000458 <__aeabi_f2d>
 8007afc:	f004 feae 	bl	800c85c <tanh>
 8007b00:	f7f8 fffa 	bl	8000af8 <__aeabi_d2f>
 8007b04:	2e06      	cmp	r6, #6
 8007b06:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8007b0a:	d027      	beq.n	8007b5c <neai_classification+0x6f8>
 8007b0c:	f10b 0506 	add.w	r5, fp, #6
 8007b10:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007b14:	f7f8 fca0 	bl	8000458 <__aeabi_f2d>
 8007b18:	f004 fea0 	bl	800c85c <tanh>
 8007b1c:	f7f8 ffec 	bl	8000af8 <__aeabi_d2f>
 8007b20:	2e07      	cmp	r6, #7
 8007b22:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8007b26:	d019      	beq.n	8007b5c <neai_classification+0x6f8>
 8007b28:	f10b 0507 	add.w	r5, fp, #7
 8007b2c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8007b30:	f7f8 fc92 	bl	8000458 <__aeabi_f2d>
 8007b34:	f004 fe92 	bl	800c85c <tanh>
 8007b38:	f7f8 ffde 	bl	8000af8 <__aeabi_d2f>
 8007b3c:	2e08      	cmp	r6, #8
 8007b3e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8007b42:	d00b      	beq.n	8007b5c <neai_classification+0x6f8>
 8007b44:	f10b 0b08 	add.w	fp, fp, #8
 8007b48:	f854 002b 	ldr.w	r0, [r4, fp, lsl #2]
 8007b4c:	f7f8 fc84 	bl	8000458 <__aeabi_f2d>
 8007b50:	f004 fe84 	bl	800c85c <tanh>
 8007b54:	f7f8 ffd0 	bl	8000af8 <__aeabi_d2f>
 8007b58:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8007b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8007c48 <neai_classification+0x7e4>)
 8007b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8007c4c <neai_classification+0x7e8>)
 8007b60:	f8d2 9000 	ldr.w	r9, [r2]
 8007b64:	f8d3 8000 	ldr.w	r8, [r3]
 8007b68:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8007b6c:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
 8007b70:	9a02      	ldr	r2, [sp, #8]
 8007b72:	3301      	adds	r3, #1
 8007b74:	6017      	str	r7, [r2, #0]
 8007b76:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8007b7a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8007b7e:	6056      	str	r6, [r2, #4]
 8007b80:	685d      	ldr	r5, [r3, #4]
 8007b82:	f1b9 0f00 	cmp.w	r9, #0
 8007b86:	6095      	str	r5, [r2, #8]
 8007b88:	689c      	ldr	r4, [r3, #8]
 8007b8a:	60d4      	str	r4, [r2, #12]
 8007b8c:	f340 821c 	ble.w	8007fc8 <neai_classification+0xb64>
 8007b90:	4b2f      	ldr	r3, [pc, #188]	@ (8007c50 <neai_classification+0x7ec>)
 8007b92:	f8d8 1000 	ldr.w	r1, [r8]
 8007b96:	f8d3 a000 	ldr.w	sl, [r3]
 8007b9a:	4b2e      	ldr	r3, [pc, #184]	@ (8007c54 <neai_classification+0x7f0>)
 8007b9c:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
 8007ba0:	4658      	mov	r0, fp
 8007ba2:	f7f9 f907 	bl	8000db4 <__aeabi_fmul>
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4638      	mov	r0, r7
 8007baa:	f7f8 fffb 	bl	8000ba4 <__addsf3>
 8007bae:	4607      	mov	r7, r0
 8007bb0:	9b02      	ldr	r3, [sp, #8]
 8007bb2:	4658      	mov	r0, fp
 8007bb4:	601f      	str	r7, [r3, #0]
 8007bb6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007bba:	f7f9 f8fb 	bl	8000db4 <__aeabi_fmul>
 8007bbe:	4601      	mov	r1, r0
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f7f8 ffef 	bl	8000ba4 <__addsf3>
 8007bc6:	4606      	mov	r6, r0
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	4658      	mov	r0, fp
 8007bcc:	605e      	str	r6, [r3, #4]
 8007bce:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8007bd2:	f7f9 f8ef 	bl	8000db4 <__aeabi_fmul>
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	4628      	mov	r0, r5
 8007bda:	f7f8 ffe3 	bl	8000ba4 <__addsf3>
 8007bde:	4605      	mov	r5, r0
 8007be0:	4658      	mov	r0, fp
 8007be2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007be6:	f8cb 5008 	str.w	r5, [fp, #8]
 8007bea:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8007bee:	f7f9 f8e1 	bl	8000db4 <__aeabi_fmul>
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f7f8 ffd5 	bl	8000ba4 <__addsf3>
 8007bfa:	f1b9 0f01 	cmp.w	r9, #1
 8007bfe:	4604      	mov	r4, r0
 8007c00:	f8cb 000c 	str.w	r0, [fp, #12]
 8007c04:	f000 81e0 	beq.w	8007fc8 <neai_classification+0xb64>
 8007c08:	4a12      	ldr	r2, [pc, #72]	@ (8007c54 <neai_classification+0x7f0>)
 8007c0a:	f10a 0301 	add.w	r3, sl, #1
 8007c0e:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007c12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8007c16:	4658      	mov	r0, fp
 8007c18:	f7f9 f8cc 	bl	8000db4 <__aeabi_fmul>
 8007c1c:	4601      	mov	r1, r0
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7f8 ffc0 	bl	8000ba4 <__addsf3>
 8007c24:	4607      	mov	r7, r0
 8007c26:	9b02      	ldr	r3, [sp, #8]
 8007c28:	4658      	mov	r0, fp
 8007c2a:	601f      	str	r7, [r3, #0]
 8007c2c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8007c30:	f7f9 f8c0 	bl	8000db4 <__aeabi_fmul>
 8007c34:	4601      	mov	r1, r0
 8007c36:	4630      	mov	r0, r6
 8007c38:	f7f8 ffb4 	bl	8000ba4 <__addsf3>
 8007c3c:	4606      	mov	r6, r0
 8007c3e:	9b02      	ldr	r3, [sp, #8]
 8007c40:	e00a      	b.n	8007c58 <neai_classification+0x7f4>
 8007c42:	bf00      	nop
 8007c44:	2000121c 	.word	0x2000121c
 8007c48:	20000a08 	.word	0x20000a08
 8007c4c:	20000a0c 	.word	0x20000a0c
 8007c50:	20000a04 	.word	0x20000a04
 8007c54:	200009d0 	.word	0x200009d0
 8007c58:	4658      	mov	r0, fp
 8007c5a:	605e      	str	r6, [r3, #4]
 8007c5c:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8007c60:	f7f9 f8a8 	bl	8000db4 <__aeabi_fmul>
 8007c64:	4601      	mov	r1, r0
 8007c66:	4628      	mov	r0, r5
 8007c68:	f7f8 ff9c 	bl	8000ba4 <__addsf3>
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	4658      	mov	r0, fp
 8007c70:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007c74:	f8cb 5008 	str.w	r5, [fp, #8]
 8007c78:	f8d8 101c 	ldr.w	r1, [r8, #28]
 8007c7c:	f7f9 f89a 	bl	8000db4 <__aeabi_fmul>
 8007c80:	4601      	mov	r1, r0
 8007c82:	4620      	mov	r0, r4
 8007c84:	f7f8 ff8e 	bl	8000ba4 <__addsf3>
 8007c88:	f1b9 0f02 	cmp.w	r9, #2
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	f8cb 000c 	str.w	r0, [fp, #12]
 8007c92:	f000 8199 	beq.w	8007fc8 <neai_classification+0xb64>
 8007c96:	4ab9      	ldr	r2, [pc, #740]	@ (8007f7c <neai_classification+0xb18>)
 8007c98:	f10a 0302 	add.w	r3, sl, #2
 8007c9c:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007ca0:	f8d8 1020 	ldr.w	r1, [r8, #32]
 8007ca4:	4658      	mov	r0, fp
 8007ca6:	f7f9 f885 	bl	8000db4 <__aeabi_fmul>
 8007caa:	4601      	mov	r1, r0
 8007cac:	4638      	mov	r0, r7
 8007cae:	f7f8 ff79 	bl	8000ba4 <__addsf3>
 8007cb2:	4607      	mov	r7, r0
 8007cb4:	9b02      	ldr	r3, [sp, #8]
 8007cb6:	4658      	mov	r0, fp
 8007cb8:	601f      	str	r7, [r3, #0]
 8007cba:	f8d8 1024 	ldr.w	r1, [r8, #36]	@ 0x24
 8007cbe:	f7f9 f879 	bl	8000db4 <__aeabi_fmul>
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	4630      	mov	r0, r6
 8007cc6:	f7f8 ff6d 	bl	8000ba4 <__addsf3>
 8007cca:	4606      	mov	r6, r0
 8007ccc:	9b02      	ldr	r3, [sp, #8]
 8007cce:	4658      	mov	r0, fp
 8007cd0:	605e      	str	r6, [r3, #4]
 8007cd2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8007cd6:	f7f9 f86d 	bl	8000db4 <__aeabi_fmul>
 8007cda:	4601      	mov	r1, r0
 8007cdc:	4628      	mov	r0, r5
 8007cde:	f7f8 ff61 	bl	8000ba4 <__addsf3>
 8007ce2:	4605      	mov	r5, r0
 8007ce4:	4658      	mov	r0, fp
 8007ce6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007cea:	f8cb 5008 	str.w	r5, [fp, #8]
 8007cee:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8007cf2:	f7f9 f85f 	bl	8000db4 <__aeabi_fmul>
 8007cf6:	4601      	mov	r1, r0
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f7f8 ff53 	bl	8000ba4 <__addsf3>
 8007cfe:	f1b9 0f03 	cmp.w	r9, #3
 8007d02:	4604      	mov	r4, r0
 8007d04:	f8cb 000c 	str.w	r0, [fp, #12]
 8007d08:	f000 815e 	beq.w	8007fc8 <neai_classification+0xb64>
 8007d0c:	4a9b      	ldr	r2, [pc, #620]	@ (8007f7c <neai_classification+0xb18>)
 8007d0e:	f10a 0303 	add.w	r3, sl, #3
 8007d12:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007d16:	f8d8 1030 	ldr.w	r1, [r8, #48]	@ 0x30
 8007d1a:	4658      	mov	r0, fp
 8007d1c:	f7f9 f84a 	bl	8000db4 <__aeabi_fmul>
 8007d20:	4601      	mov	r1, r0
 8007d22:	4638      	mov	r0, r7
 8007d24:	f7f8 ff3e 	bl	8000ba4 <__addsf3>
 8007d28:	4607      	mov	r7, r0
 8007d2a:	9b02      	ldr	r3, [sp, #8]
 8007d2c:	4658      	mov	r0, fp
 8007d2e:	601f      	str	r7, [r3, #0]
 8007d30:	f8d8 1034 	ldr.w	r1, [r8, #52]	@ 0x34
 8007d34:	f7f9 f83e 	bl	8000db4 <__aeabi_fmul>
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7f8 ff32 	bl	8000ba4 <__addsf3>
 8007d40:	4606      	mov	r6, r0
 8007d42:	9b02      	ldr	r3, [sp, #8]
 8007d44:	4658      	mov	r0, fp
 8007d46:	605e      	str	r6, [r3, #4]
 8007d48:	f8d8 1038 	ldr.w	r1, [r8, #56]	@ 0x38
 8007d4c:	f7f9 f832 	bl	8000db4 <__aeabi_fmul>
 8007d50:	4601      	mov	r1, r0
 8007d52:	4628      	mov	r0, r5
 8007d54:	f7f8 ff26 	bl	8000ba4 <__addsf3>
 8007d58:	4605      	mov	r5, r0
 8007d5a:	4658      	mov	r0, fp
 8007d5c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007d60:	f8cb 5008 	str.w	r5, [fp, #8]
 8007d64:	f8d8 103c 	ldr.w	r1, [r8, #60]	@ 0x3c
 8007d68:	f7f9 f824 	bl	8000db4 <__aeabi_fmul>
 8007d6c:	4601      	mov	r1, r0
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f7f8 ff18 	bl	8000ba4 <__addsf3>
 8007d74:	f1b9 0f04 	cmp.w	r9, #4
 8007d78:	4604      	mov	r4, r0
 8007d7a:	f8cb 000c 	str.w	r0, [fp, #12]
 8007d7e:	f000 8123 	beq.w	8007fc8 <neai_classification+0xb64>
 8007d82:	4a7e      	ldr	r2, [pc, #504]	@ (8007f7c <neai_classification+0xb18>)
 8007d84:	f10a 0304 	add.w	r3, sl, #4
 8007d88:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007d8c:	f8d8 1040 	ldr.w	r1, [r8, #64]	@ 0x40
 8007d90:	4658      	mov	r0, fp
 8007d92:	f7f9 f80f 	bl	8000db4 <__aeabi_fmul>
 8007d96:	4601      	mov	r1, r0
 8007d98:	4638      	mov	r0, r7
 8007d9a:	f7f8 ff03 	bl	8000ba4 <__addsf3>
 8007d9e:	4607      	mov	r7, r0
 8007da0:	9b02      	ldr	r3, [sp, #8]
 8007da2:	4658      	mov	r0, fp
 8007da4:	601f      	str	r7, [r3, #0]
 8007da6:	f8d8 1044 	ldr.w	r1, [r8, #68]	@ 0x44
 8007daa:	f7f9 f803 	bl	8000db4 <__aeabi_fmul>
 8007dae:	4601      	mov	r1, r0
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7f8 fef7 	bl	8000ba4 <__addsf3>
 8007db6:	4606      	mov	r6, r0
 8007db8:	9b02      	ldr	r3, [sp, #8]
 8007dba:	4658      	mov	r0, fp
 8007dbc:	605e      	str	r6, [r3, #4]
 8007dbe:	f8d8 1048 	ldr.w	r1, [r8, #72]	@ 0x48
 8007dc2:	f7f8 fff7 	bl	8000db4 <__aeabi_fmul>
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	4628      	mov	r0, r5
 8007dca:	f7f8 feeb 	bl	8000ba4 <__addsf3>
 8007dce:	4605      	mov	r5, r0
 8007dd0:	4658      	mov	r0, fp
 8007dd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007dd6:	f8cb 5008 	str.w	r5, [fp, #8]
 8007dda:	f8d8 104c 	ldr.w	r1, [r8, #76]	@ 0x4c
 8007dde:	f7f8 ffe9 	bl	8000db4 <__aeabi_fmul>
 8007de2:	4601      	mov	r1, r0
 8007de4:	4620      	mov	r0, r4
 8007de6:	f7f8 fedd 	bl	8000ba4 <__addsf3>
 8007dea:	f1b9 0f05 	cmp.w	r9, #5
 8007dee:	4604      	mov	r4, r0
 8007df0:	f8cb 000c 	str.w	r0, [fp, #12]
 8007df4:	f000 80e8 	beq.w	8007fc8 <neai_classification+0xb64>
 8007df8:	4a60      	ldr	r2, [pc, #384]	@ (8007f7c <neai_classification+0xb18>)
 8007dfa:	f10a 0305 	add.w	r3, sl, #5
 8007dfe:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007e02:	f8d8 1050 	ldr.w	r1, [r8, #80]	@ 0x50
 8007e06:	4658      	mov	r0, fp
 8007e08:	f7f8 ffd4 	bl	8000db4 <__aeabi_fmul>
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4638      	mov	r0, r7
 8007e10:	f7f8 fec8 	bl	8000ba4 <__addsf3>
 8007e14:	4607      	mov	r7, r0
 8007e16:	9b02      	ldr	r3, [sp, #8]
 8007e18:	4658      	mov	r0, fp
 8007e1a:	601f      	str	r7, [r3, #0]
 8007e1c:	f8d8 1054 	ldr.w	r1, [r8, #84]	@ 0x54
 8007e20:	f7f8 ffc8 	bl	8000db4 <__aeabi_fmul>
 8007e24:	4601      	mov	r1, r0
 8007e26:	4630      	mov	r0, r6
 8007e28:	f7f8 febc 	bl	8000ba4 <__addsf3>
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	9b02      	ldr	r3, [sp, #8]
 8007e30:	4658      	mov	r0, fp
 8007e32:	605e      	str	r6, [r3, #4]
 8007e34:	f8d8 1058 	ldr.w	r1, [r8, #88]	@ 0x58
 8007e38:	f7f8 ffbc 	bl	8000db4 <__aeabi_fmul>
 8007e3c:	4601      	mov	r1, r0
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f7f8 feb0 	bl	8000ba4 <__addsf3>
 8007e44:	4605      	mov	r5, r0
 8007e46:	4658      	mov	r0, fp
 8007e48:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007e4c:	f8cb 5008 	str.w	r5, [fp, #8]
 8007e50:	f8d8 105c 	ldr.w	r1, [r8, #92]	@ 0x5c
 8007e54:	f7f8 ffae 	bl	8000db4 <__aeabi_fmul>
 8007e58:	4601      	mov	r1, r0
 8007e5a:	4620      	mov	r0, r4
 8007e5c:	f7f8 fea2 	bl	8000ba4 <__addsf3>
 8007e60:	f1b9 0f06 	cmp.w	r9, #6
 8007e64:	4604      	mov	r4, r0
 8007e66:	f8cb 000c 	str.w	r0, [fp, #12]
 8007e6a:	f000 80ad 	beq.w	8007fc8 <neai_classification+0xb64>
 8007e6e:	4a43      	ldr	r2, [pc, #268]	@ (8007f7c <neai_classification+0xb18>)
 8007e70:	f10a 0306 	add.w	r3, sl, #6
 8007e74:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007e78:	f8d8 1060 	ldr.w	r1, [r8, #96]	@ 0x60
 8007e7c:	4658      	mov	r0, fp
 8007e7e:	f7f8 ff99 	bl	8000db4 <__aeabi_fmul>
 8007e82:	4601      	mov	r1, r0
 8007e84:	4638      	mov	r0, r7
 8007e86:	f7f8 fe8d 	bl	8000ba4 <__addsf3>
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	9b02      	ldr	r3, [sp, #8]
 8007e8e:	4658      	mov	r0, fp
 8007e90:	601f      	str	r7, [r3, #0]
 8007e92:	f8d8 1064 	ldr.w	r1, [r8, #100]	@ 0x64
 8007e96:	f7f8 ff8d 	bl	8000db4 <__aeabi_fmul>
 8007e9a:	4601      	mov	r1, r0
 8007e9c:	4630      	mov	r0, r6
 8007e9e:	f7f8 fe81 	bl	8000ba4 <__addsf3>
 8007ea2:	4606      	mov	r6, r0
 8007ea4:	9b02      	ldr	r3, [sp, #8]
 8007ea6:	4658      	mov	r0, fp
 8007ea8:	605e      	str	r6, [r3, #4]
 8007eaa:	f8d8 1068 	ldr.w	r1, [r8, #104]	@ 0x68
 8007eae:	f7f8 ff81 	bl	8000db4 <__aeabi_fmul>
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	f7f8 fe75 	bl	8000ba4 <__addsf3>
 8007eba:	4605      	mov	r5, r0
 8007ebc:	4658      	mov	r0, fp
 8007ebe:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007ec2:	f8cb 5008 	str.w	r5, [fp, #8]
 8007ec6:	f8d8 106c 	ldr.w	r1, [r8, #108]	@ 0x6c
 8007eca:	f7f8 ff73 	bl	8000db4 <__aeabi_fmul>
 8007ece:	4601      	mov	r1, r0
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f7f8 fe67 	bl	8000ba4 <__addsf3>
 8007ed6:	f1b9 0f07 	cmp.w	r9, #7
 8007eda:	4604      	mov	r4, r0
 8007edc:	f8cb 000c 	str.w	r0, [fp, #12]
 8007ee0:	d072      	beq.n	8007fc8 <neai_classification+0xb64>
 8007ee2:	4a26      	ldr	r2, [pc, #152]	@ (8007f7c <neai_classification+0xb18>)
 8007ee4:	f10a 0307 	add.w	r3, sl, #7
 8007ee8:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8007eec:	f8d8 1070 	ldr.w	r1, [r8, #112]	@ 0x70
 8007ef0:	4658      	mov	r0, fp
 8007ef2:	f7f8 ff5f 	bl	8000db4 <__aeabi_fmul>
 8007ef6:	4601      	mov	r1, r0
 8007ef8:	4638      	mov	r0, r7
 8007efa:	f7f8 fe53 	bl	8000ba4 <__addsf3>
 8007efe:	4607      	mov	r7, r0
 8007f00:	9b02      	ldr	r3, [sp, #8]
 8007f02:	4658      	mov	r0, fp
 8007f04:	601f      	str	r7, [r3, #0]
 8007f06:	f8d8 1074 	ldr.w	r1, [r8, #116]	@ 0x74
 8007f0a:	f7f8 ff53 	bl	8000db4 <__aeabi_fmul>
 8007f0e:	4601      	mov	r1, r0
 8007f10:	4630      	mov	r0, r6
 8007f12:	f7f8 fe47 	bl	8000ba4 <__addsf3>
 8007f16:	4606      	mov	r6, r0
 8007f18:	9b02      	ldr	r3, [sp, #8]
 8007f1a:	4658      	mov	r0, fp
 8007f1c:	605e      	str	r6, [r3, #4]
 8007f1e:	f8d8 1078 	ldr.w	r1, [r8, #120]	@ 0x78
 8007f22:	f7f8 ff47 	bl	8000db4 <__aeabi_fmul>
 8007f26:	4601      	mov	r1, r0
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f7f8 fe3b 	bl	8000ba4 <__addsf3>
 8007f2e:	4605      	mov	r5, r0
 8007f30:	4658      	mov	r0, fp
 8007f32:	f8dd b008 	ldr.w	fp, [sp, #8]
 8007f36:	f8cb 5008 	str.w	r5, [fp, #8]
 8007f3a:	f8d8 107c 	ldr.w	r1, [r8, #124]	@ 0x7c
 8007f3e:	f7f8 ff39 	bl	8000db4 <__aeabi_fmul>
 8007f42:	4601      	mov	r1, r0
 8007f44:	4620      	mov	r0, r4
 8007f46:	f7f8 fe2d 	bl	8000ba4 <__addsf3>
 8007f4a:	f1b9 0f08 	cmp.w	r9, #8
 8007f4e:	4604      	mov	r4, r0
 8007f50:	f8cb 000c 	str.w	r0, [fp, #12]
 8007f54:	d038      	beq.n	8007fc8 <neai_classification+0xb64>
 8007f56:	4a09      	ldr	r2, [pc, #36]	@ (8007f7c <neai_classification+0xb18>)
 8007f58:	f10a 0308 	add.w	r3, sl, #8
 8007f5c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8007f60:	f8d8 1080 	ldr.w	r1, [r8, #128]	@ 0x80
 8007f64:	4648      	mov	r0, r9
 8007f66:	f7f8 ff25 	bl	8000db4 <__aeabi_fmul>
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f7f8 fe19 	bl	8000ba4 <__addsf3>
 8007f72:	4607      	mov	r7, r0
 8007f74:	f8cb 7000 	str.w	r7, [fp]
 8007f78:	e002      	b.n	8007f80 <neai_classification+0xb1c>
 8007f7a:	bf00      	nop
 8007f7c:	200009d0 	.word	0x200009d0
 8007f80:	f8d8 1084 	ldr.w	r1, [r8, #132]	@ 0x84
 8007f84:	4648      	mov	r0, r9
 8007f86:	f7f8 ff15 	bl	8000db4 <__aeabi_fmul>
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	f7f8 fe09 	bl	8000ba4 <__addsf3>
 8007f92:	4606      	mov	r6, r0
 8007f94:	f8cb 6004 	str.w	r6, [fp, #4]
 8007f98:	f8d8 1088 	ldr.w	r1, [r8, #136]	@ 0x88
 8007f9c:	4648      	mov	r0, r9
 8007f9e:	f7f8 ff09 	bl	8000db4 <__aeabi_fmul>
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f7f8 fdfd 	bl	8000ba4 <__addsf3>
 8007faa:	4605      	mov	r5, r0
 8007fac:	f8cb 5008 	str.w	r5, [fp, #8]
 8007fb0:	f8d8 108c 	ldr.w	r1, [r8, #140]	@ 0x8c
 8007fb4:	4648      	mov	r0, r9
 8007fb6:	f7f8 fefd 	bl	8000db4 <__aeabi_fmul>
 8007fba:	4601      	mov	r1, r0
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f7f8 fdf1 	bl	8000ba4 <__addsf3>
 8007fc2:	4604      	mov	r4, r0
 8007fc4:	f8cb 000c 	str.w	r0, [fp, #12]
 8007fc8:	4639      	mov	r1, r7
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7f9 f8ae 	bl	800112c <__aeabi_fcmpgt>
 8007fd0:	b900      	cbnz	r0, 8007fd4 <neai_classification+0xb70>
 8007fd2:	463e      	mov	r6, r7
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7f9 f88a 	bl	80010f0 <__aeabi_fcmplt>
 8007fdc:	b900      	cbnz	r0, 8007fe0 <neai_classification+0xb7c>
 8007fde:	4635      	mov	r5, r6
 8007fe0:	4621      	mov	r1, r4
 8007fe2:	4628      	mov	r0, r5
 8007fe4:	f7f9 f884 	bl	80010f0 <__aeabi_fcmplt>
 8007fe8:	b900      	cbnz	r0, 8007fec <neai_classification+0xb88>
 8007fea:	462c      	mov	r4, r5
 8007fec:	2700      	movs	r7, #0
 8007fee:	9b02      	ldr	r3, [sp, #8]
 8007ff0:	4e33      	ldr	r6, [pc, #204]	@ (80080c0 <neai_classification+0xc5c>)
 8007ff2:	f1a3 0804 	sub.w	r8, r3, #4
 8007ff6:	f103 050c 	add.w	r5, r3, #12
 8007ffa:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8007ffe:	4621      	mov	r1, r4
 8008000:	f7f8 fdce 	bl	8000ba0 <__aeabi_fsub>
 8008004:	4631      	mov	r1, r6
 8008006:	f7f8 fed5 	bl	8000db4 <__aeabi_fmul>
 800800a:	f004 fcb7 	bl	800c97c <expf>
 800800e:	4601      	mov	r1, r0
 8008010:	4638      	mov	r0, r7
 8008012:	f8c8 1000 	str.w	r1, [r8]
 8008016:	f7f8 fdc5 	bl	8000ba4 <__addsf3>
 800801a:	45a8      	cmp	r8, r5
 800801c:	4607      	mov	r7, r0
 800801e:	d1ec      	bne.n	8007ffa <neai_classification+0xb96>
 8008020:	4601      	mov	r1, r0
 8008022:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008026:	f7f8 ff79 	bl	8000f1c <__aeabi_fdiv>
 800802a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800802e:	4606      	mov	r6, r0
 8008030:	f8d8 1000 	ldr.w	r1, [r8]
 8008034:	f7f8 febe 	bl	8000db4 <__aeabi_fmul>
 8008038:	4607      	mov	r7, r0
 800803a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800803e:	4630      	mov	r0, r6
 8008040:	f8c8 7000 	str.w	r7, [r8]
 8008044:	f7f8 feb6 	bl	8000db4 <__aeabi_fmul>
 8008048:	4604      	mov	r4, r0
 800804a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800804e:	4630      	mov	r0, r6
 8008050:	f8c8 4004 	str.w	r4, [r8, #4]
 8008054:	f7f8 feae 	bl	8000db4 <__aeabi_fmul>
 8008058:	4605      	mov	r5, r0
 800805a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800805e:	4630      	mov	r0, r6
 8008060:	f8c8 5008 	str.w	r5, [r8, #8]
 8008064:	f7f8 fea6 	bl	8000db4 <__aeabi_fmul>
 8008068:	4639      	mov	r1, r7
 800806a:	4606      	mov	r6, r0
 800806c:	f8c8 000c 	str.w	r0, [r8, #12]
 8008070:	4620      	mov	r0, r4
 8008072:	f7f9 f85b 	bl	800112c <__aeabi_fcmpgt>
 8008076:	bb00      	cbnz	r0, 80080ba <neai_classification+0xc56>
 8008078:	463c      	mov	r4, r7
 800807a:	2701      	movs	r7, #1
 800807c:	4629      	mov	r1, r5
 800807e:	4620      	mov	r0, r4
 8008080:	f7f9 f836 	bl	80010f0 <__aeabi_fcmplt>
 8008084:	b9b8      	cbnz	r0, 80080b6 <neai_classification+0xc52>
 8008086:	4625      	mov	r5, r4
 8008088:	4631      	mov	r1, r6
 800808a:	4628      	mov	r0, r5
 800808c:	f7f9 f830 	bl	80010f0 <__aeabi_fcmplt>
 8008090:	2800      	cmp	r0, #0
 8008092:	bf18      	it	ne
 8008094:	2704      	movne	r7, #4
 8008096:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008098:	801f      	strh	r7, [r3, #0]
 800809a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800809c:	b00d      	add	sp, #52	@ 0x34
 800809e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a2:	2f02      	cmp	r7, #2
 80080a4:	f04f 0b01 	mov.w	fp, #1
 80080a8:	f47f aa34 	bne.w	8007514 <neai_classification+0xb0>
 80080ac:	9f06      	ldr	r7, [sp, #24]
 80080ae:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 80080b2:	f7ff ba96 	b.w	80075e2 <neai_classification+0x17e>
 80080b6:	2703      	movs	r7, #3
 80080b8:	e7e6      	b.n	8008088 <neai_classification+0xc24>
 80080ba:	2702      	movs	r7, #2
 80080bc:	e7de      	b.n	800807c <neai_classification+0xc18>
 80080be:	bf00      	nop
 80080c0:	40a00000 	.word	0x40a00000

080080c4 <__cvt>:
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ca:	461d      	mov	r5, r3
 80080cc:	bfbb      	ittet	lt
 80080ce:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80080d2:	461d      	movlt	r5, r3
 80080d4:	2300      	movge	r3, #0
 80080d6:	232d      	movlt	r3, #45	@ 0x2d
 80080d8:	b088      	sub	sp, #32
 80080da:	4614      	mov	r4, r2
 80080dc:	bfb8      	it	lt
 80080de:	4614      	movlt	r4, r2
 80080e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080e2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80080e4:	7013      	strb	r3, [r2, #0]
 80080e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80080e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80080ec:	f023 0820 	bic.w	r8, r3, #32
 80080f0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80080f4:	d005      	beq.n	8008102 <__cvt+0x3e>
 80080f6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80080fa:	d100      	bne.n	80080fe <__cvt+0x3a>
 80080fc:	3601      	adds	r6, #1
 80080fe:	2302      	movs	r3, #2
 8008100:	e000      	b.n	8008104 <__cvt+0x40>
 8008102:	2303      	movs	r3, #3
 8008104:	aa07      	add	r2, sp, #28
 8008106:	9204      	str	r2, [sp, #16]
 8008108:	aa06      	add	r2, sp, #24
 800810a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800810e:	e9cd 3600 	strd	r3, r6, [sp]
 8008112:	4622      	mov	r2, r4
 8008114:	462b      	mov	r3, r5
 8008116:	f001 f98f 	bl	8009438 <_dtoa_r>
 800811a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800811e:	4607      	mov	r7, r0
 8008120:	d119      	bne.n	8008156 <__cvt+0x92>
 8008122:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008124:	07db      	lsls	r3, r3, #31
 8008126:	d50e      	bpl.n	8008146 <__cvt+0x82>
 8008128:	eb00 0906 	add.w	r9, r0, r6
 800812c:	2200      	movs	r2, #0
 800812e:	2300      	movs	r3, #0
 8008130:	4620      	mov	r0, r4
 8008132:	4629      	mov	r1, r5
 8008134:	f7f8 fc50 	bl	80009d8 <__aeabi_dcmpeq>
 8008138:	b108      	cbz	r0, 800813e <__cvt+0x7a>
 800813a:	f8cd 901c 	str.w	r9, [sp, #28]
 800813e:	2230      	movs	r2, #48	@ 0x30
 8008140:	9b07      	ldr	r3, [sp, #28]
 8008142:	454b      	cmp	r3, r9
 8008144:	d31e      	bcc.n	8008184 <__cvt+0xc0>
 8008146:	4638      	mov	r0, r7
 8008148:	9b07      	ldr	r3, [sp, #28]
 800814a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800814c:	1bdb      	subs	r3, r3, r7
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	b008      	add	sp, #32
 8008152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008156:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800815a:	eb00 0906 	add.w	r9, r0, r6
 800815e:	d1e5      	bne.n	800812c <__cvt+0x68>
 8008160:	7803      	ldrb	r3, [r0, #0]
 8008162:	2b30      	cmp	r3, #48	@ 0x30
 8008164:	d10a      	bne.n	800817c <__cvt+0xb8>
 8008166:	2200      	movs	r2, #0
 8008168:	2300      	movs	r3, #0
 800816a:	4620      	mov	r0, r4
 800816c:	4629      	mov	r1, r5
 800816e:	f7f8 fc33 	bl	80009d8 <__aeabi_dcmpeq>
 8008172:	b918      	cbnz	r0, 800817c <__cvt+0xb8>
 8008174:	f1c6 0601 	rsb	r6, r6, #1
 8008178:	f8ca 6000 	str.w	r6, [sl]
 800817c:	f8da 3000 	ldr.w	r3, [sl]
 8008180:	4499      	add	r9, r3
 8008182:	e7d3      	b.n	800812c <__cvt+0x68>
 8008184:	1c59      	adds	r1, r3, #1
 8008186:	9107      	str	r1, [sp, #28]
 8008188:	701a      	strb	r2, [r3, #0]
 800818a:	e7d9      	b.n	8008140 <__cvt+0x7c>

0800818c <__exponent>:
 800818c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800818e:	2900      	cmp	r1, #0
 8008190:	bfb6      	itet	lt
 8008192:	232d      	movlt	r3, #45	@ 0x2d
 8008194:	232b      	movge	r3, #43	@ 0x2b
 8008196:	4249      	neglt	r1, r1
 8008198:	2909      	cmp	r1, #9
 800819a:	7002      	strb	r2, [r0, #0]
 800819c:	7043      	strb	r3, [r0, #1]
 800819e:	dd29      	ble.n	80081f4 <__exponent+0x68>
 80081a0:	f10d 0307 	add.w	r3, sp, #7
 80081a4:	461d      	mov	r5, r3
 80081a6:	270a      	movs	r7, #10
 80081a8:	fbb1 f6f7 	udiv	r6, r1, r7
 80081ac:	461a      	mov	r2, r3
 80081ae:	fb07 1416 	mls	r4, r7, r6, r1
 80081b2:	3430      	adds	r4, #48	@ 0x30
 80081b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80081b8:	460c      	mov	r4, r1
 80081ba:	2c63      	cmp	r4, #99	@ 0x63
 80081bc:	4631      	mov	r1, r6
 80081be:	f103 33ff 	add.w	r3, r3, #4294967295
 80081c2:	dcf1      	bgt.n	80081a8 <__exponent+0x1c>
 80081c4:	3130      	adds	r1, #48	@ 0x30
 80081c6:	1e94      	subs	r4, r2, #2
 80081c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80081cc:	4623      	mov	r3, r4
 80081ce:	1c41      	adds	r1, r0, #1
 80081d0:	42ab      	cmp	r3, r5
 80081d2:	d30a      	bcc.n	80081ea <__exponent+0x5e>
 80081d4:	f10d 0309 	add.w	r3, sp, #9
 80081d8:	1a9b      	subs	r3, r3, r2
 80081da:	42ac      	cmp	r4, r5
 80081dc:	bf88      	it	hi
 80081de:	2300      	movhi	r3, #0
 80081e0:	3302      	adds	r3, #2
 80081e2:	4403      	add	r3, r0
 80081e4:	1a18      	subs	r0, r3, r0
 80081e6:	b003      	add	sp, #12
 80081e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 80081ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 80081f2:	e7ed      	b.n	80081d0 <__exponent+0x44>
 80081f4:	2330      	movs	r3, #48	@ 0x30
 80081f6:	3130      	adds	r1, #48	@ 0x30
 80081f8:	7083      	strb	r3, [r0, #2]
 80081fa:	70c1      	strb	r1, [r0, #3]
 80081fc:	1d03      	adds	r3, r0, #4
 80081fe:	e7f1      	b.n	80081e4 <__exponent+0x58>

08008200 <_printf_float>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	b091      	sub	sp, #68	@ 0x44
 8008206:	460c      	mov	r4, r1
 8008208:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800820c:	4616      	mov	r6, r2
 800820e:	461f      	mov	r7, r3
 8008210:	4605      	mov	r5, r0
 8008212:	f000 ffef 	bl	80091f4 <_localeconv_r>
 8008216:	6803      	ldr	r3, [r0, #0]
 8008218:	4618      	mov	r0, r3
 800821a:	9308      	str	r3, [sp, #32]
 800821c:	f7f7 ffb0 	bl	8000180 <strlen>
 8008220:	2300      	movs	r3, #0
 8008222:	930e      	str	r3, [sp, #56]	@ 0x38
 8008224:	f8d8 3000 	ldr.w	r3, [r8]
 8008228:	9009      	str	r0, [sp, #36]	@ 0x24
 800822a:	3307      	adds	r3, #7
 800822c:	f023 0307 	bic.w	r3, r3, #7
 8008230:	f103 0208 	add.w	r2, r3, #8
 8008234:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008238:	f8d4 b000 	ldr.w	fp, [r4]
 800823c:	f8c8 2000 	str.w	r2, [r8]
 8008240:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008244:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008248:	930b      	str	r3, [sp, #44]	@ 0x2c
 800824a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800824e:	f04f 32ff 	mov.w	r2, #4294967295
 8008252:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008256:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800825a:	4b9c      	ldr	r3, [pc, #624]	@ (80084cc <_printf_float+0x2cc>)
 800825c:	f7f8 fbee 	bl	8000a3c <__aeabi_dcmpun>
 8008260:	bb70      	cbnz	r0, 80082c0 <_printf_float+0xc0>
 8008262:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008266:	f04f 32ff 	mov.w	r2, #4294967295
 800826a:	4b98      	ldr	r3, [pc, #608]	@ (80084cc <_printf_float+0x2cc>)
 800826c:	f7f8 fbc8 	bl	8000a00 <__aeabi_dcmple>
 8008270:	bb30      	cbnz	r0, 80082c0 <_printf_float+0xc0>
 8008272:	2200      	movs	r2, #0
 8008274:	2300      	movs	r3, #0
 8008276:	4640      	mov	r0, r8
 8008278:	4649      	mov	r1, r9
 800827a:	f7f8 fbb7 	bl	80009ec <__aeabi_dcmplt>
 800827e:	b110      	cbz	r0, 8008286 <_printf_float+0x86>
 8008280:	232d      	movs	r3, #45	@ 0x2d
 8008282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008286:	4a92      	ldr	r2, [pc, #584]	@ (80084d0 <_printf_float+0x2d0>)
 8008288:	4b92      	ldr	r3, [pc, #584]	@ (80084d4 <_printf_float+0x2d4>)
 800828a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800828e:	bf8c      	ite	hi
 8008290:	4690      	movhi	r8, r2
 8008292:	4698      	movls	r8, r3
 8008294:	2303      	movs	r3, #3
 8008296:	f04f 0900 	mov.w	r9, #0
 800829a:	6123      	str	r3, [r4, #16]
 800829c:	f02b 0304 	bic.w	r3, fp, #4
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	4633      	mov	r3, r6
 80082a4:	4621      	mov	r1, r4
 80082a6:	4628      	mov	r0, r5
 80082a8:	9700      	str	r7, [sp, #0]
 80082aa:	aa0f      	add	r2, sp, #60	@ 0x3c
 80082ac:	f000 f9d4 	bl	8008658 <_printf_common>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f040 8090 	bne.w	80083d6 <_printf_float+0x1d6>
 80082b6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ba:	b011      	add	sp, #68	@ 0x44
 80082bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c0:	4642      	mov	r2, r8
 80082c2:	464b      	mov	r3, r9
 80082c4:	4640      	mov	r0, r8
 80082c6:	4649      	mov	r1, r9
 80082c8:	f7f8 fbb8 	bl	8000a3c <__aeabi_dcmpun>
 80082cc:	b148      	cbz	r0, 80082e2 <_printf_float+0xe2>
 80082ce:	464b      	mov	r3, r9
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	bfb8      	it	lt
 80082d4:	232d      	movlt	r3, #45	@ 0x2d
 80082d6:	4a80      	ldr	r2, [pc, #512]	@ (80084d8 <_printf_float+0x2d8>)
 80082d8:	bfb8      	it	lt
 80082da:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80082de:	4b7f      	ldr	r3, [pc, #508]	@ (80084dc <_printf_float+0x2dc>)
 80082e0:	e7d3      	b.n	800828a <_printf_float+0x8a>
 80082e2:	6863      	ldr	r3, [r4, #4]
 80082e4:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80082e8:	1c5a      	adds	r2, r3, #1
 80082ea:	d13f      	bne.n	800836c <_printf_float+0x16c>
 80082ec:	2306      	movs	r3, #6
 80082ee:	6063      	str	r3, [r4, #4]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	9206      	str	r2, [sp, #24]
 80082fa:	aa0e      	add	r2, sp, #56	@ 0x38
 80082fc:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008300:	aa0d      	add	r2, sp, #52	@ 0x34
 8008302:	9203      	str	r2, [sp, #12]
 8008304:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8008308:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800830c:	6863      	ldr	r3, [r4, #4]
 800830e:	4642      	mov	r2, r8
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	4628      	mov	r0, r5
 8008314:	464b      	mov	r3, r9
 8008316:	910a      	str	r1, [sp, #40]	@ 0x28
 8008318:	f7ff fed4 	bl	80080c4 <__cvt>
 800831c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800831e:	4680      	mov	r8, r0
 8008320:	2947      	cmp	r1, #71	@ 0x47
 8008322:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008324:	d128      	bne.n	8008378 <_printf_float+0x178>
 8008326:	1cc8      	adds	r0, r1, #3
 8008328:	db02      	blt.n	8008330 <_printf_float+0x130>
 800832a:	6863      	ldr	r3, [r4, #4]
 800832c:	4299      	cmp	r1, r3
 800832e:	dd40      	ble.n	80083b2 <_printf_float+0x1b2>
 8008330:	f1aa 0a02 	sub.w	sl, sl, #2
 8008334:	fa5f fa8a 	uxtb.w	sl, sl
 8008338:	4652      	mov	r2, sl
 800833a:	3901      	subs	r1, #1
 800833c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008340:	910d      	str	r1, [sp, #52]	@ 0x34
 8008342:	f7ff ff23 	bl	800818c <__exponent>
 8008346:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008348:	4681      	mov	r9, r0
 800834a:	1813      	adds	r3, r2, r0
 800834c:	2a01      	cmp	r2, #1
 800834e:	6123      	str	r3, [r4, #16]
 8008350:	dc02      	bgt.n	8008358 <_printf_float+0x158>
 8008352:	6822      	ldr	r2, [r4, #0]
 8008354:	07d2      	lsls	r2, r2, #31
 8008356:	d501      	bpl.n	800835c <_printf_float+0x15c>
 8008358:	3301      	adds	r3, #1
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008360:	2b00      	cmp	r3, #0
 8008362:	d09e      	beq.n	80082a2 <_printf_float+0xa2>
 8008364:	232d      	movs	r3, #45	@ 0x2d
 8008366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800836a:	e79a      	b.n	80082a2 <_printf_float+0xa2>
 800836c:	2947      	cmp	r1, #71	@ 0x47
 800836e:	d1bf      	bne.n	80082f0 <_printf_float+0xf0>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1bd      	bne.n	80082f0 <_printf_float+0xf0>
 8008374:	2301      	movs	r3, #1
 8008376:	e7ba      	b.n	80082ee <_printf_float+0xee>
 8008378:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800837c:	d9dc      	bls.n	8008338 <_printf_float+0x138>
 800837e:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008382:	d118      	bne.n	80083b6 <_printf_float+0x1b6>
 8008384:	2900      	cmp	r1, #0
 8008386:	6863      	ldr	r3, [r4, #4]
 8008388:	dd0b      	ble.n	80083a2 <_printf_float+0x1a2>
 800838a:	6121      	str	r1, [r4, #16]
 800838c:	b913      	cbnz	r3, 8008394 <_printf_float+0x194>
 800838e:	6822      	ldr	r2, [r4, #0]
 8008390:	07d0      	lsls	r0, r2, #31
 8008392:	d502      	bpl.n	800839a <_printf_float+0x19a>
 8008394:	3301      	adds	r3, #1
 8008396:	440b      	add	r3, r1
 8008398:	6123      	str	r3, [r4, #16]
 800839a:	f04f 0900 	mov.w	r9, #0
 800839e:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083a0:	e7dc      	b.n	800835c <_printf_float+0x15c>
 80083a2:	b913      	cbnz	r3, 80083aa <_printf_float+0x1aa>
 80083a4:	6822      	ldr	r2, [r4, #0]
 80083a6:	07d2      	lsls	r2, r2, #31
 80083a8:	d501      	bpl.n	80083ae <_printf_float+0x1ae>
 80083aa:	3302      	adds	r3, #2
 80083ac:	e7f4      	b.n	8008398 <_printf_float+0x198>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e7f2      	b.n	8008398 <_printf_float+0x198>
 80083b2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80083b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083b8:	4299      	cmp	r1, r3
 80083ba:	db05      	blt.n	80083c8 <_printf_float+0x1c8>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	6121      	str	r1, [r4, #16]
 80083c0:	07d8      	lsls	r0, r3, #31
 80083c2:	d5ea      	bpl.n	800839a <_printf_float+0x19a>
 80083c4:	1c4b      	adds	r3, r1, #1
 80083c6:	e7e7      	b.n	8008398 <_printf_float+0x198>
 80083c8:	2900      	cmp	r1, #0
 80083ca:	bfcc      	ite	gt
 80083cc:	2201      	movgt	r2, #1
 80083ce:	f1c1 0202 	rsble	r2, r1, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	e7e0      	b.n	8008398 <_printf_float+0x198>
 80083d6:	6823      	ldr	r3, [r4, #0]
 80083d8:	055a      	lsls	r2, r3, #21
 80083da:	d407      	bmi.n	80083ec <_printf_float+0x1ec>
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	4642      	mov	r2, r8
 80083e0:	4631      	mov	r1, r6
 80083e2:	4628      	mov	r0, r5
 80083e4:	47b8      	blx	r7
 80083e6:	3001      	adds	r0, #1
 80083e8:	d12b      	bne.n	8008442 <_printf_float+0x242>
 80083ea:	e764      	b.n	80082b6 <_printf_float+0xb6>
 80083ec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083f0:	f240 80dc 	bls.w	80085ac <_printf_float+0x3ac>
 80083f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80083f8:	2200      	movs	r2, #0
 80083fa:	2300      	movs	r3, #0
 80083fc:	f7f8 faec 	bl	80009d8 <__aeabi_dcmpeq>
 8008400:	2800      	cmp	r0, #0
 8008402:	d033      	beq.n	800846c <_printf_float+0x26c>
 8008404:	2301      	movs	r3, #1
 8008406:	4631      	mov	r1, r6
 8008408:	4628      	mov	r0, r5
 800840a:	4a35      	ldr	r2, [pc, #212]	@ (80084e0 <_printf_float+0x2e0>)
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af51 	beq.w	80082b6 <_printf_float+0xb6>
 8008414:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8008418:	4543      	cmp	r3, r8
 800841a:	db02      	blt.n	8008422 <_printf_float+0x222>
 800841c:	6823      	ldr	r3, [r4, #0]
 800841e:	07d8      	lsls	r0, r3, #31
 8008420:	d50f      	bpl.n	8008442 <_printf_float+0x242>
 8008422:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008426:	4631      	mov	r1, r6
 8008428:	4628      	mov	r0, r5
 800842a:	47b8      	blx	r7
 800842c:	3001      	adds	r0, #1
 800842e:	f43f af42 	beq.w	80082b6 <_printf_float+0xb6>
 8008432:	f04f 0900 	mov.w	r9, #0
 8008436:	f108 38ff 	add.w	r8, r8, #4294967295
 800843a:	f104 0a1a 	add.w	sl, r4, #26
 800843e:	45c8      	cmp	r8, r9
 8008440:	dc09      	bgt.n	8008456 <_printf_float+0x256>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	079b      	lsls	r3, r3, #30
 8008446:	f100 8102 	bmi.w	800864e <_printf_float+0x44e>
 800844a:	68e0      	ldr	r0, [r4, #12]
 800844c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800844e:	4298      	cmp	r0, r3
 8008450:	bfb8      	it	lt
 8008452:	4618      	movlt	r0, r3
 8008454:	e731      	b.n	80082ba <_printf_float+0xba>
 8008456:	2301      	movs	r3, #1
 8008458:	4652      	mov	r2, sl
 800845a:	4631      	mov	r1, r6
 800845c:	4628      	mov	r0, r5
 800845e:	47b8      	blx	r7
 8008460:	3001      	adds	r0, #1
 8008462:	f43f af28 	beq.w	80082b6 <_printf_float+0xb6>
 8008466:	f109 0901 	add.w	r9, r9, #1
 800846a:	e7e8      	b.n	800843e <_printf_float+0x23e>
 800846c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800846e:	2b00      	cmp	r3, #0
 8008470:	dc38      	bgt.n	80084e4 <_printf_float+0x2e4>
 8008472:	2301      	movs	r3, #1
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	4a19      	ldr	r2, [pc, #100]	@ (80084e0 <_printf_float+0x2e0>)
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	f43f af1a 	beq.w	80082b6 <_printf_float+0xb6>
 8008482:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8008486:	ea59 0303 	orrs.w	r3, r9, r3
 800848a:	d102      	bne.n	8008492 <_printf_float+0x292>
 800848c:	6823      	ldr	r3, [r4, #0]
 800848e:	07d9      	lsls	r1, r3, #31
 8008490:	d5d7      	bpl.n	8008442 <_printf_float+0x242>
 8008492:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	f43f af0a 	beq.w	80082b6 <_printf_float+0xb6>
 80084a2:	f04f 0a00 	mov.w	sl, #0
 80084a6:	f104 0b1a 	add.w	fp, r4, #26
 80084aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80084ac:	425b      	negs	r3, r3
 80084ae:	4553      	cmp	r3, sl
 80084b0:	dc01      	bgt.n	80084b6 <_printf_float+0x2b6>
 80084b2:	464b      	mov	r3, r9
 80084b4:	e793      	b.n	80083de <_printf_float+0x1de>
 80084b6:	2301      	movs	r3, #1
 80084b8:	465a      	mov	r2, fp
 80084ba:	4631      	mov	r1, r6
 80084bc:	4628      	mov	r0, r5
 80084be:	47b8      	blx	r7
 80084c0:	3001      	adds	r0, #1
 80084c2:	f43f aef8 	beq.w	80082b6 <_printf_float+0xb6>
 80084c6:	f10a 0a01 	add.w	sl, sl, #1
 80084ca:	e7ee      	b.n	80084aa <_printf_float+0x2aa>
 80084cc:	7fefffff 	.word	0x7fefffff
 80084d0:	0800e05e 	.word	0x0800e05e
 80084d4:	0800e05a 	.word	0x0800e05a
 80084d8:	0800e066 	.word	0x0800e066
 80084dc:	0800e062 	.word	0x0800e062
 80084e0:	0800e06a 	.word	0x0800e06a
 80084e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80084e6:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80084ea:	4553      	cmp	r3, sl
 80084ec:	bfa8      	it	ge
 80084ee:	4653      	movge	r3, sl
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	4699      	mov	r9, r3
 80084f4:	dc36      	bgt.n	8008564 <_printf_float+0x364>
 80084f6:	f04f 0b00 	mov.w	fp, #0
 80084fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084fe:	f104 021a 	add.w	r2, r4, #26
 8008502:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008504:	930a      	str	r3, [sp, #40]	@ 0x28
 8008506:	eba3 0309 	sub.w	r3, r3, r9
 800850a:	455b      	cmp	r3, fp
 800850c:	dc31      	bgt.n	8008572 <_printf_float+0x372>
 800850e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008510:	459a      	cmp	sl, r3
 8008512:	dc3a      	bgt.n	800858a <_printf_float+0x38a>
 8008514:	6823      	ldr	r3, [r4, #0]
 8008516:	07da      	lsls	r2, r3, #31
 8008518:	d437      	bmi.n	800858a <_printf_float+0x38a>
 800851a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800851c:	ebaa 0903 	sub.w	r9, sl, r3
 8008520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008522:	ebaa 0303 	sub.w	r3, sl, r3
 8008526:	4599      	cmp	r9, r3
 8008528:	bfa8      	it	ge
 800852a:	4699      	movge	r9, r3
 800852c:	f1b9 0f00 	cmp.w	r9, #0
 8008530:	dc33      	bgt.n	800859a <_printf_float+0x39a>
 8008532:	f04f 0800 	mov.w	r8, #0
 8008536:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800853a:	f104 0b1a 	add.w	fp, r4, #26
 800853e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008540:	ebaa 0303 	sub.w	r3, sl, r3
 8008544:	eba3 0309 	sub.w	r3, r3, r9
 8008548:	4543      	cmp	r3, r8
 800854a:	f77f af7a 	ble.w	8008442 <_printf_float+0x242>
 800854e:	2301      	movs	r3, #1
 8008550:	465a      	mov	r2, fp
 8008552:	4631      	mov	r1, r6
 8008554:	4628      	mov	r0, r5
 8008556:	47b8      	blx	r7
 8008558:	3001      	adds	r0, #1
 800855a:	f43f aeac 	beq.w	80082b6 <_printf_float+0xb6>
 800855e:	f108 0801 	add.w	r8, r8, #1
 8008562:	e7ec      	b.n	800853e <_printf_float+0x33e>
 8008564:	4642      	mov	r2, r8
 8008566:	4631      	mov	r1, r6
 8008568:	4628      	mov	r0, r5
 800856a:	47b8      	blx	r7
 800856c:	3001      	adds	r0, #1
 800856e:	d1c2      	bne.n	80084f6 <_printf_float+0x2f6>
 8008570:	e6a1      	b.n	80082b6 <_printf_float+0xb6>
 8008572:	2301      	movs	r3, #1
 8008574:	4631      	mov	r1, r6
 8008576:	4628      	mov	r0, r5
 8008578:	920a      	str	r2, [sp, #40]	@ 0x28
 800857a:	47b8      	blx	r7
 800857c:	3001      	adds	r0, #1
 800857e:	f43f ae9a 	beq.w	80082b6 <_printf_float+0xb6>
 8008582:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008584:	f10b 0b01 	add.w	fp, fp, #1
 8008588:	e7bb      	b.n	8008502 <_printf_float+0x302>
 800858a:	4631      	mov	r1, r6
 800858c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008590:	4628      	mov	r0, r5
 8008592:	47b8      	blx	r7
 8008594:	3001      	adds	r0, #1
 8008596:	d1c0      	bne.n	800851a <_printf_float+0x31a>
 8008598:	e68d      	b.n	80082b6 <_printf_float+0xb6>
 800859a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800859c:	464b      	mov	r3, r9
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	4442      	add	r2, r8
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	d1c3      	bne.n	8008532 <_printf_float+0x332>
 80085aa:	e684      	b.n	80082b6 <_printf_float+0xb6>
 80085ac:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80085b0:	f1ba 0f01 	cmp.w	sl, #1
 80085b4:	dc01      	bgt.n	80085ba <_printf_float+0x3ba>
 80085b6:	07db      	lsls	r3, r3, #31
 80085b8:	d536      	bpl.n	8008628 <_printf_float+0x428>
 80085ba:	2301      	movs	r3, #1
 80085bc:	4642      	mov	r2, r8
 80085be:	4631      	mov	r1, r6
 80085c0:	4628      	mov	r0, r5
 80085c2:	47b8      	blx	r7
 80085c4:	3001      	adds	r0, #1
 80085c6:	f43f ae76 	beq.w	80082b6 <_printf_float+0xb6>
 80085ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80085ce:	4631      	mov	r1, r6
 80085d0:	4628      	mov	r0, r5
 80085d2:	47b8      	blx	r7
 80085d4:	3001      	adds	r0, #1
 80085d6:	f43f ae6e 	beq.w	80082b6 <_printf_float+0xb6>
 80085da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80085de:	2200      	movs	r2, #0
 80085e0:	2300      	movs	r3, #0
 80085e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80085e6:	f7f8 f9f7 	bl	80009d8 <__aeabi_dcmpeq>
 80085ea:	b9c0      	cbnz	r0, 800861e <_printf_float+0x41e>
 80085ec:	4653      	mov	r3, sl
 80085ee:	f108 0201 	add.w	r2, r8, #1
 80085f2:	4631      	mov	r1, r6
 80085f4:	4628      	mov	r0, r5
 80085f6:	47b8      	blx	r7
 80085f8:	3001      	adds	r0, #1
 80085fa:	d10c      	bne.n	8008616 <_printf_float+0x416>
 80085fc:	e65b      	b.n	80082b6 <_printf_float+0xb6>
 80085fe:	2301      	movs	r3, #1
 8008600:	465a      	mov	r2, fp
 8008602:	4631      	mov	r1, r6
 8008604:	4628      	mov	r0, r5
 8008606:	47b8      	blx	r7
 8008608:	3001      	adds	r0, #1
 800860a:	f43f ae54 	beq.w	80082b6 <_printf_float+0xb6>
 800860e:	f108 0801 	add.w	r8, r8, #1
 8008612:	45d0      	cmp	r8, sl
 8008614:	dbf3      	blt.n	80085fe <_printf_float+0x3fe>
 8008616:	464b      	mov	r3, r9
 8008618:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800861c:	e6e0      	b.n	80083e0 <_printf_float+0x1e0>
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	f104 0b1a 	add.w	fp, r4, #26
 8008626:	e7f4      	b.n	8008612 <_printf_float+0x412>
 8008628:	2301      	movs	r3, #1
 800862a:	4642      	mov	r2, r8
 800862c:	e7e1      	b.n	80085f2 <_printf_float+0x3f2>
 800862e:	2301      	movs	r3, #1
 8008630:	464a      	mov	r2, r9
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae3c 	beq.w	80082b6 <_printf_float+0xb6>
 800863e:	f108 0801 	add.w	r8, r8, #1
 8008642:	68e3      	ldr	r3, [r4, #12]
 8008644:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008646:	1a5b      	subs	r3, r3, r1
 8008648:	4543      	cmp	r3, r8
 800864a:	dcf0      	bgt.n	800862e <_printf_float+0x42e>
 800864c:	e6fd      	b.n	800844a <_printf_float+0x24a>
 800864e:	f04f 0800 	mov.w	r8, #0
 8008652:	f104 0919 	add.w	r9, r4, #25
 8008656:	e7f4      	b.n	8008642 <_printf_float+0x442>

08008658 <_printf_common>:
 8008658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	4616      	mov	r6, r2
 800865e:	4698      	mov	r8, r3
 8008660:	688a      	ldr	r2, [r1, #8]
 8008662:	690b      	ldr	r3, [r1, #16]
 8008664:	4607      	mov	r7, r0
 8008666:	4293      	cmp	r3, r2
 8008668:	bfb8      	it	lt
 800866a:	4613      	movlt	r3, r2
 800866c:	6033      	str	r3, [r6, #0]
 800866e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008672:	460c      	mov	r4, r1
 8008674:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008678:	b10a      	cbz	r2, 800867e <_printf_common+0x26>
 800867a:	3301      	adds	r3, #1
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	0699      	lsls	r1, r3, #26
 8008682:	bf42      	ittt	mi
 8008684:	6833      	ldrmi	r3, [r6, #0]
 8008686:	3302      	addmi	r3, #2
 8008688:	6033      	strmi	r3, [r6, #0]
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	f015 0506 	ands.w	r5, r5, #6
 8008690:	d106      	bne.n	80086a0 <_printf_common+0x48>
 8008692:	f104 0a19 	add.w	sl, r4, #25
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	6832      	ldr	r2, [r6, #0]
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	42ab      	cmp	r3, r5
 800869e:	dc2b      	bgt.n	80086f8 <_printf_common+0xa0>
 80086a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	3b00      	subs	r3, #0
 80086a8:	bf18      	it	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	0692      	lsls	r2, r2, #26
 80086ae:	d430      	bmi.n	8008712 <_printf_common+0xba>
 80086b0:	4641      	mov	r1, r8
 80086b2:	4638      	mov	r0, r7
 80086b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086b8:	47c8      	blx	r9
 80086ba:	3001      	adds	r0, #1
 80086bc:	d023      	beq.n	8008706 <_printf_common+0xae>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	f003 0306 	and.w	r3, r3, #6
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	bf14      	ite	ne
 80086ca:	2500      	movne	r5, #0
 80086cc:	6833      	ldreq	r3, [r6, #0]
 80086ce:	f04f 0600 	mov.w	r6, #0
 80086d2:	bf08      	it	eq
 80086d4:	68e5      	ldreq	r5, [r4, #12]
 80086d6:	f104 041a 	add.w	r4, r4, #26
 80086da:	bf08      	it	eq
 80086dc:	1aed      	subeq	r5, r5, r3
 80086de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80086e2:	bf08      	it	eq
 80086e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086e8:	4293      	cmp	r3, r2
 80086ea:	bfc4      	itt	gt
 80086ec:	1a9b      	subgt	r3, r3, r2
 80086ee:	18ed      	addgt	r5, r5, r3
 80086f0:	42b5      	cmp	r5, r6
 80086f2:	d11a      	bne.n	800872a <_printf_common+0xd2>
 80086f4:	2000      	movs	r0, #0
 80086f6:	e008      	b.n	800870a <_printf_common+0xb2>
 80086f8:	2301      	movs	r3, #1
 80086fa:	4652      	mov	r2, sl
 80086fc:	4641      	mov	r1, r8
 80086fe:	4638      	mov	r0, r7
 8008700:	47c8      	blx	r9
 8008702:	3001      	adds	r0, #1
 8008704:	d103      	bne.n	800870e <_printf_common+0xb6>
 8008706:	f04f 30ff 	mov.w	r0, #4294967295
 800870a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870e:	3501      	adds	r5, #1
 8008710:	e7c1      	b.n	8008696 <_printf_common+0x3e>
 8008712:	2030      	movs	r0, #48	@ 0x30
 8008714:	18e1      	adds	r1, r4, r3
 8008716:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800871a:	1c5a      	adds	r2, r3, #1
 800871c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008720:	4422      	add	r2, r4
 8008722:	3302      	adds	r3, #2
 8008724:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008728:	e7c2      	b.n	80086b0 <_printf_common+0x58>
 800872a:	2301      	movs	r3, #1
 800872c:	4622      	mov	r2, r4
 800872e:	4641      	mov	r1, r8
 8008730:	4638      	mov	r0, r7
 8008732:	47c8      	blx	r9
 8008734:	3001      	adds	r0, #1
 8008736:	d0e6      	beq.n	8008706 <_printf_common+0xae>
 8008738:	3601      	adds	r6, #1
 800873a:	e7d9      	b.n	80086f0 <_printf_common+0x98>

0800873c <_printf_i>:
 800873c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008740:	7e0f      	ldrb	r7, [r1, #24]
 8008742:	4691      	mov	r9, r2
 8008744:	2f78      	cmp	r7, #120	@ 0x78
 8008746:	4680      	mov	r8, r0
 8008748:	460c      	mov	r4, r1
 800874a:	469a      	mov	sl, r3
 800874c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800874e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008752:	d807      	bhi.n	8008764 <_printf_i+0x28>
 8008754:	2f62      	cmp	r7, #98	@ 0x62
 8008756:	d80a      	bhi.n	800876e <_printf_i+0x32>
 8008758:	2f00      	cmp	r7, #0
 800875a:	f000 80d1 	beq.w	8008900 <_printf_i+0x1c4>
 800875e:	2f58      	cmp	r7, #88	@ 0x58
 8008760:	f000 80b8 	beq.w	80088d4 <_printf_i+0x198>
 8008764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008768:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800876c:	e03a      	b.n	80087e4 <_printf_i+0xa8>
 800876e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008772:	2b15      	cmp	r3, #21
 8008774:	d8f6      	bhi.n	8008764 <_printf_i+0x28>
 8008776:	a101      	add	r1, pc, #4	@ (adr r1, 800877c <_printf_i+0x40>)
 8008778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800877c:	080087d5 	.word	0x080087d5
 8008780:	080087e9 	.word	0x080087e9
 8008784:	08008765 	.word	0x08008765
 8008788:	08008765 	.word	0x08008765
 800878c:	08008765 	.word	0x08008765
 8008790:	08008765 	.word	0x08008765
 8008794:	080087e9 	.word	0x080087e9
 8008798:	08008765 	.word	0x08008765
 800879c:	08008765 	.word	0x08008765
 80087a0:	08008765 	.word	0x08008765
 80087a4:	08008765 	.word	0x08008765
 80087a8:	080088e7 	.word	0x080088e7
 80087ac:	08008813 	.word	0x08008813
 80087b0:	080088a1 	.word	0x080088a1
 80087b4:	08008765 	.word	0x08008765
 80087b8:	08008765 	.word	0x08008765
 80087bc:	08008909 	.word	0x08008909
 80087c0:	08008765 	.word	0x08008765
 80087c4:	08008813 	.word	0x08008813
 80087c8:	08008765 	.word	0x08008765
 80087cc:	08008765 	.word	0x08008765
 80087d0:	080088a9 	.word	0x080088a9
 80087d4:	6833      	ldr	r3, [r6, #0]
 80087d6:	1d1a      	adds	r2, r3, #4
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	6032      	str	r2, [r6, #0]
 80087dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80087e4:	2301      	movs	r3, #1
 80087e6:	e09c      	b.n	8008922 <_printf_i+0x1e6>
 80087e8:	6833      	ldr	r3, [r6, #0]
 80087ea:	6820      	ldr	r0, [r4, #0]
 80087ec:	1d19      	adds	r1, r3, #4
 80087ee:	6031      	str	r1, [r6, #0]
 80087f0:	0606      	lsls	r6, r0, #24
 80087f2:	d501      	bpl.n	80087f8 <_printf_i+0xbc>
 80087f4:	681d      	ldr	r5, [r3, #0]
 80087f6:	e003      	b.n	8008800 <_printf_i+0xc4>
 80087f8:	0645      	lsls	r5, r0, #25
 80087fa:	d5fb      	bpl.n	80087f4 <_printf_i+0xb8>
 80087fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008800:	2d00      	cmp	r5, #0
 8008802:	da03      	bge.n	800880c <_printf_i+0xd0>
 8008804:	232d      	movs	r3, #45	@ 0x2d
 8008806:	426d      	negs	r5, r5
 8008808:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800880c:	230a      	movs	r3, #10
 800880e:	4858      	ldr	r0, [pc, #352]	@ (8008970 <_printf_i+0x234>)
 8008810:	e011      	b.n	8008836 <_printf_i+0xfa>
 8008812:	6821      	ldr	r1, [r4, #0]
 8008814:	6833      	ldr	r3, [r6, #0]
 8008816:	0608      	lsls	r0, r1, #24
 8008818:	f853 5b04 	ldr.w	r5, [r3], #4
 800881c:	d402      	bmi.n	8008824 <_printf_i+0xe8>
 800881e:	0649      	lsls	r1, r1, #25
 8008820:	bf48      	it	mi
 8008822:	b2ad      	uxthmi	r5, r5
 8008824:	2f6f      	cmp	r7, #111	@ 0x6f
 8008826:	6033      	str	r3, [r6, #0]
 8008828:	bf14      	ite	ne
 800882a:	230a      	movne	r3, #10
 800882c:	2308      	moveq	r3, #8
 800882e:	4850      	ldr	r0, [pc, #320]	@ (8008970 <_printf_i+0x234>)
 8008830:	2100      	movs	r1, #0
 8008832:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008836:	6866      	ldr	r6, [r4, #4]
 8008838:	2e00      	cmp	r6, #0
 800883a:	60a6      	str	r6, [r4, #8]
 800883c:	db05      	blt.n	800884a <_printf_i+0x10e>
 800883e:	6821      	ldr	r1, [r4, #0]
 8008840:	432e      	orrs	r6, r5
 8008842:	f021 0104 	bic.w	r1, r1, #4
 8008846:	6021      	str	r1, [r4, #0]
 8008848:	d04b      	beq.n	80088e2 <_printf_i+0x1a6>
 800884a:	4616      	mov	r6, r2
 800884c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008850:	fb03 5711 	mls	r7, r3, r1, r5
 8008854:	5dc7      	ldrb	r7, [r0, r7]
 8008856:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800885a:	462f      	mov	r7, r5
 800885c:	42bb      	cmp	r3, r7
 800885e:	460d      	mov	r5, r1
 8008860:	d9f4      	bls.n	800884c <_printf_i+0x110>
 8008862:	2b08      	cmp	r3, #8
 8008864:	d10b      	bne.n	800887e <_printf_i+0x142>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	07df      	lsls	r7, r3, #31
 800886a:	d508      	bpl.n	800887e <_printf_i+0x142>
 800886c:	6923      	ldr	r3, [r4, #16]
 800886e:	6861      	ldr	r1, [r4, #4]
 8008870:	4299      	cmp	r1, r3
 8008872:	bfde      	ittt	le
 8008874:	2330      	movle	r3, #48	@ 0x30
 8008876:	f806 3c01 	strble.w	r3, [r6, #-1]
 800887a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800887e:	1b92      	subs	r2, r2, r6
 8008880:	6122      	str	r2, [r4, #16]
 8008882:	464b      	mov	r3, r9
 8008884:	4621      	mov	r1, r4
 8008886:	4640      	mov	r0, r8
 8008888:	f8cd a000 	str.w	sl, [sp]
 800888c:	aa03      	add	r2, sp, #12
 800888e:	f7ff fee3 	bl	8008658 <_printf_common>
 8008892:	3001      	adds	r0, #1
 8008894:	d14a      	bne.n	800892c <_printf_i+0x1f0>
 8008896:	f04f 30ff 	mov.w	r0, #4294967295
 800889a:	b004      	add	sp, #16
 800889c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	f043 0320 	orr.w	r3, r3, #32
 80088a6:	6023      	str	r3, [r4, #0]
 80088a8:	2778      	movs	r7, #120	@ 0x78
 80088aa:	4832      	ldr	r0, [pc, #200]	@ (8008974 <_printf_i+0x238>)
 80088ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	6831      	ldr	r1, [r6, #0]
 80088b4:	061f      	lsls	r7, r3, #24
 80088b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80088ba:	d402      	bmi.n	80088c2 <_printf_i+0x186>
 80088bc:	065f      	lsls	r7, r3, #25
 80088be:	bf48      	it	mi
 80088c0:	b2ad      	uxthmi	r5, r5
 80088c2:	6031      	str	r1, [r6, #0]
 80088c4:	07d9      	lsls	r1, r3, #31
 80088c6:	bf44      	itt	mi
 80088c8:	f043 0320 	orrmi.w	r3, r3, #32
 80088cc:	6023      	strmi	r3, [r4, #0]
 80088ce:	b11d      	cbz	r5, 80088d8 <_printf_i+0x19c>
 80088d0:	2310      	movs	r3, #16
 80088d2:	e7ad      	b.n	8008830 <_printf_i+0xf4>
 80088d4:	4826      	ldr	r0, [pc, #152]	@ (8008970 <_printf_i+0x234>)
 80088d6:	e7e9      	b.n	80088ac <_printf_i+0x170>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	f023 0320 	bic.w	r3, r3, #32
 80088de:	6023      	str	r3, [r4, #0]
 80088e0:	e7f6      	b.n	80088d0 <_printf_i+0x194>
 80088e2:	4616      	mov	r6, r2
 80088e4:	e7bd      	b.n	8008862 <_printf_i+0x126>
 80088e6:	6833      	ldr	r3, [r6, #0]
 80088e8:	6825      	ldr	r5, [r4, #0]
 80088ea:	1d18      	adds	r0, r3, #4
 80088ec:	6961      	ldr	r1, [r4, #20]
 80088ee:	6030      	str	r0, [r6, #0]
 80088f0:	062e      	lsls	r6, r5, #24
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	d501      	bpl.n	80088fa <_printf_i+0x1be>
 80088f6:	6019      	str	r1, [r3, #0]
 80088f8:	e002      	b.n	8008900 <_printf_i+0x1c4>
 80088fa:	0668      	lsls	r0, r5, #25
 80088fc:	d5fb      	bpl.n	80088f6 <_printf_i+0x1ba>
 80088fe:	8019      	strh	r1, [r3, #0]
 8008900:	2300      	movs	r3, #0
 8008902:	4616      	mov	r6, r2
 8008904:	6123      	str	r3, [r4, #16]
 8008906:	e7bc      	b.n	8008882 <_printf_i+0x146>
 8008908:	6833      	ldr	r3, [r6, #0]
 800890a:	2100      	movs	r1, #0
 800890c:	1d1a      	adds	r2, r3, #4
 800890e:	6032      	str	r2, [r6, #0]
 8008910:	681e      	ldr	r6, [r3, #0]
 8008912:	6862      	ldr	r2, [r4, #4]
 8008914:	4630      	mov	r0, r6
 8008916:	f000 fce4 	bl	80092e2 <memchr>
 800891a:	b108      	cbz	r0, 8008920 <_printf_i+0x1e4>
 800891c:	1b80      	subs	r0, r0, r6
 800891e:	6060      	str	r0, [r4, #4]
 8008920:	6863      	ldr	r3, [r4, #4]
 8008922:	6123      	str	r3, [r4, #16]
 8008924:	2300      	movs	r3, #0
 8008926:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800892a:	e7aa      	b.n	8008882 <_printf_i+0x146>
 800892c:	4632      	mov	r2, r6
 800892e:	4649      	mov	r1, r9
 8008930:	4640      	mov	r0, r8
 8008932:	6923      	ldr	r3, [r4, #16]
 8008934:	47d0      	blx	sl
 8008936:	3001      	adds	r0, #1
 8008938:	d0ad      	beq.n	8008896 <_printf_i+0x15a>
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	079b      	lsls	r3, r3, #30
 800893e:	d413      	bmi.n	8008968 <_printf_i+0x22c>
 8008940:	68e0      	ldr	r0, [r4, #12]
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	4298      	cmp	r0, r3
 8008946:	bfb8      	it	lt
 8008948:	4618      	movlt	r0, r3
 800894a:	e7a6      	b.n	800889a <_printf_i+0x15e>
 800894c:	2301      	movs	r3, #1
 800894e:	4632      	mov	r2, r6
 8008950:	4649      	mov	r1, r9
 8008952:	4640      	mov	r0, r8
 8008954:	47d0      	blx	sl
 8008956:	3001      	adds	r0, #1
 8008958:	d09d      	beq.n	8008896 <_printf_i+0x15a>
 800895a:	3501      	adds	r5, #1
 800895c:	68e3      	ldr	r3, [r4, #12]
 800895e:	9903      	ldr	r1, [sp, #12]
 8008960:	1a5b      	subs	r3, r3, r1
 8008962:	42ab      	cmp	r3, r5
 8008964:	dcf2      	bgt.n	800894c <_printf_i+0x210>
 8008966:	e7eb      	b.n	8008940 <_printf_i+0x204>
 8008968:	2500      	movs	r5, #0
 800896a:	f104 0619 	add.w	r6, r4, #25
 800896e:	e7f5      	b.n	800895c <_printf_i+0x220>
 8008970:	0800e06c 	.word	0x0800e06c
 8008974:	0800e07d 	.word	0x0800e07d

08008978 <_scanf_float>:
 8008978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800897c:	b087      	sub	sp, #28
 800897e:	9303      	str	r3, [sp, #12]
 8008980:	688b      	ldr	r3, [r1, #8]
 8008982:	4691      	mov	r9, r2
 8008984:	1e5a      	subs	r2, r3, #1
 8008986:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800898a:	bf82      	ittt	hi
 800898c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008990:	eb03 0b05 	addhi.w	fp, r3, r5
 8008994:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008998:	460a      	mov	r2, r1
 800899a:	f04f 0500 	mov.w	r5, #0
 800899e:	bf88      	it	hi
 80089a0:	608b      	strhi	r3, [r1, #8]
 80089a2:	680b      	ldr	r3, [r1, #0]
 80089a4:	4680      	mov	r8, r0
 80089a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80089aa:	f842 3b1c 	str.w	r3, [r2], #28
 80089ae:	460c      	mov	r4, r1
 80089b0:	bf98      	it	ls
 80089b2:	f04f 0b00 	movls.w	fp, #0
 80089b6:	4616      	mov	r6, r2
 80089b8:	46aa      	mov	sl, r5
 80089ba:	462f      	mov	r7, r5
 80089bc:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80089c0:	9201      	str	r2, [sp, #4]
 80089c2:	9502      	str	r5, [sp, #8]
 80089c4:	68a2      	ldr	r2, [r4, #8]
 80089c6:	b15a      	cbz	r2, 80089e0 <_scanf_float+0x68>
 80089c8:	f8d9 3000 	ldr.w	r3, [r9]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80089d0:	d862      	bhi.n	8008a98 <_scanf_float+0x120>
 80089d2:	2b40      	cmp	r3, #64	@ 0x40
 80089d4:	d83a      	bhi.n	8008a4c <_scanf_float+0xd4>
 80089d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80089da:	b2c8      	uxtb	r0, r1
 80089dc:	280e      	cmp	r0, #14
 80089de:	d938      	bls.n	8008a52 <_scanf_float+0xda>
 80089e0:	b11f      	cbz	r7, 80089ea <_scanf_float+0x72>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ee:	f1ba 0f01 	cmp.w	sl, #1
 80089f2:	f200 8114 	bhi.w	8008c1e <_scanf_float+0x2a6>
 80089f6:	9b01      	ldr	r3, [sp, #4]
 80089f8:	429e      	cmp	r6, r3
 80089fa:	f200 8105 	bhi.w	8008c08 <_scanf_float+0x290>
 80089fe:	2001      	movs	r0, #1
 8008a00:	b007      	add	sp, #28
 8008a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a06:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a0a:	2a0d      	cmp	r2, #13
 8008a0c:	d8e8      	bhi.n	80089e0 <_scanf_float+0x68>
 8008a0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008a14 <_scanf_float+0x9c>)
 8008a10:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008a14:	08008b5d 	.word	0x08008b5d
 8008a18:	080089e1 	.word	0x080089e1
 8008a1c:	080089e1 	.word	0x080089e1
 8008a20:	080089e1 	.word	0x080089e1
 8008a24:	08008bb9 	.word	0x08008bb9
 8008a28:	08008b93 	.word	0x08008b93
 8008a2c:	080089e1 	.word	0x080089e1
 8008a30:	080089e1 	.word	0x080089e1
 8008a34:	08008b6b 	.word	0x08008b6b
 8008a38:	080089e1 	.word	0x080089e1
 8008a3c:	080089e1 	.word	0x080089e1
 8008a40:	080089e1 	.word	0x080089e1
 8008a44:	080089e1 	.word	0x080089e1
 8008a48:	08008b27 	.word	0x08008b27
 8008a4c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008a50:	e7db      	b.n	8008a0a <_scanf_float+0x92>
 8008a52:	290e      	cmp	r1, #14
 8008a54:	d8c4      	bhi.n	80089e0 <_scanf_float+0x68>
 8008a56:	a001      	add	r0, pc, #4	@ (adr r0, 8008a5c <_scanf_float+0xe4>)
 8008a58:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a5c:	08008b17 	.word	0x08008b17
 8008a60:	080089e1 	.word	0x080089e1
 8008a64:	08008b17 	.word	0x08008b17
 8008a68:	08008ba7 	.word	0x08008ba7
 8008a6c:	080089e1 	.word	0x080089e1
 8008a70:	08008ab9 	.word	0x08008ab9
 8008a74:	08008afd 	.word	0x08008afd
 8008a78:	08008afd 	.word	0x08008afd
 8008a7c:	08008afd 	.word	0x08008afd
 8008a80:	08008afd 	.word	0x08008afd
 8008a84:	08008afd 	.word	0x08008afd
 8008a88:	08008afd 	.word	0x08008afd
 8008a8c:	08008afd 	.word	0x08008afd
 8008a90:	08008afd 	.word	0x08008afd
 8008a94:	08008afd 	.word	0x08008afd
 8008a98:	2b6e      	cmp	r3, #110	@ 0x6e
 8008a9a:	d809      	bhi.n	8008ab0 <_scanf_float+0x138>
 8008a9c:	2b60      	cmp	r3, #96	@ 0x60
 8008a9e:	d8b2      	bhi.n	8008a06 <_scanf_float+0x8e>
 8008aa0:	2b54      	cmp	r3, #84	@ 0x54
 8008aa2:	d07b      	beq.n	8008b9c <_scanf_float+0x224>
 8008aa4:	2b59      	cmp	r3, #89	@ 0x59
 8008aa6:	d19b      	bne.n	80089e0 <_scanf_float+0x68>
 8008aa8:	2d07      	cmp	r5, #7
 8008aaa:	d199      	bne.n	80089e0 <_scanf_float+0x68>
 8008aac:	2508      	movs	r5, #8
 8008aae:	e02f      	b.n	8008b10 <_scanf_float+0x198>
 8008ab0:	2b74      	cmp	r3, #116	@ 0x74
 8008ab2:	d073      	beq.n	8008b9c <_scanf_float+0x224>
 8008ab4:	2b79      	cmp	r3, #121	@ 0x79
 8008ab6:	e7f6      	b.n	8008aa6 <_scanf_float+0x12e>
 8008ab8:	6821      	ldr	r1, [r4, #0]
 8008aba:	05c8      	lsls	r0, r1, #23
 8008abc:	d51e      	bpl.n	8008afc <_scanf_float+0x184>
 8008abe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008ac2:	6021      	str	r1, [r4, #0]
 8008ac4:	3701      	adds	r7, #1
 8008ac6:	f1bb 0f00 	cmp.w	fp, #0
 8008aca:	d003      	beq.n	8008ad4 <_scanf_float+0x15c>
 8008acc:	3201      	adds	r2, #1
 8008ace:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ad2:	60a2      	str	r2, [r4, #8]
 8008ad4:	68a3      	ldr	r3, [r4, #8]
 8008ad6:	3b01      	subs	r3, #1
 8008ad8:	60a3      	str	r3, [r4, #8]
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	3301      	adds	r3, #1
 8008ade:	6123      	str	r3, [r4, #16]
 8008ae0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	f8c9 3004 	str.w	r3, [r9, #4]
 8008aec:	f340 8083 	ble.w	8008bf6 <_scanf_float+0x27e>
 8008af0:	f8d9 3000 	ldr.w	r3, [r9]
 8008af4:	3301      	adds	r3, #1
 8008af6:	f8c9 3000 	str.w	r3, [r9]
 8008afa:	e763      	b.n	80089c4 <_scanf_float+0x4c>
 8008afc:	eb1a 0105 	adds.w	r1, sl, r5
 8008b00:	f47f af6e 	bne.w	80089e0 <_scanf_float+0x68>
 8008b04:	460d      	mov	r5, r1
 8008b06:	468a      	mov	sl, r1
 8008b08:	6822      	ldr	r2, [r4, #0]
 8008b0a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b0e:	6022      	str	r2, [r4, #0]
 8008b10:	f806 3b01 	strb.w	r3, [r6], #1
 8008b14:	e7de      	b.n	8008ad4 <_scanf_float+0x15c>
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	0610      	lsls	r0, r2, #24
 8008b1a:	f57f af61 	bpl.w	80089e0 <_scanf_float+0x68>
 8008b1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b22:	6022      	str	r2, [r4, #0]
 8008b24:	e7f4      	b.n	8008b10 <_scanf_float+0x198>
 8008b26:	f1ba 0f00 	cmp.w	sl, #0
 8008b2a:	d10c      	bne.n	8008b46 <_scanf_float+0x1ce>
 8008b2c:	b977      	cbnz	r7, 8008b4c <_scanf_float+0x1d4>
 8008b2e:	6822      	ldr	r2, [r4, #0]
 8008b30:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008b34:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008b38:	d108      	bne.n	8008b4c <_scanf_float+0x1d4>
 8008b3a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008b3e:	f04f 0a01 	mov.w	sl, #1
 8008b42:	6022      	str	r2, [r4, #0]
 8008b44:	e7e4      	b.n	8008b10 <_scanf_float+0x198>
 8008b46:	f1ba 0f02 	cmp.w	sl, #2
 8008b4a:	d051      	beq.n	8008bf0 <_scanf_float+0x278>
 8008b4c:	2d01      	cmp	r5, #1
 8008b4e:	d002      	beq.n	8008b56 <_scanf_float+0x1de>
 8008b50:	2d04      	cmp	r5, #4
 8008b52:	f47f af45 	bne.w	80089e0 <_scanf_float+0x68>
 8008b56:	3501      	adds	r5, #1
 8008b58:	b2ed      	uxtb	r5, r5
 8008b5a:	e7d9      	b.n	8008b10 <_scanf_float+0x198>
 8008b5c:	f1ba 0f01 	cmp.w	sl, #1
 8008b60:	f47f af3e 	bne.w	80089e0 <_scanf_float+0x68>
 8008b64:	f04f 0a02 	mov.w	sl, #2
 8008b68:	e7d2      	b.n	8008b10 <_scanf_float+0x198>
 8008b6a:	b975      	cbnz	r5, 8008b8a <_scanf_float+0x212>
 8008b6c:	2f00      	cmp	r7, #0
 8008b6e:	f47f af38 	bne.w	80089e2 <_scanf_float+0x6a>
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008b78:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008b7c:	f040 80ff 	bne.w	8008d7e <_scanf_float+0x406>
 8008b80:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008b84:	2501      	movs	r5, #1
 8008b86:	6022      	str	r2, [r4, #0]
 8008b88:	e7c2      	b.n	8008b10 <_scanf_float+0x198>
 8008b8a:	2d03      	cmp	r5, #3
 8008b8c:	d0e3      	beq.n	8008b56 <_scanf_float+0x1de>
 8008b8e:	2d05      	cmp	r5, #5
 8008b90:	e7df      	b.n	8008b52 <_scanf_float+0x1da>
 8008b92:	2d02      	cmp	r5, #2
 8008b94:	f47f af24 	bne.w	80089e0 <_scanf_float+0x68>
 8008b98:	2503      	movs	r5, #3
 8008b9a:	e7b9      	b.n	8008b10 <_scanf_float+0x198>
 8008b9c:	2d06      	cmp	r5, #6
 8008b9e:	f47f af1f 	bne.w	80089e0 <_scanf_float+0x68>
 8008ba2:	2507      	movs	r5, #7
 8008ba4:	e7b4      	b.n	8008b10 <_scanf_float+0x198>
 8008ba6:	6822      	ldr	r2, [r4, #0]
 8008ba8:	0591      	lsls	r1, r2, #22
 8008baa:	f57f af19 	bpl.w	80089e0 <_scanf_float+0x68>
 8008bae:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008bb2:	6022      	str	r2, [r4, #0]
 8008bb4:	9702      	str	r7, [sp, #8]
 8008bb6:	e7ab      	b.n	8008b10 <_scanf_float+0x198>
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008bbe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008bc2:	d005      	beq.n	8008bd0 <_scanf_float+0x258>
 8008bc4:	0550      	lsls	r0, r2, #21
 8008bc6:	f57f af0b 	bpl.w	80089e0 <_scanf_float+0x68>
 8008bca:	2f00      	cmp	r7, #0
 8008bcc:	f000 80d7 	beq.w	8008d7e <_scanf_float+0x406>
 8008bd0:	0591      	lsls	r1, r2, #22
 8008bd2:	bf58      	it	pl
 8008bd4:	9902      	ldrpl	r1, [sp, #8]
 8008bd6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bda:	bf58      	it	pl
 8008bdc:	1a79      	subpl	r1, r7, r1
 8008bde:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008be2:	f04f 0700 	mov.w	r7, #0
 8008be6:	bf58      	it	pl
 8008be8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008bec:	6022      	str	r2, [r4, #0]
 8008bee:	e78f      	b.n	8008b10 <_scanf_float+0x198>
 8008bf0:	f04f 0a03 	mov.w	sl, #3
 8008bf4:	e78c      	b.n	8008b10 <_scanf_float+0x198>
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008bfe:	4798      	blx	r3
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f43f aedf 	beq.w	80089c4 <_scanf_float+0x4c>
 8008c06:	e6eb      	b.n	80089e0 <_scanf_float+0x68>
 8008c08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c0c:	464a      	mov	r2, r9
 8008c0e:	4640      	mov	r0, r8
 8008c10:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c14:	4798      	blx	r3
 8008c16:	6923      	ldr	r3, [r4, #16]
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	6123      	str	r3, [r4, #16]
 8008c1c:	e6eb      	b.n	80089f6 <_scanf_float+0x7e>
 8008c1e:	1e6b      	subs	r3, r5, #1
 8008c20:	2b06      	cmp	r3, #6
 8008c22:	d824      	bhi.n	8008c6e <_scanf_float+0x2f6>
 8008c24:	2d02      	cmp	r5, #2
 8008c26:	d836      	bhi.n	8008c96 <_scanf_float+0x31e>
 8008c28:	9b01      	ldr	r3, [sp, #4]
 8008c2a:	429e      	cmp	r6, r3
 8008c2c:	f67f aee7 	bls.w	80089fe <_scanf_float+0x86>
 8008c30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c34:	464a      	mov	r2, r9
 8008c36:	4640      	mov	r0, r8
 8008c38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c3c:	4798      	blx	r3
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	3b01      	subs	r3, #1
 8008c42:	6123      	str	r3, [r4, #16]
 8008c44:	e7f0      	b.n	8008c28 <_scanf_float+0x2b0>
 8008c46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c4a:	464a      	mov	r2, r9
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008c52:	4798      	blx	r3
 8008c54:	6923      	ldr	r3, [r4, #16]
 8008c56:	3b01      	subs	r3, #1
 8008c58:	6123      	str	r3, [r4, #16]
 8008c5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c5e:	fa5f fa8a 	uxtb.w	sl, sl
 8008c62:	f1ba 0f02 	cmp.w	sl, #2
 8008c66:	d1ee      	bne.n	8008c46 <_scanf_float+0x2ce>
 8008c68:	3d03      	subs	r5, #3
 8008c6a:	b2ed      	uxtb	r5, r5
 8008c6c:	1b76      	subs	r6, r6, r5
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	05da      	lsls	r2, r3, #23
 8008c72:	d530      	bpl.n	8008cd6 <_scanf_float+0x35e>
 8008c74:	055b      	lsls	r3, r3, #21
 8008c76:	d511      	bpl.n	8008c9c <_scanf_float+0x324>
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	429e      	cmp	r6, r3
 8008c7c:	f67f aebf 	bls.w	80089fe <_scanf_float+0x86>
 8008c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c84:	464a      	mov	r2, r9
 8008c86:	4640      	mov	r0, r8
 8008c88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c8c:	4798      	blx	r3
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	3b01      	subs	r3, #1
 8008c92:	6123      	str	r3, [r4, #16]
 8008c94:	e7f0      	b.n	8008c78 <_scanf_float+0x300>
 8008c96:	46aa      	mov	sl, r5
 8008c98:	46b3      	mov	fp, r6
 8008c9a:	e7de      	b.n	8008c5a <_scanf_float+0x2e2>
 8008c9c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ca0:	6923      	ldr	r3, [r4, #16]
 8008ca2:	2965      	cmp	r1, #101	@ 0x65
 8008ca4:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ca8:	f106 35ff 	add.w	r5, r6, #4294967295
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	d00c      	beq.n	8008cca <_scanf_float+0x352>
 8008cb0:	2945      	cmp	r1, #69	@ 0x45
 8008cb2:	d00a      	beq.n	8008cca <_scanf_float+0x352>
 8008cb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cb8:	464a      	mov	r2, r9
 8008cba:	4640      	mov	r0, r8
 8008cbc:	4798      	blx	r3
 8008cbe:	6923      	ldr	r3, [r4, #16]
 8008cc0:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	1eb5      	subs	r5, r6, #2
 8008cc8:	6123      	str	r3, [r4, #16]
 8008cca:	464a      	mov	r2, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cd2:	4798      	blx	r3
 8008cd4:	462e      	mov	r6, r5
 8008cd6:	6822      	ldr	r2, [r4, #0]
 8008cd8:	f012 0210 	ands.w	r2, r2, #16
 8008cdc:	d001      	beq.n	8008ce2 <_scanf_float+0x36a>
 8008cde:	2000      	movs	r0, #0
 8008ce0:	e68e      	b.n	8008a00 <_scanf_float+0x88>
 8008ce2:	7032      	strb	r2, [r6, #0]
 8008ce4:	6823      	ldr	r3, [r4, #0]
 8008ce6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008cea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cee:	d125      	bne.n	8008d3c <_scanf_float+0x3c4>
 8008cf0:	9b02      	ldr	r3, [sp, #8]
 8008cf2:	429f      	cmp	r7, r3
 8008cf4:	d00a      	beq.n	8008d0c <_scanf_float+0x394>
 8008cf6:	1bda      	subs	r2, r3, r7
 8008cf8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008cfc:	429e      	cmp	r6, r3
 8008cfe:	bf28      	it	cs
 8008d00:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008d04:	4630      	mov	r0, r6
 8008d06:	491f      	ldr	r1, [pc, #124]	@ (8008d84 <_scanf_float+0x40c>)
 8008d08:	f000 f972 	bl	8008ff0 <siprintf>
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4640      	mov	r0, r8
 8008d10:	9901      	ldr	r1, [sp, #4]
 8008d12:	f002 fcfd 	bl	800b710 <_strtod_r>
 8008d16:	9b03      	ldr	r3, [sp, #12]
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f015 0f02 	tst.w	r5, #2
 8008d20:	4606      	mov	r6, r0
 8008d22:	460f      	mov	r7, r1
 8008d24:	f103 0204 	add.w	r2, r3, #4
 8008d28:	d015      	beq.n	8008d56 <_scanf_float+0x3de>
 8008d2a:	9903      	ldr	r1, [sp, #12]
 8008d2c:	600a      	str	r2, [r1, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	e9c3 6700 	strd	r6, r7, [r3]
 8008d34:	68e3      	ldr	r3, [r4, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60e3      	str	r3, [r4, #12]
 8008d3a:	e7d0      	b.n	8008cde <_scanf_float+0x366>
 8008d3c:	9b04      	ldr	r3, [sp, #16]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0e4      	beq.n	8008d0c <_scanf_float+0x394>
 8008d42:	9905      	ldr	r1, [sp, #20]
 8008d44:	230a      	movs	r3, #10
 8008d46:	4640      	mov	r0, r8
 8008d48:	3101      	adds	r1, #1
 8008d4a:	f002 fd61 	bl	800b810 <_strtol_r>
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	9e05      	ldr	r6, [sp, #20]
 8008d52:	1ac2      	subs	r2, r0, r3
 8008d54:	e7d0      	b.n	8008cf8 <_scanf_float+0x380>
 8008d56:	076d      	lsls	r5, r5, #29
 8008d58:	d4e7      	bmi.n	8008d2a <_scanf_float+0x3b2>
 8008d5a:	9d03      	ldr	r5, [sp, #12]
 8008d5c:	602a      	str	r2, [r5, #0]
 8008d5e:	681d      	ldr	r5, [r3, #0]
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	f7f7 fe6a 	bl	8000a3c <__aeabi_dcmpun>
 8008d68:	b120      	cbz	r0, 8008d74 <_scanf_float+0x3fc>
 8008d6a:	4807      	ldr	r0, [pc, #28]	@ (8008d88 <_scanf_float+0x410>)
 8008d6c:	f000 fad6 	bl	800931c <nanf>
 8008d70:	6028      	str	r0, [r5, #0]
 8008d72:	e7df      	b.n	8008d34 <_scanf_float+0x3bc>
 8008d74:	4630      	mov	r0, r6
 8008d76:	4639      	mov	r1, r7
 8008d78:	f7f7 febe 	bl	8000af8 <__aeabi_d2f>
 8008d7c:	e7f8      	b.n	8008d70 <_scanf_float+0x3f8>
 8008d7e:	2700      	movs	r7, #0
 8008d80:	e633      	b.n	80089ea <_scanf_float+0x72>
 8008d82:	bf00      	nop
 8008d84:	0800e08e 	.word	0x0800e08e
 8008d88:	0800e1cf 	.word	0x0800e1cf

08008d8c <std>:
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	4604      	mov	r4, r0
 8008d92:	e9c0 3300 	strd	r3, r3, [r0]
 8008d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d9a:	6083      	str	r3, [r0, #8]
 8008d9c:	8181      	strh	r1, [r0, #12]
 8008d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008da0:	81c2      	strh	r2, [r0, #14]
 8008da2:	6183      	str	r3, [r0, #24]
 8008da4:	4619      	mov	r1, r3
 8008da6:	2208      	movs	r2, #8
 8008da8:	305c      	adds	r0, #92	@ 0x5c
 8008daa:	f000 fa1b 	bl	80091e4 <memset>
 8008dae:	4b0d      	ldr	r3, [pc, #52]	@ (8008de4 <std+0x58>)
 8008db0:	6224      	str	r4, [r4, #32]
 8008db2:	6263      	str	r3, [r4, #36]	@ 0x24
 8008db4:	4b0c      	ldr	r3, [pc, #48]	@ (8008de8 <std+0x5c>)
 8008db6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008db8:	4b0c      	ldr	r3, [pc, #48]	@ (8008dec <std+0x60>)
 8008dba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8008df0 <std+0x64>)
 8008dbe:	6323      	str	r3, [r4, #48]	@ 0x30
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008df4 <std+0x68>)
 8008dc2:	429c      	cmp	r4, r3
 8008dc4:	d006      	beq.n	8008dd4 <std+0x48>
 8008dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008dca:	4294      	cmp	r4, r2
 8008dcc:	d002      	beq.n	8008dd4 <std+0x48>
 8008dce:	33d0      	adds	r3, #208	@ 0xd0
 8008dd0:	429c      	cmp	r4, r3
 8008dd2:	d105      	bne.n	8008de0 <std+0x54>
 8008dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ddc:	f000 ba7e 	b.w	80092dc <__retarget_lock_init_recursive>
 8008de0:	bd10      	pop	{r4, pc}
 8008de2:	bf00      	nop
 8008de4:	08009035 	.word	0x08009035
 8008de8:	08009057 	.word	0x08009057
 8008dec:	0800908f 	.word	0x0800908f
 8008df0:	080090b3 	.word	0x080090b3
 8008df4:	20001234 	.word	0x20001234

08008df8 <stdio_exit_handler>:
 8008df8:	4a02      	ldr	r2, [pc, #8]	@ (8008e04 <stdio_exit_handler+0xc>)
 8008dfa:	4903      	ldr	r1, [pc, #12]	@ (8008e08 <stdio_exit_handler+0x10>)
 8008dfc:	4803      	ldr	r0, [pc, #12]	@ (8008e0c <stdio_exit_handler+0x14>)
 8008dfe:	f000 b869 	b.w	8008ed4 <_fwalk_sglue>
 8008e02:	bf00      	nop
 8008e04:	20000024 	.word	0x20000024
 8008e08:	0800be45 	.word	0x0800be45
 8008e0c:	20000034 	.word	0x20000034

08008e10 <cleanup_stdio>:
 8008e10:	6841      	ldr	r1, [r0, #4]
 8008e12:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <cleanup_stdio+0x34>)
 8008e14:	b510      	push	{r4, lr}
 8008e16:	4299      	cmp	r1, r3
 8008e18:	4604      	mov	r4, r0
 8008e1a:	d001      	beq.n	8008e20 <cleanup_stdio+0x10>
 8008e1c:	f003 f812 	bl	800be44 <_fflush_r>
 8008e20:	68a1      	ldr	r1, [r4, #8]
 8008e22:	4b09      	ldr	r3, [pc, #36]	@ (8008e48 <cleanup_stdio+0x38>)
 8008e24:	4299      	cmp	r1, r3
 8008e26:	d002      	beq.n	8008e2e <cleanup_stdio+0x1e>
 8008e28:	4620      	mov	r0, r4
 8008e2a:	f003 f80b 	bl	800be44 <_fflush_r>
 8008e2e:	68e1      	ldr	r1, [r4, #12]
 8008e30:	4b06      	ldr	r3, [pc, #24]	@ (8008e4c <cleanup_stdio+0x3c>)
 8008e32:	4299      	cmp	r1, r3
 8008e34:	d004      	beq.n	8008e40 <cleanup_stdio+0x30>
 8008e36:	4620      	mov	r0, r4
 8008e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e3c:	f003 b802 	b.w	800be44 <_fflush_r>
 8008e40:	bd10      	pop	{r4, pc}
 8008e42:	bf00      	nop
 8008e44:	20001234 	.word	0x20001234
 8008e48:	2000129c 	.word	0x2000129c
 8008e4c:	20001304 	.word	0x20001304

08008e50 <global_stdio_init.part.0>:
 8008e50:	b510      	push	{r4, lr}
 8008e52:	4b0b      	ldr	r3, [pc, #44]	@ (8008e80 <global_stdio_init.part.0+0x30>)
 8008e54:	4c0b      	ldr	r4, [pc, #44]	@ (8008e84 <global_stdio_init.part.0+0x34>)
 8008e56:	4a0c      	ldr	r2, [pc, #48]	@ (8008e88 <global_stdio_init.part.0+0x38>)
 8008e58:	4620      	mov	r0, r4
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	2104      	movs	r1, #4
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f7ff ff94 	bl	8008d8c <std>
 8008e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008e68:	2201      	movs	r2, #1
 8008e6a:	2109      	movs	r1, #9
 8008e6c:	f7ff ff8e 	bl	8008d8c <std>
 8008e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008e74:	2202      	movs	r2, #2
 8008e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7a:	2112      	movs	r1, #18
 8008e7c:	f7ff bf86 	b.w	8008d8c <std>
 8008e80:	2000136c 	.word	0x2000136c
 8008e84:	20001234 	.word	0x20001234
 8008e88:	08008df9 	.word	0x08008df9

08008e8c <__sfp_lock_acquire>:
 8008e8c:	4801      	ldr	r0, [pc, #4]	@ (8008e94 <__sfp_lock_acquire+0x8>)
 8008e8e:	f000 ba26 	b.w	80092de <__retarget_lock_acquire_recursive>
 8008e92:	bf00      	nop
 8008e94:	20001375 	.word	0x20001375

08008e98 <__sfp_lock_release>:
 8008e98:	4801      	ldr	r0, [pc, #4]	@ (8008ea0 <__sfp_lock_release+0x8>)
 8008e9a:	f000 ba21 	b.w	80092e0 <__retarget_lock_release_recursive>
 8008e9e:	bf00      	nop
 8008ea0:	20001375 	.word	0x20001375

08008ea4 <__sinit>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4604      	mov	r4, r0
 8008ea8:	f7ff fff0 	bl	8008e8c <__sfp_lock_acquire>
 8008eac:	6a23      	ldr	r3, [r4, #32]
 8008eae:	b11b      	cbz	r3, 8008eb8 <__sinit+0x14>
 8008eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008eb4:	f7ff bff0 	b.w	8008e98 <__sfp_lock_release>
 8008eb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ecc <__sinit+0x28>)
 8008eba:	6223      	str	r3, [r4, #32]
 8008ebc:	4b04      	ldr	r3, [pc, #16]	@ (8008ed0 <__sinit+0x2c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1f5      	bne.n	8008eb0 <__sinit+0xc>
 8008ec4:	f7ff ffc4 	bl	8008e50 <global_stdio_init.part.0>
 8008ec8:	e7f2      	b.n	8008eb0 <__sinit+0xc>
 8008eca:	bf00      	nop
 8008ecc:	08008e11 	.word	0x08008e11
 8008ed0:	2000136c 	.word	0x2000136c

08008ed4 <_fwalk_sglue>:
 8008ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed8:	4607      	mov	r7, r0
 8008eda:	4688      	mov	r8, r1
 8008edc:	4614      	mov	r4, r2
 8008ede:	2600      	movs	r6, #0
 8008ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ee8:	d505      	bpl.n	8008ef6 <_fwalk_sglue+0x22>
 8008eea:	6824      	ldr	r4, [r4, #0]
 8008eec:	2c00      	cmp	r4, #0
 8008eee:	d1f7      	bne.n	8008ee0 <_fwalk_sglue+0xc>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef6:	89ab      	ldrh	r3, [r5, #12]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d907      	bls.n	8008f0c <_fwalk_sglue+0x38>
 8008efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f00:	3301      	adds	r3, #1
 8008f02:	d003      	beq.n	8008f0c <_fwalk_sglue+0x38>
 8008f04:	4629      	mov	r1, r5
 8008f06:	4638      	mov	r0, r7
 8008f08:	47c0      	blx	r8
 8008f0a:	4306      	orrs	r6, r0
 8008f0c:	3568      	adds	r5, #104	@ 0x68
 8008f0e:	e7e9      	b.n	8008ee4 <_fwalk_sglue+0x10>

08008f10 <iprintf>:
 8008f10:	b40f      	push	{r0, r1, r2, r3}
 8008f12:	b507      	push	{r0, r1, r2, lr}
 8008f14:	4906      	ldr	r1, [pc, #24]	@ (8008f30 <iprintf+0x20>)
 8008f16:	ab04      	add	r3, sp, #16
 8008f18:	6808      	ldr	r0, [r1, #0]
 8008f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f1e:	6881      	ldr	r1, [r0, #8]
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	f002 fdf7 	bl	800bb14 <_vfiprintf_r>
 8008f26:	b003      	add	sp, #12
 8008f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f2c:	b004      	add	sp, #16
 8008f2e:	4770      	bx	lr
 8008f30:	20000030 	.word	0x20000030

08008f34 <_puts_r>:
 8008f34:	6a03      	ldr	r3, [r0, #32]
 8008f36:	b570      	push	{r4, r5, r6, lr}
 8008f38:	4605      	mov	r5, r0
 8008f3a:	460e      	mov	r6, r1
 8008f3c:	6884      	ldr	r4, [r0, #8]
 8008f3e:	b90b      	cbnz	r3, 8008f44 <_puts_r+0x10>
 8008f40:	f7ff ffb0 	bl	8008ea4 <__sinit>
 8008f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f46:	07db      	lsls	r3, r3, #31
 8008f48:	d405      	bmi.n	8008f56 <_puts_r+0x22>
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	0598      	lsls	r0, r3, #22
 8008f4e:	d402      	bmi.n	8008f56 <_puts_r+0x22>
 8008f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f52:	f000 f9c4 	bl	80092de <__retarget_lock_acquire_recursive>
 8008f56:	89a3      	ldrh	r3, [r4, #12]
 8008f58:	0719      	lsls	r1, r3, #28
 8008f5a:	d502      	bpl.n	8008f62 <_puts_r+0x2e>
 8008f5c:	6923      	ldr	r3, [r4, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d135      	bne.n	8008fce <_puts_r+0x9a>
 8008f62:	4621      	mov	r1, r4
 8008f64:	4628      	mov	r0, r5
 8008f66:	f000 f8e7 	bl	8009138 <__swsetup_r>
 8008f6a:	b380      	cbz	r0, 8008fce <_puts_r+0x9a>
 8008f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8008f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f72:	07da      	lsls	r2, r3, #31
 8008f74:	d405      	bmi.n	8008f82 <_puts_r+0x4e>
 8008f76:	89a3      	ldrh	r3, [r4, #12]
 8008f78:	059b      	lsls	r3, r3, #22
 8008f7a:	d402      	bmi.n	8008f82 <_puts_r+0x4e>
 8008f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f7e:	f000 f9af 	bl	80092e0 <__retarget_lock_release_recursive>
 8008f82:	4628      	mov	r0, r5
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	da04      	bge.n	8008f94 <_puts_r+0x60>
 8008f8a:	69a2      	ldr	r2, [r4, #24]
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	dc17      	bgt.n	8008fc0 <_puts_r+0x8c>
 8008f90:	290a      	cmp	r1, #10
 8008f92:	d015      	beq.n	8008fc0 <_puts_r+0x8c>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	7019      	strb	r1, [r3, #0]
 8008f9c:	68a3      	ldr	r3, [r4, #8]
 8008f9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	60a3      	str	r3, [r4, #8]
 8008fa6:	2900      	cmp	r1, #0
 8008fa8:	d1ed      	bne.n	8008f86 <_puts_r+0x52>
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	da11      	bge.n	8008fd2 <_puts_r+0x9e>
 8008fae:	4622      	mov	r2, r4
 8008fb0:	210a      	movs	r1, #10
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f881 	bl	80090ba <__swbuf_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d0d7      	beq.n	8008f6c <_puts_r+0x38>
 8008fbc:	250a      	movs	r5, #10
 8008fbe:	e7d7      	b.n	8008f70 <_puts_r+0x3c>
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f000 f879 	bl	80090ba <__swbuf_r>
 8008fc8:	3001      	adds	r0, #1
 8008fca:	d1e7      	bne.n	8008f9c <_puts_r+0x68>
 8008fcc:	e7ce      	b.n	8008f6c <_puts_r+0x38>
 8008fce:	3e01      	subs	r6, #1
 8008fd0:	e7e4      	b.n	8008f9c <_puts_r+0x68>
 8008fd2:	6823      	ldr	r3, [r4, #0]
 8008fd4:	1c5a      	adds	r2, r3, #1
 8008fd6:	6022      	str	r2, [r4, #0]
 8008fd8:	220a      	movs	r2, #10
 8008fda:	701a      	strb	r2, [r3, #0]
 8008fdc:	e7ee      	b.n	8008fbc <_puts_r+0x88>
	...

08008fe0 <puts>:
 8008fe0:	4b02      	ldr	r3, [pc, #8]	@ (8008fec <puts+0xc>)
 8008fe2:	4601      	mov	r1, r0
 8008fe4:	6818      	ldr	r0, [r3, #0]
 8008fe6:	f7ff bfa5 	b.w	8008f34 <_puts_r>
 8008fea:	bf00      	nop
 8008fec:	20000030 	.word	0x20000030

08008ff0 <siprintf>:
 8008ff0:	b40e      	push	{r1, r2, r3}
 8008ff2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ff6:	b510      	push	{r4, lr}
 8008ff8:	2400      	movs	r4, #0
 8008ffa:	b09d      	sub	sp, #116	@ 0x74
 8008ffc:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008ffe:	9002      	str	r0, [sp, #8]
 8009000:	9006      	str	r0, [sp, #24]
 8009002:	9107      	str	r1, [sp, #28]
 8009004:	9104      	str	r1, [sp, #16]
 8009006:	4809      	ldr	r0, [pc, #36]	@ (800902c <siprintf+0x3c>)
 8009008:	4909      	ldr	r1, [pc, #36]	@ (8009030 <siprintf+0x40>)
 800900a:	f853 2b04 	ldr.w	r2, [r3], #4
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	6800      	ldr	r0, [r0, #0]
 8009012:	a902      	add	r1, sp, #8
 8009014:	9301      	str	r3, [sp, #4]
 8009016:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009018:	f002 fc58 	bl	800b8cc <_svfiprintf_r>
 800901c:	9b02      	ldr	r3, [sp, #8]
 800901e:	701c      	strb	r4, [r3, #0]
 8009020:	b01d      	add	sp, #116	@ 0x74
 8009022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009026:	b003      	add	sp, #12
 8009028:	4770      	bx	lr
 800902a:	bf00      	nop
 800902c:	20000030 	.word	0x20000030
 8009030:	ffff0208 	.word	0xffff0208

08009034 <__sread>:
 8009034:	b510      	push	{r4, lr}
 8009036:	460c      	mov	r4, r1
 8009038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800903c:	f000 f900 	bl	8009240 <_read_r>
 8009040:	2800      	cmp	r0, #0
 8009042:	bfab      	itete	ge
 8009044:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009046:	89a3      	ldrhlt	r3, [r4, #12]
 8009048:	181b      	addge	r3, r3, r0
 800904a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800904e:	bfac      	ite	ge
 8009050:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009052:	81a3      	strhlt	r3, [r4, #12]
 8009054:	bd10      	pop	{r4, pc}

08009056 <__swrite>:
 8009056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800905a:	461f      	mov	r7, r3
 800905c:	898b      	ldrh	r3, [r1, #12]
 800905e:	4605      	mov	r5, r0
 8009060:	05db      	lsls	r3, r3, #23
 8009062:	460c      	mov	r4, r1
 8009064:	4616      	mov	r6, r2
 8009066:	d505      	bpl.n	8009074 <__swrite+0x1e>
 8009068:	2302      	movs	r3, #2
 800906a:	2200      	movs	r2, #0
 800906c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009070:	f000 f8d4 	bl	800921c <_lseek_r>
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	4632      	mov	r2, r6
 8009078:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800907c:	81a3      	strh	r3, [r4, #12]
 800907e:	4628      	mov	r0, r5
 8009080:	463b      	mov	r3, r7
 8009082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800908a:	f000 b8eb 	b.w	8009264 <_write_r>

0800908e <__sseek>:
 800908e:	b510      	push	{r4, lr}
 8009090:	460c      	mov	r4, r1
 8009092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009096:	f000 f8c1 	bl	800921c <_lseek_r>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	bf15      	itete	ne
 80090a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80090a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80090a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80090aa:	81a3      	strheq	r3, [r4, #12]
 80090ac:	bf18      	it	ne
 80090ae:	81a3      	strhne	r3, [r4, #12]
 80090b0:	bd10      	pop	{r4, pc}

080090b2 <__sclose>:
 80090b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b6:	f000 b8a1 	b.w	80091fc <_close_r>

080090ba <__swbuf_r>:
 80090ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090bc:	460e      	mov	r6, r1
 80090be:	4614      	mov	r4, r2
 80090c0:	4605      	mov	r5, r0
 80090c2:	b118      	cbz	r0, 80090cc <__swbuf_r+0x12>
 80090c4:	6a03      	ldr	r3, [r0, #32]
 80090c6:	b90b      	cbnz	r3, 80090cc <__swbuf_r+0x12>
 80090c8:	f7ff feec 	bl	8008ea4 <__sinit>
 80090cc:	69a3      	ldr	r3, [r4, #24]
 80090ce:	60a3      	str	r3, [r4, #8]
 80090d0:	89a3      	ldrh	r3, [r4, #12]
 80090d2:	071a      	lsls	r2, r3, #28
 80090d4:	d501      	bpl.n	80090da <__swbuf_r+0x20>
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	b943      	cbnz	r3, 80090ec <__swbuf_r+0x32>
 80090da:	4621      	mov	r1, r4
 80090dc:	4628      	mov	r0, r5
 80090de:	f000 f82b 	bl	8009138 <__swsetup_r>
 80090e2:	b118      	cbz	r0, 80090ec <__swbuf_r+0x32>
 80090e4:	f04f 37ff 	mov.w	r7, #4294967295
 80090e8:	4638      	mov	r0, r7
 80090ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	6922      	ldr	r2, [r4, #16]
 80090f0:	b2f6      	uxtb	r6, r6
 80090f2:	1a98      	subs	r0, r3, r2
 80090f4:	6963      	ldr	r3, [r4, #20]
 80090f6:	4637      	mov	r7, r6
 80090f8:	4283      	cmp	r3, r0
 80090fa:	dc05      	bgt.n	8009108 <__swbuf_r+0x4e>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4628      	mov	r0, r5
 8009100:	f002 fea0 	bl	800be44 <_fflush_r>
 8009104:	2800      	cmp	r0, #0
 8009106:	d1ed      	bne.n	80090e4 <__swbuf_r+0x2a>
 8009108:	68a3      	ldr	r3, [r4, #8]
 800910a:	3b01      	subs	r3, #1
 800910c:	60a3      	str	r3, [r4, #8]
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	1c5a      	adds	r2, r3, #1
 8009112:	6022      	str	r2, [r4, #0]
 8009114:	701e      	strb	r6, [r3, #0]
 8009116:	6962      	ldr	r2, [r4, #20]
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	429a      	cmp	r2, r3
 800911c:	d004      	beq.n	8009128 <__swbuf_r+0x6e>
 800911e:	89a3      	ldrh	r3, [r4, #12]
 8009120:	07db      	lsls	r3, r3, #31
 8009122:	d5e1      	bpl.n	80090e8 <__swbuf_r+0x2e>
 8009124:	2e0a      	cmp	r6, #10
 8009126:	d1df      	bne.n	80090e8 <__swbuf_r+0x2e>
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f002 fe8a 	bl	800be44 <_fflush_r>
 8009130:	2800      	cmp	r0, #0
 8009132:	d0d9      	beq.n	80090e8 <__swbuf_r+0x2e>
 8009134:	e7d6      	b.n	80090e4 <__swbuf_r+0x2a>
	...

08009138 <__swsetup_r>:
 8009138:	b538      	push	{r3, r4, r5, lr}
 800913a:	4b29      	ldr	r3, [pc, #164]	@ (80091e0 <__swsetup_r+0xa8>)
 800913c:	4605      	mov	r5, r0
 800913e:	6818      	ldr	r0, [r3, #0]
 8009140:	460c      	mov	r4, r1
 8009142:	b118      	cbz	r0, 800914c <__swsetup_r+0x14>
 8009144:	6a03      	ldr	r3, [r0, #32]
 8009146:	b90b      	cbnz	r3, 800914c <__swsetup_r+0x14>
 8009148:	f7ff feac 	bl	8008ea4 <__sinit>
 800914c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009150:	0719      	lsls	r1, r3, #28
 8009152:	d422      	bmi.n	800919a <__swsetup_r+0x62>
 8009154:	06da      	lsls	r2, r3, #27
 8009156:	d407      	bmi.n	8009168 <__swsetup_r+0x30>
 8009158:	2209      	movs	r2, #9
 800915a:	602a      	str	r2, [r5, #0]
 800915c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	e033      	b.n	80091d0 <__swsetup_r+0x98>
 8009168:	0758      	lsls	r0, r3, #29
 800916a:	d512      	bpl.n	8009192 <__swsetup_r+0x5a>
 800916c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800916e:	b141      	cbz	r1, 8009182 <__swsetup_r+0x4a>
 8009170:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009174:	4299      	cmp	r1, r3
 8009176:	d002      	beq.n	800917e <__swsetup_r+0x46>
 8009178:	4628      	mov	r0, r5
 800917a:	f000 ff31 	bl	8009fe0 <_free_r>
 800917e:	2300      	movs	r3, #0
 8009180:	6363      	str	r3, [r4, #52]	@ 0x34
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	2300      	movs	r3, #0
 800918c:	6063      	str	r3, [r4, #4]
 800918e:	6923      	ldr	r3, [r4, #16]
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f043 0308 	orr.w	r3, r3, #8
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	6923      	ldr	r3, [r4, #16]
 800919c:	b94b      	cbnz	r3, 80091b2 <__swsetup_r+0x7a>
 800919e:	89a3      	ldrh	r3, [r4, #12]
 80091a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80091a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a8:	d003      	beq.n	80091b2 <__swsetup_r+0x7a>
 80091aa:	4621      	mov	r1, r4
 80091ac:	4628      	mov	r0, r5
 80091ae:	f002 fe96 	bl	800bede <__smakebuf_r>
 80091b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b6:	f013 0201 	ands.w	r2, r3, #1
 80091ba:	d00a      	beq.n	80091d2 <__swsetup_r+0x9a>
 80091bc:	2200      	movs	r2, #0
 80091be:	60a2      	str	r2, [r4, #8]
 80091c0:	6962      	ldr	r2, [r4, #20]
 80091c2:	4252      	negs	r2, r2
 80091c4:	61a2      	str	r2, [r4, #24]
 80091c6:	6922      	ldr	r2, [r4, #16]
 80091c8:	b942      	cbnz	r2, 80091dc <__swsetup_r+0xa4>
 80091ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80091ce:	d1c5      	bne.n	800915c <__swsetup_r+0x24>
 80091d0:	bd38      	pop	{r3, r4, r5, pc}
 80091d2:	0799      	lsls	r1, r3, #30
 80091d4:	bf58      	it	pl
 80091d6:	6962      	ldrpl	r2, [r4, #20]
 80091d8:	60a2      	str	r2, [r4, #8]
 80091da:	e7f4      	b.n	80091c6 <__swsetup_r+0x8e>
 80091dc:	2000      	movs	r0, #0
 80091de:	e7f7      	b.n	80091d0 <__swsetup_r+0x98>
 80091e0:	20000030 	.word	0x20000030

080091e4 <memset>:
 80091e4:	4603      	mov	r3, r0
 80091e6:	4402      	add	r2, r0
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d100      	bne.n	80091ee <memset+0xa>
 80091ec:	4770      	bx	lr
 80091ee:	f803 1b01 	strb.w	r1, [r3], #1
 80091f2:	e7f9      	b.n	80091e8 <memset+0x4>

080091f4 <_localeconv_r>:
 80091f4:	4800      	ldr	r0, [pc, #0]	@ (80091f8 <_localeconv_r+0x4>)
 80091f6:	4770      	bx	lr
 80091f8:	20000170 	.word	0x20000170

080091fc <_close_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	2300      	movs	r3, #0
 8009200:	4d05      	ldr	r5, [pc, #20]	@ (8009218 <_close_r+0x1c>)
 8009202:	4604      	mov	r4, r0
 8009204:	4608      	mov	r0, r1
 8009206:	602b      	str	r3, [r5, #0]
 8009208:	f7f9 f8dd 	bl	80023c6 <_close>
 800920c:	1c43      	adds	r3, r0, #1
 800920e:	d102      	bne.n	8009216 <_close_r+0x1a>
 8009210:	682b      	ldr	r3, [r5, #0]
 8009212:	b103      	cbz	r3, 8009216 <_close_r+0x1a>
 8009214:	6023      	str	r3, [r4, #0]
 8009216:	bd38      	pop	{r3, r4, r5, pc}
 8009218:	20001370 	.word	0x20001370

0800921c <_lseek_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	4611      	mov	r1, r2
 8009224:	2200      	movs	r2, #0
 8009226:	4d05      	ldr	r5, [pc, #20]	@ (800923c <_lseek_r+0x20>)
 8009228:	602a      	str	r2, [r5, #0]
 800922a:	461a      	mov	r2, r3
 800922c:	f7f9 f8ef 	bl	800240e <_lseek>
 8009230:	1c43      	adds	r3, r0, #1
 8009232:	d102      	bne.n	800923a <_lseek_r+0x1e>
 8009234:	682b      	ldr	r3, [r5, #0]
 8009236:	b103      	cbz	r3, 800923a <_lseek_r+0x1e>
 8009238:	6023      	str	r3, [r4, #0]
 800923a:	bd38      	pop	{r3, r4, r5, pc}
 800923c:	20001370 	.word	0x20001370

08009240 <_read_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	4611      	mov	r1, r2
 8009248:	2200      	movs	r2, #0
 800924a:	4d05      	ldr	r5, [pc, #20]	@ (8009260 <_read_r+0x20>)
 800924c:	602a      	str	r2, [r5, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	f7f9 f880 	bl	8002354 <_read>
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	d102      	bne.n	800925e <_read_r+0x1e>
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	b103      	cbz	r3, 800925e <_read_r+0x1e>
 800925c:	6023      	str	r3, [r4, #0]
 800925e:	bd38      	pop	{r3, r4, r5, pc}
 8009260:	20001370 	.word	0x20001370

08009264 <_write_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	2200      	movs	r2, #0
 800926e:	4d05      	ldr	r5, [pc, #20]	@ (8009284 <_write_r+0x20>)
 8009270:	602a      	str	r2, [r5, #0]
 8009272:	461a      	mov	r2, r3
 8009274:	f7f9 f88b 	bl	800238e <_write>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d102      	bne.n	8009282 <_write_r+0x1e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	b103      	cbz	r3, 8009282 <_write_r+0x1e>
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	bd38      	pop	{r3, r4, r5, pc}
 8009284:	20001370 	.word	0x20001370

08009288 <__errno>:
 8009288:	4b01      	ldr	r3, [pc, #4]	@ (8009290 <__errno+0x8>)
 800928a:	6818      	ldr	r0, [r3, #0]
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	20000030 	.word	0x20000030

08009294 <__libc_init_array>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	2600      	movs	r6, #0
 8009298:	4d0c      	ldr	r5, [pc, #48]	@ (80092cc <__libc_init_array+0x38>)
 800929a:	4c0d      	ldr	r4, [pc, #52]	@ (80092d0 <__libc_init_array+0x3c>)
 800929c:	1b64      	subs	r4, r4, r5
 800929e:	10a4      	asrs	r4, r4, #2
 80092a0:	42a6      	cmp	r6, r4
 80092a2:	d109      	bne.n	80092b8 <__libc_init_array+0x24>
 80092a4:	f003 ff28 	bl	800d0f8 <_init>
 80092a8:	2600      	movs	r6, #0
 80092aa:	4d0a      	ldr	r5, [pc, #40]	@ (80092d4 <__libc_init_array+0x40>)
 80092ac:	4c0a      	ldr	r4, [pc, #40]	@ (80092d8 <__libc_init_array+0x44>)
 80092ae:	1b64      	subs	r4, r4, r5
 80092b0:	10a4      	asrs	r4, r4, #2
 80092b2:	42a6      	cmp	r6, r4
 80092b4:	d105      	bne.n	80092c2 <__libc_init_array+0x2e>
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092bc:	4798      	blx	r3
 80092be:	3601      	adds	r6, #1
 80092c0:	e7ee      	b.n	80092a0 <__libc_init_array+0xc>
 80092c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c6:	4798      	blx	r3
 80092c8:	3601      	adds	r6, #1
 80092ca:	e7f2      	b.n	80092b2 <__libc_init_array+0x1e>
 80092cc:	0800e4c0 	.word	0x0800e4c0
 80092d0:	0800e4c0 	.word	0x0800e4c0
 80092d4:	0800e4c0 	.word	0x0800e4c0
 80092d8:	0800e4c4 	.word	0x0800e4c4

080092dc <__retarget_lock_init_recursive>:
 80092dc:	4770      	bx	lr

080092de <__retarget_lock_acquire_recursive>:
 80092de:	4770      	bx	lr

080092e0 <__retarget_lock_release_recursive>:
 80092e0:	4770      	bx	lr

080092e2 <memchr>:
 80092e2:	4603      	mov	r3, r0
 80092e4:	b510      	push	{r4, lr}
 80092e6:	b2c9      	uxtb	r1, r1
 80092e8:	4402      	add	r2, r0
 80092ea:	4293      	cmp	r3, r2
 80092ec:	4618      	mov	r0, r3
 80092ee:	d101      	bne.n	80092f4 <memchr+0x12>
 80092f0:	2000      	movs	r0, #0
 80092f2:	e003      	b.n	80092fc <memchr+0x1a>
 80092f4:	7804      	ldrb	r4, [r0, #0]
 80092f6:	3301      	adds	r3, #1
 80092f8:	428c      	cmp	r4, r1
 80092fa:	d1f6      	bne.n	80092ea <memchr+0x8>
 80092fc:	bd10      	pop	{r4, pc}

080092fe <memcpy>:
 80092fe:	440a      	add	r2, r1
 8009300:	4291      	cmp	r1, r2
 8009302:	f100 33ff 	add.w	r3, r0, #4294967295
 8009306:	d100      	bne.n	800930a <memcpy+0xc>
 8009308:	4770      	bx	lr
 800930a:	b510      	push	{r4, lr}
 800930c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009310:	4291      	cmp	r1, r2
 8009312:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009316:	d1f9      	bne.n	800930c <memcpy+0xe>
 8009318:	bd10      	pop	{r4, pc}
	...

0800931c <nanf>:
 800931c:	4800      	ldr	r0, [pc, #0]	@ (8009320 <nanf+0x4>)
 800931e:	4770      	bx	lr
 8009320:	7fc00000 	.word	0x7fc00000

08009324 <quorem>:
 8009324:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009328:	6903      	ldr	r3, [r0, #16]
 800932a:	690c      	ldr	r4, [r1, #16]
 800932c:	4607      	mov	r7, r0
 800932e:	42a3      	cmp	r3, r4
 8009330:	db7e      	blt.n	8009430 <quorem+0x10c>
 8009332:	3c01      	subs	r4, #1
 8009334:	00a3      	lsls	r3, r4, #2
 8009336:	f100 0514 	add.w	r5, r0, #20
 800933a:	f101 0814 	add.w	r8, r1, #20
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009344:	9301      	str	r3, [sp, #4]
 8009346:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800934a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800934e:	3301      	adds	r3, #1
 8009350:	429a      	cmp	r2, r3
 8009352:	fbb2 f6f3 	udiv	r6, r2, r3
 8009356:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800935a:	d32e      	bcc.n	80093ba <quorem+0x96>
 800935c:	f04f 0a00 	mov.w	sl, #0
 8009360:	46c4      	mov	ip, r8
 8009362:	46ae      	mov	lr, r5
 8009364:	46d3      	mov	fp, sl
 8009366:	f85c 3b04 	ldr.w	r3, [ip], #4
 800936a:	b298      	uxth	r0, r3
 800936c:	fb06 a000 	mla	r0, r6, r0, sl
 8009370:	0c1b      	lsrs	r3, r3, #16
 8009372:	0c02      	lsrs	r2, r0, #16
 8009374:	fb06 2303 	mla	r3, r6, r3, r2
 8009378:	f8de 2000 	ldr.w	r2, [lr]
 800937c:	b280      	uxth	r0, r0
 800937e:	b292      	uxth	r2, r2
 8009380:	1a12      	subs	r2, r2, r0
 8009382:	445a      	add	r2, fp
 8009384:	f8de 0000 	ldr.w	r0, [lr]
 8009388:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800938c:	b29b      	uxth	r3, r3
 800938e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009392:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009396:	b292      	uxth	r2, r2
 8009398:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800939c:	45e1      	cmp	r9, ip
 800939e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80093a2:	f84e 2b04 	str.w	r2, [lr], #4
 80093a6:	d2de      	bcs.n	8009366 <quorem+0x42>
 80093a8:	9b00      	ldr	r3, [sp, #0]
 80093aa:	58eb      	ldr	r3, [r5, r3]
 80093ac:	b92b      	cbnz	r3, 80093ba <quorem+0x96>
 80093ae:	9b01      	ldr	r3, [sp, #4]
 80093b0:	3b04      	subs	r3, #4
 80093b2:	429d      	cmp	r5, r3
 80093b4:	461a      	mov	r2, r3
 80093b6:	d32f      	bcc.n	8009418 <quorem+0xf4>
 80093b8:	613c      	str	r4, [r7, #16]
 80093ba:	4638      	mov	r0, r7
 80093bc:	f001 f9ca 	bl	800a754 <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	db25      	blt.n	8009410 <quorem+0xec>
 80093c4:	4629      	mov	r1, r5
 80093c6:	2000      	movs	r0, #0
 80093c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80093cc:	f8d1 c000 	ldr.w	ip, [r1]
 80093d0:	fa1f fe82 	uxth.w	lr, r2
 80093d4:	fa1f f38c 	uxth.w	r3, ip
 80093d8:	eba3 030e 	sub.w	r3, r3, lr
 80093dc:	4403      	add	r3, r0
 80093de:	0c12      	lsrs	r2, r2, #16
 80093e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093ee:	45c1      	cmp	r9, r8
 80093f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093f4:	f841 3b04 	str.w	r3, [r1], #4
 80093f8:	d2e6      	bcs.n	80093c8 <quorem+0xa4>
 80093fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009402:	b922      	cbnz	r2, 800940e <quorem+0xea>
 8009404:	3b04      	subs	r3, #4
 8009406:	429d      	cmp	r5, r3
 8009408:	461a      	mov	r2, r3
 800940a:	d30b      	bcc.n	8009424 <quorem+0x100>
 800940c:	613c      	str	r4, [r7, #16]
 800940e:	3601      	adds	r6, #1
 8009410:	4630      	mov	r0, r6
 8009412:	b003      	add	sp, #12
 8009414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009418:	6812      	ldr	r2, [r2, #0]
 800941a:	3b04      	subs	r3, #4
 800941c:	2a00      	cmp	r2, #0
 800941e:	d1cb      	bne.n	80093b8 <quorem+0x94>
 8009420:	3c01      	subs	r4, #1
 8009422:	e7c6      	b.n	80093b2 <quorem+0x8e>
 8009424:	6812      	ldr	r2, [r2, #0]
 8009426:	3b04      	subs	r3, #4
 8009428:	2a00      	cmp	r2, #0
 800942a:	d1ef      	bne.n	800940c <quorem+0xe8>
 800942c:	3c01      	subs	r4, #1
 800942e:	e7ea      	b.n	8009406 <quorem+0xe2>
 8009430:	2000      	movs	r0, #0
 8009432:	e7ee      	b.n	8009412 <quorem+0xee>
 8009434:	0000      	movs	r0, r0
	...

08009438 <_dtoa_r>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	4614      	mov	r4, r2
 800943e:	461d      	mov	r5, r3
 8009440:	69c7      	ldr	r7, [r0, #28]
 8009442:	b097      	sub	sp, #92	@ 0x5c
 8009444:	4681      	mov	r9, r0
 8009446:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800944a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800944c:	b97f      	cbnz	r7, 800946e <_dtoa_r+0x36>
 800944e:	2010      	movs	r0, #16
 8009450:	f000 fe0e 	bl	800a070 <malloc>
 8009454:	4602      	mov	r2, r0
 8009456:	f8c9 001c 	str.w	r0, [r9, #28]
 800945a:	b920      	cbnz	r0, 8009466 <_dtoa_r+0x2e>
 800945c:	21ef      	movs	r1, #239	@ 0xef
 800945e:	4bac      	ldr	r3, [pc, #688]	@ (8009710 <_dtoa_r+0x2d8>)
 8009460:	48ac      	ldr	r0, [pc, #688]	@ (8009714 <_dtoa_r+0x2dc>)
 8009462:	f002 fddd 	bl	800c020 <__assert_func>
 8009466:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800946a:	6007      	str	r7, [r0, #0]
 800946c:	60c7      	str	r7, [r0, #12]
 800946e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009472:	6819      	ldr	r1, [r3, #0]
 8009474:	b159      	cbz	r1, 800948e <_dtoa_r+0x56>
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	2301      	movs	r3, #1
 800947a:	4093      	lsls	r3, r2
 800947c:	604a      	str	r2, [r1, #4]
 800947e:	608b      	str	r3, [r1, #8]
 8009480:	4648      	mov	r0, r9
 8009482:	f000 feeb 	bl	800a25c <_Bfree>
 8009486:	2200      	movs	r2, #0
 8009488:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	1e2b      	subs	r3, r5, #0
 8009490:	bfaf      	iteee	ge
 8009492:	2300      	movge	r3, #0
 8009494:	2201      	movlt	r2, #1
 8009496:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800949a:	9307      	strlt	r3, [sp, #28]
 800949c:	bfa8      	it	ge
 800949e:	6033      	strge	r3, [r6, #0]
 80094a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80094a4:	4b9c      	ldr	r3, [pc, #624]	@ (8009718 <_dtoa_r+0x2e0>)
 80094a6:	bfb8      	it	lt
 80094a8:	6032      	strlt	r2, [r6, #0]
 80094aa:	ea33 0308 	bics.w	r3, r3, r8
 80094ae:	d112      	bne.n	80094d6 <_dtoa_r+0x9e>
 80094b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80094b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094b6:	6013      	str	r3, [r2, #0]
 80094b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80094bc:	4323      	orrs	r3, r4
 80094be:	f000 855e 	beq.w	8009f7e <_dtoa_r+0xb46>
 80094c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800971c <_dtoa_r+0x2e4>
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	f000 8560 	beq.w	8009f8e <_dtoa_r+0xb56>
 80094ce:	f10a 0303 	add.w	r3, sl, #3
 80094d2:	f000 bd5a 	b.w	8009f8a <_dtoa_r+0xb52>
 80094d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094e2:	2200      	movs	r2, #0
 80094e4:	2300      	movs	r3, #0
 80094e6:	f7f7 fa77 	bl	80009d8 <__aeabi_dcmpeq>
 80094ea:	4607      	mov	r7, r0
 80094ec:	b158      	cbz	r0, 8009506 <_dtoa_r+0xce>
 80094ee:	2301      	movs	r3, #1
 80094f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80094f6:	b113      	cbz	r3, 80094fe <_dtoa_r+0xc6>
 80094f8:	4b89      	ldr	r3, [pc, #548]	@ (8009720 <_dtoa_r+0x2e8>)
 80094fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80094fc:	6013      	str	r3, [r2, #0]
 80094fe:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8009724 <_dtoa_r+0x2ec>
 8009502:	f000 bd44 	b.w	8009f8e <_dtoa_r+0xb56>
 8009506:	ab14      	add	r3, sp, #80	@ 0x50
 8009508:	9301      	str	r3, [sp, #4]
 800950a:	ab15      	add	r3, sp, #84	@ 0x54
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	4648      	mov	r0, r9
 8009510:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009514:	f001 fa36 	bl	800a984 <__d2b>
 8009518:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800951c:	9003      	str	r0, [sp, #12]
 800951e:	2e00      	cmp	r6, #0
 8009520:	d078      	beq.n	8009614 <_dtoa_r+0x1dc>
 8009522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009526:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009528:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800952c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009530:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009534:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009538:	9712      	str	r7, [sp, #72]	@ 0x48
 800953a:	4619      	mov	r1, r3
 800953c:	2200      	movs	r2, #0
 800953e:	4b7a      	ldr	r3, [pc, #488]	@ (8009728 <_dtoa_r+0x2f0>)
 8009540:	f7f6 fe2a 	bl	8000198 <__aeabi_dsub>
 8009544:	a36c      	add	r3, pc, #432	@ (adr r3, 80096f8 <_dtoa_r+0x2c0>)
 8009546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954a:	f7f6 ffdd 	bl	8000508 <__aeabi_dmul>
 800954e:	a36c      	add	r3, pc, #432	@ (adr r3, 8009700 <_dtoa_r+0x2c8>)
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f7f6 fe22 	bl	800019c <__adddf3>
 8009558:	4604      	mov	r4, r0
 800955a:	4630      	mov	r0, r6
 800955c:	460d      	mov	r5, r1
 800955e:	f7f6 ff69 	bl	8000434 <__aeabi_i2d>
 8009562:	a369      	add	r3, pc, #420	@ (adr r3, 8009708 <_dtoa_r+0x2d0>)
 8009564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009568:	f7f6 ffce 	bl	8000508 <__aeabi_dmul>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4620      	mov	r0, r4
 8009572:	4629      	mov	r1, r5
 8009574:	f7f6 fe12 	bl	800019c <__adddf3>
 8009578:	4604      	mov	r4, r0
 800957a:	460d      	mov	r5, r1
 800957c:	f7f7 fa74 	bl	8000a68 <__aeabi_d2iz>
 8009580:	2200      	movs	r2, #0
 8009582:	4607      	mov	r7, r0
 8009584:	2300      	movs	r3, #0
 8009586:	4620      	mov	r0, r4
 8009588:	4629      	mov	r1, r5
 800958a:	f7f7 fa2f 	bl	80009ec <__aeabi_dcmplt>
 800958e:	b140      	cbz	r0, 80095a2 <_dtoa_r+0x16a>
 8009590:	4638      	mov	r0, r7
 8009592:	f7f6 ff4f 	bl	8000434 <__aeabi_i2d>
 8009596:	4622      	mov	r2, r4
 8009598:	462b      	mov	r3, r5
 800959a:	f7f7 fa1d 	bl	80009d8 <__aeabi_dcmpeq>
 800959e:	b900      	cbnz	r0, 80095a2 <_dtoa_r+0x16a>
 80095a0:	3f01      	subs	r7, #1
 80095a2:	2f16      	cmp	r7, #22
 80095a4:	d854      	bhi.n	8009650 <_dtoa_r+0x218>
 80095a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095aa:	4b60      	ldr	r3, [pc, #384]	@ (800972c <_dtoa_r+0x2f4>)
 80095ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80095b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b4:	f7f7 fa1a 	bl	80009ec <__aeabi_dcmplt>
 80095b8:	2800      	cmp	r0, #0
 80095ba:	d04b      	beq.n	8009654 <_dtoa_r+0x21c>
 80095bc:	2300      	movs	r3, #0
 80095be:	3f01      	subs	r7, #1
 80095c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80095c4:	1b9b      	subs	r3, r3, r6
 80095c6:	1e5a      	subs	r2, r3, #1
 80095c8:	bf49      	itett	mi
 80095ca:	f1c3 0301 	rsbmi	r3, r3, #1
 80095ce:	2300      	movpl	r3, #0
 80095d0:	9304      	strmi	r3, [sp, #16]
 80095d2:	2300      	movmi	r3, #0
 80095d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80095d6:	bf54      	ite	pl
 80095d8:	9304      	strpl	r3, [sp, #16]
 80095da:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80095dc:	2f00      	cmp	r7, #0
 80095de:	db3b      	blt.n	8009658 <_dtoa_r+0x220>
 80095e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095e2:	970e      	str	r7, [sp, #56]	@ 0x38
 80095e4:	443b      	add	r3, r7
 80095e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095e8:	2300      	movs	r3, #0
 80095ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80095ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095ee:	2b09      	cmp	r3, #9
 80095f0:	d865      	bhi.n	80096be <_dtoa_r+0x286>
 80095f2:	2b05      	cmp	r3, #5
 80095f4:	bfc4      	itt	gt
 80095f6:	3b04      	subgt	r3, #4
 80095f8:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80095fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80095fc:	bfc8      	it	gt
 80095fe:	2400      	movgt	r4, #0
 8009600:	f1a3 0302 	sub.w	r3, r3, #2
 8009604:	bfd8      	it	le
 8009606:	2401      	movle	r4, #1
 8009608:	2b03      	cmp	r3, #3
 800960a:	d864      	bhi.n	80096d6 <_dtoa_r+0x29e>
 800960c:	e8df f003 	tbb	[pc, r3]
 8009610:	2c385553 	.word	0x2c385553
 8009614:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009618:	441e      	add	r6, r3
 800961a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800961e:	2b20      	cmp	r3, #32
 8009620:	bfc1      	itttt	gt
 8009622:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009626:	fa08 f803 	lslgt.w	r8, r8, r3
 800962a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800962e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009632:	bfd6      	itet	le
 8009634:	f1c3 0320 	rsble	r3, r3, #32
 8009638:	ea48 0003 	orrgt.w	r0, r8, r3
 800963c:	fa04 f003 	lslle.w	r0, r4, r3
 8009640:	f7f6 fee8 	bl	8000414 <__aeabi_ui2d>
 8009644:	2201      	movs	r2, #1
 8009646:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800964a:	3e01      	subs	r6, #1
 800964c:	9212      	str	r2, [sp, #72]	@ 0x48
 800964e:	e774      	b.n	800953a <_dtoa_r+0x102>
 8009650:	2301      	movs	r3, #1
 8009652:	e7b5      	b.n	80095c0 <_dtoa_r+0x188>
 8009654:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009656:	e7b4      	b.n	80095c2 <_dtoa_r+0x18a>
 8009658:	9b04      	ldr	r3, [sp, #16]
 800965a:	1bdb      	subs	r3, r3, r7
 800965c:	9304      	str	r3, [sp, #16]
 800965e:	427b      	negs	r3, r7
 8009660:	930a      	str	r3, [sp, #40]	@ 0x28
 8009662:	2300      	movs	r3, #0
 8009664:	930e      	str	r3, [sp, #56]	@ 0x38
 8009666:	e7c1      	b.n	80095ec <_dtoa_r+0x1b4>
 8009668:	2301      	movs	r3, #1
 800966a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800966c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800966e:	eb07 0b03 	add.w	fp, r7, r3
 8009672:	f10b 0301 	add.w	r3, fp, #1
 8009676:	2b01      	cmp	r3, #1
 8009678:	9308      	str	r3, [sp, #32]
 800967a:	bfb8      	it	lt
 800967c:	2301      	movlt	r3, #1
 800967e:	e006      	b.n	800968e <_dtoa_r+0x256>
 8009680:	2301      	movs	r3, #1
 8009682:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009684:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009686:	2b00      	cmp	r3, #0
 8009688:	dd28      	ble.n	80096dc <_dtoa_r+0x2a4>
 800968a:	469b      	mov	fp, r3
 800968c:	9308      	str	r3, [sp, #32]
 800968e:	2100      	movs	r1, #0
 8009690:	2204      	movs	r2, #4
 8009692:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009696:	f102 0514 	add.w	r5, r2, #20
 800969a:	429d      	cmp	r5, r3
 800969c:	d926      	bls.n	80096ec <_dtoa_r+0x2b4>
 800969e:	6041      	str	r1, [r0, #4]
 80096a0:	4648      	mov	r0, r9
 80096a2:	f000 fd9b 	bl	800a1dc <_Balloc>
 80096a6:	4682      	mov	sl, r0
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d143      	bne.n	8009734 <_dtoa_r+0x2fc>
 80096ac:	4602      	mov	r2, r0
 80096ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80096b2:	4b1f      	ldr	r3, [pc, #124]	@ (8009730 <_dtoa_r+0x2f8>)
 80096b4:	e6d4      	b.n	8009460 <_dtoa_r+0x28>
 80096b6:	2300      	movs	r3, #0
 80096b8:	e7e3      	b.n	8009682 <_dtoa_r+0x24a>
 80096ba:	2300      	movs	r3, #0
 80096bc:	e7d5      	b.n	800966a <_dtoa_r+0x232>
 80096be:	2401      	movs	r4, #1
 80096c0:	2300      	movs	r3, #0
 80096c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096c4:	9320      	str	r3, [sp, #128]	@ 0x80
 80096c6:	f04f 3bff 	mov.w	fp, #4294967295
 80096ca:	2200      	movs	r2, #0
 80096cc:	2312      	movs	r3, #18
 80096ce:	f8cd b020 	str.w	fp, [sp, #32]
 80096d2:	9221      	str	r2, [sp, #132]	@ 0x84
 80096d4:	e7db      	b.n	800968e <_dtoa_r+0x256>
 80096d6:	2301      	movs	r3, #1
 80096d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096da:	e7f4      	b.n	80096c6 <_dtoa_r+0x28e>
 80096dc:	f04f 0b01 	mov.w	fp, #1
 80096e0:	465b      	mov	r3, fp
 80096e2:	f8cd b020 	str.w	fp, [sp, #32]
 80096e6:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 80096ea:	e7d0      	b.n	800968e <_dtoa_r+0x256>
 80096ec:	3101      	adds	r1, #1
 80096ee:	0052      	lsls	r2, r2, #1
 80096f0:	e7d1      	b.n	8009696 <_dtoa_r+0x25e>
 80096f2:	bf00      	nop
 80096f4:	f3af 8000 	nop.w
 80096f8:	636f4361 	.word	0x636f4361
 80096fc:	3fd287a7 	.word	0x3fd287a7
 8009700:	8b60c8b3 	.word	0x8b60c8b3
 8009704:	3fc68a28 	.word	0x3fc68a28
 8009708:	509f79fb 	.word	0x509f79fb
 800970c:	3fd34413 	.word	0x3fd34413
 8009710:	0800e0a0 	.word	0x0800e0a0
 8009714:	0800e0b7 	.word	0x0800e0b7
 8009718:	7ff00000 	.word	0x7ff00000
 800971c:	0800e09c 	.word	0x0800e09c
 8009720:	0800e06b 	.word	0x0800e06b
 8009724:	0800e06a 	.word	0x0800e06a
 8009728:	3ff80000 	.word	0x3ff80000
 800972c:	0800e268 	.word	0x0800e268
 8009730:	0800e10f 	.word	0x0800e10f
 8009734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009738:	6018      	str	r0, [r3, #0]
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	2b0e      	cmp	r3, #14
 800973e:	f200 80a1 	bhi.w	8009884 <_dtoa_r+0x44c>
 8009742:	2c00      	cmp	r4, #0
 8009744:	f000 809e 	beq.w	8009884 <_dtoa_r+0x44c>
 8009748:	2f00      	cmp	r7, #0
 800974a:	dd33      	ble.n	80097b4 <_dtoa_r+0x37c>
 800974c:	4b9c      	ldr	r3, [pc, #624]	@ (80099c0 <_dtoa_r+0x588>)
 800974e:	f007 020f 	and.w	r2, r7, #15
 8009752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009756:	05f8      	lsls	r0, r7, #23
 8009758:	e9d3 3400 	ldrd	r3, r4, [r3]
 800975c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8009760:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009764:	d516      	bpl.n	8009794 <_dtoa_r+0x35c>
 8009766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800976a:	4b96      	ldr	r3, [pc, #600]	@ (80099c4 <_dtoa_r+0x58c>)
 800976c:	2603      	movs	r6, #3
 800976e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009772:	f7f6 fff3 	bl	800075c <__aeabi_ddiv>
 8009776:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800977a:	f004 040f 	and.w	r4, r4, #15
 800977e:	4d91      	ldr	r5, [pc, #580]	@ (80099c4 <_dtoa_r+0x58c>)
 8009780:	b954      	cbnz	r4, 8009798 <_dtoa_r+0x360>
 8009782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009786:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800978a:	f7f6 ffe7 	bl	800075c <__aeabi_ddiv>
 800978e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009792:	e028      	b.n	80097e6 <_dtoa_r+0x3ae>
 8009794:	2602      	movs	r6, #2
 8009796:	e7f2      	b.n	800977e <_dtoa_r+0x346>
 8009798:	07e1      	lsls	r1, r4, #31
 800979a:	d508      	bpl.n	80097ae <_dtoa_r+0x376>
 800979c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80097a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80097a4:	f7f6 feb0 	bl	8000508 <__aeabi_dmul>
 80097a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80097ac:	3601      	adds	r6, #1
 80097ae:	1064      	asrs	r4, r4, #1
 80097b0:	3508      	adds	r5, #8
 80097b2:	e7e5      	b.n	8009780 <_dtoa_r+0x348>
 80097b4:	f000 80af 	beq.w	8009916 <_dtoa_r+0x4de>
 80097b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097bc:	427c      	negs	r4, r7
 80097be:	4b80      	ldr	r3, [pc, #512]	@ (80099c0 <_dtoa_r+0x588>)
 80097c0:	f004 020f 	and.w	r2, r4, #15
 80097c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80097c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097cc:	f7f6 fe9c 	bl	8000508 <__aeabi_dmul>
 80097d0:	2602      	movs	r6, #2
 80097d2:	2300      	movs	r3, #0
 80097d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80097d8:	4d7a      	ldr	r5, [pc, #488]	@ (80099c4 <_dtoa_r+0x58c>)
 80097da:	1124      	asrs	r4, r4, #4
 80097dc:	2c00      	cmp	r4, #0
 80097de:	f040 808f 	bne.w	8009900 <_dtoa_r+0x4c8>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1d3      	bne.n	800978e <_dtoa_r+0x356>
 80097e6:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80097ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 8094 	beq.w	800991a <_dtoa_r+0x4e2>
 80097f2:	2200      	movs	r2, #0
 80097f4:	4620      	mov	r0, r4
 80097f6:	4629      	mov	r1, r5
 80097f8:	4b73      	ldr	r3, [pc, #460]	@ (80099c8 <_dtoa_r+0x590>)
 80097fa:	f7f7 f8f7 	bl	80009ec <__aeabi_dcmplt>
 80097fe:	2800      	cmp	r0, #0
 8009800:	f000 808b 	beq.w	800991a <_dtoa_r+0x4e2>
 8009804:	9b08      	ldr	r3, [sp, #32]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 8087 	beq.w	800991a <_dtoa_r+0x4e2>
 800980c:	f1bb 0f00 	cmp.w	fp, #0
 8009810:	dd34      	ble.n	800987c <_dtoa_r+0x444>
 8009812:	4620      	mov	r0, r4
 8009814:	2200      	movs	r2, #0
 8009816:	4629      	mov	r1, r5
 8009818:	4b6c      	ldr	r3, [pc, #432]	@ (80099cc <_dtoa_r+0x594>)
 800981a:	f7f6 fe75 	bl	8000508 <__aeabi_dmul>
 800981e:	465c      	mov	r4, fp
 8009820:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009824:	f107 38ff 	add.w	r8, r7, #4294967295
 8009828:	3601      	adds	r6, #1
 800982a:	4630      	mov	r0, r6
 800982c:	f7f6 fe02 	bl	8000434 <__aeabi_i2d>
 8009830:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009834:	f7f6 fe68 	bl	8000508 <__aeabi_dmul>
 8009838:	2200      	movs	r2, #0
 800983a:	4b65      	ldr	r3, [pc, #404]	@ (80099d0 <_dtoa_r+0x598>)
 800983c:	f7f6 fcae 	bl	800019c <__adddf3>
 8009840:	4605      	mov	r5, r0
 8009842:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009846:	2c00      	cmp	r4, #0
 8009848:	d16a      	bne.n	8009920 <_dtoa_r+0x4e8>
 800984a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800984e:	2200      	movs	r2, #0
 8009850:	4b60      	ldr	r3, [pc, #384]	@ (80099d4 <_dtoa_r+0x59c>)
 8009852:	f7f6 fca1 	bl	8000198 <__aeabi_dsub>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800985e:	462a      	mov	r2, r5
 8009860:	4633      	mov	r3, r6
 8009862:	f7f7 f8e1 	bl	8000a28 <__aeabi_dcmpgt>
 8009866:	2800      	cmp	r0, #0
 8009868:	f040 8298 	bne.w	8009d9c <_dtoa_r+0x964>
 800986c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009870:	462a      	mov	r2, r5
 8009872:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009876:	f7f7 f8b9 	bl	80009ec <__aeabi_dcmplt>
 800987a:	bb38      	cbnz	r0, 80098cc <_dtoa_r+0x494>
 800987c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009880:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009884:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009886:	2b00      	cmp	r3, #0
 8009888:	f2c0 8157 	blt.w	8009b3a <_dtoa_r+0x702>
 800988c:	2f0e      	cmp	r7, #14
 800988e:	f300 8154 	bgt.w	8009b3a <_dtoa_r+0x702>
 8009892:	4b4b      	ldr	r3, [pc, #300]	@ (80099c0 <_dtoa_r+0x588>)
 8009894:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800989c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80098a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f280 80e5 	bge.w	8009a72 <_dtoa_r+0x63a>
 80098a8:	9b08      	ldr	r3, [sp, #32]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	f300 80e1 	bgt.w	8009a72 <_dtoa_r+0x63a>
 80098b0:	d10c      	bne.n	80098cc <_dtoa_r+0x494>
 80098b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098b6:	2200      	movs	r2, #0
 80098b8:	4b46      	ldr	r3, [pc, #280]	@ (80099d4 <_dtoa_r+0x59c>)
 80098ba:	f7f6 fe25 	bl	8000508 <__aeabi_dmul>
 80098be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098c2:	f7f7 f8a7 	bl	8000a14 <__aeabi_dcmpge>
 80098c6:	2800      	cmp	r0, #0
 80098c8:	f000 8266 	beq.w	8009d98 <_dtoa_r+0x960>
 80098cc:	2400      	movs	r4, #0
 80098ce:	4625      	mov	r5, r4
 80098d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098d2:	4656      	mov	r6, sl
 80098d4:	ea6f 0803 	mvn.w	r8, r3
 80098d8:	2700      	movs	r7, #0
 80098da:	4621      	mov	r1, r4
 80098dc:	4648      	mov	r0, r9
 80098de:	f000 fcbd 	bl	800a25c <_Bfree>
 80098e2:	2d00      	cmp	r5, #0
 80098e4:	f000 80bd 	beq.w	8009a62 <_dtoa_r+0x62a>
 80098e8:	b12f      	cbz	r7, 80098f6 <_dtoa_r+0x4be>
 80098ea:	42af      	cmp	r7, r5
 80098ec:	d003      	beq.n	80098f6 <_dtoa_r+0x4be>
 80098ee:	4639      	mov	r1, r7
 80098f0:	4648      	mov	r0, r9
 80098f2:	f000 fcb3 	bl	800a25c <_Bfree>
 80098f6:	4629      	mov	r1, r5
 80098f8:	4648      	mov	r0, r9
 80098fa:	f000 fcaf 	bl	800a25c <_Bfree>
 80098fe:	e0b0      	b.n	8009a62 <_dtoa_r+0x62a>
 8009900:	07e2      	lsls	r2, r4, #31
 8009902:	d505      	bpl.n	8009910 <_dtoa_r+0x4d8>
 8009904:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009908:	f7f6 fdfe 	bl	8000508 <__aeabi_dmul>
 800990c:	2301      	movs	r3, #1
 800990e:	3601      	adds	r6, #1
 8009910:	1064      	asrs	r4, r4, #1
 8009912:	3508      	adds	r5, #8
 8009914:	e762      	b.n	80097dc <_dtoa_r+0x3a4>
 8009916:	2602      	movs	r6, #2
 8009918:	e765      	b.n	80097e6 <_dtoa_r+0x3ae>
 800991a:	46b8      	mov	r8, r7
 800991c:	9c08      	ldr	r4, [sp, #32]
 800991e:	e784      	b.n	800982a <_dtoa_r+0x3f2>
 8009920:	4b27      	ldr	r3, [pc, #156]	@ (80099c0 <_dtoa_r+0x588>)
 8009922:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009924:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009928:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800992c:	4454      	add	r4, sl
 800992e:	2900      	cmp	r1, #0
 8009930:	d054      	beq.n	80099dc <_dtoa_r+0x5a4>
 8009932:	2000      	movs	r0, #0
 8009934:	4928      	ldr	r1, [pc, #160]	@ (80099d8 <_dtoa_r+0x5a0>)
 8009936:	f7f6 ff11 	bl	800075c <__aeabi_ddiv>
 800993a:	4633      	mov	r3, r6
 800993c:	462a      	mov	r2, r5
 800993e:	f7f6 fc2b 	bl	8000198 <__aeabi_dsub>
 8009942:	4656      	mov	r6, sl
 8009944:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009948:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800994c:	f7f7 f88c 	bl	8000a68 <__aeabi_d2iz>
 8009950:	4605      	mov	r5, r0
 8009952:	f7f6 fd6f 	bl	8000434 <__aeabi_i2d>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800995e:	f7f6 fc1b 	bl	8000198 <__aeabi_dsub>
 8009962:	4602      	mov	r2, r0
 8009964:	460b      	mov	r3, r1
 8009966:	3530      	adds	r5, #48	@ 0x30
 8009968:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800996c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009970:	f806 5b01 	strb.w	r5, [r6], #1
 8009974:	f7f7 f83a 	bl	80009ec <__aeabi_dcmplt>
 8009978:	2800      	cmp	r0, #0
 800997a:	d172      	bne.n	8009a62 <_dtoa_r+0x62a>
 800997c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009980:	2000      	movs	r0, #0
 8009982:	4911      	ldr	r1, [pc, #68]	@ (80099c8 <_dtoa_r+0x590>)
 8009984:	f7f6 fc08 	bl	8000198 <__aeabi_dsub>
 8009988:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800998c:	f7f7 f82e 	bl	80009ec <__aeabi_dcmplt>
 8009990:	2800      	cmp	r0, #0
 8009992:	f040 80b4 	bne.w	8009afe <_dtoa_r+0x6c6>
 8009996:	42a6      	cmp	r6, r4
 8009998:	f43f af70 	beq.w	800987c <_dtoa_r+0x444>
 800999c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099a0:	2200      	movs	r2, #0
 80099a2:	4b0a      	ldr	r3, [pc, #40]	@ (80099cc <_dtoa_r+0x594>)
 80099a4:	f7f6 fdb0 	bl	8000508 <__aeabi_dmul>
 80099a8:	2200      	movs	r2, #0
 80099aa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099b2:	4b06      	ldr	r3, [pc, #24]	@ (80099cc <_dtoa_r+0x594>)
 80099b4:	f7f6 fda8 	bl	8000508 <__aeabi_dmul>
 80099b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80099bc:	e7c4      	b.n	8009948 <_dtoa_r+0x510>
 80099be:	bf00      	nop
 80099c0:	0800e268 	.word	0x0800e268
 80099c4:	0800e240 	.word	0x0800e240
 80099c8:	3ff00000 	.word	0x3ff00000
 80099cc:	40240000 	.word	0x40240000
 80099d0:	401c0000 	.word	0x401c0000
 80099d4:	40140000 	.word	0x40140000
 80099d8:	3fe00000 	.word	0x3fe00000
 80099dc:	4631      	mov	r1, r6
 80099de:	4628      	mov	r0, r5
 80099e0:	f7f6 fd92 	bl	8000508 <__aeabi_dmul>
 80099e4:	4656      	mov	r6, sl
 80099e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099ea:	9413      	str	r4, [sp, #76]	@ 0x4c
 80099ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099f0:	f7f7 f83a 	bl	8000a68 <__aeabi_d2iz>
 80099f4:	4605      	mov	r5, r0
 80099f6:	f7f6 fd1d 	bl	8000434 <__aeabi_i2d>
 80099fa:	4602      	mov	r2, r0
 80099fc:	460b      	mov	r3, r1
 80099fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a02:	f7f6 fbc9 	bl	8000198 <__aeabi_dsub>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	3530      	adds	r5, #48	@ 0x30
 8009a0c:	f806 5b01 	strb.w	r5, [r6], #1
 8009a10:	42a6      	cmp	r6, r4
 8009a12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a16:	f04f 0200 	mov.w	r2, #0
 8009a1a:	d124      	bne.n	8009a66 <_dtoa_r+0x62e>
 8009a1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a20:	4bae      	ldr	r3, [pc, #696]	@ (8009cdc <_dtoa_r+0x8a4>)
 8009a22:	f7f6 fbbb 	bl	800019c <__adddf3>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a2e:	f7f6 fffb 	bl	8000a28 <__aeabi_dcmpgt>
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d163      	bne.n	8009afe <_dtoa_r+0x6c6>
 8009a36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a3a:	2000      	movs	r0, #0
 8009a3c:	49a7      	ldr	r1, [pc, #668]	@ (8009cdc <_dtoa_r+0x8a4>)
 8009a3e:	f7f6 fbab 	bl	8000198 <__aeabi_dsub>
 8009a42:	4602      	mov	r2, r0
 8009a44:	460b      	mov	r3, r1
 8009a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a4a:	f7f6 ffcf 	bl	80009ec <__aeabi_dcmplt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f43f af14 	beq.w	800987c <_dtoa_r+0x444>
 8009a54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009a56:	1e73      	subs	r3, r6, #1
 8009a58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009a5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a5e:	2b30      	cmp	r3, #48	@ 0x30
 8009a60:	d0f8      	beq.n	8009a54 <_dtoa_r+0x61c>
 8009a62:	4647      	mov	r7, r8
 8009a64:	e03b      	b.n	8009ade <_dtoa_r+0x6a6>
 8009a66:	4b9e      	ldr	r3, [pc, #632]	@ (8009ce0 <_dtoa_r+0x8a8>)
 8009a68:	f7f6 fd4e 	bl	8000508 <__aeabi_dmul>
 8009a6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a70:	e7bc      	b.n	80099ec <_dtoa_r+0x5b4>
 8009a72:	4656      	mov	r6, sl
 8009a74:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8009a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	4629      	mov	r1, r5
 8009a80:	f7f6 fe6c 	bl	800075c <__aeabi_ddiv>
 8009a84:	f7f6 fff0 	bl	8000a68 <__aeabi_d2iz>
 8009a88:	4680      	mov	r8, r0
 8009a8a:	f7f6 fcd3 	bl	8000434 <__aeabi_i2d>
 8009a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a92:	f7f6 fd39 	bl	8000508 <__aeabi_dmul>
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	4629      	mov	r1, r5
 8009a9e:	f7f6 fb7b 	bl	8000198 <__aeabi_dsub>
 8009aa2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009aa6:	9d08      	ldr	r5, [sp, #32]
 8009aa8:	f806 4b01 	strb.w	r4, [r6], #1
 8009aac:	eba6 040a 	sub.w	r4, r6, sl
 8009ab0:	42a5      	cmp	r5, r4
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	d133      	bne.n	8009b20 <_dtoa_r+0x6e8>
 8009ab8:	f7f6 fb70 	bl	800019c <__adddf3>
 8009abc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	460d      	mov	r5, r1
 8009ac4:	f7f6 ffb0 	bl	8000a28 <__aeabi_dcmpgt>
 8009ac8:	b9c0      	cbnz	r0, 8009afc <_dtoa_r+0x6c4>
 8009aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ace:	4620      	mov	r0, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	f7f6 ff81 	bl	80009d8 <__aeabi_dcmpeq>
 8009ad6:	b110      	cbz	r0, 8009ade <_dtoa_r+0x6a6>
 8009ad8:	f018 0f01 	tst.w	r8, #1
 8009adc:	d10e      	bne.n	8009afc <_dtoa_r+0x6c4>
 8009ade:	4648      	mov	r0, r9
 8009ae0:	9903      	ldr	r1, [sp, #12]
 8009ae2:	f000 fbbb 	bl	800a25c <_Bfree>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	7033      	strb	r3, [r6, #0]
 8009aea:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009aec:	3701      	adds	r7, #1
 8009aee:	601f      	str	r7, [r3, #0]
 8009af0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 824b 	beq.w	8009f8e <_dtoa_r+0xb56>
 8009af8:	601e      	str	r6, [r3, #0]
 8009afa:	e248      	b.n	8009f8e <_dtoa_r+0xb56>
 8009afc:	46b8      	mov	r8, r7
 8009afe:	4633      	mov	r3, r6
 8009b00:	461e      	mov	r6, r3
 8009b02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b06:	2a39      	cmp	r2, #57	@ 0x39
 8009b08:	d106      	bne.n	8009b18 <_dtoa_r+0x6e0>
 8009b0a:	459a      	cmp	sl, r3
 8009b0c:	d1f8      	bne.n	8009b00 <_dtoa_r+0x6c8>
 8009b0e:	2230      	movs	r2, #48	@ 0x30
 8009b10:	f108 0801 	add.w	r8, r8, #1
 8009b14:	f88a 2000 	strb.w	r2, [sl]
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	3201      	adds	r2, #1
 8009b1c:	701a      	strb	r2, [r3, #0]
 8009b1e:	e7a0      	b.n	8009a62 <_dtoa_r+0x62a>
 8009b20:	2200      	movs	r2, #0
 8009b22:	4b6f      	ldr	r3, [pc, #444]	@ (8009ce0 <_dtoa_r+0x8a8>)
 8009b24:	f7f6 fcf0 	bl	8000508 <__aeabi_dmul>
 8009b28:	2200      	movs	r2, #0
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4604      	mov	r4, r0
 8009b2e:	460d      	mov	r5, r1
 8009b30:	f7f6 ff52 	bl	80009d8 <__aeabi_dcmpeq>
 8009b34:	2800      	cmp	r0, #0
 8009b36:	d09f      	beq.n	8009a78 <_dtoa_r+0x640>
 8009b38:	e7d1      	b.n	8009ade <_dtoa_r+0x6a6>
 8009b3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b3c:	2a00      	cmp	r2, #0
 8009b3e:	f000 80ea 	beq.w	8009d16 <_dtoa_r+0x8de>
 8009b42:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009b44:	2a01      	cmp	r2, #1
 8009b46:	f300 80cd 	bgt.w	8009ce4 <_dtoa_r+0x8ac>
 8009b4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	f000 80c1 	beq.w	8009cd4 <_dtoa_r+0x89c>
 8009b52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b58:	9e04      	ldr	r6, [sp, #16]
 8009b5a:	9a04      	ldr	r2, [sp, #16]
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	441a      	add	r2, r3
 8009b60:	9204      	str	r2, [sp, #16]
 8009b62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b64:	4648      	mov	r0, r9
 8009b66:	441a      	add	r2, r3
 8009b68:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b6a:	f000 fc75 	bl	800a458 <__i2b>
 8009b6e:	4605      	mov	r5, r0
 8009b70:	b166      	cbz	r6, 8009b8c <_dtoa_r+0x754>
 8009b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	dd09      	ble.n	8009b8c <_dtoa_r+0x754>
 8009b78:	42b3      	cmp	r3, r6
 8009b7a:	bfa8      	it	ge
 8009b7c:	4633      	movge	r3, r6
 8009b7e:	9a04      	ldr	r2, [sp, #16]
 8009b80:	1af6      	subs	r6, r6, r3
 8009b82:	1ad2      	subs	r2, r2, r3
 8009b84:	9204      	str	r2, [sp, #16]
 8009b86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b8e:	b30b      	cbz	r3, 8009bd4 <_dtoa_r+0x79c>
 8009b90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f000 80c6 	beq.w	8009d24 <_dtoa_r+0x8ec>
 8009b98:	2c00      	cmp	r4, #0
 8009b9a:	f000 80c0 	beq.w	8009d1e <_dtoa_r+0x8e6>
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4648      	mov	r0, r9
 8009ba4:	f000 fd10 	bl	800a5c8 <__pow5mult>
 8009ba8:	9a03      	ldr	r2, [sp, #12]
 8009baa:	4601      	mov	r1, r0
 8009bac:	4605      	mov	r5, r0
 8009bae:	4648      	mov	r0, r9
 8009bb0:	f000 fc68 	bl	800a484 <__multiply>
 8009bb4:	9903      	ldr	r1, [sp, #12]
 8009bb6:	4680      	mov	r8, r0
 8009bb8:	4648      	mov	r0, r9
 8009bba:	f000 fb4f 	bl	800a25c <_Bfree>
 8009bbe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009bc0:	1b1b      	subs	r3, r3, r4
 8009bc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bc4:	f000 80b1 	beq.w	8009d2a <_dtoa_r+0x8f2>
 8009bc8:	4641      	mov	r1, r8
 8009bca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009bcc:	4648      	mov	r0, r9
 8009bce:	f000 fcfb 	bl	800a5c8 <__pow5mult>
 8009bd2:	9003      	str	r0, [sp, #12]
 8009bd4:	2101      	movs	r1, #1
 8009bd6:	4648      	mov	r0, r9
 8009bd8:	f000 fc3e 	bl	800a458 <__i2b>
 8009bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009bde:	4604      	mov	r4, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	f000 81d8 	beq.w	8009f96 <_dtoa_r+0xb5e>
 8009be6:	461a      	mov	r2, r3
 8009be8:	4601      	mov	r1, r0
 8009bea:	4648      	mov	r0, r9
 8009bec:	f000 fcec 	bl	800a5c8 <__pow5mult>
 8009bf0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	f300 809f 	bgt.w	8009d38 <_dtoa_r+0x900>
 8009bfa:	9b06      	ldr	r3, [sp, #24]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f040 8097 	bne.w	8009d30 <_dtoa_r+0x8f8>
 8009c02:	9b07      	ldr	r3, [sp, #28]
 8009c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f040 8093 	bne.w	8009d34 <_dtoa_r+0x8fc>
 8009c0e:	9b07      	ldr	r3, [sp, #28]
 8009c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c14:	0d1b      	lsrs	r3, r3, #20
 8009c16:	051b      	lsls	r3, r3, #20
 8009c18:	b133      	cbz	r3, 8009c28 <_dtoa_r+0x7f0>
 8009c1a:	9b04      	ldr	r3, [sp, #16]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	9304      	str	r3, [sp, #16]
 8009c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c22:	3301      	adds	r3, #1
 8009c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c26:	2301      	movs	r3, #1
 8009c28:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 81b8 	beq.w	8009fa2 <_dtoa_r+0xb6a>
 8009c32:	6923      	ldr	r3, [r4, #16]
 8009c34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009c38:	6918      	ldr	r0, [r3, #16]
 8009c3a:	f000 fbc1 	bl	800a3c0 <__hi0bits>
 8009c3e:	f1c0 0020 	rsb	r0, r0, #32
 8009c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c44:	4418      	add	r0, r3
 8009c46:	f010 001f 	ands.w	r0, r0, #31
 8009c4a:	f000 8082 	beq.w	8009d52 <_dtoa_r+0x91a>
 8009c4e:	f1c0 0320 	rsb	r3, r0, #32
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	dd73      	ble.n	8009d3e <_dtoa_r+0x906>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	f1c0 001c 	rsb	r0, r0, #28
 8009c5c:	4403      	add	r3, r0
 8009c5e:	9304      	str	r3, [sp, #16]
 8009c60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c62:	4406      	add	r6, r0
 8009c64:	4403      	add	r3, r0
 8009c66:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c68:	9b04      	ldr	r3, [sp, #16]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	dd05      	ble.n	8009c7a <_dtoa_r+0x842>
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4648      	mov	r0, r9
 8009c72:	9903      	ldr	r1, [sp, #12]
 8009c74:	f000 fd02 	bl	800a67c <__lshift>
 8009c78:	9003      	str	r0, [sp, #12]
 8009c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	dd05      	ble.n	8009c8c <_dtoa_r+0x854>
 8009c80:	4621      	mov	r1, r4
 8009c82:	461a      	mov	r2, r3
 8009c84:	4648      	mov	r0, r9
 8009c86:	f000 fcf9 	bl	800a67c <__lshift>
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d061      	beq.n	8009d56 <_dtoa_r+0x91e>
 8009c92:	4621      	mov	r1, r4
 8009c94:	9803      	ldr	r0, [sp, #12]
 8009c96:	f000 fd5d 	bl	800a754 <__mcmp>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	da5b      	bge.n	8009d56 <_dtoa_r+0x91e>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	220a      	movs	r2, #10
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	9903      	ldr	r1, [sp, #12]
 8009ca6:	f000 fafb 	bl	800a2a0 <__multadd>
 8009caa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cac:	f107 38ff 	add.w	r8, r7, #4294967295
 8009cb0:	9003      	str	r0, [sp, #12]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f000 8177 	beq.w	8009fa6 <_dtoa_r+0xb6e>
 8009cb8:	4629      	mov	r1, r5
 8009cba:	2300      	movs	r3, #0
 8009cbc:	220a      	movs	r2, #10
 8009cbe:	4648      	mov	r0, r9
 8009cc0:	f000 faee 	bl	800a2a0 <__multadd>
 8009cc4:	f1bb 0f00 	cmp.w	fp, #0
 8009cc8:	4605      	mov	r5, r0
 8009cca:	dc6f      	bgt.n	8009dac <_dtoa_r+0x974>
 8009ccc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	dc49      	bgt.n	8009d66 <_dtoa_r+0x92e>
 8009cd2:	e06b      	b.n	8009dac <_dtoa_r+0x974>
 8009cd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009cd6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009cda:	e73c      	b.n	8009b56 <_dtoa_r+0x71e>
 8009cdc:	3fe00000 	.word	0x3fe00000
 8009ce0:	40240000 	.word	0x40240000
 8009ce4:	9b08      	ldr	r3, [sp, #32]
 8009ce6:	1e5c      	subs	r4, r3, #1
 8009ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cea:	42a3      	cmp	r3, r4
 8009cec:	db09      	blt.n	8009d02 <_dtoa_r+0x8ca>
 8009cee:	1b1c      	subs	r4, r3, r4
 8009cf0:	9b08      	ldr	r3, [sp, #32]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f6bf af30 	bge.w	8009b58 <_dtoa_r+0x720>
 8009cf8:	9b04      	ldr	r3, [sp, #16]
 8009cfa:	9a08      	ldr	r2, [sp, #32]
 8009cfc:	1a9e      	subs	r6, r3, r2
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e72b      	b.n	8009b5a <_dtoa_r+0x722>
 8009d02:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d06:	1ae3      	subs	r3, r4, r3
 8009d08:	441a      	add	r2, r3
 8009d0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d0c:	9e04      	ldr	r6, [sp, #16]
 8009d0e:	2400      	movs	r4, #0
 8009d10:	9b08      	ldr	r3, [sp, #32]
 8009d12:	920e      	str	r2, [sp, #56]	@ 0x38
 8009d14:	e721      	b.n	8009b5a <_dtoa_r+0x722>
 8009d16:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d18:	9e04      	ldr	r6, [sp, #16]
 8009d1a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009d1c:	e728      	b.n	8009b70 <_dtoa_r+0x738>
 8009d1e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009d22:	e751      	b.n	8009bc8 <_dtoa_r+0x790>
 8009d24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d26:	9903      	ldr	r1, [sp, #12]
 8009d28:	e750      	b.n	8009bcc <_dtoa_r+0x794>
 8009d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d2e:	e751      	b.n	8009bd4 <_dtoa_r+0x79c>
 8009d30:	2300      	movs	r3, #0
 8009d32:	e779      	b.n	8009c28 <_dtoa_r+0x7f0>
 8009d34:	9b06      	ldr	r3, [sp, #24]
 8009d36:	e777      	b.n	8009c28 <_dtoa_r+0x7f0>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d3c:	e779      	b.n	8009c32 <_dtoa_r+0x7fa>
 8009d3e:	d093      	beq.n	8009c68 <_dtoa_r+0x830>
 8009d40:	9a04      	ldr	r2, [sp, #16]
 8009d42:	331c      	adds	r3, #28
 8009d44:	441a      	add	r2, r3
 8009d46:	9204      	str	r2, [sp, #16]
 8009d48:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d4a:	441e      	add	r6, r3
 8009d4c:	441a      	add	r2, r3
 8009d4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d50:	e78a      	b.n	8009c68 <_dtoa_r+0x830>
 8009d52:	4603      	mov	r3, r0
 8009d54:	e7f4      	b.n	8009d40 <_dtoa_r+0x908>
 8009d56:	9b08      	ldr	r3, [sp, #32]
 8009d58:	46b8      	mov	r8, r7
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	dc20      	bgt.n	8009da0 <_dtoa_r+0x968>
 8009d5e:	469b      	mov	fp, r3
 8009d60:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	dd1e      	ble.n	8009da4 <_dtoa_r+0x96c>
 8009d66:	f1bb 0f00 	cmp.w	fp, #0
 8009d6a:	f47f adb1 	bne.w	80098d0 <_dtoa_r+0x498>
 8009d6e:	4621      	mov	r1, r4
 8009d70:	465b      	mov	r3, fp
 8009d72:	2205      	movs	r2, #5
 8009d74:	4648      	mov	r0, r9
 8009d76:	f000 fa93 	bl	800a2a0 <__multadd>
 8009d7a:	4601      	mov	r1, r0
 8009d7c:	4604      	mov	r4, r0
 8009d7e:	9803      	ldr	r0, [sp, #12]
 8009d80:	f000 fce8 	bl	800a754 <__mcmp>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	f77f ada3 	ble.w	80098d0 <_dtoa_r+0x498>
 8009d8a:	4656      	mov	r6, sl
 8009d8c:	2331      	movs	r3, #49	@ 0x31
 8009d8e:	f108 0801 	add.w	r8, r8, #1
 8009d92:	f806 3b01 	strb.w	r3, [r6], #1
 8009d96:	e59f      	b.n	80098d8 <_dtoa_r+0x4a0>
 8009d98:	46b8      	mov	r8, r7
 8009d9a:	9c08      	ldr	r4, [sp, #32]
 8009d9c:	4625      	mov	r5, r4
 8009d9e:	e7f4      	b.n	8009d8a <_dtoa_r+0x952>
 8009da0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8009da4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 8101 	beq.w	8009fae <_dtoa_r+0xb76>
 8009dac:	2e00      	cmp	r6, #0
 8009dae:	dd05      	ble.n	8009dbc <_dtoa_r+0x984>
 8009db0:	4629      	mov	r1, r5
 8009db2:	4632      	mov	r2, r6
 8009db4:	4648      	mov	r0, r9
 8009db6:	f000 fc61 	bl	800a67c <__lshift>
 8009dba:	4605      	mov	r5, r0
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d05c      	beq.n	8009e7c <_dtoa_r+0xa44>
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	6869      	ldr	r1, [r5, #4]
 8009dc6:	f000 fa09 	bl	800a1dc <_Balloc>
 8009dca:	4606      	mov	r6, r0
 8009dcc:	b928      	cbnz	r0, 8009dda <_dtoa_r+0x9a2>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009dd4:	4b80      	ldr	r3, [pc, #512]	@ (8009fd8 <_dtoa_r+0xba0>)
 8009dd6:	f7ff bb43 	b.w	8009460 <_dtoa_r+0x28>
 8009dda:	692a      	ldr	r2, [r5, #16]
 8009ddc:	f105 010c 	add.w	r1, r5, #12
 8009de0:	3202      	adds	r2, #2
 8009de2:	0092      	lsls	r2, r2, #2
 8009de4:	300c      	adds	r0, #12
 8009de6:	f7ff fa8a 	bl	80092fe <memcpy>
 8009dea:	2201      	movs	r2, #1
 8009dec:	4631      	mov	r1, r6
 8009dee:	4648      	mov	r0, r9
 8009df0:	f000 fc44 	bl	800a67c <__lshift>
 8009df4:	462f      	mov	r7, r5
 8009df6:	4605      	mov	r5, r0
 8009df8:	f10a 0301 	add.w	r3, sl, #1
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	eb0a 030b 	add.w	r3, sl, fp
 8009e02:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e04:	9b06      	ldr	r3, [sp, #24]
 8009e06:	f003 0301 	and.w	r3, r3, #1
 8009e0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e0c:	9b04      	ldr	r3, [sp, #16]
 8009e0e:	4621      	mov	r1, r4
 8009e10:	9803      	ldr	r0, [sp, #12]
 8009e12:	f103 3bff 	add.w	fp, r3, #4294967295
 8009e16:	f7ff fa85 	bl	8009324 <quorem>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	4639      	mov	r1, r7
 8009e1e:	3330      	adds	r3, #48	@ 0x30
 8009e20:	9006      	str	r0, [sp, #24]
 8009e22:	9803      	ldr	r0, [sp, #12]
 8009e24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e26:	f000 fc95 	bl	800a754 <__mcmp>
 8009e2a:	462a      	mov	r2, r5
 8009e2c:	9008      	str	r0, [sp, #32]
 8009e2e:	4621      	mov	r1, r4
 8009e30:	4648      	mov	r0, r9
 8009e32:	f000 fcab 	bl	800a78c <__mdiff>
 8009e36:	68c2      	ldr	r2, [r0, #12]
 8009e38:	4606      	mov	r6, r0
 8009e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e3c:	bb02      	cbnz	r2, 8009e80 <_dtoa_r+0xa48>
 8009e3e:	4601      	mov	r1, r0
 8009e40:	9803      	ldr	r0, [sp, #12]
 8009e42:	f000 fc87 	bl	800a754 <__mcmp>
 8009e46:	4602      	mov	r2, r0
 8009e48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e4a:	4631      	mov	r1, r6
 8009e4c:	4648      	mov	r0, r9
 8009e4e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8009e52:	f000 fa03 	bl	800a25c <_Bfree>
 8009e56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e58:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009e5a:	9e04      	ldr	r6, [sp, #16]
 8009e5c:	ea42 0103 	orr.w	r1, r2, r3
 8009e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e62:	4319      	orrs	r1, r3
 8009e64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e66:	d10d      	bne.n	8009e84 <_dtoa_r+0xa4c>
 8009e68:	2b39      	cmp	r3, #57	@ 0x39
 8009e6a:	d027      	beq.n	8009ebc <_dtoa_r+0xa84>
 8009e6c:	9a08      	ldr	r2, [sp, #32]
 8009e6e:	2a00      	cmp	r2, #0
 8009e70:	dd01      	ble.n	8009e76 <_dtoa_r+0xa3e>
 8009e72:	9b06      	ldr	r3, [sp, #24]
 8009e74:	3331      	adds	r3, #49	@ 0x31
 8009e76:	f88b 3000 	strb.w	r3, [fp]
 8009e7a:	e52e      	b.n	80098da <_dtoa_r+0x4a2>
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	e7b9      	b.n	8009df4 <_dtoa_r+0x9bc>
 8009e80:	2201      	movs	r2, #1
 8009e82:	e7e2      	b.n	8009e4a <_dtoa_r+0xa12>
 8009e84:	9908      	ldr	r1, [sp, #32]
 8009e86:	2900      	cmp	r1, #0
 8009e88:	db04      	blt.n	8009e94 <_dtoa_r+0xa5c>
 8009e8a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8009e8c:	4301      	orrs	r1, r0
 8009e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e90:	4301      	orrs	r1, r0
 8009e92:	d120      	bne.n	8009ed6 <_dtoa_r+0xa9e>
 8009e94:	2a00      	cmp	r2, #0
 8009e96:	ddee      	ble.n	8009e76 <_dtoa_r+0xa3e>
 8009e98:	2201      	movs	r2, #1
 8009e9a:	9903      	ldr	r1, [sp, #12]
 8009e9c:	4648      	mov	r0, r9
 8009e9e:	9304      	str	r3, [sp, #16]
 8009ea0:	f000 fbec 	bl	800a67c <__lshift>
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	9003      	str	r0, [sp, #12]
 8009ea8:	f000 fc54 	bl	800a754 <__mcmp>
 8009eac:	2800      	cmp	r0, #0
 8009eae:	9b04      	ldr	r3, [sp, #16]
 8009eb0:	dc02      	bgt.n	8009eb8 <_dtoa_r+0xa80>
 8009eb2:	d1e0      	bne.n	8009e76 <_dtoa_r+0xa3e>
 8009eb4:	07da      	lsls	r2, r3, #31
 8009eb6:	d5de      	bpl.n	8009e76 <_dtoa_r+0xa3e>
 8009eb8:	2b39      	cmp	r3, #57	@ 0x39
 8009eba:	d1da      	bne.n	8009e72 <_dtoa_r+0xa3a>
 8009ebc:	2339      	movs	r3, #57	@ 0x39
 8009ebe:	f88b 3000 	strb.w	r3, [fp]
 8009ec2:	4633      	mov	r3, r6
 8009ec4:	461e      	mov	r6, r3
 8009ec6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	2a39      	cmp	r2, #57	@ 0x39
 8009ece:	d04e      	beq.n	8009f6e <_dtoa_r+0xb36>
 8009ed0:	3201      	adds	r2, #1
 8009ed2:	701a      	strb	r2, [r3, #0]
 8009ed4:	e501      	b.n	80098da <_dtoa_r+0x4a2>
 8009ed6:	2a00      	cmp	r2, #0
 8009ed8:	dd03      	ble.n	8009ee2 <_dtoa_r+0xaaa>
 8009eda:	2b39      	cmp	r3, #57	@ 0x39
 8009edc:	d0ee      	beq.n	8009ebc <_dtoa_r+0xa84>
 8009ede:	3301      	adds	r3, #1
 8009ee0:	e7c9      	b.n	8009e76 <_dtoa_r+0xa3e>
 8009ee2:	9a04      	ldr	r2, [sp, #16]
 8009ee4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009ee6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009eea:	428a      	cmp	r2, r1
 8009eec:	d028      	beq.n	8009f40 <_dtoa_r+0xb08>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	220a      	movs	r2, #10
 8009ef2:	9903      	ldr	r1, [sp, #12]
 8009ef4:	4648      	mov	r0, r9
 8009ef6:	f000 f9d3 	bl	800a2a0 <__multadd>
 8009efa:	42af      	cmp	r7, r5
 8009efc:	9003      	str	r0, [sp, #12]
 8009efe:	f04f 0300 	mov.w	r3, #0
 8009f02:	f04f 020a 	mov.w	r2, #10
 8009f06:	4639      	mov	r1, r7
 8009f08:	4648      	mov	r0, r9
 8009f0a:	d107      	bne.n	8009f1c <_dtoa_r+0xae4>
 8009f0c:	f000 f9c8 	bl	800a2a0 <__multadd>
 8009f10:	4607      	mov	r7, r0
 8009f12:	4605      	mov	r5, r0
 8009f14:	9b04      	ldr	r3, [sp, #16]
 8009f16:	3301      	adds	r3, #1
 8009f18:	9304      	str	r3, [sp, #16]
 8009f1a:	e777      	b.n	8009e0c <_dtoa_r+0x9d4>
 8009f1c:	f000 f9c0 	bl	800a2a0 <__multadd>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4607      	mov	r7, r0
 8009f24:	2300      	movs	r3, #0
 8009f26:	220a      	movs	r2, #10
 8009f28:	4648      	mov	r0, r9
 8009f2a:	f000 f9b9 	bl	800a2a0 <__multadd>
 8009f2e:	4605      	mov	r5, r0
 8009f30:	e7f0      	b.n	8009f14 <_dtoa_r+0xadc>
 8009f32:	f1bb 0f00 	cmp.w	fp, #0
 8009f36:	bfcc      	ite	gt
 8009f38:	465e      	movgt	r6, fp
 8009f3a:	2601      	movle	r6, #1
 8009f3c:	2700      	movs	r7, #0
 8009f3e:	4456      	add	r6, sl
 8009f40:	2201      	movs	r2, #1
 8009f42:	9903      	ldr	r1, [sp, #12]
 8009f44:	4648      	mov	r0, r9
 8009f46:	9304      	str	r3, [sp, #16]
 8009f48:	f000 fb98 	bl	800a67c <__lshift>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	9003      	str	r0, [sp, #12]
 8009f50:	f000 fc00 	bl	800a754 <__mcmp>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	dcb4      	bgt.n	8009ec2 <_dtoa_r+0xa8a>
 8009f58:	d102      	bne.n	8009f60 <_dtoa_r+0xb28>
 8009f5a:	9b04      	ldr	r3, [sp, #16]
 8009f5c:	07db      	lsls	r3, r3, #31
 8009f5e:	d4b0      	bmi.n	8009ec2 <_dtoa_r+0xa8a>
 8009f60:	4633      	mov	r3, r6
 8009f62:	461e      	mov	r6, r3
 8009f64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f68:	2a30      	cmp	r2, #48	@ 0x30
 8009f6a:	d0fa      	beq.n	8009f62 <_dtoa_r+0xb2a>
 8009f6c:	e4b5      	b.n	80098da <_dtoa_r+0x4a2>
 8009f6e:	459a      	cmp	sl, r3
 8009f70:	d1a8      	bne.n	8009ec4 <_dtoa_r+0xa8c>
 8009f72:	2331      	movs	r3, #49	@ 0x31
 8009f74:	f108 0801 	add.w	r8, r8, #1
 8009f78:	f88a 3000 	strb.w	r3, [sl]
 8009f7c:	e4ad      	b.n	80098da <_dtoa_r+0x4a2>
 8009f7e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009fdc <_dtoa_r+0xba4>
 8009f84:	b11b      	cbz	r3, 8009f8e <_dtoa_r+0xb56>
 8009f86:	f10a 0308 	add.w	r3, sl, #8
 8009f8a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	4650      	mov	r0, sl
 8009f90:	b017      	add	sp, #92	@ 0x5c
 8009f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	f77f ae2e 	ble.w	8009bfa <_dtoa_r+0x7c2>
 8009f9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	e64d      	b.n	8009c42 <_dtoa_r+0x80a>
 8009fa6:	f1bb 0f00 	cmp.w	fp, #0
 8009faa:	f77f aed9 	ble.w	8009d60 <_dtoa_r+0x928>
 8009fae:	4656      	mov	r6, sl
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	9803      	ldr	r0, [sp, #12]
 8009fb4:	f7ff f9b6 	bl	8009324 <quorem>
 8009fb8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009fbc:	f806 3b01 	strb.w	r3, [r6], #1
 8009fc0:	eba6 020a 	sub.w	r2, r6, sl
 8009fc4:	4593      	cmp	fp, r2
 8009fc6:	ddb4      	ble.n	8009f32 <_dtoa_r+0xafa>
 8009fc8:	2300      	movs	r3, #0
 8009fca:	220a      	movs	r2, #10
 8009fcc:	4648      	mov	r0, r9
 8009fce:	9903      	ldr	r1, [sp, #12]
 8009fd0:	f000 f966 	bl	800a2a0 <__multadd>
 8009fd4:	9003      	str	r0, [sp, #12]
 8009fd6:	e7eb      	b.n	8009fb0 <_dtoa_r+0xb78>
 8009fd8:	0800e10f 	.word	0x0800e10f
 8009fdc:	0800e093 	.word	0x0800e093

08009fe0 <_free_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	2900      	cmp	r1, #0
 8009fe6:	d040      	beq.n	800a06a <_free_r+0x8a>
 8009fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fec:	1f0c      	subs	r4, r1, #4
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bfb8      	it	lt
 8009ff2:	18e4      	addlt	r4, r4, r3
 8009ff4:	f000 f8e6 	bl	800a1c4 <__malloc_lock>
 8009ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800a06c <_free_r+0x8c>)
 8009ffa:	6813      	ldr	r3, [r2, #0]
 8009ffc:	b933      	cbnz	r3, 800a00c <_free_r+0x2c>
 8009ffe:	6063      	str	r3, [r4, #4]
 800a000:	6014      	str	r4, [r2, #0]
 800a002:	4628      	mov	r0, r5
 800a004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a008:	f000 b8e2 	b.w	800a1d0 <__malloc_unlock>
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	d908      	bls.n	800a022 <_free_r+0x42>
 800a010:	6820      	ldr	r0, [r4, #0]
 800a012:	1821      	adds	r1, r4, r0
 800a014:	428b      	cmp	r3, r1
 800a016:	bf01      	itttt	eq
 800a018:	6819      	ldreq	r1, [r3, #0]
 800a01a:	685b      	ldreq	r3, [r3, #4]
 800a01c:	1809      	addeq	r1, r1, r0
 800a01e:	6021      	streq	r1, [r4, #0]
 800a020:	e7ed      	b.n	8009ffe <_free_r+0x1e>
 800a022:	461a      	mov	r2, r3
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	b10b      	cbz	r3, 800a02c <_free_r+0x4c>
 800a028:	42a3      	cmp	r3, r4
 800a02a:	d9fa      	bls.n	800a022 <_free_r+0x42>
 800a02c:	6811      	ldr	r1, [r2, #0]
 800a02e:	1850      	adds	r0, r2, r1
 800a030:	42a0      	cmp	r0, r4
 800a032:	d10b      	bne.n	800a04c <_free_r+0x6c>
 800a034:	6820      	ldr	r0, [r4, #0]
 800a036:	4401      	add	r1, r0
 800a038:	1850      	adds	r0, r2, r1
 800a03a:	4283      	cmp	r3, r0
 800a03c:	6011      	str	r1, [r2, #0]
 800a03e:	d1e0      	bne.n	800a002 <_free_r+0x22>
 800a040:	6818      	ldr	r0, [r3, #0]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	4408      	add	r0, r1
 800a046:	6010      	str	r0, [r2, #0]
 800a048:	6053      	str	r3, [r2, #4]
 800a04a:	e7da      	b.n	800a002 <_free_r+0x22>
 800a04c:	d902      	bls.n	800a054 <_free_r+0x74>
 800a04e:	230c      	movs	r3, #12
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	e7d6      	b.n	800a002 <_free_r+0x22>
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	1821      	adds	r1, r4, r0
 800a058:	428b      	cmp	r3, r1
 800a05a:	bf01      	itttt	eq
 800a05c:	6819      	ldreq	r1, [r3, #0]
 800a05e:	685b      	ldreq	r3, [r3, #4]
 800a060:	1809      	addeq	r1, r1, r0
 800a062:	6021      	streq	r1, [r4, #0]
 800a064:	6063      	str	r3, [r4, #4]
 800a066:	6054      	str	r4, [r2, #4]
 800a068:	e7cb      	b.n	800a002 <_free_r+0x22>
 800a06a:	bd38      	pop	{r3, r4, r5, pc}
 800a06c:	2000137c 	.word	0x2000137c

0800a070 <malloc>:
 800a070:	4b02      	ldr	r3, [pc, #8]	@ (800a07c <malloc+0xc>)
 800a072:	4601      	mov	r1, r0
 800a074:	6818      	ldr	r0, [r3, #0]
 800a076:	f000 b825 	b.w	800a0c4 <_malloc_r>
 800a07a:	bf00      	nop
 800a07c:	20000030 	.word	0x20000030

0800a080 <sbrk_aligned>:
 800a080:	b570      	push	{r4, r5, r6, lr}
 800a082:	4e0f      	ldr	r6, [pc, #60]	@ (800a0c0 <sbrk_aligned+0x40>)
 800a084:	460c      	mov	r4, r1
 800a086:	6831      	ldr	r1, [r6, #0]
 800a088:	4605      	mov	r5, r0
 800a08a:	b911      	cbnz	r1, 800a092 <sbrk_aligned+0x12>
 800a08c:	f001 ffb2 	bl	800bff4 <_sbrk_r>
 800a090:	6030      	str	r0, [r6, #0]
 800a092:	4621      	mov	r1, r4
 800a094:	4628      	mov	r0, r5
 800a096:	f001 ffad 	bl	800bff4 <_sbrk_r>
 800a09a:	1c43      	adds	r3, r0, #1
 800a09c:	d103      	bne.n	800a0a6 <sbrk_aligned+0x26>
 800a09e:	f04f 34ff 	mov.w	r4, #4294967295
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	bd70      	pop	{r4, r5, r6, pc}
 800a0a6:	1cc4      	adds	r4, r0, #3
 800a0a8:	f024 0403 	bic.w	r4, r4, #3
 800a0ac:	42a0      	cmp	r0, r4
 800a0ae:	d0f8      	beq.n	800a0a2 <sbrk_aligned+0x22>
 800a0b0:	1a21      	subs	r1, r4, r0
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f001 ff9e 	bl	800bff4 <_sbrk_r>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d1f2      	bne.n	800a0a2 <sbrk_aligned+0x22>
 800a0bc:	e7ef      	b.n	800a09e <sbrk_aligned+0x1e>
 800a0be:	bf00      	nop
 800a0c0:	20001378 	.word	0x20001378

0800a0c4 <_malloc_r>:
 800a0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0c8:	1ccd      	adds	r5, r1, #3
 800a0ca:	f025 0503 	bic.w	r5, r5, #3
 800a0ce:	3508      	adds	r5, #8
 800a0d0:	2d0c      	cmp	r5, #12
 800a0d2:	bf38      	it	cc
 800a0d4:	250c      	movcc	r5, #12
 800a0d6:	2d00      	cmp	r5, #0
 800a0d8:	4606      	mov	r6, r0
 800a0da:	db01      	blt.n	800a0e0 <_malloc_r+0x1c>
 800a0dc:	42a9      	cmp	r1, r5
 800a0de:	d904      	bls.n	800a0ea <_malloc_r+0x26>
 800a0e0:	230c      	movs	r3, #12
 800a0e2:	6033      	str	r3, [r6, #0]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1c0 <_malloc_r+0xfc>
 800a0ee:	f000 f869 	bl	800a1c4 <__malloc_lock>
 800a0f2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0f6:	461c      	mov	r4, r3
 800a0f8:	bb44      	cbnz	r4, 800a14c <_malloc_r+0x88>
 800a0fa:	4629      	mov	r1, r5
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	f7ff ffbf 	bl	800a080 <sbrk_aligned>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	4604      	mov	r4, r0
 800a106:	d158      	bne.n	800a1ba <_malloc_r+0xf6>
 800a108:	f8d8 4000 	ldr.w	r4, [r8]
 800a10c:	4627      	mov	r7, r4
 800a10e:	2f00      	cmp	r7, #0
 800a110:	d143      	bne.n	800a19a <_malloc_r+0xd6>
 800a112:	2c00      	cmp	r4, #0
 800a114:	d04b      	beq.n	800a1ae <_malloc_r+0xea>
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	4639      	mov	r1, r7
 800a11a:	4630      	mov	r0, r6
 800a11c:	eb04 0903 	add.w	r9, r4, r3
 800a120:	f001 ff68 	bl	800bff4 <_sbrk_r>
 800a124:	4581      	cmp	r9, r0
 800a126:	d142      	bne.n	800a1ae <_malloc_r+0xea>
 800a128:	6821      	ldr	r1, [r4, #0]
 800a12a:	4630      	mov	r0, r6
 800a12c:	1a6d      	subs	r5, r5, r1
 800a12e:	4629      	mov	r1, r5
 800a130:	f7ff ffa6 	bl	800a080 <sbrk_aligned>
 800a134:	3001      	adds	r0, #1
 800a136:	d03a      	beq.n	800a1ae <_malloc_r+0xea>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	442b      	add	r3, r5
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	f8d8 3000 	ldr.w	r3, [r8]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	bb62      	cbnz	r2, 800a1a0 <_malloc_r+0xdc>
 800a146:	f8c8 7000 	str.w	r7, [r8]
 800a14a:	e00f      	b.n	800a16c <_malloc_r+0xa8>
 800a14c:	6822      	ldr	r2, [r4, #0]
 800a14e:	1b52      	subs	r2, r2, r5
 800a150:	d420      	bmi.n	800a194 <_malloc_r+0xd0>
 800a152:	2a0b      	cmp	r2, #11
 800a154:	d917      	bls.n	800a186 <_malloc_r+0xc2>
 800a156:	1961      	adds	r1, r4, r5
 800a158:	42a3      	cmp	r3, r4
 800a15a:	6025      	str	r5, [r4, #0]
 800a15c:	bf18      	it	ne
 800a15e:	6059      	strne	r1, [r3, #4]
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	bf08      	it	eq
 800a164:	f8c8 1000 	streq.w	r1, [r8]
 800a168:	5162      	str	r2, [r4, r5]
 800a16a:	604b      	str	r3, [r1, #4]
 800a16c:	4630      	mov	r0, r6
 800a16e:	f000 f82f 	bl	800a1d0 <__malloc_unlock>
 800a172:	f104 000b 	add.w	r0, r4, #11
 800a176:	1d23      	adds	r3, r4, #4
 800a178:	f020 0007 	bic.w	r0, r0, #7
 800a17c:	1ac2      	subs	r2, r0, r3
 800a17e:	bf1c      	itt	ne
 800a180:	1a1b      	subne	r3, r3, r0
 800a182:	50a3      	strne	r3, [r4, r2]
 800a184:	e7af      	b.n	800a0e6 <_malloc_r+0x22>
 800a186:	6862      	ldr	r2, [r4, #4]
 800a188:	42a3      	cmp	r3, r4
 800a18a:	bf0c      	ite	eq
 800a18c:	f8c8 2000 	streq.w	r2, [r8]
 800a190:	605a      	strne	r2, [r3, #4]
 800a192:	e7eb      	b.n	800a16c <_malloc_r+0xa8>
 800a194:	4623      	mov	r3, r4
 800a196:	6864      	ldr	r4, [r4, #4]
 800a198:	e7ae      	b.n	800a0f8 <_malloc_r+0x34>
 800a19a:	463c      	mov	r4, r7
 800a19c:	687f      	ldr	r7, [r7, #4]
 800a19e:	e7b6      	b.n	800a10e <_malloc_r+0x4a>
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	d1fb      	bne.n	800a1a0 <_malloc_r+0xdc>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	6053      	str	r3, [r2, #4]
 800a1ac:	e7de      	b.n	800a16c <_malloc_r+0xa8>
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	6033      	str	r3, [r6, #0]
 800a1b4:	f000 f80c 	bl	800a1d0 <__malloc_unlock>
 800a1b8:	e794      	b.n	800a0e4 <_malloc_r+0x20>
 800a1ba:	6005      	str	r5, [r0, #0]
 800a1bc:	e7d6      	b.n	800a16c <_malloc_r+0xa8>
 800a1be:	bf00      	nop
 800a1c0:	2000137c 	.word	0x2000137c

0800a1c4 <__malloc_lock>:
 800a1c4:	4801      	ldr	r0, [pc, #4]	@ (800a1cc <__malloc_lock+0x8>)
 800a1c6:	f7ff b88a 	b.w	80092de <__retarget_lock_acquire_recursive>
 800a1ca:	bf00      	nop
 800a1cc:	20001374 	.word	0x20001374

0800a1d0 <__malloc_unlock>:
 800a1d0:	4801      	ldr	r0, [pc, #4]	@ (800a1d8 <__malloc_unlock+0x8>)
 800a1d2:	f7ff b885 	b.w	80092e0 <__retarget_lock_release_recursive>
 800a1d6:	bf00      	nop
 800a1d8:	20001374 	.word	0x20001374

0800a1dc <_Balloc>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	69c6      	ldr	r6, [r0, #28]
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	460d      	mov	r5, r1
 800a1e4:	b976      	cbnz	r6, 800a204 <_Balloc+0x28>
 800a1e6:	2010      	movs	r0, #16
 800a1e8:	f7ff ff42 	bl	800a070 <malloc>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	61e0      	str	r0, [r4, #28]
 800a1f0:	b920      	cbnz	r0, 800a1fc <_Balloc+0x20>
 800a1f2:	216b      	movs	r1, #107	@ 0x6b
 800a1f4:	4b17      	ldr	r3, [pc, #92]	@ (800a254 <_Balloc+0x78>)
 800a1f6:	4818      	ldr	r0, [pc, #96]	@ (800a258 <_Balloc+0x7c>)
 800a1f8:	f001 ff12 	bl	800c020 <__assert_func>
 800a1fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a200:	6006      	str	r6, [r0, #0]
 800a202:	60c6      	str	r6, [r0, #12]
 800a204:	69e6      	ldr	r6, [r4, #28]
 800a206:	68f3      	ldr	r3, [r6, #12]
 800a208:	b183      	cbz	r3, 800a22c <_Balloc+0x50>
 800a20a:	69e3      	ldr	r3, [r4, #28]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a212:	b9b8      	cbnz	r0, 800a244 <_Balloc+0x68>
 800a214:	2101      	movs	r1, #1
 800a216:	fa01 f605 	lsl.w	r6, r1, r5
 800a21a:	1d72      	adds	r2, r6, #5
 800a21c:	4620      	mov	r0, r4
 800a21e:	0092      	lsls	r2, r2, #2
 800a220:	f001 ff1c 	bl	800c05c <_calloc_r>
 800a224:	b160      	cbz	r0, 800a240 <_Balloc+0x64>
 800a226:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a22a:	e00e      	b.n	800a24a <_Balloc+0x6e>
 800a22c:	2221      	movs	r2, #33	@ 0x21
 800a22e:	2104      	movs	r1, #4
 800a230:	4620      	mov	r0, r4
 800a232:	f001 ff13 	bl	800c05c <_calloc_r>
 800a236:	69e3      	ldr	r3, [r4, #28]
 800a238:	60f0      	str	r0, [r6, #12]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d1e4      	bne.n	800a20a <_Balloc+0x2e>
 800a240:	2000      	movs	r0, #0
 800a242:	bd70      	pop	{r4, r5, r6, pc}
 800a244:	6802      	ldr	r2, [r0, #0]
 800a246:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a24a:	2300      	movs	r3, #0
 800a24c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a250:	e7f7      	b.n	800a242 <_Balloc+0x66>
 800a252:	bf00      	nop
 800a254:	0800e0a0 	.word	0x0800e0a0
 800a258:	0800e120 	.word	0x0800e120

0800a25c <_Bfree>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	69c6      	ldr	r6, [r0, #28]
 800a260:	4605      	mov	r5, r0
 800a262:	460c      	mov	r4, r1
 800a264:	b976      	cbnz	r6, 800a284 <_Bfree+0x28>
 800a266:	2010      	movs	r0, #16
 800a268:	f7ff ff02 	bl	800a070 <malloc>
 800a26c:	4602      	mov	r2, r0
 800a26e:	61e8      	str	r0, [r5, #28]
 800a270:	b920      	cbnz	r0, 800a27c <_Bfree+0x20>
 800a272:	218f      	movs	r1, #143	@ 0x8f
 800a274:	4b08      	ldr	r3, [pc, #32]	@ (800a298 <_Bfree+0x3c>)
 800a276:	4809      	ldr	r0, [pc, #36]	@ (800a29c <_Bfree+0x40>)
 800a278:	f001 fed2 	bl	800c020 <__assert_func>
 800a27c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a280:	6006      	str	r6, [r0, #0]
 800a282:	60c6      	str	r6, [r0, #12]
 800a284:	b13c      	cbz	r4, 800a296 <_Bfree+0x3a>
 800a286:	69eb      	ldr	r3, [r5, #28]
 800a288:	6862      	ldr	r2, [r4, #4]
 800a28a:	68db      	ldr	r3, [r3, #12]
 800a28c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a290:	6021      	str	r1, [r4, #0]
 800a292:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a296:	bd70      	pop	{r4, r5, r6, pc}
 800a298:	0800e0a0 	.word	0x0800e0a0
 800a29c:	0800e120 	.word	0x0800e120

0800a2a0 <__multadd>:
 800a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a4:	4607      	mov	r7, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	461e      	mov	r6, r3
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	690d      	ldr	r5, [r1, #16]
 800a2ae:	f101 0c14 	add.w	ip, r1, #20
 800a2b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	b299      	uxth	r1, r3
 800a2ba:	fb02 6101 	mla	r1, r2, r1, r6
 800a2be:	0c1e      	lsrs	r6, r3, #16
 800a2c0:	0c0b      	lsrs	r3, r1, #16
 800a2c2:	fb02 3306 	mla	r3, r2, r6, r3
 800a2c6:	b289      	uxth	r1, r1
 800a2c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2cc:	4285      	cmp	r5, r0
 800a2ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2d6:	dcec      	bgt.n	800a2b2 <__multadd+0x12>
 800a2d8:	b30e      	cbz	r6, 800a31e <__multadd+0x7e>
 800a2da:	68a3      	ldr	r3, [r4, #8]
 800a2dc:	42ab      	cmp	r3, r5
 800a2de:	dc19      	bgt.n	800a314 <__multadd+0x74>
 800a2e0:	6861      	ldr	r1, [r4, #4]
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	3101      	adds	r1, #1
 800a2e6:	f7ff ff79 	bl	800a1dc <_Balloc>
 800a2ea:	4680      	mov	r8, r0
 800a2ec:	b928      	cbnz	r0, 800a2fa <__multadd+0x5a>
 800a2ee:	4602      	mov	r2, r0
 800a2f0:	21ba      	movs	r1, #186	@ 0xba
 800a2f2:	4b0c      	ldr	r3, [pc, #48]	@ (800a324 <__multadd+0x84>)
 800a2f4:	480c      	ldr	r0, [pc, #48]	@ (800a328 <__multadd+0x88>)
 800a2f6:	f001 fe93 	bl	800c020 <__assert_func>
 800a2fa:	6922      	ldr	r2, [r4, #16]
 800a2fc:	f104 010c 	add.w	r1, r4, #12
 800a300:	3202      	adds	r2, #2
 800a302:	0092      	lsls	r2, r2, #2
 800a304:	300c      	adds	r0, #12
 800a306:	f7fe fffa 	bl	80092fe <memcpy>
 800a30a:	4621      	mov	r1, r4
 800a30c:	4638      	mov	r0, r7
 800a30e:	f7ff ffa5 	bl	800a25c <_Bfree>
 800a312:	4644      	mov	r4, r8
 800a314:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a318:	3501      	adds	r5, #1
 800a31a:	615e      	str	r6, [r3, #20]
 800a31c:	6125      	str	r5, [r4, #16]
 800a31e:	4620      	mov	r0, r4
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	0800e10f 	.word	0x0800e10f
 800a328:	0800e120 	.word	0x0800e120

0800a32c <__s2b>:
 800a32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a330:	4615      	mov	r5, r2
 800a332:	2209      	movs	r2, #9
 800a334:	461f      	mov	r7, r3
 800a336:	3308      	adds	r3, #8
 800a338:	460c      	mov	r4, r1
 800a33a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a33e:	4606      	mov	r6, r0
 800a340:	2201      	movs	r2, #1
 800a342:	2100      	movs	r1, #0
 800a344:	429a      	cmp	r2, r3
 800a346:	db09      	blt.n	800a35c <__s2b+0x30>
 800a348:	4630      	mov	r0, r6
 800a34a:	f7ff ff47 	bl	800a1dc <_Balloc>
 800a34e:	b940      	cbnz	r0, 800a362 <__s2b+0x36>
 800a350:	4602      	mov	r2, r0
 800a352:	21d3      	movs	r1, #211	@ 0xd3
 800a354:	4b18      	ldr	r3, [pc, #96]	@ (800a3b8 <__s2b+0x8c>)
 800a356:	4819      	ldr	r0, [pc, #100]	@ (800a3bc <__s2b+0x90>)
 800a358:	f001 fe62 	bl	800c020 <__assert_func>
 800a35c:	0052      	lsls	r2, r2, #1
 800a35e:	3101      	adds	r1, #1
 800a360:	e7f0      	b.n	800a344 <__s2b+0x18>
 800a362:	9b08      	ldr	r3, [sp, #32]
 800a364:	2d09      	cmp	r5, #9
 800a366:	6143      	str	r3, [r0, #20]
 800a368:	f04f 0301 	mov.w	r3, #1
 800a36c:	6103      	str	r3, [r0, #16]
 800a36e:	dd16      	ble.n	800a39e <__s2b+0x72>
 800a370:	f104 0909 	add.w	r9, r4, #9
 800a374:	46c8      	mov	r8, r9
 800a376:	442c      	add	r4, r5
 800a378:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a37c:	4601      	mov	r1, r0
 800a37e:	220a      	movs	r2, #10
 800a380:	4630      	mov	r0, r6
 800a382:	3b30      	subs	r3, #48	@ 0x30
 800a384:	f7ff ff8c 	bl	800a2a0 <__multadd>
 800a388:	45a0      	cmp	r8, r4
 800a38a:	d1f5      	bne.n	800a378 <__s2b+0x4c>
 800a38c:	f1a5 0408 	sub.w	r4, r5, #8
 800a390:	444c      	add	r4, r9
 800a392:	1b2d      	subs	r5, r5, r4
 800a394:	1963      	adds	r3, r4, r5
 800a396:	42bb      	cmp	r3, r7
 800a398:	db04      	blt.n	800a3a4 <__s2b+0x78>
 800a39a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a39e:	2509      	movs	r5, #9
 800a3a0:	340a      	adds	r4, #10
 800a3a2:	e7f6      	b.n	800a392 <__s2b+0x66>
 800a3a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3a8:	4601      	mov	r1, r0
 800a3aa:	220a      	movs	r2, #10
 800a3ac:	4630      	mov	r0, r6
 800a3ae:	3b30      	subs	r3, #48	@ 0x30
 800a3b0:	f7ff ff76 	bl	800a2a0 <__multadd>
 800a3b4:	e7ee      	b.n	800a394 <__s2b+0x68>
 800a3b6:	bf00      	nop
 800a3b8:	0800e10f 	.word	0x0800e10f
 800a3bc:	0800e120 	.word	0x0800e120

0800a3c0 <__hi0bits>:
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3c6:	bf3a      	itte	cc
 800a3c8:	0403      	lslcc	r3, r0, #16
 800a3ca:	2010      	movcc	r0, #16
 800a3cc:	2000      	movcs	r0, #0
 800a3ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3d2:	bf3c      	itt	cc
 800a3d4:	021b      	lslcc	r3, r3, #8
 800a3d6:	3008      	addcc	r0, #8
 800a3d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3dc:	bf3c      	itt	cc
 800a3de:	011b      	lslcc	r3, r3, #4
 800a3e0:	3004      	addcc	r0, #4
 800a3e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3e6:	bf3c      	itt	cc
 800a3e8:	009b      	lslcc	r3, r3, #2
 800a3ea:	3002      	addcc	r0, #2
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	db05      	blt.n	800a3fc <__hi0bits+0x3c>
 800a3f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3f4:	f100 0001 	add.w	r0, r0, #1
 800a3f8:	bf08      	it	eq
 800a3fa:	2020      	moveq	r0, #32
 800a3fc:	4770      	bx	lr

0800a3fe <__lo0bits>:
 800a3fe:	6803      	ldr	r3, [r0, #0]
 800a400:	4602      	mov	r2, r0
 800a402:	f013 0007 	ands.w	r0, r3, #7
 800a406:	d00b      	beq.n	800a420 <__lo0bits+0x22>
 800a408:	07d9      	lsls	r1, r3, #31
 800a40a:	d421      	bmi.n	800a450 <__lo0bits+0x52>
 800a40c:	0798      	lsls	r0, r3, #30
 800a40e:	bf49      	itett	mi
 800a410:	085b      	lsrmi	r3, r3, #1
 800a412:	089b      	lsrpl	r3, r3, #2
 800a414:	2001      	movmi	r0, #1
 800a416:	6013      	strmi	r3, [r2, #0]
 800a418:	bf5c      	itt	pl
 800a41a:	2002      	movpl	r0, #2
 800a41c:	6013      	strpl	r3, [r2, #0]
 800a41e:	4770      	bx	lr
 800a420:	b299      	uxth	r1, r3
 800a422:	b909      	cbnz	r1, 800a428 <__lo0bits+0x2a>
 800a424:	2010      	movs	r0, #16
 800a426:	0c1b      	lsrs	r3, r3, #16
 800a428:	b2d9      	uxtb	r1, r3
 800a42a:	b909      	cbnz	r1, 800a430 <__lo0bits+0x32>
 800a42c:	3008      	adds	r0, #8
 800a42e:	0a1b      	lsrs	r3, r3, #8
 800a430:	0719      	lsls	r1, r3, #28
 800a432:	bf04      	itt	eq
 800a434:	091b      	lsreq	r3, r3, #4
 800a436:	3004      	addeq	r0, #4
 800a438:	0799      	lsls	r1, r3, #30
 800a43a:	bf04      	itt	eq
 800a43c:	089b      	lsreq	r3, r3, #2
 800a43e:	3002      	addeq	r0, #2
 800a440:	07d9      	lsls	r1, r3, #31
 800a442:	d403      	bmi.n	800a44c <__lo0bits+0x4e>
 800a444:	085b      	lsrs	r3, r3, #1
 800a446:	f100 0001 	add.w	r0, r0, #1
 800a44a:	d003      	beq.n	800a454 <__lo0bits+0x56>
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	4770      	bx	lr
 800a450:	2000      	movs	r0, #0
 800a452:	4770      	bx	lr
 800a454:	2020      	movs	r0, #32
 800a456:	4770      	bx	lr

0800a458 <__i2b>:
 800a458:	b510      	push	{r4, lr}
 800a45a:	460c      	mov	r4, r1
 800a45c:	2101      	movs	r1, #1
 800a45e:	f7ff febd 	bl	800a1dc <_Balloc>
 800a462:	4602      	mov	r2, r0
 800a464:	b928      	cbnz	r0, 800a472 <__i2b+0x1a>
 800a466:	f240 1145 	movw	r1, #325	@ 0x145
 800a46a:	4b04      	ldr	r3, [pc, #16]	@ (800a47c <__i2b+0x24>)
 800a46c:	4804      	ldr	r0, [pc, #16]	@ (800a480 <__i2b+0x28>)
 800a46e:	f001 fdd7 	bl	800c020 <__assert_func>
 800a472:	2301      	movs	r3, #1
 800a474:	6144      	str	r4, [r0, #20]
 800a476:	6103      	str	r3, [r0, #16]
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	bf00      	nop
 800a47c:	0800e10f 	.word	0x0800e10f
 800a480:	0800e120 	.word	0x0800e120

0800a484 <__multiply>:
 800a484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a488:	4617      	mov	r7, r2
 800a48a:	690a      	ldr	r2, [r1, #16]
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	4689      	mov	r9, r1
 800a490:	429a      	cmp	r2, r3
 800a492:	bfa2      	ittt	ge
 800a494:	463b      	movge	r3, r7
 800a496:	460f      	movge	r7, r1
 800a498:	4699      	movge	r9, r3
 800a49a:	693d      	ldr	r5, [r7, #16]
 800a49c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	6879      	ldr	r1, [r7, #4]
 800a4a4:	eb05 060a 	add.w	r6, r5, sl
 800a4a8:	42b3      	cmp	r3, r6
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	bfb8      	it	lt
 800a4ae:	3101      	addlt	r1, #1
 800a4b0:	f7ff fe94 	bl	800a1dc <_Balloc>
 800a4b4:	b930      	cbnz	r0, 800a4c4 <__multiply+0x40>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4bc:	4b40      	ldr	r3, [pc, #256]	@ (800a5c0 <__multiply+0x13c>)
 800a4be:	4841      	ldr	r0, [pc, #260]	@ (800a5c4 <__multiply+0x140>)
 800a4c0:	f001 fdae 	bl	800c020 <__assert_func>
 800a4c4:	f100 0414 	add.w	r4, r0, #20
 800a4c8:	4623      	mov	r3, r4
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a4d0:	4573      	cmp	r3, lr
 800a4d2:	d320      	bcc.n	800a516 <__multiply+0x92>
 800a4d4:	f107 0814 	add.w	r8, r7, #20
 800a4d8:	f109 0114 	add.w	r1, r9, #20
 800a4dc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a4e0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a4e4:	9302      	str	r3, [sp, #8]
 800a4e6:	1beb      	subs	r3, r5, r7
 800a4e8:	3b15      	subs	r3, #21
 800a4ea:	f023 0303 	bic.w	r3, r3, #3
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	3715      	adds	r7, #21
 800a4f2:	42bd      	cmp	r5, r7
 800a4f4:	bf38      	it	cc
 800a4f6:	2304      	movcc	r3, #4
 800a4f8:	9301      	str	r3, [sp, #4]
 800a4fa:	9b02      	ldr	r3, [sp, #8]
 800a4fc:	9103      	str	r1, [sp, #12]
 800a4fe:	428b      	cmp	r3, r1
 800a500:	d80c      	bhi.n	800a51c <__multiply+0x98>
 800a502:	2e00      	cmp	r6, #0
 800a504:	dd03      	ble.n	800a50e <__multiply+0x8a>
 800a506:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d055      	beq.n	800a5ba <__multiply+0x136>
 800a50e:	6106      	str	r6, [r0, #16]
 800a510:	b005      	add	sp, #20
 800a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a516:	f843 2b04 	str.w	r2, [r3], #4
 800a51a:	e7d9      	b.n	800a4d0 <__multiply+0x4c>
 800a51c:	f8b1 a000 	ldrh.w	sl, [r1]
 800a520:	f1ba 0f00 	cmp.w	sl, #0
 800a524:	d01f      	beq.n	800a566 <__multiply+0xe2>
 800a526:	46c4      	mov	ip, r8
 800a528:	46a1      	mov	r9, r4
 800a52a:	2700      	movs	r7, #0
 800a52c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a530:	f8d9 3000 	ldr.w	r3, [r9]
 800a534:	fa1f fb82 	uxth.w	fp, r2
 800a538:	b29b      	uxth	r3, r3
 800a53a:	fb0a 330b 	mla	r3, sl, fp, r3
 800a53e:	443b      	add	r3, r7
 800a540:	f8d9 7000 	ldr.w	r7, [r9]
 800a544:	0c12      	lsrs	r2, r2, #16
 800a546:	0c3f      	lsrs	r7, r7, #16
 800a548:	fb0a 7202 	mla	r2, sl, r2, r7
 800a54c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a550:	b29b      	uxth	r3, r3
 800a552:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a556:	4565      	cmp	r5, ip
 800a558:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a55c:	f849 3b04 	str.w	r3, [r9], #4
 800a560:	d8e4      	bhi.n	800a52c <__multiply+0xa8>
 800a562:	9b01      	ldr	r3, [sp, #4]
 800a564:	50e7      	str	r7, [r4, r3]
 800a566:	9b03      	ldr	r3, [sp, #12]
 800a568:	3104      	adds	r1, #4
 800a56a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a56e:	f1b9 0f00 	cmp.w	r9, #0
 800a572:	d020      	beq.n	800a5b6 <__multiply+0x132>
 800a574:	4647      	mov	r7, r8
 800a576:	46a4      	mov	ip, r4
 800a578:	f04f 0a00 	mov.w	sl, #0
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	f8b7 b000 	ldrh.w	fp, [r7]
 800a582:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a586:	b29b      	uxth	r3, r3
 800a588:	fb09 220b 	mla	r2, r9, fp, r2
 800a58c:	4452      	add	r2, sl
 800a58e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a592:	f84c 3b04 	str.w	r3, [ip], #4
 800a596:	f857 3b04 	ldr.w	r3, [r7], #4
 800a59a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a59e:	f8bc 3000 	ldrh.w	r3, [ip]
 800a5a2:	42bd      	cmp	r5, r7
 800a5a4:	fb09 330a 	mla	r3, r9, sl, r3
 800a5a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a5ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5b0:	d8e5      	bhi.n	800a57e <__multiply+0xfa>
 800a5b2:	9a01      	ldr	r2, [sp, #4]
 800a5b4:	50a3      	str	r3, [r4, r2]
 800a5b6:	3404      	adds	r4, #4
 800a5b8:	e79f      	b.n	800a4fa <__multiply+0x76>
 800a5ba:	3e01      	subs	r6, #1
 800a5bc:	e7a1      	b.n	800a502 <__multiply+0x7e>
 800a5be:	bf00      	nop
 800a5c0:	0800e10f 	.word	0x0800e10f
 800a5c4:	0800e120 	.word	0x0800e120

0800a5c8 <__pow5mult>:
 800a5c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5cc:	4615      	mov	r5, r2
 800a5ce:	f012 0203 	ands.w	r2, r2, #3
 800a5d2:	4607      	mov	r7, r0
 800a5d4:	460e      	mov	r6, r1
 800a5d6:	d007      	beq.n	800a5e8 <__pow5mult+0x20>
 800a5d8:	4c25      	ldr	r4, [pc, #148]	@ (800a670 <__pow5mult+0xa8>)
 800a5da:	3a01      	subs	r2, #1
 800a5dc:	2300      	movs	r3, #0
 800a5de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5e2:	f7ff fe5d 	bl	800a2a0 <__multadd>
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	10ad      	asrs	r5, r5, #2
 800a5ea:	d03d      	beq.n	800a668 <__pow5mult+0xa0>
 800a5ec:	69fc      	ldr	r4, [r7, #28]
 800a5ee:	b97c      	cbnz	r4, 800a610 <__pow5mult+0x48>
 800a5f0:	2010      	movs	r0, #16
 800a5f2:	f7ff fd3d 	bl	800a070 <malloc>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	61f8      	str	r0, [r7, #28]
 800a5fa:	b928      	cbnz	r0, 800a608 <__pow5mult+0x40>
 800a5fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a600:	4b1c      	ldr	r3, [pc, #112]	@ (800a674 <__pow5mult+0xac>)
 800a602:	481d      	ldr	r0, [pc, #116]	@ (800a678 <__pow5mult+0xb0>)
 800a604:	f001 fd0c 	bl	800c020 <__assert_func>
 800a608:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a60c:	6004      	str	r4, [r0, #0]
 800a60e:	60c4      	str	r4, [r0, #12]
 800a610:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a614:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a618:	b94c      	cbnz	r4, 800a62e <__pow5mult+0x66>
 800a61a:	f240 2171 	movw	r1, #625	@ 0x271
 800a61e:	4638      	mov	r0, r7
 800a620:	f7ff ff1a 	bl	800a458 <__i2b>
 800a624:	2300      	movs	r3, #0
 800a626:	4604      	mov	r4, r0
 800a628:	f8c8 0008 	str.w	r0, [r8, #8]
 800a62c:	6003      	str	r3, [r0, #0]
 800a62e:	f04f 0900 	mov.w	r9, #0
 800a632:	07eb      	lsls	r3, r5, #31
 800a634:	d50a      	bpl.n	800a64c <__pow5mult+0x84>
 800a636:	4631      	mov	r1, r6
 800a638:	4622      	mov	r2, r4
 800a63a:	4638      	mov	r0, r7
 800a63c:	f7ff ff22 	bl	800a484 <__multiply>
 800a640:	4680      	mov	r8, r0
 800a642:	4631      	mov	r1, r6
 800a644:	4638      	mov	r0, r7
 800a646:	f7ff fe09 	bl	800a25c <_Bfree>
 800a64a:	4646      	mov	r6, r8
 800a64c:	106d      	asrs	r5, r5, #1
 800a64e:	d00b      	beq.n	800a668 <__pow5mult+0xa0>
 800a650:	6820      	ldr	r0, [r4, #0]
 800a652:	b938      	cbnz	r0, 800a664 <__pow5mult+0x9c>
 800a654:	4622      	mov	r2, r4
 800a656:	4621      	mov	r1, r4
 800a658:	4638      	mov	r0, r7
 800a65a:	f7ff ff13 	bl	800a484 <__multiply>
 800a65e:	6020      	str	r0, [r4, #0]
 800a660:	f8c0 9000 	str.w	r9, [r0]
 800a664:	4604      	mov	r4, r0
 800a666:	e7e4      	b.n	800a632 <__pow5mult+0x6a>
 800a668:	4630      	mov	r0, r6
 800a66a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a66e:	bf00      	nop
 800a670:	0800e230 	.word	0x0800e230
 800a674:	0800e0a0 	.word	0x0800e0a0
 800a678:	0800e120 	.word	0x0800e120

0800a67c <__lshift>:
 800a67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a680:	460c      	mov	r4, r1
 800a682:	4607      	mov	r7, r0
 800a684:	4691      	mov	r9, r2
 800a686:	6923      	ldr	r3, [r4, #16]
 800a688:	6849      	ldr	r1, [r1, #4]
 800a68a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a68e:	68a3      	ldr	r3, [r4, #8]
 800a690:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a694:	f108 0601 	add.w	r6, r8, #1
 800a698:	42b3      	cmp	r3, r6
 800a69a:	db0b      	blt.n	800a6b4 <__lshift+0x38>
 800a69c:	4638      	mov	r0, r7
 800a69e:	f7ff fd9d 	bl	800a1dc <_Balloc>
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	b948      	cbnz	r0, 800a6ba <__lshift+0x3e>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6ac:	4b27      	ldr	r3, [pc, #156]	@ (800a74c <__lshift+0xd0>)
 800a6ae:	4828      	ldr	r0, [pc, #160]	@ (800a750 <__lshift+0xd4>)
 800a6b0:	f001 fcb6 	bl	800c020 <__assert_func>
 800a6b4:	3101      	adds	r1, #1
 800a6b6:	005b      	lsls	r3, r3, #1
 800a6b8:	e7ee      	b.n	800a698 <__lshift+0x1c>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	f100 0114 	add.w	r1, r0, #20
 800a6c0:	f100 0210 	add.w	r2, r0, #16
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	4553      	cmp	r3, sl
 800a6c8:	db33      	blt.n	800a732 <__lshift+0xb6>
 800a6ca:	6920      	ldr	r0, [r4, #16]
 800a6cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6d0:	f104 0314 	add.w	r3, r4, #20
 800a6d4:	f019 091f 	ands.w	r9, r9, #31
 800a6d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6e0:	d02b      	beq.n	800a73a <__lshift+0xbe>
 800a6e2:	468a      	mov	sl, r1
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	fa00 f009 	lsl.w	r0, r0, r9
 800a6f0:	4310      	orrs	r0, r2
 800a6f2:	f84a 0b04 	str.w	r0, [sl], #4
 800a6f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fa:	459c      	cmp	ip, r3
 800a6fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a700:	d8f3      	bhi.n	800a6ea <__lshift+0x6e>
 800a702:	ebac 0304 	sub.w	r3, ip, r4
 800a706:	3b15      	subs	r3, #21
 800a708:	f023 0303 	bic.w	r3, r3, #3
 800a70c:	3304      	adds	r3, #4
 800a70e:	f104 0015 	add.w	r0, r4, #21
 800a712:	4560      	cmp	r0, ip
 800a714:	bf88      	it	hi
 800a716:	2304      	movhi	r3, #4
 800a718:	50ca      	str	r2, [r1, r3]
 800a71a:	b10a      	cbz	r2, 800a720 <__lshift+0xa4>
 800a71c:	f108 0602 	add.w	r6, r8, #2
 800a720:	3e01      	subs	r6, #1
 800a722:	4638      	mov	r0, r7
 800a724:	4621      	mov	r1, r4
 800a726:	612e      	str	r6, [r5, #16]
 800a728:	f7ff fd98 	bl	800a25c <_Bfree>
 800a72c:	4628      	mov	r0, r5
 800a72e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a732:	f842 0f04 	str.w	r0, [r2, #4]!
 800a736:	3301      	adds	r3, #1
 800a738:	e7c5      	b.n	800a6c6 <__lshift+0x4a>
 800a73a:	3904      	subs	r1, #4
 800a73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a740:	459c      	cmp	ip, r3
 800a742:	f841 2f04 	str.w	r2, [r1, #4]!
 800a746:	d8f9      	bhi.n	800a73c <__lshift+0xc0>
 800a748:	e7ea      	b.n	800a720 <__lshift+0xa4>
 800a74a:	bf00      	nop
 800a74c:	0800e10f 	.word	0x0800e10f
 800a750:	0800e120 	.word	0x0800e120

0800a754 <__mcmp>:
 800a754:	4603      	mov	r3, r0
 800a756:	690a      	ldr	r2, [r1, #16]
 800a758:	6900      	ldr	r0, [r0, #16]
 800a75a:	b530      	push	{r4, r5, lr}
 800a75c:	1a80      	subs	r0, r0, r2
 800a75e:	d10e      	bne.n	800a77e <__mcmp+0x2a>
 800a760:	3314      	adds	r3, #20
 800a762:	3114      	adds	r1, #20
 800a764:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a768:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a76c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a770:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a774:	4295      	cmp	r5, r2
 800a776:	d003      	beq.n	800a780 <__mcmp+0x2c>
 800a778:	d205      	bcs.n	800a786 <__mcmp+0x32>
 800a77a:	f04f 30ff 	mov.w	r0, #4294967295
 800a77e:	bd30      	pop	{r4, r5, pc}
 800a780:	42a3      	cmp	r3, r4
 800a782:	d3f3      	bcc.n	800a76c <__mcmp+0x18>
 800a784:	e7fb      	b.n	800a77e <__mcmp+0x2a>
 800a786:	2001      	movs	r0, #1
 800a788:	e7f9      	b.n	800a77e <__mcmp+0x2a>
	...

0800a78c <__mdiff>:
 800a78c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a790:	4689      	mov	r9, r1
 800a792:	4606      	mov	r6, r0
 800a794:	4611      	mov	r1, r2
 800a796:	4648      	mov	r0, r9
 800a798:	4614      	mov	r4, r2
 800a79a:	f7ff ffdb 	bl	800a754 <__mcmp>
 800a79e:	1e05      	subs	r5, r0, #0
 800a7a0:	d112      	bne.n	800a7c8 <__mdiff+0x3c>
 800a7a2:	4629      	mov	r1, r5
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7ff fd19 	bl	800a1dc <_Balloc>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	b928      	cbnz	r0, 800a7ba <__mdiff+0x2e>
 800a7ae:	f240 2137 	movw	r1, #567	@ 0x237
 800a7b2:	4b3e      	ldr	r3, [pc, #248]	@ (800a8ac <__mdiff+0x120>)
 800a7b4:	483e      	ldr	r0, [pc, #248]	@ (800a8b0 <__mdiff+0x124>)
 800a7b6:	f001 fc33 	bl	800c020 <__assert_func>
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7c0:	4610      	mov	r0, r2
 800a7c2:	b003      	add	sp, #12
 800a7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c8:	bfbc      	itt	lt
 800a7ca:	464b      	movlt	r3, r9
 800a7cc:	46a1      	movlt	r9, r4
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7d4:	bfba      	itte	lt
 800a7d6:	461c      	movlt	r4, r3
 800a7d8:	2501      	movlt	r5, #1
 800a7da:	2500      	movge	r5, #0
 800a7dc:	f7ff fcfe 	bl	800a1dc <_Balloc>
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	b918      	cbnz	r0, 800a7ec <__mdiff+0x60>
 800a7e4:	f240 2145 	movw	r1, #581	@ 0x245
 800a7e8:	4b30      	ldr	r3, [pc, #192]	@ (800a8ac <__mdiff+0x120>)
 800a7ea:	e7e3      	b.n	800a7b4 <__mdiff+0x28>
 800a7ec:	f100 0b14 	add.w	fp, r0, #20
 800a7f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7f4:	f109 0310 	add.w	r3, r9, #16
 800a7f8:	60c5      	str	r5, [r0, #12]
 800a7fa:	f04f 0c00 	mov.w	ip, #0
 800a7fe:	f109 0514 	add.w	r5, r9, #20
 800a802:	46d9      	mov	r9, fp
 800a804:	6926      	ldr	r6, [r4, #16]
 800a806:	f104 0e14 	add.w	lr, r4, #20
 800a80a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a80e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a812:	9301      	str	r3, [sp, #4]
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a81a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a81e:	b281      	uxth	r1, r0
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	fa1f f38a 	uxth.w	r3, sl
 800a826:	1a5b      	subs	r3, r3, r1
 800a828:	0c00      	lsrs	r0, r0, #16
 800a82a:	4463      	add	r3, ip
 800a82c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a830:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a834:	b29b      	uxth	r3, r3
 800a836:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a83a:	4576      	cmp	r6, lr
 800a83c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a840:	f849 3b04 	str.w	r3, [r9], #4
 800a844:	d8e6      	bhi.n	800a814 <__mdiff+0x88>
 800a846:	1b33      	subs	r3, r6, r4
 800a848:	3b15      	subs	r3, #21
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	3415      	adds	r4, #21
 800a850:	3304      	adds	r3, #4
 800a852:	42a6      	cmp	r6, r4
 800a854:	bf38      	it	cc
 800a856:	2304      	movcc	r3, #4
 800a858:	441d      	add	r5, r3
 800a85a:	445b      	add	r3, fp
 800a85c:	461e      	mov	r6, r3
 800a85e:	462c      	mov	r4, r5
 800a860:	4544      	cmp	r4, r8
 800a862:	d30e      	bcc.n	800a882 <__mdiff+0xf6>
 800a864:	f108 0103 	add.w	r1, r8, #3
 800a868:	1b49      	subs	r1, r1, r5
 800a86a:	f021 0103 	bic.w	r1, r1, #3
 800a86e:	3d03      	subs	r5, #3
 800a870:	45a8      	cmp	r8, r5
 800a872:	bf38      	it	cc
 800a874:	2100      	movcc	r1, #0
 800a876:	440b      	add	r3, r1
 800a878:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a87c:	b199      	cbz	r1, 800a8a6 <__mdiff+0x11a>
 800a87e:	6117      	str	r7, [r2, #16]
 800a880:	e79e      	b.n	800a7c0 <__mdiff+0x34>
 800a882:	46e6      	mov	lr, ip
 800a884:	f854 1b04 	ldr.w	r1, [r4], #4
 800a888:	fa1f fc81 	uxth.w	ip, r1
 800a88c:	44f4      	add	ip, lr
 800a88e:	0c08      	lsrs	r0, r1, #16
 800a890:	4471      	add	r1, lr
 800a892:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a896:	b289      	uxth	r1, r1
 800a898:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a89c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8a0:	f846 1b04 	str.w	r1, [r6], #4
 800a8a4:	e7dc      	b.n	800a860 <__mdiff+0xd4>
 800a8a6:	3f01      	subs	r7, #1
 800a8a8:	e7e6      	b.n	800a878 <__mdiff+0xec>
 800a8aa:	bf00      	nop
 800a8ac:	0800e10f 	.word	0x0800e10f
 800a8b0:	0800e120 	.word	0x0800e120

0800a8b4 <__ulp>:
 800a8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f0 <__ulp+0x3c>)
 800a8b6:	400b      	ands	r3, r1
 800a8b8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	dc08      	bgt.n	800a8d2 <__ulp+0x1e>
 800a8c0:	425b      	negs	r3, r3
 800a8c2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8ca:	da04      	bge.n	800a8d6 <__ulp+0x22>
 800a8cc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8d0:	4113      	asrs	r3, r2
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	e008      	b.n	800a8e8 <__ulp+0x34>
 800a8d6:	f1a2 0314 	sub.w	r3, r2, #20
 800a8da:	2b1e      	cmp	r3, #30
 800a8dc:	bfd6      	itet	le
 800a8de:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8e2:	2201      	movgt	r2, #1
 800a8e4:	40da      	lsrle	r2, r3
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	4610      	mov	r0, r2
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	7ff00000 	.word	0x7ff00000

0800a8f4 <__b2d>:
 800a8f4:	6902      	ldr	r2, [r0, #16]
 800a8f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f8:	f100 0614 	add.w	r6, r0, #20
 800a8fc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a900:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a904:	4f1e      	ldr	r7, [pc, #120]	@ (800a980 <__b2d+0x8c>)
 800a906:	4620      	mov	r0, r4
 800a908:	f7ff fd5a 	bl	800a3c0 <__hi0bits>
 800a90c:	4603      	mov	r3, r0
 800a90e:	f1c0 0020 	rsb	r0, r0, #32
 800a912:	2b0a      	cmp	r3, #10
 800a914:	f1a2 0504 	sub.w	r5, r2, #4
 800a918:	6008      	str	r0, [r1, #0]
 800a91a:	dc12      	bgt.n	800a942 <__b2d+0x4e>
 800a91c:	42ae      	cmp	r6, r5
 800a91e:	bf2c      	ite	cs
 800a920:	2200      	movcs	r2, #0
 800a922:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a926:	f1c3 0c0b 	rsb	ip, r3, #11
 800a92a:	3315      	adds	r3, #21
 800a92c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a930:	fa04 f303 	lsl.w	r3, r4, r3
 800a934:	fa22 f20c 	lsr.w	r2, r2, ip
 800a938:	ea4e 0107 	orr.w	r1, lr, r7
 800a93c:	431a      	orrs	r2, r3
 800a93e:	4610      	mov	r0, r2
 800a940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a942:	42ae      	cmp	r6, r5
 800a944:	bf36      	itet	cc
 800a946:	f1a2 0508 	subcc.w	r5, r2, #8
 800a94a:	2200      	movcs	r2, #0
 800a94c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a950:	3b0b      	subs	r3, #11
 800a952:	d012      	beq.n	800a97a <__b2d+0x86>
 800a954:	f1c3 0720 	rsb	r7, r3, #32
 800a958:	fa22 f107 	lsr.w	r1, r2, r7
 800a95c:	409c      	lsls	r4, r3
 800a95e:	430c      	orrs	r4, r1
 800a960:	42b5      	cmp	r5, r6
 800a962:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a966:	bf94      	ite	ls
 800a968:	2400      	movls	r4, #0
 800a96a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a96e:	409a      	lsls	r2, r3
 800a970:	40fc      	lsrs	r4, r7
 800a972:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a976:	4322      	orrs	r2, r4
 800a978:	e7e1      	b.n	800a93e <__b2d+0x4a>
 800a97a:	ea44 0107 	orr.w	r1, r4, r7
 800a97e:	e7de      	b.n	800a93e <__b2d+0x4a>
 800a980:	3ff00000 	.word	0x3ff00000

0800a984 <__d2b>:
 800a984:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a988:	2101      	movs	r1, #1
 800a98a:	4690      	mov	r8, r2
 800a98c:	4699      	mov	r9, r3
 800a98e:	9e08      	ldr	r6, [sp, #32]
 800a990:	f7ff fc24 	bl	800a1dc <_Balloc>
 800a994:	4604      	mov	r4, r0
 800a996:	b930      	cbnz	r0, 800a9a6 <__d2b+0x22>
 800a998:	4602      	mov	r2, r0
 800a99a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a99e:	4b23      	ldr	r3, [pc, #140]	@ (800aa2c <__d2b+0xa8>)
 800a9a0:	4823      	ldr	r0, [pc, #140]	@ (800aa30 <__d2b+0xac>)
 800a9a2:	f001 fb3d 	bl	800c020 <__assert_func>
 800a9a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9ae:	b10d      	cbz	r5, 800a9b4 <__d2b+0x30>
 800a9b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	f1b8 0300 	subs.w	r3, r8, #0
 800a9ba:	d024      	beq.n	800aa06 <__d2b+0x82>
 800a9bc:	4668      	mov	r0, sp
 800a9be:	9300      	str	r3, [sp, #0]
 800a9c0:	f7ff fd1d 	bl	800a3fe <__lo0bits>
 800a9c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9c8:	b1d8      	cbz	r0, 800aa02 <__d2b+0x7e>
 800a9ca:	f1c0 0320 	rsb	r3, r0, #32
 800a9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d2:	430b      	orrs	r3, r1
 800a9d4:	40c2      	lsrs	r2, r0
 800a9d6:	6163      	str	r3, [r4, #20]
 800a9d8:	9201      	str	r2, [sp, #4]
 800a9da:	9b01      	ldr	r3, [sp, #4]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	bf0c      	ite	eq
 800a9e0:	2201      	moveq	r2, #1
 800a9e2:	2202      	movne	r2, #2
 800a9e4:	61a3      	str	r3, [r4, #24]
 800a9e6:	6122      	str	r2, [r4, #16]
 800a9e8:	b1ad      	cbz	r5, 800aa16 <__d2b+0x92>
 800a9ea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a9ee:	4405      	add	r5, r0
 800a9f0:	6035      	str	r5, [r6, #0]
 800a9f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a9f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f8:	6018      	str	r0, [r3, #0]
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	b002      	add	sp, #8
 800a9fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800aa02:	6161      	str	r1, [r4, #20]
 800aa04:	e7e9      	b.n	800a9da <__d2b+0x56>
 800aa06:	a801      	add	r0, sp, #4
 800aa08:	f7ff fcf9 	bl	800a3fe <__lo0bits>
 800aa0c:	9b01      	ldr	r3, [sp, #4]
 800aa0e:	2201      	movs	r2, #1
 800aa10:	6163      	str	r3, [r4, #20]
 800aa12:	3020      	adds	r0, #32
 800aa14:	e7e7      	b.n	800a9e6 <__d2b+0x62>
 800aa16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa1e:	6030      	str	r0, [r6, #0]
 800aa20:	6918      	ldr	r0, [r3, #16]
 800aa22:	f7ff fccd 	bl	800a3c0 <__hi0bits>
 800aa26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa2a:	e7e4      	b.n	800a9f6 <__d2b+0x72>
 800aa2c:	0800e10f 	.word	0x0800e10f
 800aa30:	0800e120 	.word	0x0800e120

0800aa34 <__ratio>:
 800aa34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa38:	b085      	sub	sp, #20
 800aa3a:	e9cd 1000 	strd	r1, r0, [sp]
 800aa3e:	a902      	add	r1, sp, #8
 800aa40:	f7ff ff58 	bl	800a8f4 <__b2d>
 800aa44:	468b      	mov	fp, r1
 800aa46:	4606      	mov	r6, r0
 800aa48:	460f      	mov	r7, r1
 800aa4a:	9800      	ldr	r0, [sp, #0]
 800aa4c:	a903      	add	r1, sp, #12
 800aa4e:	f7ff ff51 	bl	800a8f4 <__b2d>
 800aa52:	460d      	mov	r5, r1
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	4689      	mov	r9, r1
 800aa58:	6919      	ldr	r1, [r3, #16]
 800aa5a:	9b00      	ldr	r3, [sp, #0]
 800aa5c:	4604      	mov	r4, r0
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	4630      	mov	r0, r6
 800aa62:	1ac9      	subs	r1, r1, r3
 800aa64:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa68:	1a9b      	subs	r3, r3, r2
 800aa6a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	bfcd      	iteet	gt
 800aa72:	463a      	movgt	r2, r7
 800aa74:	462a      	movle	r2, r5
 800aa76:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa7a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800aa7e:	bfd8      	it	le
 800aa80:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa84:	464b      	mov	r3, r9
 800aa86:	4622      	mov	r2, r4
 800aa88:	4659      	mov	r1, fp
 800aa8a:	f7f5 fe67 	bl	800075c <__aeabi_ddiv>
 800aa8e:	b005      	add	sp, #20
 800aa90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aa94 <__copybits>:
 800aa94:	3901      	subs	r1, #1
 800aa96:	b570      	push	{r4, r5, r6, lr}
 800aa98:	1149      	asrs	r1, r1, #5
 800aa9a:	6914      	ldr	r4, [r2, #16]
 800aa9c:	3101      	adds	r1, #1
 800aa9e:	f102 0314 	add.w	r3, r2, #20
 800aaa2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aaa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaaa:	1f05      	subs	r5, r0, #4
 800aaac:	42a3      	cmp	r3, r4
 800aaae:	d30c      	bcc.n	800aaca <__copybits+0x36>
 800aab0:	1aa3      	subs	r3, r4, r2
 800aab2:	3b11      	subs	r3, #17
 800aab4:	f023 0303 	bic.w	r3, r3, #3
 800aab8:	3211      	adds	r2, #17
 800aaba:	42a2      	cmp	r2, r4
 800aabc:	bf88      	it	hi
 800aabe:	2300      	movhi	r3, #0
 800aac0:	4418      	add	r0, r3
 800aac2:	2300      	movs	r3, #0
 800aac4:	4288      	cmp	r0, r1
 800aac6:	d305      	bcc.n	800aad4 <__copybits+0x40>
 800aac8:	bd70      	pop	{r4, r5, r6, pc}
 800aaca:	f853 6b04 	ldr.w	r6, [r3], #4
 800aace:	f845 6f04 	str.w	r6, [r5, #4]!
 800aad2:	e7eb      	b.n	800aaac <__copybits+0x18>
 800aad4:	f840 3b04 	str.w	r3, [r0], #4
 800aad8:	e7f4      	b.n	800aac4 <__copybits+0x30>

0800aada <__any_on>:
 800aada:	f100 0214 	add.w	r2, r0, #20
 800aade:	6900      	ldr	r0, [r0, #16]
 800aae0:	114b      	asrs	r3, r1, #5
 800aae2:	4298      	cmp	r0, r3
 800aae4:	b510      	push	{r4, lr}
 800aae6:	db11      	blt.n	800ab0c <__any_on+0x32>
 800aae8:	dd0a      	ble.n	800ab00 <__any_on+0x26>
 800aaea:	f011 011f 	ands.w	r1, r1, #31
 800aaee:	d007      	beq.n	800ab00 <__any_on+0x26>
 800aaf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aaf4:	fa24 f001 	lsr.w	r0, r4, r1
 800aaf8:	fa00 f101 	lsl.w	r1, r0, r1
 800aafc:	428c      	cmp	r4, r1
 800aafe:	d10b      	bne.n	800ab18 <__any_on+0x3e>
 800ab00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d803      	bhi.n	800ab10 <__any_on+0x36>
 800ab08:	2000      	movs	r0, #0
 800ab0a:	bd10      	pop	{r4, pc}
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	e7f7      	b.n	800ab00 <__any_on+0x26>
 800ab10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab14:	2900      	cmp	r1, #0
 800ab16:	d0f5      	beq.n	800ab04 <__any_on+0x2a>
 800ab18:	2001      	movs	r0, #1
 800ab1a:	e7f6      	b.n	800ab0a <__any_on+0x30>

0800ab1c <sulp>:
 800ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab20:	460f      	mov	r7, r1
 800ab22:	4690      	mov	r8, r2
 800ab24:	f7ff fec6 	bl	800a8b4 <__ulp>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	460d      	mov	r5, r1
 800ab2c:	f1b8 0f00 	cmp.w	r8, #0
 800ab30:	d011      	beq.n	800ab56 <sulp+0x3a>
 800ab32:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800ab36:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	dd0b      	ble.n	800ab56 <sulp+0x3a>
 800ab3e:	2400      	movs	r4, #0
 800ab40:	051b      	lsls	r3, r3, #20
 800ab42:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ab46:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ab4a:	4622      	mov	r2, r4
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	f7f5 fcdb 	bl	8000508 <__aeabi_dmul>
 800ab52:	4604      	mov	r4, r0
 800ab54:	460d      	mov	r5, r1
 800ab56:	4620      	mov	r0, r4
 800ab58:	4629      	mov	r1, r5
 800ab5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800ab60 <_strtod_l>:
 800ab60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab64:	b09f      	sub	sp, #124	@ 0x7c
 800ab66:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ab68:	2200      	movs	r2, #0
 800ab6a:	460c      	mov	r4, r1
 800ab6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ab6e:	f04f 0a00 	mov.w	sl, #0
 800ab72:	f04f 0b00 	mov.w	fp, #0
 800ab76:	460a      	mov	r2, r1
 800ab78:	9005      	str	r0, [sp, #20]
 800ab7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ab7c:	7811      	ldrb	r1, [r2, #0]
 800ab7e:	292b      	cmp	r1, #43	@ 0x2b
 800ab80:	d048      	beq.n	800ac14 <_strtod_l+0xb4>
 800ab82:	d836      	bhi.n	800abf2 <_strtod_l+0x92>
 800ab84:	290d      	cmp	r1, #13
 800ab86:	d830      	bhi.n	800abea <_strtod_l+0x8a>
 800ab88:	2908      	cmp	r1, #8
 800ab8a:	d830      	bhi.n	800abee <_strtod_l+0x8e>
 800ab8c:	2900      	cmp	r1, #0
 800ab8e:	d039      	beq.n	800ac04 <_strtod_l+0xa4>
 800ab90:	2200      	movs	r2, #0
 800ab92:	920e      	str	r2, [sp, #56]	@ 0x38
 800ab94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ab96:	782a      	ldrb	r2, [r5, #0]
 800ab98:	2a30      	cmp	r2, #48	@ 0x30
 800ab9a:	f040 80b0 	bne.w	800acfe <_strtod_l+0x19e>
 800ab9e:	786a      	ldrb	r2, [r5, #1]
 800aba0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aba4:	2a58      	cmp	r2, #88	@ 0x58
 800aba6:	d16c      	bne.n	800ac82 <_strtod_l+0x122>
 800aba8:	9302      	str	r3, [sp, #8]
 800abaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abac:	4a8f      	ldr	r2, [pc, #572]	@ (800adec <_strtod_l+0x28c>)
 800abae:	9301      	str	r3, [sp, #4]
 800abb0:	ab1a      	add	r3, sp, #104	@ 0x68
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	9805      	ldr	r0, [sp, #20]
 800abb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800abb8:	a919      	add	r1, sp, #100	@ 0x64
 800abba:	f001 facb 	bl	800c154 <__gethex>
 800abbe:	f010 060f 	ands.w	r6, r0, #15
 800abc2:	4604      	mov	r4, r0
 800abc4:	d005      	beq.n	800abd2 <_strtod_l+0x72>
 800abc6:	2e06      	cmp	r6, #6
 800abc8:	d126      	bne.n	800ac18 <_strtod_l+0xb8>
 800abca:	2300      	movs	r3, #0
 800abcc:	3501      	adds	r5, #1
 800abce:	9519      	str	r5, [sp, #100]	@ 0x64
 800abd0:	930e      	str	r3, [sp, #56]	@ 0x38
 800abd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f040 8582 	bne.w	800b6de <_strtod_l+0xb7e>
 800abda:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800abdc:	b1bb      	cbz	r3, 800ac0e <_strtod_l+0xae>
 800abde:	4650      	mov	r0, sl
 800abe0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800abe4:	b01f      	add	sp, #124	@ 0x7c
 800abe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abea:	2920      	cmp	r1, #32
 800abec:	d1d0      	bne.n	800ab90 <_strtod_l+0x30>
 800abee:	3201      	adds	r2, #1
 800abf0:	e7c3      	b.n	800ab7a <_strtod_l+0x1a>
 800abf2:	292d      	cmp	r1, #45	@ 0x2d
 800abf4:	d1cc      	bne.n	800ab90 <_strtod_l+0x30>
 800abf6:	2101      	movs	r1, #1
 800abf8:	910e      	str	r1, [sp, #56]	@ 0x38
 800abfa:	1c51      	adds	r1, r2, #1
 800abfc:	9119      	str	r1, [sp, #100]	@ 0x64
 800abfe:	7852      	ldrb	r2, [r2, #1]
 800ac00:	2a00      	cmp	r2, #0
 800ac02:	d1c7      	bne.n	800ab94 <_strtod_l+0x34>
 800ac04:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac06:	9419      	str	r4, [sp, #100]	@ 0x64
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f040 8566 	bne.w	800b6da <_strtod_l+0xb7a>
 800ac0e:	4650      	mov	r0, sl
 800ac10:	4659      	mov	r1, fp
 800ac12:	e7e7      	b.n	800abe4 <_strtod_l+0x84>
 800ac14:	2100      	movs	r1, #0
 800ac16:	e7ef      	b.n	800abf8 <_strtod_l+0x98>
 800ac18:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ac1a:	b13a      	cbz	r2, 800ac2c <_strtod_l+0xcc>
 800ac1c:	2135      	movs	r1, #53	@ 0x35
 800ac1e:	a81c      	add	r0, sp, #112	@ 0x70
 800ac20:	f7ff ff38 	bl	800aa94 <__copybits>
 800ac24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac26:	9805      	ldr	r0, [sp, #20]
 800ac28:	f7ff fb18 	bl	800a25c <_Bfree>
 800ac2c:	3e01      	subs	r6, #1
 800ac2e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ac30:	2e04      	cmp	r6, #4
 800ac32:	d806      	bhi.n	800ac42 <_strtod_l+0xe2>
 800ac34:	e8df f006 	tbb	[pc, r6]
 800ac38:	201d0314 	.word	0x201d0314
 800ac3c:	14          	.byte	0x14
 800ac3d:	00          	.byte	0x00
 800ac3e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ac42:	05e1      	lsls	r1, r4, #23
 800ac44:	bf48      	it	mi
 800ac46:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ac4a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ac4e:	0d1b      	lsrs	r3, r3, #20
 800ac50:	051b      	lsls	r3, r3, #20
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1bd      	bne.n	800abd2 <_strtod_l+0x72>
 800ac56:	f7fe fb17 	bl	8009288 <__errno>
 800ac5a:	2322      	movs	r3, #34	@ 0x22
 800ac5c:	6003      	str	r3, [r0, #0]
 800ac5e:	e7b8      	b.n	800abd2 <_strtod_l+0x72>
 800ac60:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ac68:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ac6c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ac70:	e7e7      	b.n	800ac42 <_strtod_l+0xe2>
 800ac72:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800adf0 <_strtod_l+0x290>
 800ac76:	e7e4      	b.n	800ac42 <_strtod_l+0xe2>
 800ac78:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ac7c:	f04f 3aff 	mov.w	sl, #4294967295
 800ac80:	e7df      	b.n	800ac42 <_strtod_l+0xe2>
 800ac82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac84:	1c5a      	adds	r2, r3, #1
 800ac86:	9219      	str	r2, [sp, #100]	@ 0x64
 800ac88:	785b      	ldrb	r3, [r3, #1]
 800ac8a:	2b30      	cmp	r3, #48	@ 0x30
 800ac8c:	d0f9      	beq.n	800ac82 <_strtod_l+0x122>
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d09f      	beq.n	800abd2 <_strtod_l+0x72>
 800ac92:	2301      	movs	r3, #1
 800ac94:	2700      	movs	r7, #0
 800ac96:	220a      	movs	r2, #10
 800ac98:	46b9      	mov	r9, r7
 800ac9a:	9308      	str	r3, [sp, #32]
 800ac9c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac9e:	970b      	str	r7, [sp, #44]	@ 0x2c
 800aca0:	930c      	str	r3, [sp, #48]	@ 0x30
 800aca2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aca4:	7805      	ldrb	r5, [r0, #0]
 800aca6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800acaa:	b2d9      	uxtb	r1, r3
 800acac:	2909      	cmp	r1, #9
 800acae:	d928      	bls.n	800ad02 <_strtod_l+0x1a2>
 800acb0:	2201      	movs	r2, #1
 800acb2:	4950      	ldr	r1, [pc, #320]	@ (800adf4 <_strtod_l+0x294>)
 800acb4:	f001 f969 	bl	800bf8a <strncmp>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d032      	beq.n	800ad22 <_strtod_l+0x1c2>
 800acbc:	2000      	movs	r0, #0
 800acbe:	462a      	mov	r2, r5
 800acc0:	4603      	mov	r3, r0
 800acc2:	464d      	mov	r5, r9
 800acc4:	900a      	str	r0, [sp, #40]	@ 0x28
 800acc6:	2a65      	cmp	r2, #101	@ 0x65
 800acc8:	d001      	beq.n	800acce <_strtod_l+0x16e>
 800acca:	2a45      	cmp	r2, #69	@ 0x45
 800accc:	d114      	bne.n	800acf8 <_strtod_l+0x198>
 800acce:	b91d      	cbnz	r5, 800acd8 <_strtod_l+0x178>
 800acd0:	9a08      	ldr	r2, [sp, #32]
 800acd2:	4302      	orrs	r2, r0
 800acd4:	d096      	beq.n	800ac04 <_strtod_l+0xa4>
 800acd6:	2500      	movs	r5, #0
 800acd8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800acda:	1c62      	adds	r2, r4, #1
 800acdc:	9219      	str	r2, [sp, #100]	@ 0x64
 800acde:	7862      	ldrb	r2, [r4, #1]
 800ace0:	2a2b      	cmp	r2, #43	@ 0x2b
 800ace2:	d07a      	beq.n	800adda <_strtod_l+0x27a>
 800ace4:	2a2d      	cmp	r2, #45	@ 0x2d
 800ace6:	d07e      	beq.n	800ade6 <_strtod_l+0x286>
 800ace8:	f04f 0c00 	mov.w	ip, #0
 800acec:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800acf0:	2909      	cmp	r1, #9
 800acf2:	f240 8085 	bls.w	800ae00 <_strtod_l+0x2a0>
 800acf6:	9419      	str	r4, [sp, #100]	@ 0x64
 800acf8:	f04f 0800 	mov.w	r8, #0
 800acfc:	e0a5      	b.n	800ae4a <_strtod_l+0x2ea>
 800acfe:	2300      	movs	r3, #0
 800ad00:	e7c8      	b.n	800ac94 <_strtod_l+0x134>
 800ad02:	f1b9 0f08 	cmp.w	r9, #8
 800ad06:	bfd8      	it	le
 800ad08:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800ad0a:	f100 0001 	add.w	r0, r0, #1
 800ad0e:	bfd6      	itet	le
 800ad10:	fb02 3301 	mlale	r3, r2, r1, r3
 800ad14:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ad18:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ad1a:	f109 0901 	add.w	r9, r9, #1
 800ad1e:	9019      	str	r0, [sp, #100]	@ 0x64
 800ad20:	e7bf      	b.n	800aca2 <_strtod_l+0x142>
 800ad22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad28:	785a      	ldrb	r2, [r3, #1]
 800ad2a:	f1b9 0f00 	cmp.w	r9, #0
 800ad2e:	d03b      	beq.n	800ada8 <_strtod_l+0x248>
 800ad30:	464d      	mov	r5, r9
 800ad32:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad34:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ad38:	2b09      	cmp	r3, #9
 800ad3a:	d912      	bls.n	800ad62 <_strtod_l+0x202>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e7c2      	b.n	800acc6 <_strtod_l+0x166>
 800ad40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad42:	3001      	adds	r0, #1
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad48:	785a      	ldrb	r2, [r3, #1]
 800ad4a:	2a30      	cmp	r2, #48	@ 0x30
 800ad4c:	d0f8      	beq.n	800ad40 <_strtod_l+0x1e0>
 800ad4e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ad52:	2b08      	cmp	r3, #8
 800ad54:	f200 84c8 	bhi.w	800b6e8 <_strtod_l+0xb88>
 800ad58:	900a      	str	r0, [sp, #40]	@ 0x28
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	4605      	mov	r5, r0
 800ad5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ad60:	930c      	str	r3, [sp, #48]	@ 0x30
 800ad62:	3a30      	subs	r2, #48	@ 0x30
 800ad64:	f100 0301 	add.w	r3, r0, #1
 800ad68:	d018      	beq.n	800ad9c <_strtod_l+0x23c>
 800ad6a:	462e      	mov	r6, r5
 800ad6c:	f04f 0e0a 	mov.w	lr, #10
 800ad70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ad72:	4419      	add	r1, r3
 800ad74:	910a      	str	r1, [sp, #40]	@ 0x28
 800ad76:	1c71      	adds	r1, r6, #1
 800ad78:	eba1 0c05 	sub.w	ip, r1, r5
 800ad7c:	4563      	cmp	r3, ip
 800ad7e:	dc15      	bgt.n	800adac <_strtod_l+0x24c>
 800ad80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800ad84:	182b      	adds	r3, r5, r0
 800ad86:	2b08      	cmp	r3, #8
 800ad88:	f105 0501 	add.w	r5, r5, #1
 800ad8c:	4405      	add	r5, r0
 800ad8e:	dc1a      	bgt.n	800adc6 <_strtod_l+0x266>
 800ad90:	230a      	movs	r3, #10
 800ad92:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ad94:	fb03 2301 	mla	r3, r3, r1, r2
 800ad98:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ad9e:	4618      	mov	r0, r3
 800ada0:	1c51      	adds	r1, r2, #1
 800ada2:	9119      	str	r1, [sp, #100]	@ 0x64
 800ada4:	7852      	ldrb	r2, [r2, #1]
 800ada6:	e7c5      	b.n	800ad34 <_strtod_l+0x1d4>
 800ada8:	4648      	mov	r0, r9
 800adaa:	e7ce      	b.n	800ad4a <_strtod_l+0x1ea>
 800adac:	2e08      	cmp	r6, #8
 800adae:	dc05      	bgt.n	800adbc <_strtod_l+0x25c>
 800adb0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800adb2:	fb0e f606 	mul.w	r6, lr, r6
 800adb6:	960b      	str	r6, [sp, #44]	@ 0x2c
 800adb8:	460e      	mov	r6, r1
 800adba:	e7dc      	b.n	800ad76 <_strtod_l+0x216>
 800adbc:	2910      	cmp	r1, #16
 800adbe:	bfd8      	it	le
 800adc0:	fb0e f707 	mulle.w	r7, lr, r7
 800adc4:	e7f8      	b.n	800adb8 <_strtod_l+0x258>
 800adc6:	2b0f      	cmp	r3, #15
 800adc8:	bfdc      	itt	le
 800adca:	230a      	movle	r3, #10
 800adcc:	fb03 2707 	mlale	r7, r3, r7, r2
 800add0:	e7e3      	b.n	800ad9a <_strtod_l+0x23a>
 800add2:	2300      	movs	r3, #0
 800add4:	930a      	str	r3, [sp, #40]	@ 0x28
 800add6:	2301      	movs	r3, #1
 800add8:	e77a      	b.n	800acd0 <_strtod_l+0x170>
 800adda:	f04f 0c00 	mov.w	ip, #0
 800adde:	1ca2      	adds	r2, r4, #2
 800ade0:	9219      	str	r2, [sp, #100]	@ 0x64
 800ade2:	78a2      	ldrb	r2, [r4, #2]
 800ade4:	e782      	b.n	800acec <_strtod_l+0x18c>
 800ade6:	f04f 0c01 	mov.w	ip, #1
 800adea:	e7f8      	b.n	800adde <_strtod_l+0x27e>
 800adec:	0800e344 	.word	0x0800e344
 800adf0:	7ff00000 	.word	0x7ff00000
 800adf4:	0800e179 	.word	0x0800e179
 800adf8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800adfa:	1c51      	adds	r1, r2, #1
 800adfc:	9119      	str	r1, [sp, #100]	@ 0x64
 800adfe:	7852      	ldrb	r2, [r2, #1]
 800ae00:	2a30      	cmp	r2, #48	@ 0x30
 800ae02:	d0f9      	beq.n	800adf8 <_strtod_l+0x298>
 800ae04:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ae08:	2908      	cmp	r1, #8
 800ae0a:	f63f af75 	bhi.w	800acf8 <_strtod_l+0x198>
 800ae0e:	f04f 080a 	mov.w	r8, #10
 800ae12:	3a30      	subs	r2, #48	@ 0x30
 800ae14:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae16:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae18:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ae1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ae1c:	1c56      	adds	r6, r2, #1
 800ae1e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ae20:	7852      	ldrb	r2, [r2, #1]
 800ae22:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ae26:	f1be 0f09 	cmp.w	lr, #9
 800ae2a:	d939      	bls.n	800aea0 <_strtod_l+0x340>
 800ae2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ae2e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ae32:	1a76      	subs	r6, r6, r1
 800ae34:	2e08      	cmp	r6, #8
 800ae36:	dc03      	bgt.n	800ae40 <_strtod_l+0x2e0>
 800ae38:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ae3a:	4588      	cmp	r8, r1
 800ae3c:	bfa8      	it	ge
 800ae3e:	4688      	movge	r8, r1
 800ae40:	f1bc 0f00 	cmp.w	ip, #0
 800ae44:	d001      	beq.n	800ae4a <_strtod_l+0x2ea>
 800ae46:	f1c8 0800 	rsb	r8, r8, #0
 800ae4a:	2d00      	cmp	r5, #0
 800ae4c:	d14e      	bne.n	800aeec <_strtod_l+0x38c>
 800ae4e:	9908      	ldr	r1, [sp, #32]
 800ae50:	4308      	orrs	r0, r1
 800ae52:	f47f aebe 	bne.w	800abd2 <_strtod_l+0x72>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f47f aed4 	bne.w	800ac04 <_strtod_l+0xa4>
 800ae5c:	2a69      	cmp	r2, #105	@ 0x69
 800ae5e:	d028      	beq.n	800aeb2 <_strtod_l+0x352>
 800ae60:	dc25      	bgt.n	800aeae <_strtod_l+0x34e>
 800ae62:	2a49      	cmp	r2, #73	@ 0x49
 800ae64:	d025      	beq.n	800aeb2 <_strtod_l+0x352>
 800ae66:	2a4e      	cmp	r2, #78	@ 0x4e
 800ae68:	f47f aecc 	bne.w	800ac04 <_strtod_l+0xa4>
 800ae6c:	4999      	ldr	r1, [pc, #612]	@ (800b0d4 <_strtod_l+0x574>)
 800ae6e:	a819      	add	r0, sp, #100	@ 0x64
 800ae70:	f001 fb92 	bl	800c598 <__match>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	f43f aec5 	beq.w	800ac04 <_strtod_l+0xa4>
 800ae7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	2b28      	cmp	r3, #40	@ 0x28
 800ae80:	d12e      	bne.n	800aee0 <_strtod_l+0x380>
 800ae82:	4995      	ldr	r1, [pc, #596]	@ (800b0d8 <_strtod_l+0x578>)
 800ae84:	aa1c      	add	r2, sp, #112	@ 0x70
 800ae86:	a819      	add	r0, sp, #100	@ 0x64
 800ae88:	f001 fb9a 	bl	800c5c0 <__hexnan>
 800ae8c:	2805      	cmp	r0, #5
 800ae8e:	d127      	bne.n	800aee0 <_strtod_l+0x380>
 800ae90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ae92:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ae96:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ae9a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ae9e:	e698      	b.n	800abd2 <_strtod_l+0x72>
 800aea0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aea2:	fb08 2101 	mla	r1, r8, r1, r2
 800aea6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aeaa:	9209      	str	r2, [sp, #36]	@ 0x24
 800aeac:	e7b5      	b.n	800ae1a <_strtod_l+0x2ba>
 800aeae:	2a6e      	cmp	r2, #110	@ 0x6e
 800aeb0:	e7da      	b.n	800ae68 <_strtod_l+0x308>
 800aeb2:	498a      	ldr	r1, [pc, #552]	@ (800b0dc <_strtod_l+0x57c>)
 800aeb4:	a819      	add	r0, sp, #100	@ 0x64
 800aeb6:	f001 fb6f 	bl	800c598 <__match>
 800aeba:	2800      	cmp	r0, #0
 800aebc:	f43f aea2 	beq.w	800ac04 <_strtod_l+0xa4>
 800aec0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aec2:	4987      	ldr	r1, [pc, #540]	@ (800b0e0 <_strtod_l+0x580>)
 800aec4:	3b01      	subs	r3, #1
 800aec6:	a819      	add	r0, sp, #100	@ 0x64
 800aec8:	9319      	str	r3, [sp, #100]	@ 0x64
 800aeca:	f001 fb65 	bl	800c598 <__match>
 800aece:	b910      	cbnz	r0, 800aed6 <_strtod_l+0x376>
 800aed0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aed2:	3301      	adds	r3, #1
 800aed4:	9319      	str	r3, [sp, #100]	@ 0x64
 800aed6:	f04f 0a00 	mov.w	sl, #0
 800aeda:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800b0e4 <_strtod_l+0x584>
 800aede:	e678      	b.n	800abd2 <_strtod_l+0x72>
 800aee0:	4881      	ldr	r0, [pc, #516]	@ (800b0e8 <_strtod_l+0x588>)
 800aee2:	f001 f897 	bl	800c014 <nan>
 800aee6:	4682      	mov	sl, r0
 800aee8:	468b      	mov	fp, r1
 800aeea:	e672      	b.n	800abd2 <_strtod_l+0x72>
 800aeec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aeee:	f1b9 0f00 	cmp.w	r9, #0
 800aef2:	bf08      	it	eq
 800aef4:	46a9      	moveq	r9, r5
 800aef6:	eba8 0303 	sub.w	r3, r8, r3
 800aefa:	2d10      	cmp	r5, #16
 800aefc:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aefe:	462c      	mov	r4, r5
 800af00:	9309      	str	r3, [sp, #36]	@ 0x24
 800af02:	bfa8      	it	ge
 800af04:	2410      	movge	r4, #16
 800af06:	f7f5 fa85 	bl	8000414 <__aeabi_ui2d>
 800af0a:	2d09      	cmp	r5, #9
 800af0c:	4682      	mov	sl, r0
 800af0e:	468b      	mov	fp, r1
 800af10:	dc11      	bgt.n	800af36 <_strtod_l+0x3d6>
 800af12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af14:	2b00      	cmp	r3, #0
 800af16:	f43f ae5c 	beq.w	800abd2 <_strtod_l+0x72>
 800af1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1c:	dd76      	ble.n	800b00c <_strtod_l+0x4ac>
 800af1e:	2b16      	cmp	r3, #22
 800af20:	dc5d      	bgt.n	800afde <_strtod_l+0x47e>
 800af22:	4972      	ldr	r1, [pc, #456]	@ (800b0ec <_strtod_l+0x58c>)
 800af24:	4652      	mov	r2, sl
 800af26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af2a:	465b      	mov	r3, fp
 800af2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af30:	f7f5 faea 	bl	8000508 <__aeabi_dmul>
 800af34:	e7d7      	b.n	800aee6 <_strtod_l+0x386>
 800af36:	4b6d      	ldr	r3, [pc, #436]	@ (800b0ec <_strtod_l+0x58c>)
 800af38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800af40:	f7f5 fae2 	bl	8000508 <__aeabi_dmul>
 800af44:	4682      	mov	sl, r0
 800af46:	4638      	mov	r0, r7
 800af48:	468b      	mov	fp, r1
 800af4a:	f7f5 fa63 	bl	8000414 <__aeabi_ui2d>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4650      	mov	r0, sl
 800af54:	4659      	mov	r1, fp
 800af56:	f7f5 f921 	bl	800019c <__adddf3>
 800af5a:	2d0f      	cmp	r5, #15
 800af5c:	4682      	mov	sl, r0
 800af5e:	468b      	mov	fp, r1
 800af60:	ddd7      	ble.n	800af12 <_strtod_l+0x3b2>
 800af62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af64:	1b2c      	subs	r4, r5, r4
 800af66:	441c      	add	r4, r3
 800af68:	2c00      	cmp	r4, #0
 800af6a:	f340 8093 	ble.w	800b094 <_strtod_l+0x534>
 800af6e:	f014 030f 	ands.w	r3, r4, #15
 800af72:	d00a      	beq.n	800af8a <_strtod_l+0x42a>
 800af74:	495d      	ldr	r1, [pc, #372]	@ (800b0ec <_strtod_l+0x58c>)
 800af76:	4652      	mov	r2, sl
 800af78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800af7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af80:	465b      	mov	r3, fp
 800af82:	f7f5 fac1 	bl	8000508 <__aeabi_dmul>
 800af86:	4682      	mov	sl, r0
 800af88:	468b      	mov	fp, r1
 800af8a:	f034 040f 	bics.w	r4, r4, #15
 800af8e:	d073      	beq.n	800b078 <_strtod_l+0x518>
 800af90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800af94:	dd49      	ble.n	800b02a <_strtod_l+0x4ca>
 800af96:	2400      	movs	r4, #0
 800af98:	46a0      	mov	r8, r4
 800af9a:	46a1      	mov	r9, r4
 800af9c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800af9e:	2322      	movs	r3, #34	@ 0x22
 800afa0:	f04f 0a00 	mov.w	sl, #0
 800afa4:	9a05      	ldr	r2, [sp, #20]
 800afa6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800b0e4 <_strtod_l+0x584>
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f43f ae0f 	beq.w	800abd2 <_strtod_l+0x72>
 800afb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800afb6:	9805      	ldr	r0, [sp, #20]
 800afb8:	f7ff f950 	bl	800a25c <_Bfree>
 800afbc:	4649      	mov	r1, r9
 800afbe:	9805      	ldr	r0, [sp, #20]
 800afc0:	f7ff f94c 	bl	800a25c <_Bfree>
 800afc4:	4641      	mov	r1, r8
 800afc6:	9805      	ldr	r0, [sp, #20]
 800afc8:	f7ff f948 	bl	800a25c <_Bfree>
 800afcc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800afce:	9805      	ldr	r0, [sp, #20]
 800afd0:	f7ff f944 	bl	800a25c <_Bfree>
 800afd4:	4621      	mov	r1, r4
 800afd6:	9805      	ldr	r0, [sp, #20]
 800afd8:	f7ff f940 	bl	800a25c <_Bfree>
 800afdc:	e5f9      	b.n	800abd2 <_strtod_l+0x72>
 800afde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afe0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800afe4:	4293      	cmp	r3, r2
 800afe6:	dbbc      	blt.n	800af62 <_strtod_l+0x402>
 800afe8:	4c40      	ldr	r4, [pc, #256]	@ (800b0ec <_strtod_l+0x58c>)
 800afea:	f1c5 050f 	rsb	r5, r5, #15
 800afee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aff2:	4652      	mov	r2, sl
 800aff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aff8:	465b      	mov	r3, fp
 800affa:	f7f5 fa85 	bl	8000508 <__aeabi_dmul>
 800affe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b000:	1b5d      	subs	r5, r3, r5
 800b002:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b006:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b00a:	e791      	b.n	800af30 <_strtod_l+0x3d0>
 800b00c:	3316      	adds	r3, #22
 800b00e:	dba8      	blt.n	800af62 <_strtod_l+0x402>
 800b010:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b012:	4650      	mov	r0, sl
 800b014:	eba3 0808 	sub.w	r8, r3, r8
 800b018:	4b34      	ldr	r3, [pc, #208]	@ (800b0ec <_strtod_l+0x58c>)
 800b01a:	4659      	mov	r1, fp
 800b01c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b020:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b024:	f7f5 fb9a 	bl	800075c <__aeabi_ddiv>
 800b028:	e75d      	b.n	800aee6 <_strtod_l+0x386>
 800b02a:	2300      	movs	r3, #0
 800b02c:	4650      	mov	r0, sl
 800b02e:	4659      	mov	r1, fp
 800b030:	461e      	mov	r6, r3
 800b032:	4f2f      	ldr	r7, [pc, #188]	@ (800b0f0 <_strtod_l+0x590>)
 800b034:	1124      	asrs	r4, r4, #4
 800b036:	2c01      	cmp	r4, #1
 800b038:	dc21      	bgt.n	800b07e <_strtod_l+0x51e>
 800b03a:	b10b      	cbz	r3, 800b040 <_strtod_l+0x4e0>
 800b03c:	4682      	mov	sl, r0
 800b03e:	468b      	mov	fp, r1
 800b040:	492b      	ldr	r1, [pc, #172]	@ (800b0f0 <_strtod_l+0x590>)
 800b042:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b046:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b04a:	4652      	mov	r2, sl
 800b04c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b050:	465b      	mov	r3, fp
 800b052:	f7f5 fa59 	bl	8000508 <__aeabi_dmul>
 800b056:	4b23      	ldr	r3, [pc, #140]	@ (800b0e4 <_strtod_l+0x584>)
 800b058:	460a      	mov	r2, r1
 800b05a:	400b      	ands	r3, r1
 800b05c:	4925      	ldr	r1, [pc, #148]	@ (800b0f4 <_strtod_l+0x594>)
 800b05e:	4682      	mov	sl, r0
 800b060:	428b      	cmp	r3, r1
 800b062:	d898      	bhi.n	800af96 <_strtod_l+0x436>
 800b064:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b068:	428b      	cmp	r3, r1
 800b06a:	bf86      	itte	hi
 800b06c:	f04f 3aff 	movhi.w	sl, #4294967295
 800b070:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 800b0f8 <_strtod_l+0x598>
 800b074:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b078:	2300      	movs	r3, #0
 800b07a:	9308      	str	r3, [sp, #32]
 800b07c:	e076      	b.n	800b16c <_strtod_l+0x60c>
 800b07e:	07e2      	lsls	r2, r4, #31
 800b080:	d504      	bpl.n	800b08c <_strtod_l+0x52c>
 800b082:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b086:	f7f5 fa3f 	bl	8000508 <__aeabi_dmul>
 800b08a:	2301      	movs	r3, #1
 800b08c:	3601      	adds	r6, #1
 800b08e:	1064      	asrs	r4, r4, #1
 800b090:	3708      	adds	r7, #8
 800b092:	e7d0      	b.n	800b036 <_strtod_l+0x4d6>
 800b094:	d0f0      	beq.n	800b078 <_strtod_l+0x518>
 800b096:	4264      	negs	r4, r4
 800b098:	f014 020f 	ands.w	r2, r4, #15
 800b09c:	d00a      	beq.n	800b0b4 <_strtod_l+0x554>
 800b09e:	4b13      	ldr	r3, [pc, #76]	@ (800b0ec <_strtod_l+0x58c>)
 800b0a0:	4650      	mov	r0, sl
 800b0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0a6:	4659      	mov	r1, fp
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	f7f5 fb56 	bl	800075c <__aeabi_ddiv>
 800b0b0:	4682      	mov	sl, r0
 800b0b2:	468b      	mov	fp, r1
 800b0b4:	1124      	asrs	r4, r4, #4
 800b0b6:	d0df      	beq.n	800b078 <_strtod_l+0x518>
 800b0b8:	2c1f      	cmp	r4, #31
 800b0ba:	dd1f      	ble.n	800b0fc <_strtod_l+0x59c>
 800b0bc:	2400      	movs	r4, #0
 800b0be:	46a0      	mov	r8, r4
 800b0c0:	46a1      	mov	r9, r4
 800b0c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0c4:	2322      	movs	r3, #34	@ 0x22
 800b0c6:	9a05      	ldr	r2, [sp, #20]
 800b0c8:	f04f 0a00 	mov.w	sl, #0
 800b0cc:	f04f 0b00 	mov.w	fp, #0
 800b0d0:	6013      	str	r3, [r2, #0]
 800b0d2:	e76b      	b.n	800afac <_strtod_l+0x44c>
 800b0d4:	0800e067 	.word	0x0800e067
 800b0d8:	0800e330 	.word	0x0800e330
 800b0dc:	0800e05f 	.word	0x0800e05f
 800b0e0:	0800e096 	.word	0x0800e096
 800b0e4:	7ff00000 	.word	0x7ff00000
 800b0e8:	0800e1cf 	.word	0x0800e1cf
 800b0ec:	0800e268 	.word	0x0800e268
 800b0f0:	0800e240 	.word	0x0800e240
 800b0f4:	7ca00000 	.word	0x7ca00000
 800b0f8:	7fefffff 	.word	0x7fefffff
 800b0fc:	f014 0310 	ands.w	r3, r4, #16
 800b100:	bf18      	it	ne
 800b102:	236a      	movne	r3, #106	@ 0x6a
 800b104:	4650      	mov	r0, sl
 800b106:	9308      	str	r3, [sp, #32]
 800b108:	4659      	mov	r1, fp
 800b10a:	2300      	movs	r3, #0
 800b10c:	4e77      	ldr	r6, [pc, #476]	@ (800b2ec <_strtod_l+0x78c>)
 800b10e:	07e7      	lsls	r7, r4, #31
 800b110:	d504      	bpl.n	800b11c <_strtod_l+0x5bc>
 800b112:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b116:	f7f5 f9f7 	bl	8000508 <__aeabi_dmul>
 800b11a:	2301      	movs	r3, #1
 800b11c:	1064      	asrs	r4, r4, #1
 800b11e:	f106 0608 	add.w	r6, r6, #8
 800b122:	d1f4      	bne.n	800b10e <_strtod_l+0x5ae>
 800b124:	b10b      	cbz	r3, 800b12a <_strtod_l+0x5ca>
 800b126:	4682      	mov	sl, r0
 800b128:	468b      	mov	fp, r1
 800b12a:	9b08      	ldr	r3, [sp, #32]
 800b12c:	b1b3      	cbz	r3, 800b15c <_strtod_l+0x5fc>
 800b12e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b132:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b136:	2b00      	cmp	r3, #0
 800b138:	4659      	mov	r1, fp
 800b13a:	dd0f      	ble.n	800b15c <_strtod_l+0x5fc>
 800b13c:	2b1f      	cmp	r3, #31
 800b13e:	dd58      	ble.n	800b1f2 <_strtod_l+0x692>
 800b140:	2b34      	cmp	r3, #52	@ 0x34
 800b142:	bfd8      	it	le
 800b144:	f04f 33ff 	movle.w	r3, #4294967295
 800b148:	f04f 0a00 	mov.w	sl, #0
 800b14c:	bfcf      	iteee	gt
 800b14e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b152:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b156:	4093      	lslle	r3, r2
 800b158:	ea03 0b01 	andle.w	fp, r3, r1
 800b15c:	2200      	movs	r2, #0
 800b15e:	2300      	movs	r3, #0
 800b160:	4650      	mov	r0, sl
 800b162:	4659      	mov	r1, fp
 800b164:	f7f5 fc38 	bl	80009d8 <__aeabi_dcmpeq>
 800b168:	2800      	cmp	r0, #0
 800b16a:	d1a7      	bne.n	800b0bc <_strtod_l+0x55c>
 800b16c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b16e:	464a      	mov	r2, r9
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b174:	462b      	mov	r3, r5
 800b176:	9805      	ldr	r0, [sp, #20]
 800b178:	f7ff f8d8 	bl	800a32c <__s2b>
 800b17c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800b17e:	2800      	cmp	r0, #0
 800b180:	f43f af09 	beq.w	800af96 <_strtod_l+0x436>
 800b184:	2400      	movs	r4, #0
 800b186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b18a:	2a00      	cmp	r2, #0
 800b18c:	eba3 0308 	sub.w	r3, r3, r8
 800b190:	bfa8      	it	ge
 800b192:	2300      	movge	r3, #0
 800b194:	46a0      	mov	r8, r4
 800b196:	9312      	str	r3, [sp, #72]	@ 0x48
 800b198:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b19c:	9316      	str	r3, [sp, #88]	@ 0x58
 800b19e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1a0:	9805      	ldr	r0, [sp, #20]
 800b1a2:	6859      	ldr	r1, [r3, #4]
 800b1a4:	f7ff f81a 	bl	800a1dc <_Balloc>
 800b1a8:	4681      	mov	r9, r0
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	f43f aef7 	beq.w	800af9e <_strtod_l+0x43e>
 800b1b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b1b2:	300c      	adds	r0, #12
 800b1b4:	691a      	ldr	r2, [r3, #16]
 800b1b6:	f103 010c 	add.w	r1, r3, #12
 800b1ba:	3202      	adds	r2, #2
 800b1bc:	0092      	lsls	r2, r2, #2
 800b1be:	f7fe f89e 	bl	80092fe <memcpy>
 800b1c2:	ab1c      	add	r3, sp, #112	@ 0x70
 800b1c4:	9301      	str	r3, [sp, #4]
 800b1c6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	4652      	mov	r2, sl
 800b1cc:	465b      	mov	r3, fp
 800b1ce:	9805      	ldr	r0, [sp, #20]
 800b1d0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b1d4:	f7ff fbd6 	bl	800a984 <__d2b>
 800b1d8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f43f aedf 	beq.w	800af9e <_strtod_l+0x43e>
 800b1e0:	2101      	movs	r1, #1
 800b1e2:	9805      	ldr	r0, [sp, #20]
 800b1e4:	f7ff f938 	bl	800a458 <__i2b>
 800b1e8:	4680      	mov	r8, r0
 800b1ea:	b948      	cbnz	r0, 800b200 <_strtod_l+0x6a0>
 800b1ec:	f04f 0800 	mov.w	r8, #0
 800b1f0:	e6d5      	b.n	800af9e <_strtod_l+0x43e>
 800b1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fa:	ea03 0a0a 	and.w	sl, r3, sl
 800b1fe:	e7ad      	b.n	800b15c <_strtod_l+0x5fc>
 800b200:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b202:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b204:	2d00      	cmp	r5, #0
 800b206:	bfab      	itete	ge
 800b208:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b20a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b20c:	18ef      	addge	r7, r5, r3
 800b20e:	1b5e      	sublt	r6, r3, r5
 800b210:	9b08      	ldr	r3, [sp, #32]
 800b212:	bfa8      	it	ge
 800b214:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b216:	eba5 0503 	sub.w	r5, r5, r3
 800b21a:	4415      	add	r5, r2
 800b21c:	4b34      	ldr	r3, [pc, #208]	@ (800b2f0 <_strtod_l+0x790>)
 800b21e:	f105 35ff 	add.w	r5, r5, #4294967295
 800b222:	bfb8      	it	lt
 800b224:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b226:	429d      	cmp	r5, r3
 800b228:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b22c:	da50      	bge.n	800b2d0 <_strtod_l+0x770>
 800b22e:	1b5b      	subs	r3, r3, r5
 800b230:	2b1f      	cmp	r3, #31
 800b232:	f04f 0101 	mov.w	r1, #1
 800b236:	eba2 0203 	sub.w	r2, r2, r3
 800b23a:	dc3d      	bgt.n	800b2b8 <_strtod_l+0x758>
 800b23c:	fa01 f303 	lsl.w	r3, r1, r3
 800b240:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b242:	2300      	movs	r3, #0
 800b244:	9310      	str	r3, [sp, #64]	@ 0x40
 800b246:	18bd      	adds	r5, r7, r2
 800b248:	9b08      	ldr	r3, [sp, #32]
 800b24a:	42af      	cmp	r7, r5
 800b24c:	4416      	add	r6, r2
 800b24e:	441e      	add	r6, r3
 800b250:	463b      	mov	r3, r7
 800b252:	bfa8      	it	ge
 800b254:	462b      	movge	r3, r5
 800b256:	42b3      	cmp	r3, r6
 800b258:	bfa8      	it	ge
 800b25a:	4633      	movge	r3, r6
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	bfc2      	ittt	gt
 800b260:	1aed      	subgt	r5, r5, r3
 800b262:	1af6      	subgt	r6, r6, r3
 800b264:	1aff      	subgt	r7, r7, r3
 800b266:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b268:	2b00      	cmp	r3, #0
 800b26a:	dd16      	ble.n	800b29a <_strtod_l+0x73a>
 800b26c:	4641      	mov	r1, r8
 800b26e:	461a      	mov	r2, r3
 800b270:	9805      	ldr	r0, [sp, #20]
 800b272:	f7ff f9a9 	bl	800a5c8 <__pow5mult>
 800b276:	4680      	mov	r8, r0
 800b278:	2800      	cmp	r0, #0
 800b27a:	d0b7      	beq.n	800b1ec <_strtod_l+0x68c>
 800b27c:	4601      	mov	r1, r0
 800b27e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b280:	9805      	ldr	r0, [sp, #20]
 800b282:	f7ff f8ff 	bl	800a484 <__multiply>
 800b286:	900a      	str	r0, [sp, #40]	@ 0x28
 800b288:	2800      	cmp	r0, #0
 800b28a:	f43f ae88 	beq.w	800af9e <_strtod_l+0x43e>
 800b28e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b290:	9805      	ldr	r0, [sp, #20]
 800b292:	f7fe ffe3 	bl	800a25c <_Bfree>
 800b296:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b298:	931a      	str	r3, [sp, #104]	@ 0x68
 800b29a:	2d00      	cmp	r5, #0
 800b29c:	dc1d      	bgt.n	800b2da <_strtod_l+0x77a>
 800b29e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dd27      	ble.n	800b2f4 <_strtod_l+0x794>
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b2a8:	9805      	ldr	r0, [sp, #20]
 800b2aa:	f7ff f98d 	bl	800a5c8 <__pow5mult>
 800b2ae:	4681      	mov	r9, r0
 800b2b0:	bb00      	cbnz	r0, 800b2f4 <_strtod_l+0x794>
 800b2b2:	f04f 0900 	mov.w	r9, #0
 800b2b6:	e672      	b.n	800af9e <_strtod_l+0x43e>
 800b2b8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b2bc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b2c0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b2c4:	35e2      	adds	r5, #226	@ 0xe2
 800b2c6:	fa01 f305 	lsl.w	r3, r1, r5
 800b2ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2cc:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b2ce:	e7ba      	b.n	800b246 <_strtod_l+0x6e6>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9310      	str	r3, [sp, #64]	@ 0x40
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b2d8:	e7b5      	b.n	800b246 <_strtod_l+0x6e6>
 800b2da:	462a      	mov	r2, r5
 800b2dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2de:	9805      	ldr	r0, [sp, #20]
 800b2e0:	f7ff f9cc 	bl	800a67c <__lshift>
 800b2e4:	901a      	str	r0, [sp, #104]	@ 0x68
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d1d9      	bne.n	800b29e <_strtod_l+0x73e>
 800b2ea:	e658      	b.n	800af9e <_strtod_l+0x43e>
 800b2ec:	0800e358 	.word	0x0800e358
 800b2f0:	fffffc02 	.word	0xfffffc02
 800b2f4:	2e00      	cmp	r6, #0
 800b2f6:	dd07      	ble.n	800b308 <_strtod_l+0x7a8>
 800b2f8:	4649      	mov	r1, r9
 800b2fa:	4632      	mov	r2, r6
 800b2fc:	9805      	ldr	r0, [sp, #20]
 800b2fe:	f7ff f9bd 	bl	800a67c <__lshift>
 800b302:	4681      	mov	r9, r0
 800b304:	2800      	cmp	r0, #0
 800b306:	d0d4      	beq.n	800b2b2 <_strtod_l+0x752>
 800b308:	2f00      	cmp	r7, #0
 800b30a:	dd08      	ble.n	800b31e <_strtod_l+0x7be>
 800b30c:	4641      	mov	r1, r8
 800b30e:	463a      	mov	r2, r7
 800b310:	9805      	ldr	r0, [sp, #20]
 800b312:	f7ff f9b3 	bl	800a67c <__lshift>
 800b316:	4680      	mov	r8, r0
 800b318:	2800      	cmp	r0, #0
 800b31a:	f43f ae40 	beq.w	800af9e <_strtod_l+0x43e>
 800b31e:	464a      	mov	r2, r9
 800b320:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b322:	9805      	ldr	r0, [sp, #20]
 800b324:	f7ff fa32 	bl	800a78c <__mdiff>
 800b328:	4604      	mov	r4, r0
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f43f ae37 	beq.w	800af9e <_strtod_l+0x43e>
 800b330:	68c3      	ldr	r3, [r0, #12]
 800b332:	4641      	mov	r1, r8
 800b334:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b336:	2300      	movs	r3, #0
 800b338:	60c3      	str	r3, [r0, #12]
 800b33a:	f7ff fa0b 	bl	800a754 <__mcmp>
 800b33e:	2800      	cmp	r0, #0
 800b340:	da3d      	bge.n	800b3be <_strtod_l+0x85e>
 800b342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b344:	ea53 030a 	orrs.w	r3, r3, sl
 800b348:	d163      	bne.n	800b412 <_strtod_l+0x8b2>
 800b34a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d15f      	bne.n	800b412 <_strtod_l+0x8b2>
 800b352:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b356:	0d1b      	lsrs	r3, r3, #20
 800b358:	051b      	lsls	r3, r3, #20
 800b35a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b35e:	d958      	bls.n	800b412 <_strtod_l+0x8b2>
 800b360:	6963      	ldr	r3, [r4, #20]
 800b362:	b913      	cbnz	r3, 800b36a <_strtod_l+0x80a>
 800b364:	6923      	ldr	r3, [r4, #16]
 800b366:	2b01      	cmp	r3, #1
 800b368:	dd53      	ble.n	800b412 <_strtod_l+0x8b2>
 800b36a:	4621      	mov	r1, r4
 800b36c:	2201      	movs	r2, #1
 800b36e:	9805      	ldr	r0, [sp, #20]
 800b370:	f7ff f984 	bl	800a67c <__lshift>
 800b374:	4641      	mov	r1, r8
 800b376:	4604      	mov	r4, r0
 800b378:	f7ff f9ec 	bl	800a754 <__mcmp>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	dd48      	ble.n	800b412 <_strtod_l+0x8b2>
 800b380:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b384:	9a08      	ldr	r2, [sp, #32]
 800b386:	0d1b      	lsrs	r3, r3, #20
 800b388:	051b      	lsls	r3, r3, #20
 800b38a:	2a00      	cmp	r2, #0
 800b38c:	d062      	beq.n	800b454 <_strtod_l+0x8f4>
 800b38e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b392:	d85f      	bhi.n	800b454 <_strtod_l+0x8f4>
 800b394:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b398:	f67f ae94 	bls.w	800b0c4 <_strtod_l+0x564>
 800b39c:	4650      	mov	r0, sl
 800b39e:	4659      	mov	r1, fp
 800b3a0:	4ba3      	ldr	r3, [pc, #652]	@ (800b630 <_strtod_l+0xad0>)
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	f7f5 f8b0 	bl	8000508 <__aeabi_dmul>
 800b3a8:	4ba2      	ldr	r3, [pc, #648]	@ (800b634 <_strtod_l+0xad4>)
 800b3aa:	4682      	mov	sl, r0
 800b3ac:	400b      	ands	r3, r1
 800b3ae:	468b      	mov	fp, r1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	f47f adff 	bne.w	800afb4 <_strtod_l+0x454>
 800b3b6:	2322      	movs	r3, #34	@ 0x22
 800b3b8:	9a05      	ldr	r2, [sp, #20]
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	e5fa      	b.n	800afb4 <_strtod_l+0x454>
 800b3be:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b3c2:	d165      	bne.n	800b490 <_strtod_l+0x930>
 800b3c4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b3c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b3ca:	b35a      	cbz	r2, 800b424 <_strtod_l+0x8c4>
 800b3cc:	4a9a      	ldr	r2, [pc, #616]	@ (800b638 <_strtod_l+0xad8>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d12b      	bne.n	800b42a <_strtod_l+0x8ca>
 800b3d2:	9b08      	ldr	r3, [sp, #32]
 800b3d4:	4651      	mov	r1, sl
 800b3d6:	b303      	cbz	r3, 800b41a <_strtod_l+0x8ba>
 800b3d8:	465a      	mov	r2, fp
 800b3da:	4b96      	ldr	r3, [pc, #600]	@ (800b634 <_strtod_l+0xad4>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3e6:	d81b      	bhi.n	800b420 <_strtod_l+0x8c0>
 800b3e8:	0d1b      	lsrs	r3, r3, #20
 800b3ea:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f2:	4299      	cmp	r1, r3
 800b3f4:	d119      	bne.n	800b42a <_strtod_l+0x8ca>
 800b3f6:	4b91      	ldr	r3, [pc, #580]	@ (800b63c <_strtod_l+0xadc>)
 800b3f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d102      	bne.n	800b404 <_strtod_l+0x8a4>
 800b3fe:	3101      	adds	r1, #1
 800b400:	f43f adcd 	beq.w	800af9e <_strtod_l+0x43e>
 800b404:	f04f 0a00 	mov.w	sl, #0
 800b408:	4b8a      	ldr	r3, [pc, #552]	@ (800b634 <_strtod_l+0xad4>)
 800b40a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b40c:	401a      	ands	r2, r3
 800b40e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b412:	9b08      	ldr	r3, [sp, #32]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d1c1      	bne.n	800b39c <_strtod_l+0x83c>
 800b418:	e5cc      	b.n	800afb4 <_strtod_l+0x454>
 800b41a:	f04f 33ff 	mov.w	r3, #4294967295
 800b41e:	e7e8      	b.n	800b3f2 <_strtod_l+0x892>
 800b420:	4613      	mov	r3, r2
 800b422:	e7e6      	b.n	800b3f2 <_strtod_l+0x892>
 800b424:	ea53 030a 	orrs.w	r3, r3, sl
 800b428:	d0aa      	beq.n	800b380 <_strtod_l+0x820>
 800b42a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b42c:	b1db      	cbz	r3, 800b466 <_strtod_l+0x906>
 800b42e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b430:	4213      	tst	r3, r2
 800b432:	d0ee      	beq.n	800b412 <_strtod_l+0x8b2>
 800b434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b436:	4650      	mov	r0, sl
 800b438:	4659      	mov	r1, fp
 800b43a:	9a08      	ldr	r2, [sp, #32]
 800b43c:	b1bb      	cbz	r3, 800b46e <_strtod_l+0x90e>
 800b43e:	f7ff fb6d 	bl	800ab1c <sulp>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b44a:	f7f4 fea7 	bl	800019c <__adddf3>
 800b44e:	4682      	mov	sl, r0
 800b450:	468b      	mov	fp, r1
 800b452:	e7de      	b.n	800b412 <_strtod_l+0x8b2>
 800b454:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b458:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b45c:	f04f 3aff 	mov.w	sl, #4294967295
 800b460:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b464:	e7d5      	b.n	800b412 <_strtod_l+0x8b2>
 800b466:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b468:	ea13 0f0a 	tst.w	r3, sl
 800b46c:	e7e1      	b.n	800b432 <_strtod_l+0x8d2>
 800b46e:	f7ff fb55 	bl	800ab1c <sulp>
 800b472:	4602      	mov	r2, r0
 800b474:	460b      	mov	r3, r1
 800b476:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b47a:	f7f4 fe8d 	bl	8000198 <__aeabi_dsub>
 800b47e:	2200      	movs	r2, #0
 800b480:	2300      	movs	r3, #0
 800b482:	4682      	mov	sl, r0
 800b484:	468b      	mov	fp, r1
 800b486:	f7f5 faa7 	bl	80009d8 <__aeabi_dcmpeq>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d0c1      	beq.n	800b412 <_strtod_l+0x8b2>
 800b48e:	e619      	b.n	800b0c4 <_strtod_l+0x564>
 800b490:	4641      	mov	r1, r8
 800b492:	4620      	mov	r0, r4
 800b494:	f7ff face 	bl	800aa34 <__ratio>
 800b498:	2200      	movs	r2, #0
 800b49a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	f7f5 faad 	bl	8000a00 <__aeabi_dcmple>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d06d      	beq.n	800b586 <_strtod_l+0xa26>
 800b4aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d178      	bne.n	800b5a2 <_strtod_l+0xa42>
 800b4b0:	f1ba 0f00 	cmp.w	sl, #0
 800b4b4:	d156      	bne.n	800b564 <_strtod_l+0xa04>
 800b4b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d158      	bne.n	800b572 <_strtod_l+0xa12>
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	4b5e      	ldr	r3, [pc, #376]	@ (800b640 <_strtod_l+0xae0>)
 800b4c8:	f7f5 fa90 	bl	80009ec <__aeabi_dcmplt>
 800b4cc:	2800      	cmp	r0, #0
 800b4ce:	d157      	bne.n	800b580 <_strtod_l+0xa20>
 800b4d0:	4630      	mov	r0, r6
 800b4d2:	4639      	mov	r1, r7
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	4b5b      	ldr	r3, [pc, #364]	@ (800b644 <_strtod_l+0xae4>)
 800b4d8:	f7f5 f816 	bl	8000508 <__aeabi_dmul>
 800b4dc:	4606      	mov	r6, r0
 800b4de:	460f      	mov	r7, r1
 800b4e0:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b4e4:	9606      	str	r6, [sp, #24]
 800b4e6:	9307      	str	r3, [sp, #28]
 800b4e8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4ec:	4d51      	ldr	r5, [pc, #324]	@ (800b634 <_strtod_l+0xad4>)
 800b4ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b4f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4f4:	401d      	ands	r5, r3
 800b4f6:	4b54      	ldr	r3, [pc, #336]	@ (800b648 <_strtod_l+0xae8>)
 800b4f8:	429d      	cmp	r5, r3
 800b4fa:	f040 80ab 	bne.w	800b654 <_strtod_l+0xaf4>
 800b4fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b500:	4650      	mov	r0, sl
 800b502:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b506:	4659      	mov	r1, fp
 800b508:	f7ff f9d4 	bl	800a8b4 <__ulp>
 800b50c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b510:	f7f4 fffa 	bl	8000508 <__aeabi_dmul>
 800b514:	4652      	mov	r2, sl
 800b516:	465b      	mov	r3, fp
 800b518:	f7f4 fe40 	bl	800019c <__adddf3>
 800b51c:	460b      	mov	r3, r1
 800b51e:	4945      	ldr	r1, [pc, #276]	@ (800b634 <_strtod_l+0xad4>)
 800b520:	4a4a      	ldr	r2, [pc, #296]	@ (800b64c <_strtod_l+0xaec>)
 800b522:	4019      	ands	r1, r3
 800b524:	4291      	cmp	r1, r2
 800b526:	4682      	mov	sl, r0
 800b528:	d942      	bls.n	800b5b0 <_strtod_l+0xa50>
 800b52a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b52c:	4b43      	ldr	r3, [pc, #268]	@ (800b63c <_strtod_l+0xadc>)
 800b52e:	429a      	cmp	r2, r3
 800b530:	d103      	bne.n	800b53a <_strtod_l+0x9da>
 800b532:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b534:	3301      	adds	r3, #1
 800b536:	f43f ad32 	beq.w	800af9e <_strtod_l+0x43e>
 800b53a:	f04f 3aff 	mov.w	sl, #4294967295
 800b53e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 800b63c <_strtod_l+0xadc>
 800b542:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b544:	9805      	ldr	r0, [sp, #20]
 800b546:	f7fe fe89 	bl	800a25c <_Bfree>
 800b54a:	4649      	mov	r1, r9
 800b54c:	9805      	ldr	r0, [sp, #20]
 800b54e:	f7fe fe85 	bl	800a25c <_Bfree>
 800b552:	4641      	mov	r1, r8
 800b554:	9805      	ldr	r0, [sp, #20]
 800b556:	f7fe fe81 	bl	800a25c <_Bfree>
 800b55a:	4621      	mov	r1, r4
 800b55c:	9805      	ldr	r0, [sp, #20]
 800b55e:	f7fe fe7d 	bl	800a25c <_Bfree>
 800b562:	e61c      	b.n	800b19e <_strtod_l+0x63e>
 800b564:	f1ba 0f01 	cmp.w	sl, #1
 800b568:	d103      	bne.n	800b572 <_strtod_l+0xa12>
 800b56a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f43f ada9 	beq.w	800b0c4 <_strtod_l+0x564>
 800b572:	2200      	movs	r2, #0
 800b574:	4b36      	ldr	r3, [pc, #216]	@ (800b650 <_strtod_l+0xaf0>)
 800b576:	2600      	movs	r6, #0
 800b578:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b57c:	4f30      	ldr	r7, [pc, #192]	@ (800b640 <_strtod_l+0xae0>)
 800b57e:	e7b3      	b.n	800b4e8 <_strtod_l+0x988>
 800b580:	2600      	movs	r6, #0
 800b582:	4f30      	ldr	r7, [pc, #192]	@ (800b644 <_strtod_l+0xae4>)
 800b584:	e7ac      	b.n	800b4e0 <_strtod_l+0x980>
 800b586:	4630      	mov	r0, r6
 800b588:	4639      	mov	r1, r7
 800b58a:	4b2e      	ldr	r3, [pc, #184]	@ (800b644 <_strtod_l+0xae4>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	f7f4 ffbb 	bl	8000508 <__aeabi_dmul>
 800b592:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b594:	4606      	mov	r6, r0
 800b596:	460f      	mov	r7, r1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d0a1      	beq.n	800b4e0 <_strtod_l+0x980>
 800b59c:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b5a0:	e7a2      	b.n	800b4e8 <_strtod_l+0x988>
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	4b26      	ldr	r3, [pc, #152]	@ (800b640 <_strtod_l+0xae0>)
 800b5a6:	4616      	mov	r6, r2
 800b5a8:	461f      	mov	r7, r3
 800b5aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b5ae:	e79b      	b.n	800b4e8 <_strtod_l+0x988>
 800b5b0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b5b4:	9b08      	ldr	r3, [sp, #32]
 800b5b6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1c1      	bne.n	800b542 <_strtod_l+0x9e2>
 800b5be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5c2:	0d1b      	lsrs	r3, r3, #20
 800b5c4:	051b      	lsls	r3, r3, #20
 800b5c6:	429d      	cmp	r5, r3
 800b5c8:	d1bb      	bne.n	800b542 <_strtod_l+0x9e2>
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f5 fdf5 	bl	80011bc <__aeabi_d2lz>
 800b5d2:	f7f4 ff6b 	bl	80004ac <__aeabi_l2d>
 800b5d6:	4602      	mov	r2, r0
 800b5d8:	460b      	mov	r3, r1
 800b5da:	4630      	mov	r0, r6
 800b5dc:	4639      	mov	r1, r7
 800b5de:	f7f4 fddb 	bl	8000198 <__aeabi_dsub>
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b5ea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b5ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5f0:	ea46 060a 	orr.w	r6, r6, sl
 800b5f4:	431e      	orrs	r6, r3
 800b5f6:	d06a      	beq.n	800b6ce <_strtod_l+0xb6e>
 800b5f8:	a309      	add	r3, pc, #36	@ (adr r3, 800b620 <_strtod_l+0xac0>)
 800b5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fe:	f7f5 f9f5 	bl	80009ec <__aeabi_dcmplt>
 800b602:	2800      	cmp	r0, #0
 800b604:	f47f acd6 	bne.w	800afb4 <_strtod_l+0x454>
 800b608:	a307      	add	r3, pc, #28	@ (adr r3, 800b628 <_strtod_l+0xac8>)
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b612:	f7f5 fa09 	bl	8000a28 <__aeabi_dcmpgt>
 800b616:	2800      	cmp	r0, #0
 800b618:	d093      	beq.n	800b542 <_strtod_l+0x9e2>
 800b61a:	e4cb      	b.n	800afb4 <_strtod_l+0x454>
 800b61c:	f3af 8000 	nop.w
 800b620:	94a03595 	.word	0x94a03595
 800b624:	3fdfffff 	.word	0x3fdfffff
 800b628:	35afe535 	.word	0x35afe535
 800b62c:	3fe00000 	.word	0x3fe00000
 800b630:	39500000 	.word	0x39500000
 800b634:	7ff00000 	.word	0x7ff00000
 800b638:	000fffff 	.word	0x000fffff
 800b63c:	7fefffff 	.word	0x7fefffff
 800b640:	3ff00000 	.word	0x3ff00000
 800b644:	3fe00000 	.word	0x3fe00000
 800b648:	7fe00000 	.word	0x7fe00000
 800b64c:	7c9fffff 	.word	0x7c9fffff
 800b650:	bff00000 	.word	0xbff00000
 800b654:	9b08      	ldr	r3, [sp, #32]
 800b656:	b323      	cbz	r3, 800b6a2 <_strtod_l+0xb42>
 800b658:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b65c:	d821      	bhi.n	800b6a2 <_strtod_l+0xb42>
 800b65e:	a328      	add	r3, pc, #160	@ (adr r3, 800b700 <_strtod_l+0xba0>)
 800b660:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b664:	4630      	mov	r0, r6
 800b666:	4639      	mov	r1, r7
 800b668:	f7f5 f9ca 	bl	8000a00 <__aeabi_dcmple>
 800b66c:	b1a0      	cbz	r0, 800b698 <_strtod_l+0xb38>
 800b66e:	4639      	mov	r1, r7
 800b670:	4630      	mov	r0, r6
 800b672:	f7f5 fa21 	bl	8000ab8 <__aeabi_d2uiz>
 800b676:	2801      	cmp	r0, #1
 800b678:	bf38      	it	cc
 800b67a:	2001      	movcc	r0, #1
 800b67c:	f7f4 feca 	bl	8000414 <__aeabi_ui2d>
 800b680:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b682:	4606      	mov	r6, r0
 800b684:	460f      	mov	r7, r1
 800b686:	b9fb      	cbnz	r3, 800b6c8 <_strtod_l+0xb68>
 800b688:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b68c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b68e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b690:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b694:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b698:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b69a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b69e:	1b5b      	subs	r3, r3, r5
 800b6a0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b6a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b6a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b6aa:	f7ff f903 	bl	800a8b4 <__ulp>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	4650      	mov	r0, sl
 800b6b4:	4659      	mov	r1, fp
 800b6b6:	f7f4 ff27 	bl	8000508 <__aeabi_dmul>
 800b6ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6be:	f7f4 fd6d 	bl	800019c <__adddf3>
 800b6c2:	4682      	mov	sl, r0
 800b6c4:	468b      	mov	fp, r1
 800b6c6:	e775      	b.n	800b5b4 <_strtod_l+0xa54>
 800b6c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b6cc:	e7e0      	b.n	800b690 <_strtod_l+0xb30>
 800b6ce:	a30e      	add	r3, pc, #56	@ (adr r3, 800b708 <_strtod_l+0xba8>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f5 f98a 	bl	80009ec <__aeabi_dcmplt>
 800b6d8:	e79d      	b.n	800b616 <_strtod_l+0xab6>
 800b6da:	2300      	movs	r3, #0
 800b6dc:	930e      	str	r3, [sp, #56]	@ 0x38
 800b6de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6e0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b6e2:	6013      	str	r3, [r2, #0]
 800b6e4:	f7ff ba79 	b.w	800abda <_strtod_l+0x7a>
 800b6e8:	2a65      	cmp	r2, #101	@ 0x65
 800b6ea:	f43f ab72 	beq.w	800add2 <_strtod_l+0x272>
 800b6ee:	2a45      	cmp	r2, #69	@ 0x45
 800b6f0:	f43f ab6f 	beq.w	800add2 <_strtod_l+0x272>
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	f7ff bbaa 	b.w	800ae4e <_strtod_l+0x2ee>
 800b6fa:	bf00      	nop
 800b6fc:	f3af 8000 	nop.w
 800b700:	ffc00000 	.word	0xffc00000
 800b704:	41dfffff 	.word	0x41dfffff
 800b708:	94a03595 	.word	0x94a03595
 800b70c:	3fcfffff 	.word	0x3fcfffff

0800b710 <_strtod_r>:
 800b710:	4b01      	ldr	r3, [pc, #4]	@ (800b718 <_strtod_r+0x8>)
 800b712:	f7ff ba25 	b.w	800ab60 <_strtod_l>
 800b716:	bf00      	nop
 800b718:	20000080 	.word	0x20000080

0800b71c <_strtol_l.isra.0>:
 800b71c:	2b24      	cmp	r3, #36	@ 0x24
 800b71e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b722:	4686      	mov	lr, r0
 800b724:	4690      	mov	r8, r2
 800b726:	d801      	bhi.n	800b72c <_strtol_l.isra.0+0x10>
 800b728:	2b01      	cmp	r3, #1
 800b72a:	d106      	bne.n	800b73a <_strtol_l.isra.0+0x1e>
 800b72c:	f7fd fdac 	bl	8009288 <__errno>
 800b730:	2316      	movs	r3, #22
 800b732:	6003      	str	r3, [r0, #0]
 800b734:	2000      	movs	r0, #0
 800b736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b73a:	460d      	mov	r5, r1
 800b73c:	4833      	ldr	r0, [pc, #204]	@ (800b80c <_strtol_l.isra.0+0xf0>)
 800b73e:	462a      	mov	r2, r5
 800b740:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b744:	5d06      	ldrb	r6, [r0, r4]
 800b746:	f016 0608 	ands.w	r6, r6, #8
 800b74a:	d1f8      	bne.n	800b73e <_strtol_l.isra.0+0x22>
 800b74c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b74e:	d110      	bne.n	800b772 <_strtol_l.isra.0+0x56>
 800b750:	2601      	movs	r6, #1
 800b752:	782c      	ldrb	r4, [r5, #0]
 800b754:	1c95      	adds	r5, r2, #2
 800b756:	f033 0210 	bics.w	r2, r3, #16
 800b75a:	d115      	bne.n	800b788 <_strtol_l.isra.0+0x6c>
 800b75c:	2c30      	cmp	r4, #48	@ 0x30
 800b75e:	d10d      	bne.n	800b77c <_strtol_l.isra.0+0x60>
 800b760:	782a      	ldrb	r2, [r5, #0]
 800b762:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b766:	2a58      	cmp	r2, #88	@ 0x58
 800b768:	d108      	bne.n	800b77c <_strtol_l.isra.0+0x60>
 800b76a:	786c      	ldrb	r4, [r5, #1]
 800b76c:	3502      	adds	r5, #2
 800b76e:	2310      	movs	r3, #16
 800b770:	e00a      	b.n	800b788 <_strtol_l.isra.0+0x6c>
 800b772:	2c2b      	cmp	r4, #43	@ 0x2b
 800b774:	bf04      	itt	eq
 800b776:	782c      	ldrbeq	r4, [r5, #0]
 800b778:	1c95      	addeq	r5, r2, #2
 800b77a:	e7ec      	b.n	800b756 <_strtol_l.isra.0+0x3a>
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d1f6      	bne.n	800b76e <_strtol_l.isra.0+0x52>
 800b780:	2c30      	cmp	r4, #48	@ 0x30
 800b782:	bf14      	ite	ne
 800b784:	230a      	movne	r3, #10
 800b786:	2308      	moveq	r3, #8
 800b788:	2200      	movs	r2, #0
 800b78a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b78e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b792:	fbbc f9f3 	udiv	r9, ip, r3
 800b796:	4610      	mov	r0, r2
 800b798:	fb03 ca19 	mls	sl, r3, r9, ip
 800b79c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b7a0:	2f09      	cmp	r7, #9
 800b7a2:	d80f      	bhi.n	800b7c4 <_strtol_l.isra.0+0xa8>
 800b7a4:	463c      	mov	r4, r7
 800b7a6:	42a3      	cmp	r3, r4
 800b7a8:	dd1b      	ble.n	800b7e2 <_strtol_l.isra.0+0xc6>
 800b7aa:	1c57      	adds	r7, r2, #1
 800b7ac:	d007      	beq.n	800b7be <_strtol_l.isra.0+0xa2>
 800b7ae:	4581      	cmp	r9, r0
 800b7b0:	d314      	bcc.n	800b7dc <_strtol_l.isra.0+0xc0>
 800b7b2:	d101      	bne.n	800b7b8 <_strtol_l.isra.0+0x9c>
 800b7b4:	45a2      	cmp	sl, r4
 800b7b6:	db11      	blt.n	800b7dc <_strtol_l.isra.0+0xc0>
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	fb00 4003 	mla	r0, r0, r3, r4
 800b7be:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b7c2:	e7eb      	b.n	800b79c <_strtol_l.isra.0+0x80>
 800b7c4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b7c8:	2f19      	cmp	r7, #25
 800b7ca:	d801      	bhi.n	800b7d0 <_strtol_l.isra.0+0xb4>
 800b7cc:	3c37      	subs	r4, #55	@ 0x37
 800b7ce:	e7ea      	b.n	800b7a6 <_strtol_l.isra.0+0x8a>
 800b7d0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b7d4:	2f19      	cmp	r7, #25
 800b7d6:	d804      	bhi.n	800b7e2 <_strtol_l.isra.0+0xc6>
 800b7d8:	3c57      	subs	r4, #87	@ 0x57
 800b7da:	e7e4      	b.n	800b7a6 <_strtol_l.isra.0+0x8a>
 800b7dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e0:	e7ed      	b.n	800b7be <_strtol_l.isra.0+0xa2>
 800b7e2:	1c53      	adds	r3, r2, #1
 800b7e4:	d108      	bne.n	800b7f8 <_strtol_l.isra.0+0xdc>
 800b7e6:	2322      	movs	r3, #34	@ 0x22
 800b7e8:	4660      	mov	r0, ip
 800b7ea:	f8ce 3000 	str.w	r3, [lr]
 800b7ee:	f1b8 0f00 	cmp.w	r8, #0
 800b7f2:	d0a0      	beq.n	800b736 <_strtol_l.isra.0+0x1a>
 800b7f4:	1e69      	subs	r1, r5, #1
 800b7f6:	e006      	b.n	800b806 <_strtol_l.isra.0+0xea>
 800b7f8:	b106      	cbz	r6, 800b7fc <_strtol_l.isra.0+0xe0>
 800b7fa:	4240      	negs	r0, r0
 800b7fc:	f1b8 0f00 	cmp.w	r8, #0
 800b800:	d099      	beq.n	800b736 <_strtol_l.isra.0+0x1a>
 800b802:	2a00      	cmp	r2, #0
 800b804:	d1f6      	bne.n	800b7f4 <_strtol_l.isra.0+0xd8>
 800b806:	f8c8 1000 	str.w	r1, [r8]
 800b80a:	e794      	b.n	800b736 <_strtol_l.isra.0+0x1a>
 800b80c:	0800e381 	.word	0x0800e381

0800b810 <_strtol_r>:
 800b810:	f7ff bf84 	b.w	800b71c <_strtol_l.isra.0>

0800b814 <__ssputs_r>:
 800b814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b818:	461f      	mov	r7, r3
 800b81a:	688e      	ldr	r6, [r1, #8]
 800b81c:	4682      	mov	sl, r0
 800b81e:	42be      	cmp	r6, r7
 800b820:	460c      	mov	r4, r1
 800b822:	4690      	mov	r8, r2
 800b824:	680b      	ldr	r3, [r1, #0]
 800b826:	d82d      	bhi.n	800b884 <__ssputs_r+0x70>
 800b828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b82c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b830:	d026      	beq.n	800b880 <__ssputs_r+0x6c>
 800b832:	6965      	ldr	r5, [r4, #20]
 800b834:	6909      	ldr	r1, [r1, #16]
 800b836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b83a:	eba3 0901 	sub.w	r9, r3, r1
 800b83e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b842:	1c7b      	adds	r3, r7, #1
 800b844:	444b      	add	r3, r9
 800b846:	106d      	asrs	r5, r5, #1
 800b848:	429d      	cmp	r5, r3
 800b84a:	bf38      	it	cc
 800b84c:	461d      	movcc	r5, r3
 800b84e:	0553      	lsls	r3, r2, #21
 800b850:	d527      	bpl.n	800b8a2 <__ssputs_r+0x8e>
 800b852:	4629      	mov	r1, r5
 800b854:	f7fe fc36 	bl	800a0c4 <_malloc_r>
 800b858:	4606      	mov	r6, r0
 800b85a:	b360      	cbz	r0, 800b8b6 <__ssputs_r+0xa2>
 800b85c:	464a      	mov	r2, r9
 800b85e:	6921      	ldr	r1, [r4, #16]
 800b860:	f7fd fd4d 	bl	80092fe <memcpy>
 800b864:	89a3      	ldrh	r3, [r4, #12]
 800b866:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b86e:	81a3      	strh	r3, [r4, #12]
 800b870:	6126      	str	r6, [r4, #16]
 800b872:	444e      	add	r6, r9
 800b874:	6026      	str	r6, [r4, #0]
 800b876:	463e      	mov	r6, r7
 800b878:	6165      	str	r5, [r4, #20]
 800b87a:	eba5 0509 	sub.w	r5, r5, r9
 800b87e:	60a5      	str	r5, [r4, #8]
 800b880:	42be      	cmp	r6, r7
 800b882:	d900      	bls.n	800b886 <__ssputs_r+0x72>
 800b884:	463e      	mov	r6, r7
 800b886:	4632      	mov	r2, r6
 800b888:	4641      	mov	r1, r8
 800b88a:	6820      	ldr	r0, [r4, #0]
 800b88c:	f000 fb63 	bl	800bf56 <memmove>
 800b890:	2000      	movs	r0, #0
 800b892:	68a3      	ldr	r3, [r4, #8]
 800b894:	1b9b      	subs	r3, r3, r6
 800b896:	60a3      	str	r3, [r4, #8]
 800b898:	6823      	ldr	r3, [r4, #0]
 800b89a:	4433      	add	r3, r6
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a2:	462a      	mov	r2, r5
 800b8a4:	f000 ff39 	bl	800c71a <_realloc_r>
 800b8a8:	4606      	mov	r6, r0
 800b8aa:	2800      	cmp	r0, #0
 800b8ac:	d1e0      	bne.n	800b870 <__ssputs_r+0x5c>
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	6921      	ldr	r1, [r4, #16]
 800b8b2:	f7fe fb95 	bl	8009fe0 <_free_r>
 800b8b6:	230c      	movs	r3, #12
 800b8b8:	f8ca 3000 	str.w	r3, [sl]
 800b8bc:	89a3      	ldrh	r3, [r4, #12]
 800b8be:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8c6:	81a3      	strh	r3, [r4, #12]
 800b8c8:	e7e9      	b.n	800b89e <__ssputs_r+0x8a>
	...

0800b8cc <_svfiprintf_r>:
 800b8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d0:	4698      	mov	r8, r3
 800b8d2:	898b      	ldrh	r3, [r1, #12]
 800b8d4:	4607      	mov	r7, r0
 800b8d6:	061b      	lsls	r3, r3, #24
 800b8d8:	460d      	mov	r5, r1
 800b8da:	4614      	mov	r4, r2
 800b8dc:	b09d      	sub	sp, #116	@ 0x74
 800b8de:	d510      	bpl.n	800b902 <_svfiprintf_r+0x36>
 800b8e0:	690b      	ldr	r3, [r1, #16]
 800b8e2:	b973      	cbnz	r3, 800b902 <_svfiprintf_r+0x36>
 800b8e4:	2140      	movs	r1, #64	@ 0x40
 800b8e6:	f7fe fbed 	bl	800a0c4 <_malloc_r>
 800b8ea:	6028      	str	r0, [r5, #0]
 800b8ec:	6128      	str	r0, [r5, #16]
 800b8ee:	b930      	cbnz	r0, 800b8fe <_svfiprintf_r+0x32>
 800b8f0:	230c      	movs	r3, #12
 800b8f2:	603b      	str	r3, [r7, #0]
 800b8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f8:	b01d      	add	sp, #116	@ 0x74
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fe:	2340      	movs	r3, #64	@ 0x40
 800b900:	616b      	str	r3, [r5, #20]
 800b902:	2300      	movs	r3, #0
 800b904:	9309      	str	r3, [sp, #36]	@ 0x24
 800b906:	2320      	movs	r3, #32
 800b908:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b90c:	2330      	movs	r3, #48	@ 0x30
 800b90e:	f04f 0901 	mov.w	r9, #1
 800b912:	f8cd 800c 	str.w	r8, [sp, #12]
 800b916:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bab0 <_svfiprintf_r+0x1e4>
 800b91a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b91e:	4623      	mov	r3, r4
 800b920:	469a      	mov	sl, r3
 800b922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b926:	b10a      	cbz	r2, 800b92c <_svfiprintf_r+0x60>
 800b928:	2a25      	cmp	r2, #37	@ 0x25
 800b92a:	d1f9      	bne.n	800b920 <_svfiprintf_r+0x54>
 800b92c:	ebba 0b04 	subs.w	fp, sl, r4
 800b930:	d00b      	beq.n	800b94a <_svfiprintf_r+0x7e>
 800b932:	465b      	mov	r3, fp
 800b934:	4622      	mov	r2, r4
 800b936:	4629      	mov	r1, r5
 800b938:	4638      	mov	r0, r7
 800b93a:	f7ff ff6b 	bl	800b814 <__ssputs_r>
 800b93e:	3001      	adds	r0, #1
 800b940:	f000 80a7 	beq.w	800ba92 <_svfiprintf_r+0x1c6>
 800b944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b946:	445a      	add	r2, fp
 800b948:	9209      	str	r2, [sp, #36]	@ 0x24
 800b94a:	f89a 3000 	ldrb.w	r3, [sl]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 809f 	beq.w	800ba92 <_svfiprintf_r+0x1c6>
 800b954:	2300      	movs	r3, #0
 800b956:	f04f 32ff 	mov.w	r2, #4294967295
 800b95a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b95e:	f10a 0a01 	add.w	sl, sl, #1
 800b962:	9304      	str	r3, [sp, #16]
 800b964:	9307      	str	r3, [sp, #28]
 800b966:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b96a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b96c:	4654      	mov	r4, sl
 800b96e:	2205      	movs	r2, #5
 800b970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b974:	484e      	ldr	r0, [pc, #312]	@ (800bab0 <_svfiprintf_r+0x1e4>)
 800b976:	f7fd fcb4 	bl	80092e2 <memchr>
 800b97a:	9a04      	ldr	r2, [sp, #16]
 800b97c:	b9d8      	cbnz	r0, 800b9b6 <_svfiprintf_r+0xea>
 800b97e:	06d0      	lsls	r0, r2, #27
 800b980:	bf44      	itt	mi
 800b982:	2320      	movmi	r3, #32
 800b984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b988:	0711      	lsls	r1, r2, #28
 800b98a:	bf44      	itt	mi
 800b98c:	232b      	movmi	r3, #43	@ 0x2b
 800b98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b992:	f89a 3000 	ldrb.w	r3, [sl]
 800b996:	2b2a      	cmp	r3, #42	@ 0x2a
 800b998:	d015      	beq.n	800b9c6 <_svfiprintf_r+0xfa>
 800b99a:	4654      	mov	r4, sl
 800b99c:	2000      	movs	r0, #0
 800b99e:	f04f 0c0a 	mov.w	ip, #10
 800b9a2:	9a07      	ldr	r2, [sp, #28]
 800b9a4:	4621      	mov	r1, r4
 800b9a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9aa:	3b30      	subs	r3, #48	@ 0x30
 800b9ac:	2b09      	cmp	r3, #9
 800b9ae:	d94b      	bls.n	800ba48 <_svfiprintf_r+0x17c>
 800b9b0:	b1b0      	cbz	r0, 800b9e0 <_svfiprintf_r+0x114>
 800b9b2:	9207      	str	r2, [sp, #28]
 800b9b4:	e014      	b.n	800b9e0 <_svfiprintf_r+0x114>
 800b9b6:	eba0 0308 	sub.w	r3, r0, r8
 800b9ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	46a2      	mov	sl, r4
 800b9c2:	9304      	str	r3, [sp, #16]
 800b9c4:	e7d2      	b.n	800b96c <_svfiprintf_r+0xa0>
 800b9c6:	9b03      	ldr	r3, [sp, #12]
 800b9c8:	1d19      	adds	r1, r3, #4
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	9103      	str	r1, [sp, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	bfbb      	ittet	lt
 800b9d2:	425b      	neglt	r3, r3
 800b9d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b9d8:	9307      	strge	r3, [sp, #28]
 800b9da:	9307      	strlt	r3, [sp, #28]
 800b9dc:	bfb8      	it	lt
 800b9de:	9204      	strlt	r2, [sp, #16]
 800b9e0:	7823      	ldrb	r3, [r4, #0]
 800b9e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b9e4:	d10a      	bne.n	800b9fc <_svfiprintf_r+0x130>
 800b9e6:	7863      	ldrb	r3, [r4, #1]
 800b9e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9ea:	d132      	bne.n	800ba52 <_svfiprintf_r+0x186>
 800b9ec:	9b03      	ldr	r3, [sp, #12]
 800b9ee:	3402      	adds	r4, #2
 800b9f0:	1d1a      	adds	r2, r3, #4
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	9203      	str	r2, [sp, #12]
 800b9f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b9fa:	9305      	str	r3, [sp, #20]
 800b9fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bab4 <_svfiprintf_r+0x1e8>
 800ba00:	2203      	movs	r2, #3
 800ba02:	4650      	mov	r0, sl
 800ba04:	7821      	ldrb	r1, [r4, #0]
 800ba06:	f7fd fc6c 	bl	80092e2 <memchr>
 800ba0a:	b138      	cbz	r0, 800ba1c <_svfiprintf_r+0x150>
 800ba0c:	2240      	movs	r2, #64	@ 0x40
 800ba0e:	9b04      	ldr	r3, [sp, #16]
 800ba10:	eba0 000a 	sub.w	r0, r0, sl
 800ba14:	4082      	lsls	r2, r0
 800ba16:	4313      	orrs	r3, r2
 800ba18:	3401      	adds	r4, #1
 800ba1a:	9304      	str	r3, [sp, #16]
 800ba1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba20:	2206      	movs	r2, #6
 800ba22:	4825      	ldr	r0, [pc, #148]	@ (800bab8 <_svfiprintf_r+0x1ec>)
 800ba24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba28:	f7fd fc5b 	bl	80092e2 <memchr>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	d036      	beq.n	800ba9e <_svfiprintf_r+0x1d2>
 800ba30:	4b22      	ldr	r3, [pc, #136]	@ (800babc <_svfiprintf_r+0x1f0>)
 800ba32:	bb1b      	cbnz	r3, 800ba7c <_svfiprintf_r+0x1b0>
 800ba34:	9b03      	ldr	r3, [sp, #12]
 800ba36:	3307      	adds	r3, #7
 800ba38:	f023 0307 	bic.w	r3, r3, #7
 800ba3c:	3308      	adds	r3, #8
 800ba3e:	9303      	str	r3, [sp, #12]
 800ba40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba42:	4433      	add	r3, r6
 800ba44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba46:	e76a      	b.n	800b91e <_svfiprintf_r+0x52>
 800ba48:	460c      	mov	r4, r1
 800ba4a:	2001      	movs	r0, #1
 800ba4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba50:	e7a8      	b.n	800b9a4 <_svfiprintf_r+0xd8>
 800ba52:	2300      	movs	r3, #0
 800ba54:	f04f 0c0a 	mov.w	ip, #10
 800ba58:	4619      	mov	r1, r3
 800ba5a:	3401      	adds	r4, #1
 800ba5c:	9305      	str	r3, [sp, #20]
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba64:	3a30      	subs	r2, #48	@ 0x30
 800ba66:	2a09      	cmp	r2, #9
 800ba68:	d903      	bls.n	800ba72 <_svfiprintf_r+0x1a6>
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0c6      	beq.n	800b9fc <_svfiprintf_r+0x130>
 800ba6e:	9105      	str	r1, [sp, #20]
 800ba70:	e7c4      	b.n	800b9fc <_svfiprintf_r+0x130>
 800ba72:	4604      	mov	r4, r0
 800ba74:	2301      	movs	r3, #1
 800ba76:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba7a:	e7f0      	b.n	800ba5e <_svfiprintf_r+0x192>
 800ba7c:	ab03      	add	r3, sp, #12
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	462a      	mov	r2, r5
 800ba82:	4638      	mov	r0, r7
 800ba84:	4b0e      	ldr	r3, [pc, #56]	@ (800bac0 <_svfiprintf_r+0x1f4>)
 800ba86:	a904      	add	r1, sp, #16
 800ba88:	f7fc fbba 	bl	8008200 <_printf_float>
 800ba8c:	1c42      	adds	r2, r0, #1
 800ba8e:	4606      	mov	r6, r0
 800ba90:	d1d6      	bne.n	800ba40 <_svfiprintf_r+0x174>
 800ba92:	89ab      	ldrh	r3, [r5, #12]
 800ba94:	065b      	lsls	r3, r3, #25
 800ba96:	f53f af2d 	bmi.w	800b8f4 <_svfiprintf_r+0x28>
 800ba9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba9c:	e72c      	b.n	800b8f8 <_svfiprintf_r+0x2c>
 800ba9e:	ab03      	add	r3, sp, #12
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	462a      	mov	r2, r5
 800baa4:	4638      	mov	r0, r7
 800baa6:	4b06      	ldr	r3, [pc, #24]	@ (800bac0 <_svfiprintf_r+0x1f4>)
 800baa8:	a904      	add	r1, sp, #16
 800baaa:	f7fc fe47 	bl	800873c <_printf_i>
 800baae:	e7ed      	b.n	800ba8c <_svfiprintf_r+0x1c0>
 800bab0:	0800e17b 	.word	0x0800e17b
 800bab4:	0800e181 	.word	0x0800e181
 800bab8:	0800e185 	.word	0x0800e185
 800babc:	08008201 	.word	0x08008201
 800bac0:	0800b815 	.word	0x0800b815

0800bac4 <__sfputc_r>:
 800bac4:	6893      	ldr	r3, [r2, #8]
 800bac6:	b410      	push	{r4}
 800bac8:	3b01      	subs	r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	6093      	str	r3, [r2, #8]
 800bace:	da07      	bge.n	800bae0 <__sfputc_r+0x1c>
 800bad0:	6994      	ldr	r4, [r2, #24]
 800bad2:	42a3      	cmp	r3, r4
 800bad4:	db01      	blt.n	800bada <__sfputc_r+0x16>
 800bad6:	290a      	cmp	r1, #10
 800bad8:	d102      	bne.n	800bae0 <__sfputc_r+0x1c>
 800bada:	bc10      	pop	{r4}
 800badc:	f7fd baed 	b.w	80090ba <__swbuf_r>
 800bae0:	6813      	ldr	r3, [r2, #0]
 800bae2:	1c58      	adds	r0, r3, #1
 800bae4:	6010      	str	r0, [r2, #0]
 800bae6:	7019      	strb	r1, [r3, #0]
 800bae8:	4608      	mov	r0, r1
 800baea:	bc10      	pop	{r4}
 800baec:	4770      	bx	lr

0800baee <__sfputs_r>:
 800baee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baf0:	4606      	mov	r6, r0
 800baf2:	460f      	mov	r7, r1
 800baf4:	4614      	mov	r4, r2
 800baf6:	18d5      	adds	r5, r2, r3
 800baf8:	42ac      	cmp	r4, r5
 800bafa:	d101      	bne.n	800bb00 <__sfputs_r+0x12>
 800bafc:	2000      	movs	r0, #0
 800bafe:	e007      	b.n	800bb10 <__sfputs_r+0x22>
 800bb00:	463a      	mov	r2, r7
 800bb02:	4630      	mov	r0, r6
 800bb04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb08:	f7ff ffdc 	bl	800bac4 <__sfputc_r>
 800bb0c:	1c43      	adds	r3, r0, #1
 800bb0e:	d1f3      	bne.n	800baf8 <__sfputs_r+0xa>
 800bb10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb14 <_vfiprintf_r>:
 800bb14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb18:	460d      	mov	r5, r1
 800bb1a:	4614      	mov	r4, r2
 800bb1c:	4698      	mov	r8, r3
 800bb1e:	4606      	mov	r6, r0
 800bb20:	b09d      	sub	sp, #116	@ 0x74
 800bb22:	b118      	cbz	r0, 800bb2c <_vfiprintf_r+0x18>
 800bb24:	6a03      	ldr	r3, [r0, #32]
 800bb26:	b90b      	cbnz	r3, 800bb2c <_vfiprintf_r+0x18>
 800bb28:	f7fd f9bc 	bl	8008ea4 <__sinit>
 800bb2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb2e:	07d9      	lsls	r1, r3, #31
 800bb30:	d405      	bmi.n	800bb3e <_vfiprintf_r+0x2a>
 800bb32:	89ab      	ldrh	r3, [r5, #12]
 800bb34:	059a      	lsls	r2, r3, #22
 800bb36:	d402      	bmi.n	800bb3e <_vfiprintf_r+0x2a>
 800bb38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb3a:	f7fd fbd0 	bl	80092de <__retarget_lock_acquire_recursive>
 800bb3e:	89ab      	ldrh	r3, [r5, #12]
 800bb40:	071b      	lsls	r3, r3, #28
 800bb42:	d501      	bpl.n	800bb48 <_vfiprintf_r+0x34>
 800bb44:	692b      	ldr	r3, [r5, #16]
 800bb46:	b99b      	cbnz	r3, 800bb70 <_vfiprintf_r+0x5c>
 800bb48:	4629      	mov	r1, r5
 800bb4a:	4630      	mov	r0, r6
 800bb4c:	f7fd faf4 	bl	8009138 <__swsetup_r>
 800bb50:	b170      	cbz	r0, 800bb70 <_vfiprintf_r+0x5c>
 800bb52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bb54:	07dc      	lsls	r4, r3, #31
 800bb56:	d504      	bpl.n	800bb62 <_vfiprintf_r+0x4e>
 800bb58:	f04f 30ff 	mov.w	r0, #4294967295
 800bb5c:	b01d      	add	sp, #116	@ 0x74
 800bb5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb62:	89ab      	ldrh	r3, [r5, #12]
 800bb64:	0598      	lsls	r0, r3, #22
 800bb66:	d4f7      	bmi.n	800bb58 <_vfiprintf_r+0x44>
 800bb68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb6a:	f7fd fbb9 	bl	80092e0 <__retarget_lock_release_recursive>
 800bb6e:	e7f3      	b.n	800bb58 <_vfiprintf_r+0x44>
 800bb70:	2300      	movs	r3, #0
 800bb72:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb74:	2320      	movs	r3, #32
 800bb76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb7a:	2330      	movs	r3, #48	@ 0x30
 800bb7c:	f04f 0901 	mov.w	r9, #1
 800bb80:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb84:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800bd30 <_vfiprintf_r+0x21c>
 800bb88:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb8c:	4623      	mov	r3, r4
 800bb8e:	469a      	mov	sl, r3
 800bb90:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb94:	b10a      	cbz	r2, 800bb9a <_vfiprintf_r+0x86>
 800bb96:	2a25      	cmp	r2, #37	@ 0x25
 800bb98:	d1f9      	bne.n	800bb8e <_vfiprintf_r+0x7a>
 800bb9a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb9e:	d00b      	beq.n	800bbb8 <_vfiprintf_r+0xa4>
 800bba0:	465b      	mov	r3, fp
 800bba2:	4622      	mov	r2, r4
 800bba4:	4629      	mov	r1, r5
 800bba6:	4630      	mov	r0, r6
 800bba8:	f7ff ffa1 	bl	800baee <__sfputs_r>
 800bbac:	3001      	adds	r0, #1
 800bbae:	f000 80a7 	beq.w	800bd00 <_vfiprintf_r+0x1ec>
 800bbb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bbb4:	445a      	add	r2, fp
 800bbb6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bbb8:	f89a 3000 	ldrb.w	r3, [sl]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 809f 	beq.w	800bd00 <_vfiprintf_r+0x1ec>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbcc:	f10a 0a01 	add.w	sl, sl, #1
 800bbd0:	9304      	str	r3, [sp, #16]
 800bbd2:	9307      	str	r3, [sp, #28]
 800bbd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bbd8:	931a      	str	r3, [sp, #104]	@ 0x68
 800bbda:	4654      	mov	r4, sl
 800bbdc:	2205      	movs	r2, #5
 800bbde:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbe2:	4853      	ldr	r0, [pc, #332]	@ (800bd30 <_vfiprintf_r+0x21c>)
 800bbe4:	f7fd fb7d 	bl	80092e2 <memchr>
 800bbe8:	9a04      	ldr	r2, [sp, #16]
 800bbea:	b9d8      	cbnz	r0, 800bc24 <_vfiprintf_r+0x110>
 800bbec:	06d1      	lsls	r1, r2, #27
 800bbee:	bf44      	itt	mi
 800bbf0:	2320      	movmi	r3, #32
 800bbf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbf6:	0713      	lsls	r3, r2, #28
 800bbf8:	bf44      	itt	mi
 800bbfa:	232b      	movmi	r3, #43	@ 0x2b
 800bbfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc00:	f89a 3000 	ldrb.w	r3, [sl]
 800bc04:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc06:	d015      	beq.n	800bc34 <_vfiprintf_r+0x120>
 800bc08:	4654      	mov	r4, sl
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f04f 0c0a 	mov.w	ip, #10
 800bc10:	9a07      	ldr	r2, [sp, #28]
 800bc12:	4621      	mov	r1, r4
 800bc14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc18:	3b30      	subs	r3, #48	@ 0x30
 800bc1a:	2b09      	cmp	r3, #9
 800bc1c:	d94b      	bls.n	800bcb6 <_vfiprintf_r+0x1a2>
 800bc1e:	b1b0      	cbz	r0, 800bc4e <_vfiprintf_r+0x13a>
 800bc20:	9207      	str	r2, [sp, #28]
 800bc22:	e014      	b.n	800bc4e <_vfiprintf_r+0x13a>
 800bc24:	eba0 0308 	sub.w	r3, r0, r8
 800bc28:	fa09 f303 	lsl.w	r3, r9, r3
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	46a2      	mov	sl, r4
 800bc30:	9304      	str	r3, [sp, #16]
 800bc32:	e7d2      	b.n	800bbda <_vfiprintf_r+0xc6>
 800bc34:	9b03      	ldr	r3, [sp, #12]
 800bc36:	1d19      	adds	r1, r3, #4
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	9103      	str	r1, [sp, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	bfbb      	ittet	lt
 800bc40:	425b      	neglt	r3, r3
 800bc42:	f042 0202 	orrlt.w	r2, r2, #2
 800bc46:	9307      	strge	r3, [sp, #28]
 800bc48:	9307      	strlt	r3, [sp, #28]
 800bc4a:	bfb8      	it	lt
 800bc4c:	9204      	strlt	r2, [sp, #16]
 800bc4e:	7823      	ldrb	r3, [r4, #0]
 800bc50:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc52:	d10a      	bne.n	800bc6a <_vfiprintf_r+0x156>
 800bc54:	7863      	ldrb	r3, [r4, #1]
 800bc56:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc58:	d132      	bne.n	800bcc0 <_vfiprintf_r+0x1ac>
 800bc5a:	9b03      	ldr	r3, [sp, #12]
 800bc5c:	3402      	adds	r4, #2
 800bc5e:	1d1a      	adds	r2, r3, #4
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	9203      	str	r2, [sp, #12]
 800bc64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc68:	9305      	str	r3, [sp, #20]
 800bc6a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800bd34 <_vfiprintf_r+0x220>
 800bc6e:	2203      	movs	r2, #3
 800bc70:	4650      	mov	r0, sl
 800bc72:	7821      	ldrb	r1, [r4, #0]
 800bc74:	f7fd fb35 	bl	80092e2 <memchr>
 800bc78:	b138      	cbz	r0, 800bc8a <_vfiprintf_r+0x176>
 800bc7a:	2240      	movs	r2, #64	@ 0x40
 800bc7c:	9b04      	ldr	r3, [sp, #16]
 800bc7e:	eba0 000a 	sub.w	r0, r0, sl
 800bc82:	4082      	lsls	r2, r0
 800bc84:	4313      	orrs	r3, r2
 800bc86:	3401      	adds	r4, #1
 800bc88:	9304      	str	r3, [sp, #16]
 800bc8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8e:	2206      	movs	r2, #6
 800bc90:	4829      	ldr	r0, [pc, #164]	@ (800bd38 <_vfiprintf_r+0x224>)
 800bc92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc96:	f7fd fb24 	bl	80092e2 <memchr>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d03f      	beq.n	800bd1e <_vfiprintf_r+0x20a>
 800bc9e:	4b27      	ldr	r3, [pc, #156]	@ (800bd3c <_vfiprintf_r+0x228>)
 800bca0:	bb1b      	cbnz	r3, 800bcea <_vfiprintf_r+0x1d6>
 800bca2:	9b03      	ldr	r3, [sp, #12]
 800bca4:	3307      	adds	r3, #7
 800bca6:	f023 0307 	bic.w	r3, r3, #7
 800bcaa:	3308      	adds	r3, #8
 800bcac:	9303      	str	r3, [sp, #12]
 800bcae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcb0:	443b      	add	r3, r7
 800bcb2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bcb4:	e76a      	b.n	800bb8c <_vfiprintf_r+0x78>
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	2001      	movs	r0, #1
 800bcba:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcbe:	e7a8      	b.n	800bc12 <_vfiprintf_r+0xfe>
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f04f 0c0a 	mov.w	ip, #10
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	3401      	adds	r4, #1
 800bcca:	9305      	str	r3, [sp, #20]
 800bccc:	4620      	mov	r0, r4
 800bcce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcd2:	3a30      	subs	r2, #48	@ 0x30
 800bcd4:	2a09      	cmp	r2, #9
 800bcd6:	d903      	bls.n	800bce0 <_vfiprintf_r+0x1cc>
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d0c6      	beq.n	800bc6a <_vfiprintf_r+0x156>
 800bcdc:	9105      	str	r1, [sp, #20]
 800bcde:	e7c4      	b.n	800bc6a <_vfiprintf_r+0x156>
 800bce0:	4604      	mov	r4, r0
 800bce2:	2301      	movs	r3, #1
 800bce4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bce8:	e7f0      	b.n	800bccc <_vfiprintf_r+0x1b8>
 800bcea:	ab03      	add	r3, sp, #12
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	462a      	mov	r2, r5
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	4b13      	ldr	r3, [pc, #76]	@ (800bd40 <_vfiprintf_r+0x22c>)
 800bcf4:	a904      	add	r1, sp, #16
 800bcf6:	f7fc fa83 	bl	8008200 <_printf_float>
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	1c78      	adds	r0, r7, #1
 800bcfe:	d1d6      	bne.n	800bcae <_vfiprintf_r+0x19a>
 800bd00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd02:	07d9      	lsls	r1, r3, #31
 800bd04:	d405      	bmi.n	800bd12 <_vfiprintf_r+0x1fe>
 800bd06:	89ab      	ldrh	r3, [r5, #12]
 800bd08:	059a      	lsls	r2, r3, #22
 800bd0a:	d402      	bmi.n	800bd12 <_vfiprintf_r+0x1fe>
 800bd0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd0e:	f7fd fae7 	bl	80092e0 <__retarget_lock_release_recursive>
 800bd12:	89ab      	ldrh	r3, [r5, #12]
 800bd14:	065b      	lsls	r3, r3, #25
 800bd16:	f53f af1f 	bmi.w	800bb58 <_vfiprintf_r+0x44>
 800bd1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd1c:	e71e      	b.n	800bb5c <_vfiprintf_r+0x48>
 800bd1e:	ab03      	add	r3, sp, #12
 800bd20:	9300      	str	r3, [sp, #0]
 800bd22:	462a      	mov	r2, r5
 800bd24:	4630      	mov	r0, r6
 800bd26:	4b06      	ldr	r3, [pc, #24]	@ (800bd40 <_vfiprintf_r+0x22c>)
 800bd28:	a904      	add	r1, sp, #16
 800bd2a:	f7fc fd07 	bl	800873c <_printf_i>
 800bd2e:	e7e4      	b.n	800bcfa <_vfiprintf_r+0x1e6>
 800bd30:	0800e17b 	.word	0x0800e17b
 800bd34:	0800e181 	.word	0x0800e181
 800bd38:	0800e185 	.word	0x0800e185
 800bd3c:	08008201 	.word	0x08008201
 800bd40:	0800baef 	.word	0x0800baef

0800bd44 <__sflush_r>:
 800bd44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd4a:	0716      	lsls	r6, r2, #28
 800bd4c:	4605      	mov	r5, r0
 800bd4e:	460c      	mov	r4, r1
 800bd50:	d454      	bmi.n	800bdfc <__sflush_r+0xb8>
 800bd52:	684b      	ldr	r3, [r1, #4]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	dc02      	bgt.n	800bd5e <__sflush_r+0x1a>
 800bd58:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	dd48      	ble.n	800bdf0 <__sflush_r+0xac>
 800bd5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd60:	2e00      	cmp	r6, #0
 800bd62:	d045      	beq.n	800bdf0 <__sflush_r+0xac>
 800bd64:	2300      	movs	r3, #0
 800bd66:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bd6a:	682f      	ldr	r7, [r5, #0]
 800bd6c:	6a21      	ldr	r1, [r4, #32]
 800bd6e:	602b      	str	r3, [r5, #0]
 800bd70:	d030      	beq.n	800bdd4 <__sflush_r+0x90>
 800bd72:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd74:	89a3      	ldrh	r3, [r4, #12]
 800bd76:	0759      	lsls	r1, r3, #29
 800bd78:	d505      	bpl.n	800bd86 <__sflush_r+0x42>
 800bd7a:	6863      	ldr	r3, [r4, #4]
 800bd7c:	1ad2      	subs	r2, r2, r3
 800bd7e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd80:	b10b      	cbz	r3, 800bd86 <__sflush_r+0x42>
 800bd82:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd84:	1ad2      	subs	r2, r2, r3
 800bd86:	2300      	movs	r3, #0
 800bd88:	4628      	mov	r0, r5
 800bd8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd8c:	6a21      	ldr	r1, [r4, #32]
 800bd8e:	47b0      	blx	r6
 800bd90:	1c43      	adds	r3, r0, #1
 800bd92:	89a3      	ldrh	r3, [r4, #12]
 800bd94:	d106      	bne.n	800bda4 <__sflush_r+0x60>
 800bd96:	6829      	ldr	r1, [r5, #0]
 800bd98:	291d      	cmp	r1, #29
 800bd9a:	d82b      	bhi.n	800bdf4 <__sflush_r+0xb0>
 800bd9c:	4a28      	ldr	r2, [pc, #160]	@ (800be40 <__sflush_r+0xfc>)
 800bd9e:	40ca      	lsrs	r2, r1
 800bda0:	07d6      	lsls	r6, r2, #31
 800bda2:	d527      	bpl.n	800bdf4 <__sflush_r+0xb0>
 800bda4:	2200      	movs	r2, #0
 800bda6:	6062      	str	r2, [r4, #4]
 800bda8:	6922      	ldr	r2, [r4, #16]
 800bdaa:	04d9      	lsls	r1, r3, #19
 800bdac:	6022      	str	r2, [r4, #0]
 800bdae:	d504      	bpl.n	800bdba <__sflush_r+0x76>
 800bdb0:	1c42      	adds	r2, r0, #1
 800bdb2:	d101      	bne.n	800bdb8 <__sflush_r+0x74>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b903      	cbnz	r3, 800bdba <__sflush_r+0x76>
 800bdb8:	6560      	str	r0, [r4, #84]	@ 0x54
 800bdba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bdbc:	602f      	str	r7, [r5, #0]
 800bdbe:	b1b9      	cbz	r1, 800bdf0 <__sflush_r+0xac>
 800bdc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bdc4:	4299      	cmp	r1, r3
 800bdc6:	d002      	beq.n	800bdce <__sflush_r+0x8a>
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f7fe f909 	bl	8009fe0 <_free_r>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bdd2:	e00d      	b.n	800bdf0 <__sflush_r+0xac>
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	47b0      	blx	r6
 800bdda:	4602      	mov	r2, r0
 800bddc:	1c50      	adds	r0, r2, #1
 800bdde:	d1c9      	bne.n	800bd74 <__sflush_r+0x30>
 800bde0:	682b      	ldr	r3, [r5, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d0c6      	beq.n	800bd74 <__sflush_r+0x30>
 800bde6:	2b1d      	cmp	r3, #29
 800bde8:	d001      	beq.n	800bdee <__sflush_r+0xaa>
 800bdea:	2b16      	cmp	r3, #22
 800bdec:	d11d      	bne.n	800be2a <__sflush_r+0xe6>
 800bdee:	602f      	str	r7, [r5, #0]
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	e021      	b.n	800be38 <__sflush_r+0xf4>
 800bdf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdf8:	b21b      	sxth	r3, r3
 800bdfa:	e01a      	b.n	800be32 <__sflush_r+0xee>
 800bdfc:	690f      	ldr	r7, [r1, #16]
 800bdfe:	2f00      	cmp	r7, #0
 800be00:	d0f6      	beq.n	800bdf0 <__sflush_r+0xac>
 800be02:	0793      	lsls	r3, r2, #30
 800be04:	bf18      	it	ne
 800be06:	2300      	movne	r3, #0
 800be08:	680e      	ldr	r6, [r1, #0]
 800be0a:	bf08      	it	eq
 800be0c:	694b      	ldreq	r3, [r1, #20]
 800be0e:	1bf6      	subs	r6, r6, r7
 800be10:	600f      	str	r7, [r1, #0]
 800be12:	608b      	str	r3, [r1, #8]
 800be14:	2e00      	cmp	r6, #0
 800be16:	ddeb      	ble.n	800bdf0 <__sflush_r+0xac>
 800be18:	4633      	mov	r3, r6
 800be1a:	463a      	mov	r2, r7
 800be1c:	4628      	mov	r0, r5
 800be1e:	6a21      	ldr	r1, [r4, #32]
 800be20:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800be24:	47e0      	blx	ip
 800be26:	2800      	cmp	r0, #0
 800be28:	dc07      	bgt.n	800be3a <__sflush_r+0xf6>
 800be2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be32:	f04f 30ff 	mov.w	r0, #4294967295
 800be36:	81a3      	strh	r3, [r4, #12]
 800be38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be3a:	4407      	add	r7, r0
 800be3c:	1a36      	subs	r6, r6, r0
 800be3e:	e7e9      	b.n	800be14 <__sflush_r+0xd0>
 800be40:	20400001 	.word	0x20400001

0800be44 <_fflush_r>:
 800be44:	b538      	push	{r3, r4, r5, lr}
 800be46:	690b      	ldr	r3, [r1, #16]
 800be48:	4605      	mov	r5, r0
 800be4a:	460c      	mov	r4, r1
 800be4c:	b913      	cbnz	r3, 800be54 <_fflush_r+0x10>
 800be4e:	2500      	movs	r5, #0
 800be50:	4628      	mov	r0, r5
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	b118      	cbz	r0, 800be5e <_fflush_r+0x1a>
 800be56:	6a03      	ldr	r3, [r0, #32]
 800be58:	b90b      	cbnz	r3, 800be5e <_fflush_r+0x1a>
 800be5a:	f7fd f823 	bl	8008ea4 <__sinit>
 800be5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d0f3      	beq.n	800be4e <_fflush_r+0xa>
 800be66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be68:	07d0      	lsls	r0, r2, #31
 800be6a:	d404      	bmi.n	800be76 <_fflush_r+0x32>
 800be6c:	0599      	lsls	r1, r3, #22
 800be6e:	d402      	bmi.n	800be76 <_fflush_r+0x32>
 800be70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be72:	f7fd fa34 	bl	80092de <__retarget_lock_acquire_recursive>
 800be76:	4628      	mov	r0, r5
 800be78:	4621      	mov	r1, r4
 800be7a:	f7ff ff63 	bl	800bd44 <__sflush_r>
 800be7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be80:	4605      	mov	r5, r0
 800be82:	07da      	lsls	r2, r3, #31
 800be84:	d4e4      	bmi.n	800be50 <_fflush_r+0xc>
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	059b      	lsls	r3, r3, #22
 800be8a:	d4e1      	bmi.n	800be50 <_fflush_r+0xc>
 800be8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be8e:	f7fd fa27 	bl	80092e0 <__retarget_lock_release_recursive>
 800be92:	e7dd      	b.n	800be50 <_fflush_r+0xc>

0800be94 <__swhatbuf_r>:
 800be94:	b570      	push	{r4, r5, r6, lr}
 800be96:	460c      	mov	r4, r1
 800be98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be9c:	4615      	mov	r5, r2
 800be9e:	2900      	cmp	r1, #0
 800bea0:	461e      	mov	r6, r3
 800bea2:	b096      	sub	sp, #88	@ 0x58
 800bea4:	da0c      	bge.n	800bec0 <__swhatbuf_r+0x2c>
 800bea6:	89a3      	ldrh	r3, [r4, #12]
 800bea8:	2100      	movs	r1, #0
 800beaa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800beae:	bf14      	ite	ne
 800beb0:	2340      	movne	r3, #64	@ 0x40
 800beb2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800beb6:	2000      	movs	r0, #0
 800beb8:	6031      	str	r1, [r6, #0]
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	b016      	add	sp, #88	@ 0x58
 800bebe:	bd70      	pop	{r4, r5, r6, pc}
 800bec0:	466a      	mov	r2, sp
 800bec2:	f000 f875 	bl	800bfb0 <_fstat_r>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	dbed      	blt.n	800bea6 <__swhatbuf_r+0x12>
 800beca:	9901      	ldr	r1, [sp, #4]
 800becc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bed0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bed4:	4259      	negs	r1, r3
 800bed6:	4159      	adcs	r1, r3
 800bed8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bedc:	e7eb      	b.n	800beb6 <__swhatbuf_r+0x22>

0800bede <__smakebuf_r>:
 800bede:	898b      	ldrh	r3, [r1, #12]
 800bee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bee2:	079d      	lsls	r5, r3, #30
 800bee4:	4606      	mov	r6, r0
 800bee6:	460c      	mov	r4, r1
 800bee8:	d507      	bpl.n	800befa <__smakebuf_r+0x1c>
 800beea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	6123      	str	r3, [r4, #16]
 800bef2:	2301      	movs	r3, #1
 800bef4:	6163      	str	r3, [r4, #20]
 800bef6:	b003      	add	sp, #12
 800bef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befa:	466a      	mov	r2, sp
 800befc:	ab01      	add	r3, sp, #4
 800befe:	f7ff ffc9 	bl	800be94 <__swhatbuf_r>
 800bf02:	9f00      	ldr	r7, [sp, #0]
 800bf04:	4605      	mov	r5, r0
 800bf06:	4639      	mov	r1, r7
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7fe f8db 	bl	800a0c4 <_malloc_r>
 800bf0e:	b948      	cbnz	r0, 800bf24 <__smakebuf_r+0x46>
 800bf10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf14:	059a      	lsls	r2, r3, #22
 800bf16:	d4ee      	bmi.n	800bef6 <__smakebuf_r+0x18>
 800bf18:	f023 0303 	bic.w	r3, r3, #3
 800bf1c:	f043 0302 	orr.w	r3, r3, #2
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	e7e2      	b.n	800beea <__smakebuf_r+0xc>
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bf2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf2e:	81a3      	strh	r3, [r4, #12]
 800bf30:	9b01      	ldr	r3, [sp, #4]
 800bf32:	6020      	str	r0, [r4, #0]
 800bf34:	b15b      	cbz	r3, 800bf4e <__smakebuf_r+0x70>
 800bf36:	4630      	mov	r0, r6
 800bf38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf3c:	f000 f84a 	bl	800bfd4 <_isatty_r>
 800bf40:	b128      	cbz	r0, 800bf4e <__smakebuf_r+0x70>
 800bf42:	89a3      	ldrh	r3, [r4, #12]
 800bf44:	f023 0303 	bic.w	r3, r3, #3
 800bf48:	f043 0301 	orr.w	r3, r3, #1
 800bf4c:	81a3      	strh	r3, [r4, #12]
 800bf4e:	89a3      	ldrh	r3, [r4, #12]
 800bf50:	431d      	orrs	r5, r3
 800bf52:	81a5      	strh	r5, [r4, #12]
 800bf54:	e7cf      	b.n	800bef6 <__smakebuf_r+0x18>

0800bf56 <memmove>:
 800bf56:	4288      	cmp	r0, r1
 800bf58:	b510      	push	{r4, lr}
 800bf5a:	eb01 0402 	add.w	r4, r1, r2
 800bf5e:	d902      	bls.n	800bf66 <memmove+0x10>
 800bf60:	4284      	cmp	r4, r0
 800bf62:	4623      	mov	r3, r4
 800bf64:	d807      	bhi.n	800bf76 <memmove+0x20>
 800bf66:	1e43      	subs	r3, r0, #1
 800bf68:	42a1      	cmp	r1, r4
 800bf6a:	d008      	beq.n	800bf7e <memmove+0x28>
 800bf6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf70:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf74:	e7f8      	b.n	800bf68 <memmove+0x12>
 800bf76:	4601      	mov	r1, r0
 800bf78:	4402      	add	r2, r0
 800bf7a:	428a      	cmp	r2, r1
 800bf7c:	d100      	bne.n	800bf80 <memmove+0x2a>
 800bf7e:	bd10      	pop	{r4, pc}
 800bf80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf84:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf88:	e7f7      	b.n	800bf7a <memmove+0x24>

0800bf8a <strncmp>:
 800bf8a:	b510      	push	{r4, lr}
 800bf8c:	b16a      	cbz	r2, 800bfaa <strncmp+0x20>
 800bf8e:	3901      	subs	r1, #1
 800bf90:	1884      	adds	r4, r0, r2
 800bf92:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d103      	bne.n	800bfa6 <strncmp+0x1c>
 800bf9e:	42a0      	cmp	r0, r4
 800bfa0:	d001      	beq.n	800bfa6 <strncmp+0x1c>
 800bfa2:	2a00      	cmp	r2, #0
 800bfa4:	d1f5      	bne.n	800bf92 <strncmp+0x8>
 800bfa6:	1ad0      	subs	r0, r2, r3
 800bfa8:	bd10      	pop	{r4, pc}
 800bfaa:	4610      	mov	r0, r2
 800bfac:	e7fc      	b.n	800bfa8 <strncmp+0x1e>
	...

0800bfb0 <_fstat_r>:
 800bfb0:	b538      	push	{r3, r4, r5, lr}
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	4d06      	ldr	r5, [pc, #24]	@ (800bfd0 <_fstat_r+0x20>)
 800bfb6:	4604      	mov	r4, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	4611      	mov	r1, r2
 800bfbc:	602b      	str	r3, [r5, #0]
 800bfbe:	f7f6 fa0d 	bl	80023dc <_fstat>
 800bfc2:	1c43      	adds	r3, r0, #1
 800bfc4:	d102      	bne.n	800bfcc <_fstat_r+0x1c>
 800bfc6:	682b      	ldr	r3, [r5, #0]
 800bfc8:	b103      	cbz	r3, 800bfcc <_fstat_r+0x1c>
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	bd38      	pop	{r3, r4, r5, pc}
 800bfce:	bf00      	nop
 800bfd0:	20001370 	.word	0x20001370

0800bfd4 <_isatty_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	4d05      	ldr	r5, [pc, #20]	@ (800bff0 <_isatty_r+0x1c>)
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	602b      	str	r3, [r5, #0]
 800bfe0:	f7f6 fa0b 	bl	80023fa <_isatty>
 800bfe4:	1c43      	adds	r3, r0, #1
 800bfe6:	d102      	bne.n	800bfee <_isatty_r+0x1a>
 800bfe8:	682b      	ldr	r3, [r5, #0]
 800bfea:	b103      	cbz	r3, 800bfee <_isatty_r+0x1a>
 800bfec:	6023      	str	r3, [r4, #0]
 800bfee:	bd38      	pop	{r3, r4, r5, pc}
 800bff0:	20001370 	.word	0x20001370

0800bff4 <_sbrk_r>:
 800bff4:	b538      	push	{r3, r4, r5, lr}
 800bff6:	2300      	movs	r3, #0
 800bff8:	4d05      	ldr	r5, [pc, #20]	@ (800c010 <_sbrk_r+0x1c>)
 800bffa:	4604      	mov	r4, r0
 800bffc:	4608      	mov	r0, r1
 800bffe:	602b      	str	r3, [r5, #0]
 800c000:	f7f6 fa12 	bl	8002428 <_sbrk>
 800c004:	1c43      	adds	r3, r0, #1
 800c006:	d102      	bne.n	800c00e <_sbrk_r+0x1a>
 800c008:	682b      	ldr	r3, [r5, #0]
 800c00a:	b103      	cbz	r3, 800c00e <_sbrk_r+0x1a>
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	bd38      	pop	{r3, r4, r5, pc}
 800c010:	20001370 	.word	0x20001370

0800c014 <nan>:
 800c014:	2000      	movs	r0, #0
 800c016:	4901      	ldr	r1, [pc, #4]	@ (800c01c <nan+0x8>)
 800c018:	4770      	bx	lr
 800c01a:	bf00      	nop
 800c01c:	7ff80000 	.word	0x7ff80000

0800c020 <__assert_func>:
 800c020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c022:	4614      	mov	r4, r2
 800c024:	461a      	mov	r2, r3
 800c026:	4b09      	ldr	r3, [pc, #36]	@ (800c04c <__assert_func+0x2c>)
 800c028:	4605      	mov	r5, r0
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68d8      	ldr	r0, [r3, #12]
 800c02e:	b14c      	cbz	r4, 800c044 <__assert_func+0x24>
 800c030:	4b07      	ldr	r3, [pc, #28]	@ (800c050 <__assert_func+0x30>)
 800c032:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c036:	9100      	str	r1, [sp, #0]
 800c038:	462b      	mov	r3, r5
 800c03a:	4906      	ldr	r1, [pc, #24]	@ (800c054 <__assert_func+0x34>)
 800c03c:	f000 fba8 	bl	800c790 <fiprintf>
 800c040:	f000 fbb8 	bl	800c7b4 <abort>
 800c044:	4b04      	ldr	r3, [pc, #16]	@ (800c058 <__assert_func+0x38>)
 800c046:	461c      	mov	r4, r3
 800c048:	e7f3      	b.n	800c032 <__assert_func+0x12>
 800c04a:	bf00      	nop
 800c04c:	20000030 	.word	0x20000030
 800c050:	0800e194 	.word	0x0800e194
 800c054:	0800e1a1 	.word	0x0800e1a1
 800c058:	0800e1cf 	.word	0x0800e1cf

0800c05c <_calloc_r>:
 800c05c:	b570      	push	{r4, r5, r6, lr}
 800c05e:	fba1 5402 	umull	r5, r4, r1, r2
 800c062:	b934      	cbnz	r4, 800c072 <_calloc_r+0x16>
 800c064:	4629      	mov	r1, r5
 800c066:	f7fe f82d 	bl	800a0c4 <_malloc_r>
 800c06a:	4606      	mov	r6, r0
 800c06c:	b928      	cbnz	r0, 800c07a <_calloc_r+0x1e>
 800c06e:	4630      	mov	r0, r6
 800c070:	bd70      	pop	{r4, r5, r6, pc}
 800c072:	220c      	movs	r2, #12
 800c074:	2600      	movs	r6, #0
 800c076:	6002      	str	r2, [r0, #0]
 800c078:	e7f9      	b.n	800c06e <_calloc_r+0x12>
 800c07a:	462a      	mov	r2, r5
 800c07c:	4621      	mov	r1, r4
 800c07e:	f7fd f8b1 	bl	80091e4 <memset>
 800c082:	e7f4      	b.n	800c06e <_calloc_r+0x12>

0800c084 <rshift>:
 800c084:	6903      	ldr	r3, [r0, #16]
 800c086:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c08a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c08e:	f100 0414 	add.w	r4, r0, #20
 800c092:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c096:	dd46      	ble.n	800c126 <rshift+0xa2>
 800c098:	f011 011f 	ands.w	r1, r1, #31
 800c09c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0a4:	d10c      	bne.n	800c0c0 <rshift+0x3c>
 800c0a6:	4629      	mov	r1, r5
 800c0a8:	f100 0710 	add.w	r7, r0, #16
 800c0ac:	42b1      	cmp	r1, r6
 800c0ae:	d335      	bcc.n	800c11c <rshift+0x98>
 800c0b0:	1a9b      	subs	r3, r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	1eea      	subs	r2, r5, #3
 800c0b6:	4296      	cmp	r6, r2
 800c0b8:	bf38      	it	cc
 800c0ba:	2300      	movcc	r3, #0
 800c0bc:	4423      	add	r3, r4
 800c0be:	e015      	b.n	800c0ec <rshift+0x68>
 800c0c0:	46a1      	mov	r9, r4
 800c0c2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0c6:	f1c1 0820 	rsb	r8, r1, #32
 800c0ca:	40cf      	lsrs	r7, r1
 800c0cc:	f105 0e04 	add.w	lr, r5, #4
 800c0d0:	4576      	cmp	r6, lr
 800c0d2:	46f4      	mov	ip, lr
 800c0d4:	d816      	bhi.n	800c104 <rshift+0x80>
 800c0d6:	1a9a      	subs	r2, r3, r2
 800c0d8:	0092      	lsls	r2, r2, #2
 800c0da:	3a04      	subs	r2, #4
 800c0dc:	3501      	adds	r5, #1
 800c0de:	42ae      	cmp	r6, r5
 800c0e0:	bf38      	it	cc
 800c0e2:	2200      	movcc	r2, #0
 800c0e4:	18a3      	adds	r3, r4, r2
 800c0e6:	50a7      	str	r7, [r4, r2]
 800c0e8:	b107      	cbz	r7, 800c0ec <rshift+0x68>
 800c0ea:	3304      	adds	r3, #4
 800c0ec:	42a3      	cmp	r3, r4
 800c0ee:	eba3 0204 	sub.w	r2, r3, r4
 800c0f2:	bf08      	it	eq
 800c0f4:	2300      	moveq	r3, #0
 800c0f6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c0fa:	6102      	str	r2, [r0, #16]
 800c0fc:	bf08      	it	eq
 800c0fe:	6143      	streq	r3, [r0, #20]
 800c100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c104:	f8dc c000 	ldr.w	ip, [ip]
 800c108:	fa0c fc08 	lsl.w	ip, ip, r8
 800c10c:	ea4c 0707 	orr.w	r7, ip, r7
 800c110:	f849 7b04 	str.w	r7, [r9], #4
 800c114:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c118:	40cf      	lsrs	r7, r1
 800c11a:	e7d9      	b.n	800c0d0 <rshift+0x4c>
 800c11c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c120:	f847 cf04 	str.w	ip, [r7, #4]!
 800c124:	e7c2      	b.n	800c0ac <rshift+0x28>
 800c126:	4623      	mov	r3, r4
 800c128:	e7e0      	b.n	800c0ec <rshift+0x68>

0800c12a <__hexdig_fun>:
 800c12a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c12e:	2b09      	cmp	r3, #9
 800c130:	d802      	bhi.n	800c138 <__hexdig_fun+0xe>
 800c132:	3820      	subs	r0, #32
 800c134:	b2c0      	uxtb	r0, r0
 800c136:	4770      	bx	lr
 800c138:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c13c:	2b05      	cmp	r3, #5
 800c13e:	d801      	bhi.n	800c144 <__hexdig_fun+0x1a>
 800c140:	3847      	subs	r0, #71	@ 0x47
 800c142:	e7f7      	b.n	800c134 <__hexdig_fun+0xa>
 800c144:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c148:	2b05      	cmp	r3, #5
 800c14a:	d801      	bhi.n	800c150 <__hexdig_fun+0x26>
 800c14c:	3827      	subs	r0, #39	@ 0x27
 800c14e:	e7f1      	b.n	800c134 <__hexdig_fun+0xa>
 800c150:	2000      	movs	r0, #0
 800c152:	4770      	bx	lr

0800c154 <__gethex>:
 800c154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c158:	468a      	mov	sl, r1
 800c15a:	4690      	mov	r8, r2
 800c15c:	b085      	sub	sp, #20
 800c15e:	9302      	str	r3, [sp, #8]
 800c160:	680b      	ldr	r3, [r1, #0]
 800c162:	9001      	str	r0, [sp, #4]
 800c164:	1c9c      	adds	r4, r3, #2
 800c166:	46a1      	mov	r9, r4
 800c168:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c16c:	2830      	cmp	r0, #48	@ 0x30
 800c16e:	d0fa      	beq.n	800c166 <__gethex+0x12>
 800c170:	eba9 0303 	sub.w	r3, r9, r3
 800c174:	f1a3 0b02 	sub.w	fp, r3, #2
 800c178:	f7ff ffd7 	bl	800c12a <__hexdig_fun>
 800c17c:	4605      	mov	r5, r0
 800c17e:	2800      	cmp	r0, #0
 800c180:	d168      	bne.n	800c254 <__gethex+0x100>
 800c182:	2201      	movs	r2, #1
 800c184:	4648      	mov	r0, r9
 800c186:	499f      	ldr	r1, [pc, #636]	@ (800c404 <__gethex+0x2b0>)
 800c188:	f7ff feff 	bl	800bf8a <strncmp>
 800c18c:	4607      	mov	r7, r0
 800c18e:	2800      	cmp	r0, #0
 800c190:	d167      	bne.n	800c262 <__gethex+0x10e>
 800c192:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c196:	4626      	mov	r6, r4
 800c198:	f7ff ffc7 	bl	800c12a <__hexdig_fun>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	d062      	beq.n	800c266 <__gethex+0x112>
 800c1a0:	4623      	mov	r3, r4
 800c1a2:	7818      	ldrb	r0, [r3, #0]
 800c1a4:	4699      	mov	r9, r3
 800c1a6:	2830      	cmp	r0, #48	@ 0x30
 800c1a8:	f103 0301 	add.w	r3, r3, #1
 800c1ac:	d0f9      	beq.n	800c1a2 <__gethex+0x4e>
 800c1ae:	f7ff ffbc 	bl	800c12a <__hexdig_fun>
 800c1b2:	fab0 f580 	clz	r5, r0
 800c1b6:	f04f 0b01 	mov.w	fp, #1
 800c1ba:	096d      	lsrs	r5, r5, #5
 800c1bc:	464a      	mov	r2, r9
 800c1be:	4616      	mov	r6, r2
 800c1c0:	7830      	ldrb	r0, [r6, #0]
 800c1c2:	3201      	adds	r2, #1
 800c1c4:	f7ff ffb1 	bl	800c12a <__hexdig_fun>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d1f8      	bne.n	800c1be <__gethex+0x6a>
 800c1cc:	2201      	movs	r2, #1
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	498c      	ldr	r1, [pc, #560]	@ (800c404 <__gethex+0x2b0>)
 800c1d2:	f7ff feda 	bl	800bf8a <strncmp>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d13f      	bne.n	800c25a <__gethex+0x106>
 800c1da:	b944      	cbnz	r4, 800c1ee <__gethex+0x9a>
 800c1dc:	1c74      	adds	r4, r6, #1
 800c1de:	4622      	mov	r2, r4
 800c1e0:	4616      	mov	r6, r2
 800c1e2:	7830      	ldrb	r0, [r6, #0]
 800c1e4:	3201      	adds	r2, #1
 800c1e6:	f7ff ffa0 	bl	800c12a <__hexdig_fun>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d1f8      	bne.n	800c1e0 <__gethex+0x8c>
 800c1ee:	1ba4      	subs	r4, r4, r6
 800c1f0:	00a7      	lsls	r7, r4, #2
 800c1f2:	7833      	ldrb	r3, [r6, #0]
 800c1f4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c1f8:	2b50      	cmp	r3, #80	@ 0x50
 800c1fa:	d13e      	bne.n	800c27a <__gethex+0x126>
 800c1fc:	7873      	ldrb	r3, [r6, #1]
 800c1fe:	2b2b      	cmp	r3, #43	@ 0x2b
 800c200:	d033      	beq.n	800c26a <__gethex+0x116>
 800c202:	2b2d      	cmp	r3, #45	@ 0x2d
 800c204:	d034      	beq.n	800c270 <__gethex+0x11c>
 800c206:	2400      	movs	r4, #0
 800c208:	1c71      	adds	r1, r6, #1
 800c20a:	7808      	ldrb	r0, [r1, #0]
 800c20c:	f7ff ff8d 	bl	800c12a <__hexdig_fun>
 800c210:	1e43      	subs	r3, r0, #1
 800c212:	b2db      	uxtb	r3, r3
 800c214:	2b18      	cmp	r3, #24
 800c216:	d830      	bhi.n	800c27a <__gethex+0x126>
 800c218:	f1a0 0210 	sub.w	r2, r0, #16
 800c21c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c220:	f7ff ff83 	bl	800c12a <__hexdig_fun>
 800c224:	f100 3cff 	add.w	ip, r0, #4294967295
 800c228:	fa5f fc8c 	uxtb.w	ip, ip
 800c22c:	f1bc 0f18 	cmp.w	ip, #24
 800c230:	f04f 030a 	mov.w	r3, #10
 800c234:	d91e      	bls.n	800c274 <__gethex+0x120>
 800c236:	b104      	cbz	r4, 800c23a <__gethex+0xe6>
 800c238:	4252      	negs	r2, r2
 800c23a:	4417      	add	r7, r2
 800c23c:	f8ca 1000 	str.w	r1, [sl]
 800c240:	b1ed      	cbz	r5, 800c27e <__gethex+0x12a>
 800c242:	f1bb 0f00 	cmp.w	fp, #0
 800c246:	bf0c      	ite	eq
 800c248:	2506      	moveq	r5, #6
 800c24a:	2500      	movne	r5, #0
 800c24c:	4628      	mov	r0, r5
 800c24e:	b005      	add	sp, #20
 800c250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c254:	2500      	movs	r5, #0
 800c256:	462c      	mov	r4, r5
 800c258:	e7b0      	b.n	800c1bc <__gethex+0x68>
 800c25a:	2c00      	cmp	r4, #0
 800c25c:	d1c7      	bne.n	800c1ee <__gethex+0x9a>
 800c25e:	4627      	mov	r7, r4
 800c260:	e7c7      	b.n	800c1f2 <__gethex+0x9e>
 800c262:	464e      	mov	r6, r9
 800c264:	462f      	mov	r7, r5
 800c266:	2501      	movs	r5, #1
 800c268:	e7c3      	b.n	800c1f2 <__gethex+0x9e>
 800c26a:	2400      	movs	r4, #0
 800c26c:	1cb1      	adds	r1, r6, #2
 800c26e:	e7cc      	b.n	800c20a <__gethex+0xb6>
 800c270:	2401      	movs	r4, #1
 800c272:	e7fb      	b.n	800c26c <__gethex+0x118>
 800c274:	fb03 0002 	mla	r0, r3, r2, r0
 800c278:	e7ce      	b.n	800c218 <__gethex+0xc4>
 800c27a:	4631      	mov	r1, r6
 800c27c:	e7de      	b.n	800c23c <__gethex+0xe8>
 800c27e:	4629      	mov	r1, r5
 800c280:	eba6 0309 	sub.w	r3, r6, r9
 800c284:	3b01      	subs	r3, #1
 800c286:	2b07      	cmp	r3, #7
 800c288:	dc0a      	bgt.n	800c2a0 <__gethex+0x14c>
 800c28a:	9801      	ldr	r0, [sp, #4]
 800c28c:	f7fd ffa6 	bl	800a1dc <_Balloc>
 800c290:	4604      	mov	r4, r0
 800c292:	b940      	cbnz	r0, 800c2a6 <__gethex+0x152>
 800c294:	4602      	mov	r2, r0
 800c296:	21e4      	movs	r1, #228	@ 0xe4
 800c298:	4b5b      	ldr	r3, [pc, #364]	@ (800c408 <__gethex+0x2b4>)
 800c29a:	485c      	ldr	r0, [pc, #368]	@ (800c40c <__gethex+0x2b8>)
 800c29c:	f7ff fec0 	bl	800c020 <__assert_func>
 800c2a0:	3101      	adds	r1, #1
 800c2a2:	105b      	asrs	r3, r3, #1
 800c2a4:	e7ef      	b.n	800c286 <__gethex+0x132>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	f100 0a14 	add.w	sl, r0, #20
 800c2ac:	4655      	mov	r5, sl
 800c2ae:	469b      	mov	fp, r3
 800c2b0:	45b1      	cmp	r9, r6
 800c2b2:	d337      	bcc.n	800c324 <__gethex+0x1d0>
 800c2b4:	f845 bb04 	str.w	fp, [r5], #4
 800c2b8:	eba5 050a 	sub.w	r5, r5, sl
 800c2bc:	10ad      	asrs	r5, r5, #2
 800c2be:	6125      	str	r5, [r4, #16]
 800c2c0:	4658      	mov	r0, fp
 800c2c2:	f7fe f87d 	bl	800a3c0 <__hi0bits>
 800c2c6:	016d      	lsls	r5, r5, #5
 800c2c8:	f8d8 6000 	ldr.w	r6, [r8]
 800c2cc:	1a2d      	subs	r5, r5, r0
 800c2ce:	42b5      	cmp	r5, r6
 800c2d0:	dd54      	ble.n	800c37c <__gethex+0x228>
 800c2d2:	1bad      	subs	r5, r5, r6
 800c2d4:	4629      	mov	r1, r5
 800c2d6:	4620      	mov	r0, r4
 800c2d8:	f7fe fbff 	bl	800aada <__any_on>
 800c2dc:	4681      	mov	r9, r0
 800c2de:	b178      	cbz	r0, 800c300 <__gethex+0x1ac>
 800c2e0:	f04f 0901 	mov.w	r9, #1
 800c2e4:	1e6b      	subs	r3, r5, #1
 800c2e6:	1159      	asrs	r1, r3, #5
 800c2e8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c2ec:	f003 021f 	and.w	r2, r3, #31
 800c2f0:	fa09 f202 	lsl.w	r2, r9, r2
 800c2f4:	420a      	tst	r2, r1
 800c2f6:	d003      	beq.n	800c300 <__gethex+0x1ac>
 800c2f8:	454b      	cmp	r3, r9
 800c2fa:	dc36      	bgt.n	800c36a <__gethex+0x216>
 800c2fc:	f04f 0902 	mov.w	r9, #2
 800c300:	4629      	mov	r1, r5
 800c302:	4620      	mov	r0, r4
 800c304:	f7ff febe 	bl	800c084 <rshift>
 800c308:	442f      	add	r7, r5
 800c30a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c30e:	42bb      	cmp	r3, r7
 800c310:	da42      	bge.n	800c398 <__gethex+0x244>
 800c312:	4621      	mov	r1, r4
 800c314:	9801      	ldr	r0, [sp, #4]
 800c316:	f7fd ffa1 	bl	800a25c <_Bfree>
 800c31a:	2300      	movs	r3, #0
 800c31c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c31e:	25a3      	movs	r5, #163	@ 0xa3
 800c320:	6013      	str	r3, [r2, #0]
 800c322:	e793      	b.n	800c24c <__gethex+0xf8>
 800c324:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c328:	2a2e      	cmp	r2, #46	@ 0x2e
 800c32a:	d012      	beq.n	800c352 <__gethex+0x1fe>
 800c32c:	2b20      	cmp	r3, #32
 800c32e:	d104      	bne.n	800c33a <__gethex+0x1e6>
 800c330:	f845 bb04 	str.w	fp, [r5], #4
 800c334:	f04f 0b00 	mov.w	fp, #0
 800c338:	465b      	mov	r3, fp
 800c33a:	7830      	ldrb	r0, [r6, #0]
 800c33c:	9303      	str	r3, [sp, #12]
 800c33e:	f7ff fef4 	bl	800c12a <__hexdig_fun>
 800c342:	9b03      	ldr	r3, [sp, #12]
 800c344:	f000 000f 	and.w	r0, r0, #15
 800c348:	4098      	lsls	r0, r3
 800c34a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c34e:	3304      	adds	r3, #4
 800c350:	e7ae      	b.n	800c2b0 <__gethex+0x15c>
 800c352:	45b1      	cmp	r9, r6
 800c354:	d8ea      	bhi.n	800c32c <__gethex+0x1d8>
 800c356:	2201      	movs	r2, #1
 800c358:	4630      	mov	r0, r6
 800c35a:	492a      	ldr	r1, [pc, #168]	@ (800c404 <__gethex+0x2b0>)
 800c35c:	9303      	str	r3, [sp, #12]
 800c35e:	f7ff fe14 	bl	800bf8a <strncmp>
 800c362:	9b03      	ldr	r3, [sp, #12]
 800c364:	2800      	cmp	r0, #0
 800c366:	d1e1      	bne.n	800c32c <__gethex+0x1d8>
 800c368:	e7a2      	b.n	800c2b0 <__gethex+0x15c>
 800c36a:	4620      	mov	r0, r4
 800c36c:	1ea9      	subs	r1, r5, #2
 800c36e:	f7fe fbb4 	bl	800aada <__any_on>
 800c372:	2800      	cmp	r0, #0
 800c374:	d0c2      	beq.n	800c2fc <__gethex+0x1a8>
 800c376:	f04f 0903 	mov.w	r9, #3
 800c37a:	e7c1      	b.n	800c300 <__gethex+0x1ac>
 800c37c:	da09      	bge.n	800c392 <__gethex+0x23e>
 800c37e:	1b75      	subs	r5, r6, r5
 800c380:	4621      	mov	r1, r4
 800c382:	462a      	mov	r2, r5
 800c384:	9801      	ldr	r0, [sp, #4]
 800c386:	f7fe f979 	bl	800a67c <__lshift>
 800c38a:	4604      	mov	r4, r0
 800c38c:	1b7f      	subs	r7, r7, r5
 800c38e:	f100 0a14 	add.w	sl, r0, #20
 800c392:	f04f 0900 	mov.w	r9, #0
 800c396:	e7b8      	b.n	800c30a <__gethex+0x1b6>
 800c398:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c39c:	42bd      	cmp	r5, r7
 800c39e:	dd6f      	ble.n	800c480 <__gethex+0x32c>
 800c3a0:	1bed      	subs	r5, r5, r7
 800c3a2:	42ae      	cmp	r6, r5
 800c3a4:	dc34      	bgt.n	800c410 <__gethex+0x2bc>
 800c3a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3aa:	2b02      	cmp	r3, #2
 800c3ac:	d022      	beq.n	800c3f4 <__gethex+0x2a0>
 800c3ae:	2b03      	cmp	r3, #3
 800c3b0:	d024      	beq.n	800c3fc <__gethex+0x2a8>
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d115      	bne.n	800c3e2 <__gethex+0x28e>
 800c3b6:	42ae      	cmp	r6, r5
 800c3b8:	d113      	bne.n	800c3e2 <__gethex+0x28e>
 800c3ba:	2e01      	cmp	r6, #1
 800c3bc:	d10b      	bne.n	800c3d6 <__gethex+0x282>
 800c3be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3c2:	9a02      	ldr	r2, [sp, #8]
 800c3c4:	2562      	movs	r5, #98	@ 0x62
 800c3c6:	6013      	str	r3, [r2, #0]
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	6123      	str	r3, [r4, #16]
 800c3cc:	f8ca 3000 	str.w	r3, [sl]
 800c3d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c3d2:	601c      	str	r4, [r3, #0]
 800c3d4:	e73a      	b.n	800c24c <__gethex+0xf8>
 800c3d6:	4620      	mov	r0, r4
 800c3d8:	1e71      	subs	r1, r6, #1
 800c3da:	f7fe fb7e 	bl	800aada <__any_on>
 800c3de:	2800      	cmp	r0, #0
 800c3e0:	d1ed      	bne.n	800c3be <__gethex+0x26a>
 800c3e2:	4621      	mov	r1, r4
 800c3e4:	9801      	ldr	r0, [sp, #4]
 800c3e6:	f7fd ff39 	bl	800a25c <_Bfree>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c3ee:	2550      	movs	r5, #80	@ 0x50
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	e72b      	b.n	800c24c <__gethex+0xf8>
 800c3f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d1f3      	bne.n	800c3e2 <__gethex+0x28e>
 800c3fa:	e7e0      	b.n	800c3be <__gethex+0x26a>
 800c3fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d1dd      	bne.n	800c3be <__gethex+0x26a>
 800c402:	e7ee      	b.n	800c3e2 <__gethex+0x28e>
 800c404:	0800e179 	.word	0x0800e179
 800c408:	0800e10f 	.word	0x0800e10f
 800c40c:	0800e1d0 	.word	0x0800e1d0
 800c410:	1e6f      	subs	r7, r5, #1
 800c412:	f1b9 0f00 	cmp.w	r9, #0
 800c416:	d130      	bne.n	800c47a <__gethex+0x326>
 800c418:	b127      	cbz	r7, 800c424 <__gethex+0x2d0>
 800c41a:	4639      	mov	r1, r7
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7fe fb5c 	bl	800aada <__any_on>
 800c422:	4681      	mov	r9, r0
 800c424:	2301      	movs	r3, #1
 800c426:	4629      	mov	r1, r5
 800c428:	1b76      	subs	r6, r6, r5
 800c42a:	2502      	movs	r5, #2
 800c42c:	117a      	asrs	r2, r7, #5
 800c42e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c432:	f007 071f 	and.w	r7, r7, #31
 800c436:	40bb      	lsls	r3, r7
 800c438:	4213      	tst	r3, r2
 800c43a:	4620      	mov	r0, r4
 800c43c:	bf18      	it	ne
 800c43e:	f049 0902 	orrne.w	r9, r9, #2
 800c442:	f7ff fe1f 	bl	800c084 <rshift>
 800c446:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c44a:	f1b9 0f00 	cmp.w	r9, #0
 800c44e:	d047      	beq.n	800c4e0 <__gethex+0x38c>
 800c450:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c454:	2b02      	cmp	r3, #2
 800c456:	d015      	beq.n	800c484 <__gethex+0x330>
 800c458:	2b03      	cmp	r3, #3
 800c45a:	d017      	beq.n	800c48c <__gethex+0x338>
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d109      	bne.n	800c474 <__gethex+0x320>
 800c460:	f019 0f02 	tst.w	r9, #2
 800c464:	d006      	beq.n	800c474 <__gethex+0x320>
 800c466:	f8da 3000 	ldr.w	r3, [sl]
 800c46a:	ea49 0903 	orr.w	r9, r9, r3
 800c46e:	f019 0f01 	tst.w	r9, #1
 800c472:	d10e      	bne.n	800c492 <__gethex+0x33e>
 800c474:	f045 0510 	orr.w	r5, r5, #16
 800c478:	e032      	b.n	800c4e0 <__gethex+0x38c>
 800c47a:	f04f 0901 	mov.w	r9, #1
 800c47e:	e7d1      	b.n	800c424 <__gethex+0x2d0>
 800c480:	2501      	movs	r5, #1
 800c482:	e7e2      	b.n	800c44a <__gethex+0x2f6>
 800c484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c486:	f1c3 0301 	rsb	r3, r3, #1
 800c48a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c48c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d0f0      	beq.n	800c474 <__gethex+0x320>
 800c492:	f04f 0c00 	mov.w	ip, #0
 800c496:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c49a:	f104 0314 	add.w	r3, r4, #20
 800c49e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4a2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ac:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c4b0:	d01b      	beq.n	800c4ea <__gethex+0x396>
 800c4b2:	3201      	adds	r2, #1
 800c4b4:	6002      	str	r2, [r0, #0]
 800c4b6:	2d02      	cmp	r5, #2
 800c4b8:	f104 0314 	add.w	r3, r4, #20
 800c4bc:	d13c      	bne.n	800c538 <__gethex+0x3e4>
 800c4be:	f8d8 2000 	ldr.w	r2, [r8]
 800c4c2:	3a01      	subs	r2, #1
 800c4c4:	42b2      	cmp	r2, r6
 800c4c6:	d109      	bne.n	800c4dc <__gethex+0x388>
 800c4c8:	2201      	movs	r2, #1
 800c4ca:	1171      	asrs	r1, r6, #5
 800c4cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4d0:	f006 061f 	and.w	r6, r6, #31
 800c4d4:	fa02 f606 	lsl.w	r6, r2, r6
 800c4d8:	421e      	tst	r6, r3
 800c4da:	d13a      	bne.n	800c552 <__gethex+0x3fe>
 800c4dc:	f045 0520 	orr.w	r5, r5, #32
 800c4e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c4e2:	601c      	str	r4, [r3, #0]
 800c4e4:	9b02      	ldr	r3, [sp, #8]
 800c4e6:	601f      	str	r7, [r3, #0]
 800c4e8:	e6b0      	b.n	800c24c <__gethex+0xf8>
 800c4ea:	4299      	cmp	r1, r3
 800c4ec:	f843 cc04 	str.w	ip, [r3, #-4]
 800c4f0:	d8d9      	bhi.n	800c4a6 <__gethex+0x352>
 800c4f2:	68a3      	ldr	r3, [r4, #8]
 800c4f4:	459b      	cmp	fp, r3
 800c4f6:	db17      	blt.n	800c528 <__gethex+0x3d4>
 800c4f8:	6861      	ldr	r1, [r4, #4]
 800c4fa:	9801      	ldr	r0, [sp, #4]
 800c4fc:	3101      	adds	r1, #1
 800c4fe:	f7fd fe6d 	bl	800a1dc <_Balloc>
 800c502:	4681      	mov	r9, r0
 800c504:	b918      	cbnz	r0, 800c50e <__gethex+0x3ba>
 800c506:	4602      	mov	r2, r0
 800c508:	2184      	movs	r1, #132	@ 0x84
 800c50a:	4b19      	ldr	r3, [pc, #100]	@ (800c570 <__gethex+0x41c>)
 800c50c:	e6c5      	b.n	800c29a <__gethex+0x146>
 800c50e:	6922      	ldr	r2, [r4, #16]
 800c510:	f104 010c 	add.w	r1, r4, #12
 800c514:	3202      	adds	r2, #2
 800c516:	0092      	lsls	r2, r2, #2
 800c518:	300c      	adds	r0, #12
 800c51a:	f7fc fef0 	bl	80092fe <memcpy>
 800c51e:	4621      	mov	r1, r4
 800c520:	9801      	ldr	r0, [sp, #4]
 800c522:	f7fd fe9b 	bl	800a25c <_Bfree>
 800c526:	464c      	mov	r4, r9
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	1c5a      	adds	r2, r3, #1
 800c52c:	6122      	str	r2, [r4, #16]
 800c52e:	2201      	movs	r2, #1
 800c530:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c534:	615a      	str	r2, [r3, #20]
 800c536:	e7be      	b.n	800c4b6 <__gethex+0x362>
 800c538:	6922      	ldr	r2, [r4, #16]
 800c53a:	455a      	cmp	r2, fp
 800c53c:	dd0b      	ble.n	800c556 <__gethex+0x402>
 800c53e:	2101      	movs	r1, #1
 800c540:	4620      	mov	r0, r4
 800c542:	f7ff fd9f 	bl	800c084 <rshift>
 800c546:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c54a:	3701      	adds	r7, #1
 800c54c:	42bb      	cmp	r3, r7
 800c54e:	f6ff aee0 	blt.w	800c312 <__gethex+0x1be>
 800c552:	2501      	movs	r5, #1
 800c554:	e7c2      	b.n	800c4dc <__gethex+0x388>
 800c556:	f016 061f 	ands.w	r6, r6, #31
 800c55a:	d0fa      	beq.n	800c552 <__gethex+0x3fe>
 800c55c:	4453      	add	r3, sl
 800c55e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c562:	f7fd ff2d 	bl	800a3c0 <__hi0bits>
 800c566:	f1c6 0620 	rsb	r6, r6, #32
 800c56a:	42b0      	cmp	r0, r6
 800c56c:	dbe7      	blt.n	800c53e <__gethex+0x3ea>
 800c56e:	e7f0      	b.n	800c552 <__gethex+0x3fe>
 800c570:	0800e10f 	.word	0x0800e10f

0800c574 <L_shift>:
 800c574:	f1c2 0208 	rsb	r2, r2, #8
 800c578:	0092      	lsls	r2, r2, #2
 800c57a:	b570      	push	{r4, r5, r6, lr}
 800c57c:	f1c2 0620 	rsb	r6, r2, #32
 800c580:	6843      	ldr	r3, [r0, #4]
 800c582:	6804      	ldr	r4, [r0, #0]
 800c584:	fa03 f506 	lsl.w	r5, r3, r6
 800c588:	432c      	orrs	r4, r5
 800c58a:	40d3      	lsrs	r3, r2
 800c58c:	6004      	str	r4, [r0, #0]
 800c58e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c592:	4288      	cmp	r0, r1
 800c594:	d3f4      	bcc.n	800c580 <L_shift+0xc>
 800c596:	bd70      	pop	{r4, r5, r6, pc}

0800c598 <__match>:
 800c598:	b530      	push	{r4, r5, lr}
 800c59a:	6803      	ldr	r3, [r0, #0]
 800c59c:	3301      	adds	r3, #1
 800c59e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5a2:	b914      	cbnz	r4, 800c5aa <__match+0x12>
 800c5a4:	6003      	str	r3, [r0, #0]
 800c5a6:	2001      	movs	r0, #1
 800c5a8:	bd30      	pop	{r4, r5, pc}
 800c5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ae:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c5b2:	2d19      	cmp	r5, #25
 800c5b4:	bf98      	it	ls
 800c5b6:	3220      	addls	r2, #32
 800c5b8:	42a2      	cmp	r2, r4
 800c5ba:	d0f0      	beq.n	800c59e <__match+0x6>
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e7f3      	b.n	800c5a8 <__match+0x10>

0800c5c0 <__hexnan>:
 800c5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	2500      	movs	r5, #0
 800c5c6:	680b      	ldr	r3, [r1, #0]
 800c5c8:	4682      	mov	sl, r0
 800c5ca:	115e      	asrs	r6, r3, #5
 800c5cc:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c5d0:	f013 031f 	ands.w	r3, r3, #31
 800c5d4:	bf18      	it	ne
 800c5d6:	3604      	addne	r6, #4
 800c5d8:	1f37      	subs	r7, r6, #4
 800c5da:	4690      	mov	r8, r2
 800c5dc:	46b9      	mov	r9, r7
 800c5de:	463c      	mov	r4, r7
 800c5e0:	46ab      	mov	fp, r5
 800c5e2:	b087      	sub	sp, #28
 800c5e4:	6801      	ldr	r1, [r0, #0]
 800c5e6:	9301      	str	r3, [sp, #4]
 800c5e8:	f846 5c04 	str.w	r5, [r6, #-4]
 800c5ec:	9502      	str	r5, [sp, #8]
 800c5ee:	784a      	ldrb	r2, [r1, #1]
 800c5f0:	1c4b      	adds	r3, r1, #1
 800c5f2:	9303      	str	r3, [sp, #12]
 800c5f4:	b342      	cbz	r2, 800c648 <__hexnan+0x88>
 800c5f6:	4610      	mov	r0, r2
 800c5f8:	9105      	str	r1, [sp, #20]
 800c5fa:	9204      	str	r2, [sp, #16]
 800c5fc:	f7ff fd95 	bl	800c12a <__hexdig_fun>
 800c600:	2800      	cmp	r0, #0
 800c602:	d151      	bne.n	800c6a8 <__hexnan+0xe8>
 800c604:	9a04      	ldr	r2, [sp, #16]
 800c606:	9905      	ldr	r1, [sp, #20]
 800c608:	2a20      	cmp	r2, #32
 800c60a:	d818      	bhi.n	800c63e <__hexnan+0x7e>
 800c60c:	9b02      	ldr	r3, [sp, #8]
 800c60e:	459b      	cmp	fp, r3
 800c610:	dd13      	ble.n	800c63a <__hexnan+0x7a>
 800c612:	454c      	cmp	r4, r9
 800c614:	d206      	bcs.n	800c624 <__hexnan+0x64>
 800c616:	2d07      	cmp	r5, #7
 800c618:	dc04      	bgt.n	800c624 <__hexnan+0x64>
 800c61a:	462a      	mov	r2, r5
 800c61c:	4649      	mov	r1, r9
 800c61e:	4620      	mov	r0, r4
 800c620:	f7ff ffa8 	bl	800c574 <L_shift>
 800c624:	4544      	cmp	r4, r8
 800c626:	d952      	bls.n	800c6ce <__hexnan+0x10e>
 800c628:	2300      	movs	r3, #0
 800c62a:	f1a4 0904 	sub.w	r9, r4, #4
 800c62e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c632:	461d      	mov	r5, r3
 800c634:	464c      	mov	r4, r9
 800c636:	f8cd b008 	str.w	fp, [sp, #8]
 800c63a:	9903      	ldr	r1, [sp, #12]
 800c63c:	e7d7      	b.n	800c5ee <__hexnan+0x2e>
 800c63e:	2a29      	cmp	r2, #41	@ 0x29
 800c640:	d157      	bne.n	800c6f2 <__hexnan+0x132>
 800c642:	3102      	adds	r1, #2
 800c644:	f8ca 1000 	str.w	r1, [sl]
 800c648:	f1bb 0f00 	cmp.w	fp, #0
 800c64c:	d051      	beq.n	800c6f2 <__hexnan+0x132>
 800c64e:	454c      	cmp	r4, r9
 800c650:	d206      	bcs.n	800c660 <__hexnan+0xa0>
 800c652:	2d07      	cmp	r5, #7
 800c654:	dc04      	bgt.n	800c660 <__hexnan+0xa0>
 800c656:	462a      	mov	r2, r5
 800c658:	4649      	mov	r1, r9
 800c65a:	4620      	mov	r0, r4
 800c65c:	f7ff ff8a 	bl	800c574 <L_shift>
 800c660:	4544      	cmp	r4, r8
 800c662:	d936      	bls.n	800c6d2 <__hexnan+0x112>
 800c664:	4623      	mov	r3, r4
 800c666:	f1a8 0204 	sub.w	r2, r8, #4
 800c66a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c66e:	429f      	cmp	r7, r3
 800c670:	f842 1f04 	str.w	r1, [r2, #4]!
 800c674:	d2f9      	bcs.n	800c66a <__hexnan+0xaa>
 800c676:	1b3b      	subs	r3, r7, r4
 800c678:	f023 0303 	bic.w	r3, r3, #3
 800c67c:	3304      	adds	r3, #4
 800c67e:	3401      	adds	r4, #1
 800c680:	3e03      	subs	r6, #3
 800c682:	42b4      	cmp	r4, r6
 800c684:	bf88      	it	hi
 800c686:	2304      	movhi	r3, #4
 800c688:	2200      	movs	r2, #0
 800c68a:	4443      	add	r3, r8
 800c68c:	f843 2b04 	str.w	r2, [r3], #4
 800c690:	429f      	cmp	r7, r3
 800c692:	d2fb      	bcs.n	800c68c <__hexnan+0xcc>
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	b91b      	cbnz	r3, 800c6a0 <__hexnan+0xe0>
 800c698:	4547      	cmp	r7, r8
 800c69a:	d128      	bne.n	800c6ee <__hexnan+0x12e>
 800c69c:	2301      	movs	r3, #1
 800c69e:	603b      	str	r3, [r7, #0]
 800c6a0:	2005      	movs	r0, #5
 800c6a2:	b007      	add	sp, #28
 800c6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a8:	3501      	adds	r5, #1
 800c6aa:	2d08      	cmp	r5, #8
 800c6ac:	f10b 0b01 	add.w	fp, fp, #1
 800c6b0:	dd06      	ble.n	800c6c0 <__hexnan+0x100>
 800c6b2:	4544      	cmp	r4, r8
 800c6b4:	d9c1      	bls.n	800c63a <__hexnan+0x7a>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	2501      	movs	r5, #1
 800c6ba:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6be:	3c04      	subs	r4, #4
 800c6c0:	6822      	ldr	r2, [r4, #0]
 800c6c2:	f000 000f 	and.w	r0, r0, #15
 800c6c6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c6ca:	6020      	str	r0, [r4, #0]
 800c6cc:	e7b5      	b.n	800c63a <__hexnan+0x7a>
 800c6ce:	2508      	movs	r5, #8
 800c6d0:	e7b3      	b.n	800c63a <__hexnan+0x7a>
 800c6d2:	9b01      	ldr	r3, [sp, #4]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d0dd      	beq.n	800c694 <__hexnan+0xd4>
 800c6d8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6dc:	f1c3 0320 	rsb	r3, r3, #32
 800c6e0:	40da      	lsrs	r2, r3
 800c6e2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c6e6:	4013      	ands	r3, r2
 800c6e8:	f846 3c04 	str.w	r3, [r6, #-4]
 800c6ec:	e7d2      	b.n	800c694 <__hexnan+0xd4>
 800c6ee:	3f04      	subs	r7, #4
 800c6f0:	e7d0      	b.n	800c694 <__hexnan+0xd4>
 800c6f2:	2004      	movs	r0, #4
 800c6f4:	e7d5      	b.n	800c6a2 <__hexnan+0xe2>

0800c6f6 <__ascii_mbtowc>:
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	b901      	cbnz	r1, 800c6fc <__ascii_mbtowc+0x6>
 800c6fa:	a901      	add	r1, sp, #4
 800c6fc:	b142      	cbz	r2, 800c710 <__ascii_mbtowc+0x1a>
 800c6fe:	b14b      	cbz	r3, 800c714 <__ascii_mbtowc+0x1e>
 800c700:	7813      	ldrb	r3, [r2, #0]
 800c702:	600b      	str	r3, [r1, #0]
 800c704:	7812      	ldrb	r2, [r2, #0]
 800c706:	1e10      	subs	r0, r2, #0
 800c708:	bf18      	it	ne
 800c70a:	2001      	movne	r0, #1
 800c70c:	b002      	add	sp, #8
 800c70e:	4770      	bx	lr
 800c710:	4610      	mov	r0, r2
 800c712:	e7fb      	b.n	800c70c <__ascii_mbtowc+0x16>
 800c714:	f06f 0001 	mvn.w	r0, #1
 800c718:	e7f8      	b.n	800c70c <__ascii_mbtowc+0x16>

0800c71a <_realloc_r>:
 800c71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c71e:	4607      	mov	r7, r0
 800c720:	4614      	mov	r4, r2
 800c722:	460d      	mov	r5, r1
 800c724:	b921      	cbnz	r1, 800c730 <_realloc_r+0x16>
 800c726:	4611      	mov	r1, r2
 800c728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c72c:	f7fd bcca 	b.w	800a0c4 <_malloc_r>
 800c730:	b92a      	cbnz	r2, 800c73e <_realloc_r+0x24>
 800c732:	f7fd fc55 	bl	8009fe0 <_free_r>
 800c736:	4625      	mov	r5, r4
 800c738:	4628      	mov	r0, r5
 800c73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73e:	f000 f840 	bl	800c7c2 <_malloc_usable_size_r>
 800c742:	4284      	cmp	r4, r0
 800c744:	4606      	mov	r6, r0
 800c746:	d802      	bhi.n	800c74e <_realloc_r+0x34>
 800c748:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c74c:	d8f4      	bhi.n	800c738 <_realloc_r+0x1e>
 800c74e:	4621      	mov	r1, r4
 800c750:	4638      	mov	r0, r7
 800c752:	f7fd fcb7 	bl	800a0c4 <_malloc_r>
 800c756:	4680      	mov	r8, r0
 800c758:	b908      	cbnz	r0, 800c75e <_realloc_r+0x44>
 800c75a:	4645      	mov	r5, r8
 800c75c:	e7ec      	b.n	800c738 <_realloc_r+0x1e>
 800c75e:	42b4      	cmp	r4, r6
 800c760:	4622      	mov	r2, r4
 800c762:	4629      	mov	r1, r5
 800c764:	bf28      	it	cs
 800c766:	4632      	movcs	r2, r6
 800c768:	f7fc fdc9 	bl	80092fe <memcpy>
 800c76c:	4629      	mov	r1, r5
 800c76e:	4638      	mov	r0, r7
 800c770:	f7fd fc36 	bl	8009fe0 <_free_r>
 800c774:	e7f1      	b.n	800c75a <_realloc_r+0x40>

0800c776 <__ascii_wctomb>:
 800c776:	4603      	mov	r3, r0
 800c778:	4608      	mov	r0, r1
 800c77a:	b141      	cbz	r1, 800c78e <__ascii_wctomb+0x18>
 800c77c:	2aff      	cmp	r2, #255	@ 0xff
 800c77e:	d904      	bls.n	800c78a <__ascii_wctomb+0x14>
 800c780:	228a      	movs	r2, #138	@ 0x8a
 800c782:	f04f 30ff 	mov.w	r0, #4294967295
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	4770      	bx	lr
 800c78a:	2001      	movs	r0, #1
 800c78c:	700a      	strb	r2, [r1, #0]
 800c78e:	4770      	bx	lr

0800c790 <fiprintf>:
 800c790:	b40e      	push	{r1, r2, r3}
 800c792:	b503      	push	{r0, r1, lr}
 800c794:	4601      	mov	r1, r0
 800c796:	ab03      	add	r3, sp, #12
 800c798:	4805      	ldr	r0, [pc, #20]	@ (800c7b0 <fiprintf+0x20>)
 800c79a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c79e:	6800      	ldr	r0, [r0, #0]
 800c7a0:	9301      	str	r3, [sp, #4]
 800c7a2:	f7ff f9b7 	bl	800bb14 <_vfiprintf_r>
 800c7a6:	b002      	add	sp, #8
 800c7a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7ac:	b003      	add	sp, #12
 800c7ae:	4770      	bx	lr
 800c7b0:	20000030 	.word	0x20000030

0800c7b4 <abort>:
 800c7b4:	2006      	movs	r0, #6
 800c7b6:	b508      	push	{r3, lr}
 800c7b8:	f000 f834 	bl	800c824 <raise>
 800c7bc:	2001      	movs	r0, #1
 800c7be:	f7f5 fdbe 	bl	800233e <_exit>

0800c7c2 <_malloc_usable_size_r>:
 800c7c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7c6:	1f18      	subs	r0, r3, #4
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	bfbc      	itt	lt
 800c7cc:	580b      	ldrlt	r3, [r1, r0]
 800c7ce:	18c0      	addlt	r0, r0, r3
 800c7d0:	4770      	bx	lr

0800c7d2 <_raise_r>:
 800c7d2:	291f      	cmp	r1, #31
 800c7d4:	b538      	push	{r3, r4, r5, lr}
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	460c      	mov	r4, r1
 800c7da:	d904      	bls.n	800c7e6 <_raise_r+0x14>
 800c7dc:	2316      	movs	r3, #22
 800c7de:	6003      	str	r3, [r0, #0]
 800c7e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e4:	bd38      	pop	{r3, r4, r5, pc}
 800c7e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7e8:	b112      	cbz	r2, 800c7f0 <_raise_r+0x1e>
 800c7ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7ee:	b94b      	cbnz	r3, 800c804 <_raise_r+0x32>
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f000 f831 	bl	800c858 <_getpid_r>
 800c7f6:	4622      	mov	r2, r4
 800c7f8:	4601      	mov	r1, r0
 800c7fa:	4628      	mov	r0, r5
 800c7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c800:	f000 b818 	b.w	800c834 <_kill_r>
 800c804:	2b01      	cmp	r3, #1
 800c806:	d00a      	beq.n	800c81e <_raise_r+0x4c>
 800c808:	1c59      	adds	r1, r3, #1
 800c80a:	d103      	bne.n	800c814 <_raise_r+0x42>
 800c80c:	2316      	movs	r3, #22
 800c80e:	6003      	str	r3, [r0, #0]
 800c810:	2001      	movs	r0, #1
 800c812:	e7e7      	b.n	800c7e4 <_raise_r+0x12>
 800c814:	2100      	movs	r1, #0
 800c816:	4620      	mov	r0, r4
 800c818:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c81c:	4798      	blx	r3
 800c81e:	2000      	movs	r0, #0
 800c820:	e7e0      	b.n	800c7e4 <_raise_r+0x12>
	...

0800c824 <raise>:
 800c824:	4b02      	ldr	r3, [pc, #8]	@ (800c830 <raise+0xc>)
 800c826:	4601      	mov	r1, r0
 800c828:	6818      	ldr	r0, [r3, #0]
 800c82a:	f7ff bfd2 	b.w	800c7d2 <_raise_r>
 800c82e:	bf00      	nop
 800c830:	20000030 	.word	0x20000030

0800c834 <_kill_r>:
 800c834:	b538      	push	{r3, r4, r5, lr}
 800c836:	2300      	movs	r3, #0
 800c838:	4d06      	ldr	r5, [pc, #24]	@ (800c854 <_kill_r+0x20>)
 800c83a:	4604      	mov	r4, r0
 800c83c:	4608      	mov	r0, r1
 800c83e:	4611      	mov	r1, r2
 800c840:	602b      	str	r3, [r5, #0]
 800c842:	f7f5 fd6c 	bl	800231e <_kill>
 800c846:	1c43      	adds	r3, r0, #1
 800c848:	d102      	bne.n	800c850 <_kill_r+0x1c>
 800c84a:	682b      	ldr	r3, [r5, #0]
 800c84c:	b103      	cbz	r3, 800c850 <_kill_r+0x1c>
 800c84e:	6023      	str	r3, [r4, #0]
 800c850:	bd38      	pop	{r3, r4, r5, pc}
 800c852:	bf00      	nop
 800c854:	20001370 	.word	0x20001370

0800c858 <_getpid_r>:
 800c858:	f7f5 bd5a 	b.w	8002310 <_getpid>

0800c85c <tanh>:
 800c85c:	4a41      	ldr	r2, [pc, #260]	@ (800c964 <tanh+0x108>)
 800c85e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c862:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c866:	4293      	cmp	r3, r2
 800c868:	4606      	mov	r6, r0
 800c86a:	460f      	mov	r7, r1
 800c86c:	460c      	mov	r4, r1
 800c86e:	d917      	bls.n	800c8a0 <tanh+0x44>
 800c870:	4b3d      	ldr	r3, [pc, #244]	@ (800c968 <tanh+0x10c>)
 800c872:	2900      	cmp	r1, #0
 800c874:	4632      	mov	r2, r6
 800c876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c87a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800c87e:	463b      	mov	r3, r7
 800c880:	db07      	blt.n	800c892 <tanh+0x36>
 800c882:	f7f3 ff6b 	bl	800075c <__aeabi_ddiv>
 800c886:	4622      	mov	r2, r4
 800c888:	462b      	mov	r3, r5
 800c88a:	f7f3 fc87 	bl	800019c <__adddf3>
 800c88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c892:	f7f3 ff63 	bl	800075c <__aeabi_ddiv>
 800c896:	4622      	mov	r2, r4
 800c898:	462b      	mov	r3, r5
 800c89a:	f7f3 fc7d 	bl	8000198 <__aeabi_dsub>
 800c89e:	e7f6      	b.n	800c88e <tanh+0x32>
 800c8a0:	4a32      	ldr	r2, [pc, #200]	@ (800c96c <tanh+0x110>)
 800c8a2:	4293      	cmp	r3, r2
 800c8a4:	d856      	bhi.n	800c954 <tanh+0xf8>
 800c8a6:	f1b3 5f72 	cmp.w	r3, #1015021568	@ 0x3c800000
 800c8aa:	d20b      	bcs.n	800c8c4 <tanh+0x68>
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	492e      	ldr	r1, [pc, #184]	@ (800c968 <tanh+0x10c>)
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8b6:	f7f3 fc71 	bl	800019c <__adddf3>
 800c8ba:	4632      	mov	r2, r6
 800c8bc:	463b      	mov	r3, r7
 800c8be:	f7f3 fe23 	bl	8000508 <__aeabi_dmul>
 800c8c2:	e7e4      	b.n	800c88e <tanh+0x32>
 800c8c4:	4a2a      	ldr	r2, [pc, #168]	@ (800c970 <tanh+0x114>)
 800c8c6:	4d2b      	ldr	r5, [pc, #172]	@ (800c974 <tanh+0x118>)
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d91f      	bls.n	800c90c <tanh+0xb0>
 800c8cc:	f000 fafa 	bl	800cec4 <fabs>
 800c8d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c8d4:	f7f3 fe18 	bl	8000508 <__aeabi_dmul>
 800c8d8:	f000 f876 	bl	800c9c8 <expm1>
 800c8dc:	460b      	mov	r3, r1
 800c8de:	4922      	ldr	r1, [pc, #136]	@ (800c968 <tanh+0x10c>)
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c8e6:	e9d5 8900 	ldrd	r8, r9, [r5]
 800c8ea:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c8ee:	f7f3 fc55 	bl	800019c <__adddf3>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4640      	mov	r0, r8
 800c8f8:	4649      	mov	r1, r9
 800c8fa:	f7f3 ff2f 	bl	800075c <__aeabi_ddiv>
 800c8fe:	4602      	mov	r2, r0
 800c900:	460b      	mov	r3, r1
 800c902:	4630      	mov	r0, r6
 800c904:	4639      	mov	r1, r7
 800c906:	f7f3 fc47 	bl	8000198 <__aeabi_dsub>
 800c90a:	e01b      	b.n	800c944 <tanh+0xe8>
 800c90c:	e9d5 6700 	ldrd	r6, r7, [r5]
 800c910:	f000 fad8 	bl	800cec4 <fabs>
 800c914:	4602      	mov	r2, r0
 800c916:	460b      	mov	r3, r1
 800c918:	4630      	mov	r0, r6
 800c91a:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800c91e:	f7f3 fdf3 	bl	8000508 <__aeabi_dmul>
 800c922:	f000 f851 	bl	800c9c8 <expm1>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	4606      	mov	r6, r0
 800c92c:	f101 4700 	add.w	r7, r1, #2147483648	@ 0x80000000
 800c930:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c934:	f7f3 fc32 	bl	800019c <__adddf3>
 800c938:	4602      	mov	r2, r0
 800c93a:	460b      	mov	r3, r1
 800c93c:	4630      	mov	r0, r6
 800c93e:	4639      	mov	r1, r7
 800c940:	f7f3 ff0c 	bl	800075c <__aeabi_ddiv>
 800c944:	2c00      	cmp	r4, #0
 800c946:	bfbf      	itttt	lt
 800c948:	4602      	movlt	r2, r0
 800c94a:	f101 4300 	addlt.w	r3, r1, #2147483648	@ 0x80000000
 800c94e:	4610      	movlt	r0, r2
 800c950:	4619      	movlt	r1, r3
 800c952:	e79c      	b.n	800c88e <tanh+0x32>
 800c954:	4b04      	ldr	r3, [pc, #16]	@ (800c968 <tanh+0x10c>)
 800c956:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c95a:	4b07      	ldr	r3, [pc, #28]	@ (800c978 <tanh+0x11c>)
 800c95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c960:	e7d1      	b.n	800c906 <tanh+0xaa>
 800c962:	bf00      	nop
 800c964:	7fefffff 	.word	0x7fefffff
 800c968:	0800e498 	.word	0x0800e498
 800c96c:	4035ffff 	.word	0x4035ffff
 800c970:	3fefffff 	.word	0x3fefffff
 800c974:	0800e490 	.word	0x0800e490
 800c978:	0800e488 	.word	0x0800e488

0800c97c <expf>:
 800c97c:	b538      	push	{r3, r4, r5, lr}
 800c97e:	4605      	mov	r5, r0
 800c980:	f000 faa4 	bl	800cecc <__ieee754_expf>
 800c984:	4604      	mov	r4, r0
 800c986:	4628      	mov	r0, r5
 800c988:	f000 fa64 	bl	800ce54 <finitef>
 800c98c:	b150      	cbz	r0, 800c9a4 <expf+0x28>
 800c98e:	4628      	mov	r0, r5
 800c990:	490b      	ldr	r1, [pc, #44]	@ (800c9c0 <expf+0x44>)
 800c992:	f7f4 fbcb 	bl	800112c <__aeabi_fcmpgt>
 800c996:	b138      	cbz	r0, 800c9a8 <expf+0x2c>
 800c998:	f7fc fc76 	bl	8009288 <__errno>
 800c99c:	2322      	movs	r3, #34	@ 0x22
 800c99e:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800c9a2:	6003      	str	r3, [r0, #0]
 800c9a4:	4620      	mov	r0, r4
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	4628      	mov	r0, r5
 800c9aa:	4906      	ldr	r1, [pc, #24]	@ (800c9c4 <expf+0x48>)
 800c9ac:	f7f4 fba0 	bl	80010f0 <__aeabi_fcmplt>
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d0f7      	beq.n	800c9a4 <expf+0x28>
 800c9b4:	f7fc fc68 	bl	8009288 <__errno>
 800c9b8:	2322      	movs	r3, #34	@ 0x22
 800c9ba:	2400      	movs	r4, #0
 800c9bc:	6003      	str	r3, [r0, #0]
 800c9be:	e7f1      	b.n	800c9a4 <expf+0x28>
 800c9c0:	42b17217 	.word	0x42b17217
 800c9c4:	c2cff1b5 	.word	0xc2cff1b5

0800c9c8 <expm1>:
 800c9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9cc:	4dcc      	ldr	r5, [pc, #816]	@ (800cd00 <expm1+0x338>)
 800c9ce:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c9d2:	42ab      	cmp	r3, r5
 800c9d4:	4682      	mov	sl, r0
 800c9d6:	468b      	mov	fp, r1
 800c9d8:	b085      	sub	sp, #20
 800c9da:	f001 4400 	and.w	r4, r1, #2147483648	@ 0x80000000
 800c9de:	d93e      	bls.n	800ca5e <expm1+0x96>
 800c9e0:	4dc8      	ldr	r5, [pc, #800]	@ (800cd04 <expm1+0x33c>)
 800c9e2:	42ab      	cmp	r3, r5
 800c9e4:	d91f      	bls.n	800ca26 <expm1+0x5e>
 800c9e6:	4dc8      	ldr	r5, [pc, #800]	@ (800cd08 <expm1+0x340>)
 800c9e8:	42ab      	cmp	r3, r5
 800c9ea:	d910      	bls.n	800ca0e <expm1+0x46>
 800c9ec:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c9f0:	4302      	orrs	r2, r0
 800c9f2:	d004      	beq.n	800c9fe <expm1+0x36>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	460b      	mov	r3, r1
 800c9f8:	f7f3 fbd0 	bl	800019c <__adddf3>
 800c9fc:	e123      	b.n	800cc46 <expm1+0x27e>
 800c9fe:	2c00      	cmp	r4, #0
 800ca00:	f000 8123 	beq.w	800cc4a <expm1+0x282>
 800ca04:	f04f 0a00 	mov.w	sl, #0
 800ca08:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800cd0c <expm1+0x344>
 800ca0c:	e11d      	b.n	800cc4a <expm1+0x282>
 800ca0e:	a3a4      	add	r3, pc, #656	@ (adr r3, 800cca0 <expm1+0x2d8>)
 800ca10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca14:	f7f4 f808 	bl	8000a28 <__aeabi_dcmpgt>
 800ca18:	b128      	cbz	r0, 800ca26 <expm1+0x5e>
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	b005      	add	sp, #20
 800ca1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca22:	f000 ba12 	b.w	800ce4a <__math_oflow>
 800ca26:	2c00      	cmp	r4, #0
 800ca28:	f000 80c5 	beq.w	800cbb6 <expm1+0x1ee>
 800ca2c:	a39e      	add	r3, pc, #632	@ (adr r3, 800cca8 <expm1+0x2e0>)
 800ca2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca32:	4650      	mov	r0, sl
 800ca34:	4659      	mov	r1, fp
 800ca36:	f7f3 fbb1 	bl	800019c <__adddf3>
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	f7f3 ffd5 	bl	80009ec <__aeabi_dcmplt>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d1de      	bne.n	800ca04 <expm1+0x3c>
 800ca46:	a39a      	add	r3, pc, #616	@ (adr r3, 800ccb0 <expm1+0x2e8>)
 800ca48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca4c:	4650      	mov	r0, sl
 800ca4e:	4659      	mov	r1, fp
 800ca50:	f7f3 fd5a 	bl	8000508 <__aeabi_dmul>
 800ca54:	4602      	mov	r2, r0
 800ca56:	460b      	mov	r3, r1
 800ca58:	2000      	movs	r0, #0
 800ca5a:	49ad      	ldr	r1, [pc, #692]	@ (800cd10 <expm1+0x348>)
 800ca5c:	e0b6      	b.n	800cbcc <expm1+0x204>
 800ca5e:	4aad      	ldr	r2, [pc, #692]	@ (800cd14 <expm1+0x34c>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	f240 80de 	bls.w	800cc22 <expm1+0x25a>
 800ca66:	4aac      	ldr	r2, [pc, #688]	@ (800cd18 <expm1+0x350>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	f200 80cf 	bhi.w	800cc0c <expm1+0x244>
 800ca6e:	a392      	add	r3, pc, #584	@ (adr r3, 800ccb8 <expm1+0x2f0>)
 800ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca74:	2c00      	cmp	r4, #0
 800ca76:	f040 8093 	bne.w	800cba0 <expm1+0x1d8>
 800ca7a:	f20f 2944 	addw	r9, pc, #580	@ 0x244
 800ca7e:	e9d9 8900 	ldrd	r8, r9, [r9]
 800ca82:	f7f3 fb89 	bl	8000198 <__aeabi_dsub>
 800ca86:	2401      	movs	r4, #1
 800ca88:	4606      	mov	r6, r0
 800ca8a:	460f      	mov	r7, r1
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	464b      	mov	r3, r9
 800ca90:	4630      	mov	r0, r6
 800ca92:	4639      	mov	r1, r7
 800ca94:	f7f3 fb80 	bl	8000198 <__aeabi_dsub>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	4682      	mov	sl, r0
 800ca9e:	468b      	mov	fp, r1
 800caa0:	4630      	mov	r0, r6
 800caa2:	4639      	mov	r1, r7
 800caa4:	f7f3 fb78 	bl	8000198 <__aeabi_dsub>
 800caa8:	4642      	mov	r2, r8
 800caaa:	464b      	mov	r3, r9
 800caac:	f7f3 fb74 	bl	8000198 <__aeabi_dsub>
 800cab0:	e9cd 0100 	strd	r0, r1, [sp]
 800cab4:	2200      	movs	r2, #0
 800cab6:	4b99      	ldr	r3, [pc, #612]	@ (800cd1c <expm1+0x354>)
 800cab8:	4650      	mov	r0, sl
 800caba:	4659      	mov	r1, fp
 800cabc:	f7f3 fd24 	bl	8000508 <__aeabi_dmul>
 800cac0:	4606      	mov	r6, r0
 800cac2:	460f      	mov	r7, r1
 800cac4:	4602      	mov	r2, r0
 800cac6:	460b      	mov	r3, r1
 800cac8:	4650      	mov	r0, sl
 800caca:	4659      	mov	r1, fp
 800cacc:	f7f3 fd1c 	bl	8000508 <__aeabi_dmul>
 800cad0:	a37d      	add	r3, pc, #500	@ (adr r3, 800ccc8 <expm1+0x300>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	4680      	mov	r8, r0
 800cad8:	4689      	mov	r9, r1
 800cada:	f7f3 fd15 	bl	8000508 <__aeabi_dmul>
 800cade:	a37c      	add	r3, pc, #496	@ (adr r3, 800ccd0 <expm1+0x308>)
 800cae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae4:	f7f3 fb5a 	bl	800019c <__adddf3>
 800cae8:	4642      	mov	r2, r8
 800caea:	464b      	mov	r3, r9
 800caec:	f7f3 fd0c 	bl	8000508 <__aeabi_dmul>
 800caf0:	a379      	add	r3, pc, #484	@ (adr r3, 800ccd8 <expm1+0x310>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7f3 fb4f 	bl	8000198 <__aeabi_dsub>
 800cafa:	4642      	mov	r2, r8
 800cafc:	464b      	mov	r3, r9
 800cafe:	f7f3 fd03 	bl	8000508 <__aeabi_dmul>
 800cb02:	a377      	add	r3, pc, #476	@ (adr r3, 800cce0 <expm1+0x318>)
 800cb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb08:	f7f3 fb48 	bl	800019c <__adddf3>
 800cb0c:	4642      	mov	r2, r8
 800cb0e:	464b      	mov	r3, r9
 800cb10:	f7f3 fcfa 	bl	8000508 <__aeabi_dmul>
 800cb14:	a374      	add	r3, pc, #464	@ (adr r3, 800cce8 <expm1+0x320>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	f7f3 fb3d 	bl	8000198 <__aeabi_dsub>
 800cb1e:	4642      	mov	r2, r8
 800cb20:	464b      	mov	r3, r9
 800cb22:	f7f3 fcf1 	bl	8000508 <__aeabi_dmul>
 800cb26:	2200      	movs	r2, #0
 800cb28:	4b7d      	ldr	r3, [pc, #500]	@ (800cd20 <expm1+0x358>)
 800cb2a:	f7f3 fb37 	bl	800019c <__adddf3>
 800cb2e:	4602      	mov	r2, r0
 800cb30:	460b      	mov	r3, r1
 800cb32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb36:	4630      	mov	r0, r6
 800cb38:	4639      	mov	r1, r7
 800cb3a:	f7f3 fce5 	bl	8000508 <__aeabi_dmul>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	2000      	movs	r0, #0
 800cb44:	4977      	ldr	r1, [pc, #476]	@ (800cd24 <expm1+0x35c>)
 800cb46:	f7f3 fb27 	bl	8000198 <__aeabi_dsub>
 800cb4a:	4602      	mov	r2, r0
 800cb4c:	460b      	mov	r3, r1
 800cb4e:	4606      	mov	r6, r0
 800cb50:	460f      	mov	r7, r1
 800cb52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb56:	f7f3 fb1f 	bl	8000198 <__aeabi_dsub>
 800cb5a:	4632      	mov	r2, r6
 800cb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb60:	463b      	mov	r3, r7
 800cb62:	4650      	mov	r0, sl
 800cb64:	4659      	mov	r1, fp
 800cb66:	f7f3 fccf 	bl	8000508 <__aeabi_dmul>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	460b      	mov	r3, r1
 800cb6e:	2000      	movs	r0, #0
 800cb70:	496d      	ldr	r1, [pc, #436]	@ (800cd28 <expm1+0x360>)
 800cb72:	f7f3 fb11 	bl	8000198 <__aeabi_dsub>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb7e:	f7f3 fded 	bl	800075c <__aeabi_ddiv>
 800cb82:	4642      	mov	r2, r8
 800cb84:	464b      	mov	r3, r9
 800cb86:	f7f3 fcbf 	bl	8000508 <__aeabi_dmul>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	2c00      	cmp	r4, #0
 800cb90:	d162      	bne.n	800cc58 <expm1+0x290>
 800cb92:	4650      	mov	r0, sl
 800cb94:	4659      	mov	r1, fp
 800cb96:	f7f3 fcb7 	bl	8000508 <__aeabi_dmul>
 800cb9a:	4642      	mov	r2, r8
 800cb9c:	464b      	mov	r3, r9
 800cb9e:	e04a      	b.n	800cc36 <expm1+0x26e>
 800cba0:	f7f3 fafc 	bl	800019c <__adddf3>
 800cba4:	f20f 1948 	addw	r9, pc, #328	@ 0x148
 800cba8:	e9d9 8900 	ldrd	r8, r9, [r9]
 800cbac:	4606      	mov	r6, r0
 800cbae:	460f      	mov	r7, r1
 800cbb0:	f04f 34ff 	mov.w	r4, #4294967295
 800cbb4:	e76a      	b.n	800ca8c <expm1+0xc4>
 800cbb6:	a33e      	add	r3, pc, #248	@ (adr r3, 800ccb0 <expm1+0x2e8>)
 800cbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbbc:	4650      	mov	r0, sl
 800cbbe:	4659      	mov	r1, fp
 800cbc0:	f7f3 fca2 	bl	8000508 <__aeabi_dmul>
 800cbc4:	4602      	mov	r2, r0
 800cbc6:	460b      	mov	r3, r1
 800cbc8:	2000      	movs	r0, #0
 800cbca:	4954      	ldr	r1, [pc, #336]	@ (800cd1c <expm1+0x354>)
 800cbcc:	f7f3 fae6 	bl	800019c <__adddf3>
 800cbd0:	f7f3 ff4a 	bl	8000a68 <__aeabi_d2iz>
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	f7f3 fc2d 	bl	8000434 <__aeabi_i2d>
 800cbda:	a337      	add	r3, pc, #220	@ (adr r3, 800ccb8 <expm1+0x2f0>)
 800cbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe0:	4680      	mov	r8, r0
 800cbe2:	4689      	mov	r9, r1
 800cbe4:	f7f3 fc90 	bl	8000508 <__aeabi_dmul>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	4650      	mov	r0, sl
 800cbee:	4659      	mov	r1, fp
 800cbf0:	f7f3 fad2 	bl	8000198 <__aeabi_dsub>
 800cbf4:	a332      	add	r3, pc, #200	@ (adr r3, 800ccc0 <expm1+0x2f8>)
 800cbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfa:	4606      	mov	r6, r0
 800cbfc:	460f      	mov	r7, r1
 800cbfe:	4640      	mov	r0, r8
 800cc00:	4649      	mov	r1, r9
 800cc02:	f7f3 fc81 	bl	8000508 <__aeabi_dmul>
 800cc06:	4680      	mov	r8, r0
 800cc08:	4689      	mov	r9, r1
 800cc0a:	e73f      	b.n	800ca8c <expm1+0xc4>
 800cc0c:	a328      	add	r3, pc, #160	@ (adr r3, 800ccb0 <expm1+0x2e8>)
 800cc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc12:	f7f3 fc79 	bl	8000508 <__aeabi_dmul>
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	2c00      	cmp	r4, #0
 800cc1c:	f47f af1c 	bne.w	800ca58 <expm1+0x90>
 800cc20:	e7d2      	b.n	800cbc8 <expm1+0x200>
 800cc22:	4a42      	ldr	r2, [pc, #264]	@ (800cd2c <expm1+0x364>)
 800cc24:	4293      	cmp	r3, r2
 800cc26:	d815      	bhi.n	800cc54 <expm1+0x28c>
 800cc28:	a333      	add	r3, pc, #204	@ (adr r3, 800ccf8 <expm1+0x330>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	f7f3 fab5 	bl	800019c <__adddf3>
 800cc32:	4602      	mov	r2, r0
 800cc34:	460b      	mov	r3, r1
 800cc36:	f7f3 faaf 	bl	8000198 <__aeabi_dsub>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	460b      	mov	r3, r1
 800cc3e:	4650      	mov	r0, sl
 800cc40:	4659      	mov	r1, fp
 800cc42:	f7f3 faa9 	bl	8000198 <__aeabi_dsub>
 800cc46:	4682      	mov	sl, r0
 800cc48:	468b      	mov	fp, r1
 800cc4a:	4650      	mov	r0, sl
 800cc4c:	4659      	mov	r1, fp
 800cc4e:	b005      	add	sp, #20
 800cc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc54:	2400      	movs	r4, #0
 800cc56:	e72d      	b.n	800cab4 <expm1+0xec>
 800cc58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc5c:	f7f3 fa9c 	bl	8000198 <__aeabi_dsub>
 800cc60:	4652      	mov	r2, sl
 800cc62:	465b      	mov	r3, fp
 800cc64:	f7f3 fc50 	bl	8000508 <__aeabi_dmul>
 800cc68:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc6c:	f7f3 fa94 	bl	8000198 <__aeabi_dsub>
 800cc70:	464b      	mov	r3, r9
 800cc72:	4642      	mov	r2, r8
 800cc74:	f7f3 fa90 	bl	8000198 <__aeabi_dsub>
 800cc78:	1c63      	adds	r3, r4, #1
 800cc7a:	4606      	mov	r6, r0
 800cc7c:	460f      	mov	r7, r1
 800cc7e:	d157      	bne.n	800cd30 <expm1+0x368>
 800cc80:	4602      	mov	r2, r0
 800cc82:	460b      	mov	r3, r1
 800cc84:	4650      	mov	r0, sl
 800cc86:	4659      	mov	r1, fp
 800cc88:	f7f3 fa86 	bl	8000198 <__aeabi_dsub>
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	4b23      	ldr	r3, [pc, #140]	@ (800cd1c <expm1+0x354>)
 800cc90:	f7f3 fc3a 	bl	8000508 <__aeabi_dmul>
 800cc94:	2200      	movs	r2, #0
 800cc96:	4b21      	ldr	r3, [pc, #132]	@ (800cd1c <expm1+0x354>)
 800cc98:	e7d3      	b.n	800cc42 <expm1+0x27a>
 800cc9a:	bf00      	nop
 800cc9c:	f3af 8000 	nop.w
 800cca0:	fefa39ef 	.word	0xfefa39ef
 800cca4:	40862e42 	.word	0x40862e42
 800cca8:	c2f8f359 	.word	0xc2f8f359
 800ccac:	01a56e1f 	.word	0x01a56e1f
 800ccb0:	652b82fe 	.word	0x652b82fe
 800ccb4:	3ff71547 	.word	0x3ff71547
 800ccb8:	fee00000 	.word	0xfee00000
 800ccbc:	3fe62e42 	.word	0x3fe62e42
 800ccc0:	35793c76 	.word	0x35793c76
 800ccc4:	3dea39ef 	.word	0x3dea39ef
 800ccc8:	6e09c32d 	.word	0x6e09c32d
 800cccc:	be8afdb7 	.word	0xbe8afdb7
 800ccd0:	86e65239 	.word	0x86e65239
 800ccd4:	3ed0cfca 	.word	0x3ed0cfca
 800ccd8:	9eaadbb7 	.word	0x9eaadbb7
 800ccdc:	3f14ce19 	.word	0x3f14ce19
 800cce0:	19fe5585 	.word	0x19fe5585
 800cce4:	3f5a01a0 	.word	0x3f5a01a0
 800cce8:	111110f4 	.word	0x111110f4
 800ccec:	3fa11111 	.word	0x3fa11111
 800ccf0:	35793c76 	.word	0x35793c76
 800ccf4:	bdea39ef 	.word	0xbdea39ef
 800ccf8:	8800759c 	.word	0x8800759c
 800ccfc:	7e37e43c 	.word	0x7e37e43c
 800cd00:	40436879 	.word	0x40436879
 800cd04:	40862e41 	.word	0x40862e41
 800cd08:	7fefffff 	.word	0x7fefffff
 800cd0c:	bff00000 	.word	0xbff00000
 800cd10:	bfe00000 	.word	0xbfe00000
 800cd14:	3fd62e42 	.word	0x3fd62e42
 800cd18:	3ff0a2b1 	.word	0x3ff0a2b1
 800cd1c:	3fe00000 	.word	0x3fe00000
 800cd20:	3ff00000 	.word	0x3ff00000
 800cd24:	40080000 	.word	0x40080000
 800cd28:	40180000 	.word	0x40180000
 800cd2c:	3c8fffff 	.word	0x3c8fffff
 800cd30:	2c01      	cmp	r4, #1
 800cd32:	d125      	bne.n	800cd80 <expm1+0x3b8>
 800cd34:	2200      	movs	r2, #0
 800cd36:	4650      	mov	r0, sl
 800cd38:	4659      	mov	r1, fp
 800cd3a:	4b32      	ldr	r3, [pc, #200]	@ (800ce04 <expm1+0x43c>)
 800cd3c:	f7f3 fe56 	bl	80009ec <__aeabi_dcmplt>
 800cd40:	b188      	cbz	r0, 800cd66 <expm1+0x39e>
 800cd42:	2200      	movs	r2, #0
 800cd44:	4650      	mov	r0, sl
 800cd46:	4659      	mov	r1, fp
 800cd48:	4b2f      	ldr	r3, [pc, #188]	@ (800ce08 <expm1+0x440>)
 800cd4a:	f7f3 fa27 	bl	800019c <__adddf3>
 800cd4e:	4602      	mov	r2, r0
 800cd50:	460b      	mov	r3, r1
 800cd52:	4630      	mov	r0, r6
 800cd54:	4639      	mov	r1, r7
 800cd56:	f7f3 fa1f 	bl	8000198 <__aeabi_dsub>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800cd60:	f7f3 fbd2 	bl	8000508 <__aeabi_dmul>
 800cd64:	e76f      	b.n	800cc46 <expm1+0x27e>
 800cd66:	4632      	mov	r2, r6
 800cd68:	463b      	mov	r3, r7
 800cd6a:	4650      	mov	r0, sl
 800cd6c:	4659      	mov	r1, fp
 800cd6e:	f7f3 fa13 	bl	8000198 <__aeabi_dsub>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	f7f3 fa11 	bl	800019c <__adddf3>
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	4b23      	ldr	r3, [pc, #140]	@ (800ce0c <expm1+0x444>)
 800cd7e:	e63b      	b.n	800c9f8 <expm1+0x30>
 800cd80:	1c63      	adds	r3, r4, #1
 800cd82:	2b39      	cmp	r3, #57	@ 0x39
 800cd84:	ea4f 5504 	mov.w	r5, r4, lsl #20
 800cd88:	d90e      	bls.n	800cda8 <expm1+0x3e0>
 800cd8a:	4652      	mov	r2, sl
 800cd8c:	465b      	mov	r3, fp
 800cd8e:	f7f3 fa03 	bl	8000198 <__aeabi_dsub>
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	2000      	movs	r0, #0
 800cd98:	491c      	ldr	r1, [pc, #112]	@ (800ce0c <expm1+0x444>)
 800cd9a:	f7f3 f9fd 	bl	8000198 <__aeabi_dsub>
 800cd9e:	186b      	adds	r3, r5, r1
 800cda0:	4619      	mov	r1, r3
 800cda2:	2200      	movs	r2, #0
 800cda4:	4b19      	ldr	r3, [pc, #100]	@ (800ce0c <expm1+0x444>)
 800cda6:	e74c      	b.n	800cc42 <expm1+0x27a>
 800cda8:	2c13      	cmp	r4, #19
 800cdaa:	f04f 0200 	mov.w	r2, #0
 800cdae:	dc17      	bgt.n	800cde0 <expm1+0x418>
 800cdb0:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 800cdb4:	fa46 f404 	asr.w	r4, r6, r4
 800cdb8:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 800cdbc:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 800cdc0:	4616      	mov	r6, r2
 800cdc2:	461f      	mov	r7, r3
 800cdc4:	4652      	mov	r2, sl
 800cdc6:	465b      	mov	r3, fp
 800cdc8:	f7f3 f9e6 	bl	8000198 <__aeabi_dsub>
 800cdcc:	4602      	mov	r2, r0
 800cdce:	460b      	mov	r3, r1
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	4639      	mov	r1, r7
 800cdd4:	f7f3 f9e0 	bl	8000198 <__aeabi_dsub>
 800cdd8:	4682      	mov	sl, r0
 800cdda:	eb05 0b01 	add.w	fp, r5, r1
 800cdde:	e734      	b.n	800cc4a <expm1+0x282>
 800cde0:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 800cde4:	3403      	adds	r4, #3
 800cde6:	0523      	lsls	r3, r4, #20
 800cde8:	f7f3 f9d8 	bl	800019c <__adddf3>
 800cdec:	4602      	mov	r2, r0
 800cdee:	460b      	mov	r3, r1
 800cdf0:	4650      	mov	r0, sl
 800cdf2:	4659      	mov	r1, fp
 800cdf4:	f7f3 f9d0 	bl	8000198 <__aeabi_dsub>
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	4b04      	ldr	r3, [pc, #16]	@ (800ce0c <expm1+0x444>)
 800cdfc:	f7f3 f9ce 	bl	800019c <__adddf3>
 800ce00:	e7ea      	b.n	800cdd8 <expm1+0x410>
 800ce02:	bf00      	nop
 800ce04:	bfd00000 	.word	0xbfd00000
 800ce08:	3fe00000 	.word	0x3fe00000
 800ce0c:	3ff00000 	.word	0x3ff00000

0800ce10 <with_errno>:
 800ce10:	b570      	push	{r4, r5, r6, lr}
 800ce12:	4604      	mov	r4, r0
 800ce14:	460d      	mov	r5, r1
 800ce16:	4616      	mov	r6, r2
 800ce18:	f7fc fa36 	bl	8009288 <__errno>
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	6006      	str	r6, [r0, #0]
 800ce20:	4620      	mov	r0, r4
 800ce22:	bd70      	pop	{r4, r5, r6, pc}

0800ce24 <xflow>:
 800ce24:	b513      	push	{r0, r1, r4, lr}
 800ce26:	4604      	mov	r4, r0
 800ce28:	4619      	mov	r1, r3
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	b10c      	cbz	r4, 800ce32 <xflow+0xe>
 800ce2e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800ce32:	e9cd 2300 	strd	r2, r3, [sp]
 800ce36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce3a:	f7f3 fb65 	bl	8000508 <__aeabi_dmul>
 800ce3e:	2222      	movs	r2, #34	@ 0x22
 800ce40:	b002      	add	sp, #8
 800ce42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce46:	f7ff bfe3 	b.w	800ce10 <with_errno>

0800ce4a <__math_oflow>:
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800ce50:	f7ff bfe8 	b.w	800ce24 <xflow>

0800ce54 <finitef>:
 800ce54:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800ce58:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ce5c:	bfac      	ite	ge
 800ce5e:	2000      	movge	r0, #0
 800ce60:	2001      	movlt	r0, #1
 800ce62:	4770      	bx	lr

0800ce64 <fminf>:
 800ce64:	b538      	push	{r3, r4, r5, lr}
 800ce66:	4604      	mov	r4, r0
 800ce68:	460d      	mov	r5, r1
 800ce6a:	f000 f811 	bl	800ce90 <__fpclassifyf>
 800ce6e:	b910      	cbnz	r0, 800ce76 <fminf+0x12>
 800ce70:	462c      	mov	r4, r5
 800ce72:	4620      	mov	r0, r4
 800ce74:	bd38      	pop	{r3, r4, r5, pc}
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 f80a 	bl	800ce90 <__fpclassifyf>
 800ce7c:	2800      	cmp	r0, #0
 800ce7e:	d0f8      	beq.n	800ce72 <fminf+0xe>
 800ce80:	4629      	mov	r1, r5
 800ce82:	4620      	mov	r0, r4
 800ce84:	f7f4 f934 	bl	80010f0 <__aeabi_fcmplt>
 800ce88:	2800      	cmp	r0, #0
 800ce8a:	d0f1      	beq.n	800ce70 <fminf+0xc>
 800ce8c:	e7f1      	b.n	800ce72 <fminf+0xe>
	...

0800ce90 <__fpclassifyf>:
 800ce90:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800ce94:	d00d      	beq.n	800ceb2 <__fpclassifyf+0x22>
 800ce96:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800ce9a:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800ce9e:	d30a      	bcc.n	800ceb6 <__fpclassifyf+0x26>
 800cea0:	4b07      	ldr	r3, [pc, #28]	@ (800cec0 <__fpclassifyf+0x30>)
 800cea2:	1e42      	subs	r2, r0, #1
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d908      	bls.n	800ceba <__fpclassifyf+0x2a>
 800cea8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800ceac:	4258      	negs	r0, r3
 800ceae:	4158      	adcs	r0, r3
 800ceb0:	4770      	bx	lr
 800ceb2:	2002      	movs	r0, #2
 800ceb4:	4770      	bx	lr
 800ceb6:	2004      	movs	r0, #4
 800ceb8:	4770      	bx	lr
 800ceba:	2003      	movs	r0, #3
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	007ffffe 	.word	0x007ffffe

0800cec4 <fabs>:
 800cec4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cec8:	4619      	mov	r1, r3
 800ceca:	4770      	bx	lr

0800cecc <__ieee754_expf>:
 800cecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ced0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800ced4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800ced8:	4604      	mov	r4, r0
 800ceda:	d904      	bls.n	800cee6 <__ieee754_expf+0x1a>
 800cedc:	4601      	mov	r1, r0
 800cede:	f7f3 fe61 	bl	8000ba4 <__addsf3>
 800cee2:	4604      	mov	r4, r0
 800cee4:	e005      	b.n	800cef2 <__ieee754_expf+0x26>
 800cee6:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800ceea:	d105      	bne.n	800cef8 <__ieee754_expf+0x2c>
 800ceec:	2e00      	cmp	r6, #0
 800ceee:	f040 80c3 	bne.w	800d078 <__ieee754_expf+0x1ac>
 800cef2:	4620      	mov	r0, r4
 800cef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cef8:	4960      	ldr	r1, [pc, #384]	@ (800d07c <__ieee754_expf+0x1b0>)
 800cefa:	4288      	cmp	r0, r1
 800cefc:	dd04      	ble.n	800cf08 <__ieee754_expf+0x3c>
 800cefe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf02:	2000      	movs	r0, #0
 800cf04:	f000 b8f3 	b.w	800d0ee <__math_oflowf>
 800cf08:	2800      	cmp	r0, #0
 800cf0a:	da07      	bge.n	800cf1c <__ieee754_expf+0x50>
 800cf0c:	4a5c      	ldr	r2, [pc, #368]	@ (800d080 <__ieee754_expf+0x1b4>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d904      	bls.n	800cf1c <__ieee754_expf+0x50>
 800cf12:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf16:	2000      	movs	r0, #0
 800cf18:	f000 b8e5 	b.w	800d0e6 <__math_uflowf>
 800cf1c:	4a59      	ldr	r2, [pc, #356]	@ (800d084 <__ieee754_expf+0x1b8>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d971      	bls.n	800d006 <__ieee754_expf+0x13a>
 800cf22:	4a59      	ldr	r2, [pc, #356]	@ (800d088 <__ieee754_expf+0x1bc>)
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d851      	bhi.n	800cfcc <__ieee754_expf+0x100>
 800cf28:	4b58      	ldr	r3, [pc, #352]	@ (800d08c <__ieee754_expf+0x1c0>)
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800cf30:	f7f3 fe36 	bl	8000ba0 <__aeabi_fsub>
 800cf34:	4605      	mov	r5, r0
 800cf36:	4b56      	ldr	r3, [pc, #344]	@ (800d090 <__ieee754_expf+0x1c4>)
 800cf38:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800cf3c:	f086 0301 	eor.w	r3, r6, #1
 800cf40:	eba3 0806 	sub.w	r8, r3, r6
 800cf44:	4639      	mov	r1, r7
 800cf46:	4628      	mov	r0, r5
 800cf48:	f7f3 fe2a 	bl	8000ba0 <__aeabi_fsub>
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4620      	mov	r0, r4
 800cf52:	f7f3 ff2f 	bl	8000db4 <__aeabi_fmul>
 800cf56:	4606      	mov	r6, r0
 800cf58:	494e      	ldr	r1, [pc, #312]	@ (800d094 <__ieee754_expf+0x1c8>)
 800cf5a:	f7f3 ff2b 	bl	8000db4 <__aeabi_fmul>
 800cf5e:	494e      	ldr	r1, [pc, #312]	@ (800d098 <__ieee754_expf+0x1cc>)
 800cf60:	f7f3 fe1e 	bl	8000ba0 <__aeabi_fsub>
 800cf64:	4631      	mov	r1, r6
 800cf66:	f7f3 ff25 	bl	8000db4 <__aeabi_fmul>
 800cf6a:	494c      	ldr	r1, [pc, #304]	@ (800d09c <__ieee754_expf+0x1d0>)
 800cf6c:	f7f3 fe1a 	bl	8000ba4 <__addsf3>
 800cf70:	4631      	mov	r1, r6
 800cf72:	f7f3 ff1f 	bl	8000db4 <__aeabi_fmul>
 800cf76:	494a      	ldr	r1, [pc, #296]	@ (800d0a0 <__ieee754_expf+0x1d4>)
 800cf78:	f7f3 fe12 	bl	8000ba0 <__aeabi_fsub>
 800cf7c:	4631      	mov	r1, r6
 800cf7e:	f7f3 ff19 	bl	8000db4 <__aeabi_fmul>
 800cf82:	4948      	ldr	r1, [pc, #288]	@ (800d0a4 <__ieee754_expf+0x1d8>)
 800cf84:	f7f3 fe0e 	bl	8000ba4 <__addsf3>
 800cf88:	4631      	mov	r1, r6
 800cf8a:	f7f3 ff13 	bl	8000db4 <__aeabi_fmul>
 800cf8e:	4601      	mov	r1, r0
 800cf90:	4620      	mov	r0, r4
 800cf92:	f7f3 fe05 	bl	8000ba0 <__aeabi_fsub>
 800cf96:	4601      	mov	r1, r0
 800cf98:	4606      	mov	r6, r0
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f7f3 ff0a 	bl	8000db4 <__aeabi_fmul>
 800cfa0:	4681      	mov	r9, r0
 800cfa2:	f1b8 0f00 	cmp.w	r8, #0
 800cfa6:	d143      	bne.n	800d030 <__ieee754_expf+0x164>
 800cfa8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800cfac:	4630      	mov	r0, r6
 800cfae:	f7f3 fdf7 	bl	8000ba0 <__aeabi_fsub>
 800cfb2:	4601      	mov	r1, r0
 800cfb4:	4648      	mov	r0, r9
 800cfb6:	f7f3 ffb1 	bl	8000f1c <__aeabi_fdiv>
 800cfba:	4621      	mov	r1, r4
 800cfbc:	f7f3 fdf0 	bl	8000ba0 <__aeabi_fsub>
 800cfc0:	4601      	mov	r1, r0
 800cfc2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800cfc6:	f7f3 fdeb 	bl	8000ba0 <__aeabi_fsub>
 800cfca:	e78a      	b.n	800cee2 <__ieee754_expf+0x16>
 800cfcc:	4936      	ldr	r1, [pc, #216]	@ (800d0a8 <__ieee754_expf+0x1dc>)
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f7f3 fef0 	bl	8000db4 <__aeabi_fmul>
 800cfd4:	4b35      	ldr	r3, [pc, #212]	@ (800d0ac <__ieee754_expf+0x1e0>)
 800cfd6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800cfda:	f7f3 fde3 	bl	8000ba4 <__addsf3>
 800cfde:	f7f4 f8af 	bl	8001140 <__aeabi_f2iz>
 800cfe2:	4680      	mov	r8, r0
 800cfe4:	f7f3 fe92 	bl	8000d0c <__aeabi_i2f>
 800cfe8:	4931      	ldr	r1, [pc, #196]	@ (800d0b0 <__ieee754_expf+0x1e4>)
 800cfea:	4606      	mov	r6, r0
 800cfec:	f7f3 fee2 	bl	8000db4 <__aeabi_fmul>
 800cff0:	4601      	mov	r1, r0
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7f3 fdd4 	bl	8000ba0 <__aeabi_fsub>
 800cff8:	492e      	ldr	r1, [pc, #184]	@ (800d0b4 <__ieee754_expf+0x1e8>)
 800cffa:	4605      	mov	r5, r0
 800cffc:	4630      	mov	r0, r6
 800cffe:	f7f3 fed9 	bl	8000db4 <__aeabi_fmul>
 800d002:	4607      	mov	r7, r0
 800d004:	e79e      	b.n	800cf44 <__ieee754_expf+0x78>
 800d006:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800d00a:	d20c      	bcs.n	800d026 <__ieee754_expf+0x15a>
 800d00c:	492a      	ldr	r1, [pc, #168]	@ (800d0b8 <__ieee754_expf+0x1ec>)
 800d00e:	4620      	mov	r0, r4
 800d010:	f7f3 fdc8 	bl	8000ba4 <__addsf3>
 800d014:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d018:	f7f4 f888 	bl	800112c <__aeabi_fcmpgt>
 800d01c:	b130      	cbz	r0, 800d02c <__ieee754_expf+0x160>
 800d01e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d022:	4620      	mov	r0, r4
 800d024:	e75b      	b.n	800cede <__ieee754_expf+0x12>
 800d026:	f04f 0800 	mov.w	r8, #0
 800d02a:	e790      	b.n	800cf4e <__ieee754_expf+0x82>
 800d02c:	4680      	mov	r8, r0
 800d02e:	e78e      	b.n	800cf4e <__ieee754_expf+0x82>
 800d030:	4631      	mov	r1, r6
 800d032:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800d036:	f7f3 fdb3 	bl	8000ba0 <__aeabi_fsub>
 800d03a:	4601      	mov	r1, r0
 800d03c:	4648      	mov	r0, r9
 800d03e:	f7f3 ff6d 	bl	8000f1c <__aeabi_fdiv>
 800d042:	4601      	mov	r1, r0
 800d044:	4638      	mov	r0, r7
 800d046:	f7f3 fdab 	bl	8000ba0 <__aeabi_fsub>
 800d04a:	4629      	mov	r1, r5
 800d04c:	f7f3 fda8 	bl	8000ba0 <__aeabi_fsub>
 800d050:	4601      	mov	r1, r0
 800d052:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800d056:	f7f3 fda3 	bl	8000ba0 <__aeabi_fsub>
 800d05a:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800d05e:	db02      	blt.n	800d066 <__ieee754_expf+0x19a>
 800d060:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800d064:	e745      	b.n	800cef2 <__ieee754_expf+0x26>
 800d066:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800d06a:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800d06e:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800d072:	f7f3 fe9f 	bl	8000db4 <__aeabi_fmul>
 800d076:	e734      	b.n	800cee2 <__ieee754_expf+0x16>
 800d078:	2400      	movs	r4, #0
 800d07a:	e73a      	b.n	800cef2 <__ieee754_expf+0x26>
 800d07c:	42b17217 	.word	0x42b17217
 800d080:	42cff1b5 	.word	0x42cff1b5
 800d084:	3eb17218 	.word	0x3eb17218
 800d088:	3f851591 	.word	0x3f851591
 800d08c:	0800e4a8 	.word	0x0800e4a8
 800d090:	0800e4a0 	.word	0x0800e4a0
 800d094:	3331bb4c 	.word	0x3331bb4c
 800d098:	35ddea0e 	.word	0x35ddea0e
 800d09c:	388ab355 	.word	0x388ab355
 800d0a0:	3b360b61 	.word	0x3b360b61
 800d0a4:	3e2aaaab 	.word	0x3e2aaaab
 800d0a8:	3fb8aa3b 	.word	0x3fb8aa3b
 800d0ac:	0800e4b0 	.word	0x0800e4b0
 800d0b0:	3f317180 	.word	0x3f317180
 800d0b4:	3717f7d1 	.word	0x3717f7d1
 800d0b8:	7149f2ca 	.word	0x7149f2ca

0800d0bc <with_errnof>:
 800d0bc:	b538      	push	{r3, r4, r5, lr}
 800d0be:	4604      	mov	r4, r0
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	f7fc f8e1 	bl	8009288 <__errno>
 800d0c6:	6005      	str	r5, [r0, #0]
 800d0c8:	4620      	mov	r0, r4
 800d0ca:	bd38      	pop	{r3, r4, r5, pc}

0800d0cc <xflowf>:
 800d0cc:	b508      	push	{r3, lr}
 800d0ce:	b140      	cbz	r0, 800d0e2 <xflowf+0x16>
 800d0d0:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800d0d4:	f7f3 fe6e 	bl	8000db4 <__aeabi_fmul>
 800d0d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d0dc:	2122      	movs	r1, #34	@ 0x22
 800d0de:	f7ff bfed 	b.w	800d0bc <with_errnof>
 800d0e2:	4608      	mov	r0, r1
 800d0e4:	e7f6      	b.n	800d0d4 <xflowf+0x8>

0800d0e6 <__math_uflowf>:
 800d0e6:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800d0ea:	f7ff bfef 	b.w	800d0cc <xflowf>

0800d0ee <__math_oflowf>:
 800d0ee:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800d0f2:	f7ff bfeb 	b.w	800d0cc <xflowf>
	...

0800d0f8 <_init>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	bf00      	nop
 800d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fe:	bc08      	pop	{r3}
 800d100:	469e      	mov	lr, r3
 800d102:	4770      	bx	lr

0800d104 <_fini>:
 800d104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d106:	bf00      	nop
 800d108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d10a:	bc08      	pop	{r3}
 800d10c:	469e      	mov	lr, r3
 800d10e:	4770      	bx	lr
