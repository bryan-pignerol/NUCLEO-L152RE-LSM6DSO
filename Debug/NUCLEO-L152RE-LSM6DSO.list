
NUCLEO-L152RE-LSM6DSO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5f8  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001330  0800b738  0800b738  0000c738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca68  0800ca68  0000e1ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ca68  0800ca68  0000da68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca70  0800ca70  0000e1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca70  0800ca70  0000da70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ca74  0800ca74  0000da74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800ca78  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000109c  200001ec  0800cc64  0000e1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  0800cc64  0000e288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001621f  00000000  00000000  0000e215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b79  00000000  00000000  00024434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  00025fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fb4  00000000  00000000  000273e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175f8  00000000  00000000  0002839c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001237a  00000000  00000000  0003f994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d64  00000000  00000000  00051d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  000e3a72  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071f4  00000000  00000000  000e3afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000eacf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001ec 	.word	0x200001ec
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b720 	.word	0x0800b720

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001f0 	.word	0x200001f0
 800017c:	0800b720 	.word	0x0800b720

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	@ 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000e06:	2afd      	cmp	r2, #253	@ 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	@ 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	@ 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	@ 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2iz>:
 8001140:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001148:	d30f      	bcc.n	800116a <__aeabi_f2iz+0x2a>
 800114a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d90d      	bls.n	8001170 <__aeabi_f2iz+0x30>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800115c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001160:	fa23 f002 	lsr.w	r0, r3, r2
 8001164:	bf18      	it	ne
 8001166:	4240      	negne	r0, r0
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2iz+0x3a>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d105      	bne.n	8001186 <__aeabi_f2iz+0x46>
 800117a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	bf08      	it	eq
 8001180:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001184:	4770      	bx	lr
 8001186:	f04f 0000 	mov.w	r0, #0
 800118a:	4770      	bx	lr

0800118c <__aeabi_uldivmod>:
 800118c:	b953      	cbnz	r3, 80011a4 <__aeabi_uldivmod+0x18>
 800118e:	b94a      	cbnz	r2, 80011a4 <__aeabi_uldivmod+0x18>
 8001190:	2900      	cmp	r1, #0
 8001192:	bf08      	it	eq
 8001194:	2800      	cmpeq	r0, #0
 8001196:	bf1c      	itt	ne
 8001198:	f04f 31ff 	movne.w	r1, #4294967295
 800119c:	f04f 30ff 	movne.w	r0, #4294967295
 80011a0:	f000 b9c2 	b.w	8001528 <__aeabi_idiv0>
 80011a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80011a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011ac:	f000 f83c 	bl	8001228 <__udivmoddi4>
 80011b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011b8:	b004      	add	sp, #16
 80011ba:	4770      	bx	lr

080011bc <__aeabi_d2lz>:
 80011bc:	b538      	push	{r3, r4, r5, lr}
 80011be:	2200      	movs	r2, #0
 80011c0:	2300      	movs	r3, #0
 80011c2:	4604      	mov	r4, r0
 80011c4:	460d      	mov	r5, r1
 80011c6:	f7ff fc11 	bl	80009ec <__aeabi_dcmplt>
 80011ca:	b928      	cbnz	r0, 80011d8 <__aeabi_d2lz+0x1c>
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80011d4:	f000 b80a 	b.w	80011ec <__aeabi_d2ulz>
 80011d8:	4620      	mov	r0, r4
 80011da:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80011de:	f000 f805 	bl	80011ec <__aeabi_d2ulz>
 80011e2:	4240      	negs	r0, r0
 80011e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80011e8:	bd38      	pop	{r3, r4, r5, pc}
 80011ea:	bf00      	nop

080011ec <__aeabi_d2ulz>:
 80011ec:	b5d0      	push	{r4, r6, r7, lr}
 80011ee:	2200      	movs	r2, #0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001220 <__aeabi_d2ulz+0x34>)
 80011f2:	4606      	mov	r6, r0
 80011f4:	460f      	mov	r7, r1
 80011f6:	f7ff f987 	bl	8000508 <__aeabi_dmul>
 80011fa:	f7ff fc5d 	bl	8000ab8 <__aeabi_d2uiz>
 80011fe:	4604      	mov	r4, r0
 8001200:	f7ff f908 	bl	8000414 <__aeabi_ui2d>
 8001204:	2200      	movs	r2, #0
 8001206:	4b07      	ldr	r3, [pc, #28]	@ (8001224 <__aeabi_d2ulz+0x38>)
 8001208:	f7ff f97e 	bl	8000508 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4630      	mov	r0, r6
 8001212:	4639      	mov	r1, r7
 8001214:	f7fe ffc0 	bl	8000198 <__aeabi_dsub>
 8001218:	f7ff fc4e 	bl	8000ab8 <__aeabi_d2uiz>
 800121c:	4621      	mov	r1, r4
 800121e:	bdd0      	pop	{r4, r6, r7, pc}
 8001220:	3df00000 	.word	0x3df00000
 8001224:	41f00000 	.word	0x41f00000

08001228 <__udivmoddi4>:
 8001228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800122c:	9d08      	ldr	r5, [sp, #32]
 800122e:	468e      	mov	lr, r1
 8001230:	4604      	mov	r4, r0
 8001232:	4688      	mov	r8, r1
 8001234:	2b00      	cmp	r3, #0
 8001236:	d14a      	bne.n	80012ce <__udivmoddi4+0xa6>
 8001238:	428a      	cmp	r2, r1
 800123a:	4617      	mov	r7, r2
 800123c:	d962      	bls.n	8001304 <__udivmoddi4+0xdc>
 800123e:	fab2 f682 	clz	r6, r2
 8001242:	b14e      	cbz	r6, 8001258 <__udivmoddi4+0x30>
 8001244:	f1c6 0320 	rsb	r3, r6, #32
 8001248:	fa01 f806 	lsl.w	r8, r1, r6
 800124c:	fa20 f303 	lsr.w	r3, r0, r3
 8001250:	40b7      	lsls	r7, r6
 8001252:	ea43 0808 	orr.w	r8, r3, r8
 8001256:	40b4      	lsls	r4, r6
 8001258:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800125c:	fbb8 f1fe 	udiv	r1, r8, lr
 8001260:	fa1f fc87 	uxth.w	ip, r7
 8001264:	fb0e 8811 	mls	r8, lr, r1, r8
 8001268:	fb01 f20c 	mul.w	r2, r1, ip
 800126c:	0c23      	lsrs	r3, r4, #16
 800126e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001272:	429a      	cmp	r2, r3
 8001274:	d909      	bls.n	800128a <__udivmoddi4+0x62>
 8001276:	18fb      	adds	r3, r7, r3
 8001278:	f101 30ff 	add.w	r0, r1, #4294967295
 800127c:	f080 80eb 	bcs.w	8001456 <__udivmoddi4+0x22e>
 8001280:	429a      	cmp	r2, r3
 8001282:	f240 80e8 	bls.w	8001456 <__udivmoddi4+0x22e>
 8001286:	3902      	subs	r1, #2
 8001288:	443b      	add	r3, r7
 800128a:	1a9a      	subs	r2, r3, r2
 800128c:	fbb2 f0fe 	udiv	r0, r2, lr
 8001290:	fb0e 2210 	mls	r2, lr, r0, r2
 8001294:	fb00 fc0c 	mul.w	ip, r0, ip
 8001298:	b2a3      	uxth	r3, r4
 800129a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800129e:	459c      	cmp	ip, r3
 80012a0:	d909      	bls.n	80012b6 <__udivmoddi4+0x8e>
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80012a8:	f080 80d7 	bcs.w	800145a <__udivmoddi4+0x232>
 80012ac:	459c      	cmp	ip, r3
 80012ae:	f240 80d4 	bls.w	800145a <__udivmoddi4+0x232>
 80012b2:	443b      	add	r3, r7
 80012b4:	3802      	subs	r0, #2
 80012b6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80012ba:	2100      	movs	r1, #0
 80012bc:	eba3 030c 	sub.w	r3, r3, ip
 80012c0:	b11d      	cbz	r5, 80012ca <__udivmoddi4+0xa2>
 80012c2:	2200      	movs	r2, #0
 80012c4:	40f3      	lsrs	r3, r6
 80012c6:	e9c5 3200 	strd	r3, r2, [r5]
 80012ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ce:	428b      	cmp	r3, r1
 80012d0:	d905      	bls.n	80012de <__udivmoddi4+0xb6>
 80012d2:	b10d      	cbz	r5, 80012d8 <__udivmoddi4+0xb0>
 80012d4:	e9c5 0100 	strd	r0, r1, [r5]
 80012d8:	2100      	movs	r1, #0
 80012da:	4608      	mov	r0, r1
 80012dc:	e7f5      	b.n	80012ca <__udivmoddi4+0xa2>
 80012de:	fab3 f183 	clz	r1, r3
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d146      	bne.n	8001374 <__udivmoddi4+0x14c>
 80012e6:	4573      	cmp	r3, lr
 80012e8:	d302      	bcc.n	80012f0 <__udivmoddi4+0xc8>
 80012ea:	4282      	cmp	r2, r0
 80012ec:	f200 8108 	bhi.w	8001500 <__udivmoddi4+0x2d8>
 80012f0:	1a84      	subs	r4, r0, r2
 80012f2:	eb6e 0203 	sbc.w	r2, lr, r3
 80012f6:	2001      	movs	r0, #1
 80012f8:	4690      	mov	r8, r2
 80012fa:	2d00      	cmp	r5, #0
 80012fc:	d0e5      	beq.n	80012ca <__udivmoddi4+0xa2>
 80012fe:	e9c5 4800 	strd	r4, r8, [r5]
 8001302:	e7e2      	b.n	80012ca <__udivmoddi4+0xa2>
 8001304:	2a00      	cmp	r2, #0
 8001306:	f000 8091 	beq.w	800142c <__udivmoddi4+0x204>
 800130a:	fab2 f682 	clz	r6, r2
 800130e:	2e00      	cmp	r6, #0
 8001310:	f040 80a5 	bne.w	800145e <__udivmoddi4+0x236>
 8001314:	1a8a      	subs	r2, r1, r2
 8001316:	2101      	movs	r1, #1
 8001318:	0c03      	lsrs	r3, r0, #16
 800131a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800131e:	b280      	uxth	r0, r0
 8001320:	b2bc      	uxth	r4, r7
 8001322:	fbb2 fcfe 	udiv	ip, r2, lr
 8001326:	fb0e 221c 	mls	r2, lr, ip, r2
 800132a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800132e:	fb04 f20c 	mul.w	r2, r4, ip
 8001332:	429a      	cmp	r2, r3
 8001334:	d907      	bls.n	8001346 <__udivmoddi4+0x11e>
 8001336:	18fb      	adds	r3, r7, r3
 8001338:	f10c 38ff 	add.w	r8, ip, #4294967295
 800133c:	d202      	bcs.n	8001344 <__udivmoddi4+0x11c>
 800133e:	429a      	cmp	r2, r3
 8001340:	f200 80e3 	bhi.w	800150a <__udivmoddi4+0x2e2>
 8001344:	46c4      	mov	ip, r8
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	fbb3 f2fe 	udiv	r2, r3, lr
 800134c:	fb0e 3312 	mls	r3, lr, r2, r3
 8001350:	fb02 f404 	mul.w	r4, r2, r4
 8001354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001358:	429c      	cmp	r4, r3
 800135a:	d907      	bls.n	800136c <__udivmoddi4+0x144>
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	f102 30ff 	add.w	r0, r2, #4294967295
 8001362:	d202      	bcs.n	800136a <__udivmoddi4+0x142>
 8001364:	429c      	cmp	r4, r3
 8001366:	f200 80cd 	bhi.w	8001504 <__udivmoddi4+0x2dc>
 800136a:	4602      	mov	r2, r0
 800136c:	1b1b      	subs	r3, r3, r4
 800136e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8001372:	e7a5      	b.n	80012c0 <__udivmoddi4+0x98>
 8001374:	f1c1 0620 	rsb	r6, r1, #32
 8001378:	408b      	lsls	r3, r1
 800137a:	fa22 f706 	lsr.w	r7, r2, r6
 800137e:	431f      	orrs	r7, r3
 8001380:	fa2e fa06 	lsr.w	sl, lr, r6
 8001384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001388:	fbba f8f9 	udiv	r8, sl, r9
 800138c:	fa0e fe01 	lsl.w	lr, lr, r1
 8001390:	fa20 f306 	lsr.w	r3, r0, r6
 8001394:	fb09 aa18 	mls	sl, r9, r8, sl
 8001398:	fa1f fc87 	uxth.w	ip, r7
 800139c:	ea43 030e 	orr.w	r3, r3, lr
 80013a0:	fa00 fe01 	lsl.w	lr, r0, r1
 80013a4:	fb08 f00c 	mul.w	r0, r8, ip
 80013a8:	0c1c      	lsrs	r4, r3, #16
 80013aa:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80013ae:	42a0      	cmp	r0, r4
 80013b0:	fa02 f201 	lsl.w	r2, r2, r1
 80013b4:	d90a      	bls.n	80013cc <__udivmoddi4+0x1a4>
 80013b6:	193c      	adds	r4, r7, r4
 80013b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80013bc:	f080 809e 	bcs.w	80014fc <__udivmoddi4+0x2d4>
 80013c0:	42a0      	cmp	r0, r4
 80013c2:	f240 809b 	bls.w	80014fc <__udivmoddi4+0x2d4>
 80013c6:	f1a8 0802 	sub.w	r8, r8, #2
 80013ca:	443c      	add	r4, r7
 80013cc:	1a24      	subs	r4, r4, r0
 80013ce:	b298      	uxth	r0, r3
 80013d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80013d4:	fb09 4413 	mls	r4, r9, r3, r4
 80013d8:	fb03 fc0c 	mul.w	ip, r3, ip
 80013dc:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80013e0:	45a4      	cmp	ip, r4
 80013e2:	d909      	bls.n	80013f8 <__udivmoddi4+0x1d0>
 80013e4:	193c      	adds	r4, r7, r4
 80013e6:	f103 30ff 	add.w	r0, r3, #4294967295
 80013ea:	f080 8085 	bcs.w	80014f8 <__udivmoddi4+0x2d0>
 80013ee:	45a4      	cmp	ip, r4
 80013f0:	f240 8082 	bls.w	80014f8 <__udivmoddi4+0x2d0>
 80013f4:	3b02      	subs	r3, #2
 80013f6:	443c      	add	r4, r7
 80013f8:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80013fc:	eba4 040c 	sub.w	r4, r4, ip
 8001400:	fba0 8c02 	umull	r8, ip, r0, r2
 8001404:	4564      	cmp	r4, ip
 8001406:	4643      	mov	r3, r8
 8001408:	46e1      	mov	r9, ip
 800140a:	d364      	bcc.n	80014d6 <__udivmoddi4+0x2ae>
 800140c:	d061      	beq.n	80014d2 <__udivmoddi4+0x2aa>
 800140e:	b15d      	cbz	r5, 8001428 <__udivmoddi4+0x200>
 8001410:	ebbe 0203 	subs.w	r2, lr, r3
 8001414:	eb64 0409 	sbc.w	r4, r4, r9
 8001418:	fa04 f606 	lsl.w	r6, r4, r6
 800141c:	fa22 f301 	lsr.w	r3, r2, r1
 8001420:	431e      	orrs	r6, r3
 8001422:	40cc      	lsrs	r4, r1
 8001424:	e9c5 6400 	strd	r6, r4, [r5]
 8001428:	2100      	movs	r1, #0
 800142a:	e74e      	b.n	80012ca <__udivmoddi4+0xa2>
 800142c:	fbb1 fcf2 	udiv	ip, r1, r2
 8001430:	0c01      	lsrs	r1, r0, #16
 8001432:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001436:	b280      	uxth	r0, r0
 8001438:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800143c:	463b      	mov	r3, r7
 800143e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001442:	4638      	mov	r0, r7
 8001444:	463c      	mov	r4, r7
 8001446:	46b8      	mov	r8, r7
 8001448:	46be      	mov	lr, r7
 800144a:	2620      	movs	r6, #32
 800144c:	eba2 0208 	sub.w	r2, r2, r8
 8001450:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001454:	e765      	b.n	8001322 <__udivmoddi4+0xfa>
 8001456:	4601      	mov	r1, r0
 8001458:	e717      	b.n	800128a <__udivmoddi4+0x62>
 800145a:	4610      	mov	r0, r2
 800145c:	e72b      	b.n	80012b6 <__udivmoddi4+0x8e>
 800145e:	f1c6 0120 	rsb	r1, r6, #32
 8001462:	fa2e fc01 	lsr.w	ip, lr, r1
 8001466:	40b7      	lsls	r7, r6
 8001468:	fa0e fe06 	lsl.w	lr, lr, r6
 800146c:	fa20 f101 	lsr.w	r1, r0, r1
 8001470:	ea41 010e 	orr.w	r1, r1, lr
 8001474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001478:	fbbc f8fe 	udiv	r8, ip, lr
 800147c:	b2bc      	uxth	r4, r7
 800147e:	fb0e cc18 	mls	ip, lr, r8, ip
 8001482:	fb08 f904 	mul.w	r9, r8, r4
 8001486:	0c0a      	lsrs	r2, r1, #16
 8001488:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800148c:	40b0      	lsls	r0, r6
 800148e:	4591      	cmp	r9, r2
 8001490:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001494:	b280      	uxth	r0, r0
 8001496:	d93e      	bls.n	8001516 <__udivmoddi4+0x2ee>
 8001498:	18ba      	adds	r2, r7, r2
 800149a:	f108 3cff 	add.w	ip, r8, #4294967295
 800149e:	d201      	bcs.n	80014a4 <__udivmoddi4+0x27c>
 80014a0:	4591      	cmp	r9, r2
 80014a2:	d81f      	bhi.n	80014e4 <__udivmoddi4+0x2bc>
 80014a4:	eba2 0209 	sub.w	r2, r2, r9
 80014a8:	fbb2 f9fe 	udiv	r9, r2, lr
 80014ac:	fb09 f804 	mul.w	r8, r9, r4
 80014b0:	fb0e 2a19 	mls	sl, lr, r9, r2
 80014b4:	b28a      	uxth	r2, r1
 80014b6:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 80014ba:	4542      	cmp	r2, r8
 80014bc:	d229      	bcs.n	8001512 <__udivmoddi4+0x2ea>
 80014be:	18ba      	adds	r2, r7, r2
 80014c0:	f109 31ff 	add.w	r1, r9, #4294967295
 80014c4:	d2c2      	bcs.n	800144c <__udivmoddi4+0x224>
 80014c6:	4542      	cmp	r2, r8
 80014c8:	d2c0      	bcs.n	800144c <__udivmoddi4+0x224>
 80014ca:	f1a9 0102 	sub.w	r1, r9, #2
 80014ce:	443a      	add	r2, r7
 80014d0:	e7bc      	b.n	800144c <__udivmoddi4+0x224>
 80014d2:	45c6      	cmp	lr, r8
 80014d4:	d29b      	bcs.n	800140e <__udivmoddi4+0x1e6>
 80014d6:	ebb8 0302 	subs.w	r3, r8, r2
 80014da:	eb6c 0c07 	sbc.w	ip, ip, r7
 80014de:	3801      	subs	r0, #1
 80014e0:	46e1      	mov	r9, ip
 80014e2:	e794      	b.n	800140e <__udivmoddi4+0x1e6>
 80014e4:	eba7 0909 	sub.w	r9, r7, r9
 80014e8:	444a      	add	r2, r9
 80014ea:	fbb2 f9fe 	udiv	r9, r2, lr
 80014ee:	f1a8 0c02 	sub.w	ip, r8, #2
 80014f2:	fb09 f804 	mul.w	r8, r9, r4
 80014f6:	e7db      	b.n	80014b0 <__udivmoddi4+0x288>
 80014f8:	4603      	mov	r3, r0
 80014fa:	e77d      	b.n	80013f8 <__udivmoddi4+0x1d0>
 80014fc:	46d0      	mov	r8, sl
 80014fe:	e765      	b.n	80013cc <__udivmoddi4+0x1a4>
 8001500:	4608      	mov	r0, r1
 8001502:	e6fa      	b.n	80012fa <__udivmoddi4+0xd2>
 8001504:	443b      	add	r3, r7
 8001506:	3a02      	subs	r2, #2
 8001508:	e730      	b.n	800136c <__udivmoddi4+0x144>
 800150a:	f1ac 0c02 	sub.w	ip, ip, #2
 800150e:	443b      	add	r3, r7
 8001510:	e719      	b.n	8001346 <__udivmoddi4+0x11e>
 8001512:	4649      	mov	r1, r9
 8001514:	e79a      	b.n	800144c <__udivmoddi4+0x224>
 8001516:	eba2 0209 	sub.w	r2, r2, r9
 800151a:	fbb2 f9fe 	udiv	r9, r2, lr
 800151e:	46c4      	mov	ip, r8
 8001520:	fb09 f804 	mul.w	r8, r9, r4
 8001524:	e7c4      	b.n	80014b0 <__udivmoddi4+0x288>
 8001526:	bf00      	nop

08001528 <__aeabi_idiv0>:
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 8001532:	4b41      	ldr	r3, [pc, #260]	@ (8001638 <main+0x10c>)
 8001534:	4a41      	ldr	r2, [pc, #260]	@ (800163c <main+0x110>)
 8001536:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001538:	4b3f      	ldr	r3, [pc, #252]	@ (8001638 <main+0x10c>)
 800153a:	4a41      	ldr	r2, [pc, #260]	@ (8001640 <main+0x114>)
 800153c:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &hi2c1;
 800153e:	4b3e      	ldr	r3, [pc, #248]	@ (8001638 <main+0x10c>)
 8001540:	4a40      	ldr	r2, [pc, #256]	@ (8001644 <main+0x118>)
 8001542:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001544:	f000 fcc1 	bl	8001eca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001548:	f000 f894 	bl	8001674 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  iks01a3_i2c_stuck_quirk();
 800154c:	f000 fa90 	bl	8001a70 <iks01a3_i2c_stuck_quirk>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001550:	f000 f936 	bl	80017c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001554:	f000 f8dc 	bl	8001710 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001558:	f000 f908 	bl	800176c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lsm6dso_initialize();
 800155c:	f000 fa06 	bl	800196c <lsm6dso_initialize>
  if (NEAI_MODE) {
    neai_state = neai_classification_init(knowledge);
 8001560:	4839      	ldr	r0, [pc, #228]	@ (8001648 <main+0x11c>)
 8001562:	f004 f9c1 	bl	80058e8 <neai_classification_init>
 8001566:	4603      	mov	r3, r0
 8001568:	461a      	mov	r2, r3
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <main+0x120>)
 800156c:	701a      	strb	r2, [r3, #0]
    printf("Initialize NEAI library. NEAI init return: %d.\n",  neai_state);
 800156e:	4b37      	ldr	r3, [pc, #220]	@ (800164c <main+0x120>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4619      	mov	r1, r3
 8001574:	4836      	ldr	r0, [pc, #216]	@ (8001650 <main+0x124>)
 8001576:	f005 ffdf 	bl	8007538 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (drdy) {
 800157a:	4b36      	ldr	r3, [pc, #216]	@ (8001654 <main+0x128>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0fa      	beq.n	800157a <main+0x4e>
		  /* Reset data ready condition */
		  drdy = 0;
 8001584:	4b33      	ldr	r3, [pc, #204]	@ (8001654 <main+0x128>)
 8001586:	2200      	movs	r2, #0
 8001588:	701a      	strb	r2, [r3, #0]
		  /* Read acceleration data */
		  memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 800158a:	2206      	movs	r2, #6
 800158c:	2100      	movs	r1, #0
 800158e:	4832      	ldr	r0, [pc, #200]	@ (8001658 <main+0x12c>)
 8001590:	f006 f93c 	bl	800780c <memset>
		  lsm6dso_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001594:	4930      	ldr	r1, [pc, #192]	@ (8001658 <main+0x12c>)
 8001596:	4828      	ldr	r0, [pc, #160]	@ (8001638 <main+0x10c>)
 8001598:	f003 f9fc 	bl	8004994 <lsm6dso_acceleration_raw_get>
		  for (uint8_t i = 0; i < AXIS; i++) {
 800159c:	2300      	movs	r3, #0
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	e015      	b.n	80015ce <main+0xa2>
			  neai_buffer[(AXIS * drdy_counter) + i] = lsm6dso_convert_accel_data_to_mg(data_raw_acceleration[i]);
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001658 <main+0x12c>)
 80015a6:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80015aa:	4b2c      	ldr	r3, [pc, #176]	@ (800165c <main+0x130>)
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	441a      	add	r2, r3
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	18d4      	adds	r4, r2, r3
 80015ba:	4608      	mov	r0, r1
 80015bc:	f000 fa44 	bl	8001a48 <lsm6dso_convert_accel_data_to_mg>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a27      	ldr	r2, [pc, #156]	@ (8001660 <main+0x134>)
 80015c4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		  for (uint8_t i = 0; i < AXIS; i++) {
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	3301      	adds	r3, #1
 80015cc:	71fb      	strb	r3, [r7, #7]
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d9e6      	bls.n	80015a2 <main+0x76>
		  }
		  drdy_counter++;
 80015d4:	4b21      	ldr	r3, [pc, #132]	@ (800165c <main+0x130>)
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	4b1f      	ldr	r3, [pc, #124]	@ (800165c <main+0x130>)
 80015de:	801a      	strh	r2, [r3, #0]
		  if (drdy_counter >= SAMPLES) {
 80015e0:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <main+0x130>)
 80015e2:	881b      	ldrh	r3, [r3, #0]
 80015e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80015e6:	d9c8      	bls.n	800157a <main+0x4e>
			  /* Set Output Data Rate */
			  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_OFF);
 80015e8:	2100      	movs	r1, #0
 80015ea:	4813      	ldr	r0, [pc, #76]	@ (8001638 <main+0x10c>)
 80015ec:	f003 f8d8 	bl	80047a0 <lsm6dso_xl_data_rate_set>
#if (NEAI_MODE)
			  neai_state = neai_classification(neai_buffer, class_output_buffer, &id_class);
 80015f0:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <main+0x138>)
 80015f2:	491d      	ldr	r1, [pc, #116]	@ (8001668 <main+0x13c>)
 80015f4:	481a      	ldr	r0, [pc, #104]	@ (8001660 <main+0x134>)
 80015f6:	f004 fa49 	bl	8005a8c <neai_classification>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	4b13      	ldr	r3, [pc, #76]	@ (800164c <main+0x120>)
 8001600:	701a      	strb	r2, [r3, #0]
			  printf("Class: %s. NEAI classification return: %d.\r\n", id2class[id_class], neai_state);
 8001602:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <main+0x138>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <main+0x140>)
 800160a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800160e:	4a0f      	ldr	r2, [pc, #60]	@ (800164c <main+0x120>)
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	4619      	mov	r1, r3
 8001614:	4816      	ldr	r0, [pc, #88]	@ (8001670 <main+0x144>)
 8001616:	f005 ff8f 	bl	8007538 <iprintf>
				  printf("%.3f ", neai_buffer[i]);
			  }
			  printf("\r\n");
#endif
			  /* Reset drdy_counter in order to get a new buffer */
			  drdy_counter = 0;
 800161a:	4b10      	ldr	r3, [pc, #64]	@ (800165c <main+0x130>)
 800161c:	2200      	movs	r2, #0
 800161e:	801a      	strh	r2, [r3, #0]
			  /* Clean neai buffer */
			  memset(neai_buffer, 0x00, AXIS * SAMPLES * sizeof(float));
 8001620:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8001624:	2100      	movs	r1, #0
 8001626:	480e      	ldr	r0, [pc, #56]	@ (8001660 <main+0x134>)
 8001628:	f006 f8f0 	bl	800780c <memset>
			  /* Set Output Data Rate */
			  lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 800162c:	2106      	movs	r1, #6
 800162e:	4802      	ldr	r0, [pc, #8]	@ (8001638 <main+0x10c>)
 8001630:	f003 f8b6 	bl	80047a0 <lsm6dso_xl_data_rate_set>
	  if (drdy) {
 8001634:	e7a1      	b.n	800157a <main+0x4e>
 8001636:	bf00      	nop
 8001638:	200008b4 	.word	0x200008b4
 800163c:	080018f9 	.word	0x080018f9
 8001640:	08001933 	.word	0x08001933
 8001644:	20000208 	.word	0x20000208
 8001648:	0800b7f8 	.word	0x0800b7f8
 800164c:	200002ac 	.word	0x200002ac
 8001650:	0800b76c 	.word	0x0800b76c
 8001654:	200002b0 	.word	0x200002b0
 8001658:	200002a4 	.word	0x200002a4
 800165c:	200002b2 	.word	0x200002b2
 8001660:	200002b4 	.word	0x200002b4
 8001664:	200002ae 	.word	0x200002ae
 8001668:	200008c4 	.word	0x200008c4
 800166c:	20000000 	.word	0x20000000
 8001670:	0800b79c 	.word	0x0800b79c

08001674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b092      	sub	sp, #72	@ 0x48
 8001678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	2234      	movs	r2, #52	@ 0x34
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 f8c2 	bl	800780c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001688:	463b      	mov	r3, r7
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
 8001692:	60da      	str	r2, [r3, #12]
 8001694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001696:	4b1d      	ldr	r3, [pc, #116]	@ (800170c <SystemClock_Config+0x98>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 800169e:	4a1b      	ldr	r2, [pc, #108]	@ (800170c <SystemClock_Config+0x98>)
 80016a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80016a4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a6:	2302      	movs	r3, #2
 80016a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ae:	2310      	movs	r3, #16
 80016b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b2:	2302      	movs	r3, #2
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016ba:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80016be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80016c0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80016c4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 ff80 	bl	80035d0 <HAL_RCC_OscConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80016d6:	f000 fa1b 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016da:	230f      	movs	r3, #15
 80016dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016de:	2303      	movs	r3, #3
 80016e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016ee:	463b      	mov	r3, r7
 80016f0:	2101      	movs	r1, #1
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fa9c 	bl	8003c30 <HAL_RCC_ClockConfig>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80016fe:	f000 fa07 	bl	8001b10 <Error_Handler>
  }
}
 8001702:	bf00      	nop
 8001704:	3748      	adds	r7, #72	@ 0x48
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40007000 	.word	0x40007000

08001710 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <MX_I2C1_Init+0x50>)
 8001716:	4a13      	ldr	r2, [pc, #76]	@ (8001764 <MX_I2C1_Init+0x54>)
 8001718:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <MX_I2C1_Init+0x50>)
 800171c:	4a12      	ldr	r2, [pc, #72]	@ (8001768 <MX_I2C1_Init+0x58>)
 800171e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <MX_I2C1_Init+0x50>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001726:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <MX_I2C1_Init+0x50>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <MX_I2C1_Init+0x50>)
 800172e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001732:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001734:	4b0a      	ldr	r3, [pc, #40]	@ (8001760 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800173a:	4b09      	ldr	r3, [pc, #36]	@ (8001760 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001740:	4b07      	ldr	r3, [pc, #28]	@ (8001760 <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001746:	4b06      	ldr	r3, [pc, #24]	@ (8001760 <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <MX_I2C1_Init+0x50>)
 800174e:	f000 ff1b 	bl	8002588 <HAL_I2C_Init>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001758:	f000 f9da 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000208 	.word	0x20000208
 8001764:	40005400 	.word	0x40005400
 8001768:	00061a80 	.word	0x00061a80

0800176c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 8001772:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <MX_USART2_UART_Init+0x50>)
 8001774:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 8001778:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800177c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 8001786:	2200      	movs	r2, #0
 8001788:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178a:	4b0b      	ldr	r3, [pc, #44]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001790:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 8001792:	220c      	movs	r2, #12
 8001794:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800179c:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a2:	4805      	ldr	r0, [pc, #20]	@ (80017b8 <MX_USART2_UART_Init+0x4c>)
 80017a4:	f002 fd0a 	bl	80041bc <HAL_UART_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ae:	f000 f9af 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	2000025c 	.word	0x2000025c
 80017bc:	40004400 	.word	0x40004400

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001894 <MX_GPIO_Init+0xd4>)
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	4a2e      	ldr	r2, [pc, #184]	@ (8001894 <MX_GPIO_Init+0xd4>)
 80017dc:	f043 0304 	orr.w	r3, r3, #4
 80017e0:	61d3      	str	r3, [r2, #28]
 80017e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001894 <MX_GPIO_Init+0xd4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f003 0304 	and.w	r3, r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	4b29      	ldr	r3, [pc, #164]	@ (8001894 <MX_GPIO_Init+0xd4>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a28      	ldr	r2, [pc, #160]	@ (8001894 <MX_GPIO_Init+0xd4>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b26      	ldr	r3, [pc, #152]	@ (8001894 <MX_GPIO_Init+0xd4>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001806:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <MX_GPIO_Init+0xd4>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	4a22      	ldr	r2, [pc, #136]	@ (8001894 <MX_GPIO_Init+0xd4>)
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <MX_GPIO_Init+0xd4>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2120      	movs	r1, #32
 8001822:	481d      	ldr	r0, [pc, #116]	@ (8001898 <MX_GPIO_Init+0xd8>)
 8001824:	f000 fe80 	bl	8002528 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001828:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4817      	ldr	r0, [pc, #92]	@ (800189c <MX_GPIO_Init+0xdc>)
 8001840:	f000 fce2 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001844:	2320      	movs	r3, #32
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	480f      	ldr	r0, [pc, #60]	@ (8001898 <MX_GPIO_Init+0xd8>)
 800185c:	f000 fcd4 	bl	8002208 <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_ACC_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin;
 8001860:	2320      	movs	r3, #32
 8001862:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001864:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_ACC_INT_GPIO_Port, &GPIO_InitStruct);
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4619      	mov	r1, r3
 8001874:	480a      	ldr	r0, [pc, #40]	@ (80018a0 <MX_GPIO_Init+0xe0>)
 8001876:	f000 fcc7 	bl	8002208 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2100      	movs	r1, #0
 800187e:	2017      	movs	r0, #23
 8001880:	f000 fc8b 	bl	800219a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001884:	2017      	movs	r0, #23
 8001886:	f000 fca4 	bl	80021d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800188a:	bf00      	nop
 800188c:	3720      	adds	r7, #32
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	40020000 	.word	0x40020000
 800189c:	40020800 	.word	0x40020800
 80018a0:	40020400 	.word	0x40020400

080018a4 <__io_putchar>:
  * @brief  Redirecting stdout to USART2 which is connected on the STLINK port
  * @retval
  * @param
  */
int __io_putchar(int ch)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80018b2:	f107 010c 	add.w	r1, r7, #12
 80018b6:	230a      	movs	r3, #10
 80018b8:	2201      	movs	r2, #1
 80018ba:	4804      	ldr	r0, [pc, #16]	@ (80018cc <__io_putchar+0x28>)
 80018bc:	f002 fcce 	bl	800425c <HAL_UART_Transmit>
 return ch;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000025c 	.word	0x2000025c

080018d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  switch(GPIO_Pin) {
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	2b20      	cmp	r3, #32
 80018de:	d103      	bne.n	80018e8 <HAL_GPIO_EXTI_Callback+0x18>
  case GYRO_ACC_INT_Pin:
    drdy = 1;
 80018e0:	4b04      	ldr	r3, [pc, #16]	@ (80018f4 <HAL_GPIO_EXTI_Callback+0x24>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
    break;
 80018e6:	bf00      	nop
  }
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200002b0 	.word	0x200002b0

080018f8 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b088      	sub	sp, #32
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	607a      	str	r2, [r7, #4]
 8001902:	461a      	mov	r2, r3
 8001904:	460b      	mov	r3, r1
 8001906:	72fb      	strb	r3, [r7, #11]
 8001908:	4613      	mov	r3, r2
 800190a:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Write(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*) bufp, len, 1000);
 800190c:	7afb      	ldrb	r3, [r7, #11]
 800190e:	b29a      	uxth	r2, r3
 8001910:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	893b      	ldrh	r3, [r7, #8]
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2301      	movs	r3, #1
 8001920:	21d7      	movs	r1, #215	@ 0xd7
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f000 ff74 	bl	8002810 <HAL_I2C_Mem_Write>
  return 0;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b088      	sub	sp, #32
 8001936:	af04      	add	r7, sp, #16
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	607a      	str	r2, [r7, #4]
 800193c:	461a      	mov	r2, r3
 800193e:	460b      	mov	r3, r1
 8001940:	72fb      	strb	r3, [r7, #11]
 8001942:	4613      	mov	r3, r2
 8001944:	813b      	strh	r3, [r7, #8]
  HAL_I2C_Mem_Read(handle, LSM6DSO_I2C_ADD_H, reg, I2C_MEMADD_SIZE_8BIT, bufp, len, 1000);
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	b29a      	uxth	r2, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	893b      	ldrh	r3, [r7, #8]
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	21d7      	movs	r1, #215	@ 0xd7
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f001 f851 	bl	8002a04 <HAL_I2C_Mem_Read>
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <lsm6dso_initialize>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  lsm6dso_initialize_basics();
 8001970:	f000 f80e 	bl	8001990 <lsm6dso_initialize_basics>
#ifdef ACCELEROMETER
  /* Accelelerometer configuration */
  lsm6dso_xl_data_rate_set(&dev_ctx, ACCELEROMETER_ODR);
 8001974:	2106      	movs	r1, #6
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <lsm6dso_initialize+0x20>)
 8001978:	f002 ff12 	bl	80047a0 <lsm6dso_xl_data_rate_set>
  lsm6dso_xl_full_scale_set(&dev_ctx, ACCELEROMETER_FS);
 800197c:	2102      	movs	r1, #2
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <lsm6dso_initialize+0x20>)
 8001980:	f002 fee8 	bl	8004754 <lsm6dso_xl_full_scale_set>
#else
  /* Gyroscope configuration */
  lsm6dso_gy_data_rate_set(&dev_ctx, GYROSCOPE_ODR);
  lsm6dso_gy_full_scale_set(&dev_ctx, GYROSCOPE_FS);
#endif
  lsm6dso_initialize_fifo();
 8001984:	f000 f82c 	bl	80019e0 <lsm6dso_initialize_fifo>
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}
 800198c:	200008b4 	.word	0x200008b4

08001990 <lsm6dso_initialize_basics>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_basics()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* Check device ID */
  whoamI = 0;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <lsm6dso_initialize_basics+0x44>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]

  do {
    HAL_Delay(20);
 800199a:	2014      	movs	r0, #20
 800199c:	f000 fb04 	bl	8001fa8 <HAL_Delay>
    lsm6dso_device_id_get(&dev_ctx, &whoamI);
 80019a0:	490c      	ldr	r1, [pc, #48]	@ (80019d4 <lsm6dso_initialize_basics+0x44>)
 80019a2:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <lsm6dso_initialize_basics+0x48>)
 80019a4:	f003 f85b 	bl	8004a5e <lsm6dso_device_id_get>
  } while(whoamI != LSM6DSO_ID);
 80019a8:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <lsm6dso_initialize_basics+0x44>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b6c      	cmp	r3, #108	@ 0x6c
 80019ae:	d1f4      	bne.n	800199a <lsm6dso_initialize_basics+0xa>

  /* Restore default configuration */
  lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
 80019b0:	2101      	movs	r1, #1
 80019b2:	4809      	ldr	r0, [pc, #36]	@ (80019d8 <lsm6dso_initialize_basics+0x48>)
 80019b4:	f003 f864 	bl	8004a80 <lsm6dso_reset_set>

  do {
    lsm6dso_reset_get(&dev_ctx, &rst);
 80019b8:	4908      	ldr	r1, [pc, #32]	@ (80019dc <lsm6dso_initialize_basics+0x4c>)
 80019ba:	4807      	ldr	r0, [pc, #28]	@ (80019d8 <lsm6dso_initialize_basics+0x48>)
 80019bc:	f003 f886 	bl	8004acc <lsm6dso_reset_get>
  } while (rst);
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <lsm6dso_initialize_basics+0x4c>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1f7      	bne.n	80019b8 <lsm6dso_initialize_basics+0x28>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	4803      	ldr	r0, [pc, #12]	@ (80019d8 <lsm6dso_initialize_basics+0x48>)
 80019cc:	f003 f897 	bl	8004afe <lsm6dso_i3c_disable_set>
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200002aa 	.word	0x200002aa
 80019d8:	200008b4 	.word	0x200008b4
 80019dc:	200002ab 	.word	0x200002ab

080019e0 <lsm6dso_initialize_fifo>:
 *
 * @return No
 *
 */
static void lsm6dso_initialize_fifo()
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
#ifdef ACCELEROMETER
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, ACCELEROMETER_ODR);
 80019e6:	2106      	movs	r1, #6
 80019e8:	4815      	ldr	r0, [pc, #84]	@ (8001a40 <lsm6dso_initialize_fifo+0x60>)
 80019ea:	f003 f908 	bl	8004bfe <lsm6dso_fifo_xl_batch_set>
  lsm6dso_fifo_gy_batch_set(&dev_ctx, 0);
 80019ee:	2100      	movs	r1, #0
 80019f0:	4813      	ldr	r0, [pc, #76]	@ (8001a40 <lsm6dso_initialize_fifo+0x60>)
 80019f2:	f003 f92a 	bl	8004c4a <lsm6dso_fifo_gy_batch_set>
  /* Batch odr config */
  lsm6dso_fifo_xl_batch_set(&dev_ctx, 0);
  lsm6dso_fifo_gy_batch_set(&dev_ctx, GYROSCOPE_ODR);
#endif
  /* FIFO MODE */
  lsm6dso_fifo_mode_set(&dev_ctx, LSM6DSO_FIFO_MODE);
 80019f6:	2101      	movs	r1, #1
 80019f8:	4811      	ldr	r0, [pc, #68]	@ (8001a40 <lsm6dso_initialize_fifo+0x60>)
 80019fa:	f003 f94c 	bl	8004c96 <lsm6dso_fifo_mode_set>
  /* Watermark config */
  if (SAMPLES <= MAX_FIFO_SIZE) {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) SAMPLES);
 80019fe:	2180      	movs	r1, #128	@ 0x80
 8001a00:	480f      	ldr	r0, [pc, #60]	@ (8001a40 <lsm6dso_initialize_fifo+0x60>)
 8001a02:	f003 f8c4 	bl	8004b8e <lsm6dso_fifo_watermark_set>
  }
  else {
    lsm6dso_fifo_watermark_set(&dev_ctx, (uint16_t) MAX_FIFO_SIZE);
  }
  /* Need to enable interrupt pin when wtm is reached */
  uint8_t ctrl = 0x08;
 8001a06:	2308      	movs	r3, #8
 8001a08:	71fb      	strb	r3, [r7, #7]
  lsm6dso_write_reg(&dev_ctx, LSM6DSO_INT1_CTRL, (uint8_t *) &ctrl, 1);
 8001a0a:	1dfa      	adds	r2, r7, #7
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	210d      	movs	r1, #13
 8001a10:	480b      	ldr	r0, [pc, #44]	@ (8001a40 <lsm6dso_initialize_fifo+0x60>)
 8001a12:	f002 fe6b 	bl	80046ec <lsm6dso_write_reg>

  /* Configuration de l'interrupt DATA_READY sur INT1 */
  lsm6dso_pin_int1_route_t int1_route = {0};
 8001a16:	463b      	mov	r3, r7
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	809a      	strh	r2, [r3, #4]
  int1_route.drdy_xl = 1;  // Active l'interrupt data-ready pour l'accéléromètre
 8001a1e:	783b      	ldrb	r3, [r7, #0]
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	703b      	strb	r3, [r7, #0]
  lsm6dso_pin_int1_route_set(&dev_ctx, int1_route);
 8001a26:	463b      	mov	r3, r7
 8001a28:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001a2c:	4804      	ldr	r0, [pc, #16]	@ (8001a40 <lsm6dso_initialize_fifo+0x60>)
 8001a2e:	f003 f9c7 	bl	8004dc0 <lsm6dso_pin_int1_route_set>

  printf("Interrupt DATA_READY configuree sur INT1\n");
 8001a32:	4804      	ldr	r0, [pc, #16]	@ (8001a44 <lsm6dso_initialize_fifo+0x64>)
 8001a34:	f005 fde8 	bl	8007608 <puts>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200008b4 	.word	0x200008b4
 8001a44:	0800b7cc 	.word	0x0800b7cc

08001a48 <lsm6dso_convert_accel_data_to_mg>:
 *
 * @return The converted value in milli-G' (mg)
 *
 */
static float lsm6dso_convert_accel_data_to_mg(int16_t accel_raw_data)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  float accel_data_mg = 0.0;
 8001a52:	f04f 0300 	mov.w	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  {
  case LSM6DSO_2g:
    accel_data_mg = lsm6dso_from_fs2_to_mg(accel_raw_data);
    break;
  case LSM6DSO_4g:
    accel_data_mg = lsm6dso_from_fs4_to_mg(accel_raw_data);
 8001a58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f002 fe63 	bl	8004728 <lsm6dso_from_fs4_to_mg>
 8001a62:	60f8      	str	r0, [r7, #12]
    break;
 8001a64:	bf00      	nop
  default:
    accel_data_mg = 0.0;
    break;
  }
#endif
  return accel_data_mg;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <iks01a3_i2c_stuck_quirk>:
 *
 * As a workaround we simply configure the SCL pin as a GPIO and send a burst
 * of pulses to bring the sensor back to an idle state.
 */
static void iks01a3_i2c_stuck_quirk(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <iks01a3_i2c_stuck_quirk+0x98>)
 8001a88:	69db      	ldr	r3, [r3, #28]
 8001a8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b08 <iks01a3_i2c_stuck_quirk+0x98>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	61d3      	str	r3, [r2, #28]
 8001a92:	4b1d      	ldr	r3, [pc, #116]	@ (8001b08 <iks01a3_i2c_stuck_quirk+0x98>)
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /* Configure SCL as a GPIO */
  GPIO_InitStruct.Pin = SCL_PIN;
 8001a9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_PORT, &GPIO_InitStruct);
 8001ab4:	f107 0308 	add.w	r3, r7, #8
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <iks01a3_i2c_stuck_quirk+0x9c>)
 8001abc:	f000 fba4 	bl	8002208 <HAL_GPIO_Init>

  /* Send a burst of pulses on SCL */
  int pulses = 20;
 8001ac0:	2314      	movs	r3, #20
 8001ac2:	61fb      	str	r3, [r7, #28]
  do {
    HAL_Delay(1);
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f000 fa6f 	bl	8001fa8 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_RESET);
 8001aca:	2200      	movs	r2, #0
 8001acc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ad0:	480e      	ldr	r0, [pc, #56]	@ (8001b0c <iks01a3_i2c_stuck_quirk+0x9c>)
 8001ad2:	f000 fd29 	bl	8002528 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001ad6:	2001      	movs	r0, #1
 8001ad8:	f000 fa66 	bl	8001fa8 <HAL_Delay>
    HAL_GPIO_WritePin(SCL_PORT, SCL_PIN, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ae2:	480a      	ldr	r0, [pc, #40]	@ (8001b0c <iks01a3_i2c_stuck_quirk+0x9c>)
 8001ae4:	f000 fd20 	bl	8002528 <HAL_GPIO_WritePin>
  } while (pulses--);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	1e5a      	subs	r2, r3, #1
 8001aec:	61fa      	str	r2, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1e8      	bne.n	8001ac4 <iks01a3_i2c_stuck_quirk+0x54>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8001af2:	4b05      	ldr	r3, [pc, #20]	@ (8001b08 <iks01a3_i2c_stuck_quirk+0x98>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	4a04      	ldr	r2, [pc, #16]	@ (8001b08 <iks01a3_i2c_stuck_quirk+0x98>)
 8001af8:	f023 0302 	bic.w	r3, r3, #2
 8001afc:	61d3      	str	r3, [r2, #28]
}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40020400 	.word	0x40020400

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b26:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b28:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001b2c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b2e:	4b12      	ldr	r3, [pc, #72]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b36:	60fb      	str	r3, [r7, #12]
 8001b38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6213      	str	r3, [r2, #32]
 8001b46:	4b0c      	ldr	r3, [pc, #48]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b48:	6a1b      	ldr	r3, [r3, #32]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	4a08      	ldr	r2, [pc, #32]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	6253      	str	r3, [r2, #36]	@ 0x24
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_MspInit+0x5c>)
 8001b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	607b      	str	r3, [r7, #4]
 8001b68:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b6a:	2007      	movs	r0, #7
 8001b6c:	f000 fb0a 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800

08001b7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08a      	sub	sp, #40	@ 0x28
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 0314 	add.w	r3, r7, #20
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <HAL_I2C_MspInit+0x7c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d128      	bne.n	8001bf0 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9e:	4b17      	ldr	r3, [pc, #92]	@ (8001bfc <HAL_I2C_MspInit+0x80>)
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	4a16      	ldr	r2, [pc, #88]	@ (8001bfc <HAL_I2C_MspInit+0x80>)
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	61d3      	str	r3, [r2, #28]
 8001baa:	4b14      	ldr	r3, [pc, #80]	@ (8001bfc <HAL_I2C_MspInit+0x80>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bb6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bbc:	2312      	movs	r3, #18
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480b      	ldr	r0, [pc, #44]	@ (8001c00 <HAL_I2C_MspInit+0x84>)
 8001bd4:	f000 fb18 	bl	8002208 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <HAL_I2C_MspInit+0x80>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bdc:	4a07      	ldr	r2, [pc, #28]	@ (8001bfc <HAL_I2C_MspInit+0x80>)
 8001bde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001be2:	6253      	str	r3, [r2, #36]	@ 0x24
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <HAL_I2C_MspInit+0x80>)
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3728      	adds	r7, #40	@ 0x28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	40020400 	.word	0x40020400

08001c04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08a      	sub	sp, #40	@ 0x28
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a17      	ldr	r2, [pc, #92]	@ (8001c80 <HAL_UART_MspInit+0x7c>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d127      	bne.n	8001c76 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c26:	4b17      	ldr	r3, [pc, #92]	@ (8001c84 <HAL_UART_MspInit+0x80>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	4a16      	ldr	r2, [pc, #88]	@ (8001c84 <HAL_UART_MspInit+0x80>)
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c30:	6253      	str	r3, [r2, #36]	@ 0x24
 8001c32:	4b14      	ldr	r3, [pc, #80]	@ (8001c84 <HAL_UART_MspInit+0x80>)
 8001c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <HAL_UART_MspInit+0x80>)
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	4a10      	ldr	r2, [pc, #64]	@ (8001c84 <HAL_UART_MspInit+0x80>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	61d3      	str	r3, [r2, #28]
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <HAL_UART_MspInit+0x80>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c56:	230c      	movs	r3, #12
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c62:	2303      	movs	r3, #3
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c66:	2307      	movs	r3, #7
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4805      	ldr	r0, [pc, #20]	@ (8001c88 <HAL_UART_MspInit+0x84>)
 8001c72:	f000 fac9 	bl	8002208 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c76:	bf00      	nop
 8001c78:	3728      	adds	r7, #40	@ 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40004400 	.word	0x40004400
 8001c84:	40023800 	.word	0x40023800
 8001c88:	40020000 	.word	0x40020000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <NMI_Handler+0x4>

08001c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 f948 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GYRO_ACC_INT_Pin);
 8001ce8:	2020      	movs	r0, #32
 8001cea:	f000 fc35 	bl	8002558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  return 1;
 8001cf6:	2301      	movs	r3, #1
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr

08001d00 <_kill>:

int _kill(int pid, int sig)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d0a:	f005 fdd1 	bl	80078b0 <__errno>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2216      	movs	r2, #22
 8001d12:	601a      	str	r2, [r3, #0]
  return -1;
 8001d14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <_exit>:

void _exit (int status)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ffe7 	bl	8001d00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d32:	bf00      	nop
 8001d34:	e7fd      	b.n	8001d32 <_exit+0x12>

08001d36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	60f8      	str	r0, [r7, #12]
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e00a      	b.n	8001d5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d48:	f3af 8000 	nop.w
 8001d4c:	4601      	mov	r1, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	60ba      	str	r2, [r7, #8]
 8001d54:	b2ca      	uxtb	r2, r1
 8001d56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	dbf0      	blt.n	8001d48 <_read+0x12>
  }

  return len;
 8001d66:	687b      	ldr	r3, [r7, #4]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3718      	adds	r7, #24
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
 8001d80:	e009      	b.n	8001d96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	1c5a      	adds	r2, r3, #1
 8001d86:	60ba      	str	r2, [r7, #8]
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fd8a 	bl	80018a4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	3301      	adds	r3, #1
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	dbf1      	blt.n	8001d82 <_write+0x12>
  }
  return len;
 8001d9e:	687b      	ldr	r3, [r7, #4]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <_close>:

int _close(int file)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bc80      	pop	{r7}
 8001dbc:	4770      	bx	lr

08001dbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dce:	605a      	str	r2, [r3, #4]
  return 0;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <_isatty>:

int _isatty(int file)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bc80      	pop	{r7}
 8001e06:	4770      	bx	lr

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	@ (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	@ (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	@ (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	@ (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	@ (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f005 fd3a 	bl	80078b0 <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	@ (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	@ (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20014000 	.word	0x20014000
 8001e68:	00000400 	.word	0x00000400
 8001e6c:	200008d0 	.word	0x200008d0
 8001e70:	20001288 	.word	0x20001288

08001e74 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e80:	f7ff fff8 	bl	8001e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e84:	480b      	ldr	r0, [pc, #44]	@ (8001eb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e86:	490c      	ldr	r1, [pc, #48]	@ (8001eb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e88:	4a0c      	ldr	r2, [pc, #48]	@ (8001ebc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e8c:	e002      	b.n	8001e94 <LoopCopyDataInit>

08001e8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e92:	3304      	adds	r3, #4

08001e94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e98:	d3f9      	bcc.n	8001e8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e9c:	4c09      	ldr	r4, [pc, #36]	@ (8001ec4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea0:	e001      	b.n	8001ea6 <LoopFillZerobss>

08001ea2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ea2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea4:	3204      	adds	r2, #4

08001ea6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea8:	d3fb      	bcc.n	8001ea2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eaa:	f005 fd07 	bl	80078bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eae:	f7ff fb3d 	bl	800152c <main>
  bx lr
 8001eb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001ebc:	0800ca78 	.word	0x0800ca78
  ldr r2, =_sbss
 8001ec0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001ec4:	20001288 	.word	0x20001288

08001ec8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC1_IRQHandler>

08001eca <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f000 f955 	bl	8002184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001eda:	2000      	movs	r0, #0
 8001edc:	f000 f80e 	bl	8001efc <HAL_InitTick>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	71fb      	strb	r3, [r7, #7]
 8001eea:	e001      	b.n	8001ef0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eec:	f7ff fe16 	bl	8001b1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <HAL_InitTick+0x68>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d022      	beq.n	8001f56 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_InitTick+0x6c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <HAL_InitTick+0x68>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 f962 	bl	80021ee <HAL_SYSTICK_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10f      	bne.n	8001f50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b0f      	cmp	r3, #15
 8001f34:	d809      	bhi.n	8001f4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f36:	2200      	movs	r2, #0
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3e:	f000 f92c 	bl	800219a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_InitTick+0x70>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	e007      	b.n	8001f5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
 8001f4e:	e004      	b.n	8001f5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e001      	b.n	8001f5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000001c 	.word	0x2000001c
 8001f68:	20000014 	.word	0x20000014
 8001f6c:	20000018 	.word	0x20000018

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b05      	ldr	r3, [pc, #20]	@ (8001f8c <HAL_IncTick+0x1c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4b05      	ldr	r3, [pc, #20]	@ (8001f90 <HAL_IncTick+0x20>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	4a03      	ldr	r2, [pc, #12]	@ (8001f8c <HAL_IncTick+0x1c>)
 8001f80:	6013      	str	r3, [r2, #0]
}
 8001f82:	bf00      	nop
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	200008d4 	.word	0x200008d4
 8001f90:	2000001c 	.word	0x2000001c

08001f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b02      	ldr	r3, [pc, #8]	@ (8001fa4 <HAL_GetTick+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	200008d4 	.word	0x200008d4

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d004      	beq.n	8001fcc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b09      	ldr	r3, [pc, #36]	@ (8001fe8 <HAL_Delay+0x40>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68fa      	ldr	r2, [r7, #12]
 8001fc8:	4413      	add	r3, r2
 8001fca:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fcc:	bf00      	nop
 8001fce:	f7ff ffe1 	bl	8001f94 <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	68fa      	ldr	r2, [r7, #12]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d8f7      	bhi.n	8001fce <HAL_Delay+0x26>
  {
  }
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	2000001c 	.word	0x2000001c

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002014:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002018:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800201c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201e:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	60d3      	str	r3, [r2, #12]
}
 8002024:	bf00      	nop
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4906      	ldr	r1, [pc, #24]	@ (8002084 <__NVIC_EnableIRQ+0x34>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002150:	d301      	bcc.n	8002156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002152:	2301      	movs	r3, #1
 8002154:	e00f      	b.n	8002176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002156:	4a0a      	ldr	r2, [pc, #40]	@ (8002180 <SysTick_Config+0x40>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	3b01      	subs	r3, #1
 800215c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800215e:	210f      	movs	r1, #15
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f7ff ff90 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <SysTick_Config+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800216e:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <SysTick_Config+0x40>)
 8002170:	2207      	movs	r2, #7
 8002172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	e000e010 	.word	0xe000e010

08002184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f7ff ff2d 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b086      	sub	sp, #24
 800219e:	af00      	add	r7, sp, #0
 80021a0:	4603      	mov	r3, r0
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
 80021a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021a8:	2300      	movs	r3, #0
 80021aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021ac:	f7ff ff42 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	68b9      	ldr	r1, [r7, #8]
 80021b6:	6978      	ldr	r0, [r7, #20]
 80021b8:	f7ff ff90 	bl	80020dc <NVIC_EncodePriority>
 80021bc:	4602      	mov	r2, r0
 80021be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff ff5f 	bl	8002088 <__NVIC_SetPriority>
}
 80021ca:	bf00      	nop
 80021cc:	3718      	adds	r7, #24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b082      	sub	sp, #8
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff35 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ffa2 	bl	8002140 <SysTick_Config>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800221e:	e160      	b.n	80024e2 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	2101      	movs	r1, #1
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fa01 f303 	lsl.w	r3, r1, r3
 800222c:	4013      	ands	r3, r2
 800222e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8152 	beq.w	80024dc <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b01      	cmp	r3, #1
 8002242:	d005      	beq.n	8002250 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800224c:	2b02      	cmp	r3, #2
 800224e:	d130      	bne.n	80022b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002286:	2201      	movs	r2, #1
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	091b      	lsrs	r3, r3, #4
 800229c:	f003 0201 	and.w	r2, r3, #1
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d017      	beq.n	80022ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	2203      	movs	r2, #3
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	4013      	ands	r3, r2
 80022d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d123      	bne.n	8002342 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	08da      	lsrs	r2, r3, #3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3208      	adds	r2, #8
 8002302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002306:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	691a      	ldr	r2, [r3, #16]
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	08da      	lsrs	r2, r3, #3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	3208      	adds	r2, #8
 800233c:	6939      	ldr	r1, [r7, #16]
 800233e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4013      	ands	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4313      	orrs	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 80ac 	beq.w	80024dc <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002384:	4b5e      	ldr	r3, [pc, #376]	@ (8002500 <HAL_GPIO_Init+0x2f8>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a5d      	ldr	r2, [pc, #372]	@ (8002500 <HAL_GPIO_Init+0x2f8>)
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	4b5b      	ldr	r3, [pc, #364]	@ (8002500 <HAL_GPIO_Init+0x2f8>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800239c:	4a59      	ldr	r2, [pc, #356]	@ (8002504 <HAL_GPIO_Init+0x2fc>)
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	089b      	lsrs	r3, r3, #2
 80023a2:	3302      	adds	r3, #2
 80023a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a51      	ldr	r2, [pc, #324]	@ (8002508 <HAL_GPIO_Init+0x300>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d025      	beq.n	8002414 <HAL_GPIO_Init+0x20c>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a50      	ldr	r2, [pc, #320]	@ (800250c <HAL_GPIO_Init+0x304>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d01f      	beq.n	8002410 <HAL_GPIO_Init+0x208>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a4f      	ldr	r2, [pc, #316]	@ (8002510 <HAL_GPIO_Init+0x308>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d019      	beq.n	800240c <HAL_GPIO_Init+0x204>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a4e      	ldr	r2, [pc, #312]	@ (8002514 <HAL_GPIO_Init+0x30c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_GPIO_Init+0x200>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a4d      	ldr	r2, [pc, #308]	@ (8002518 <HAL_GPIO_Init+0x310>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00d      	beq.n	8002404 <HAL_GPIO_Init+0x1fc>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a4c      	ldr	r2, [pc, #304]	@ (800251c <HAL_GPIO_Init+0x314>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <HAL_GPIO_Init+0x1f8>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a4b      	ldr	r2, [pc, #300]	@ (8002520 <HAL_GPIO_Init+0x318>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_GPIO_Init+0x1f4>
 80023f8:	2306      	movs	r3, #6
 80023fa:	e00c      	b.n	8002416 <HAL_GPIO_Init+0x20e>
 80023fc:	2307      	movs	r3, #7
 80023fe:	e00a      	b.n	8002416 <HAL_GPIO_Init+0x20e>
 8002400:	2305      	movs	r3, #5
 8002402:	e008      	b.n	8002416 <HAL_GPIO_Init+0x20e>
 8002404:	2304      	movs	r3, #4
 8002406:	e006      	b.n	8002416 <HAL_GPIO_Init+0x20e>
 8002408:	2303      	movs	r3, #3
 800240a:	e004      	b.n	8002416 <HAL_GPIO_Init+0x20e>
 800240c:	2302      	movs	r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x20e>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_GPIO_Init+0x20e>
 8002414:	2300      	movs	r3, #0
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	f002 0203 	and.w	r2, r2, #3
 800241c:	0092      	lsls	r2, r2, #2
 800241e:	4093      	lsls	r3, r2
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002426:	4937      	ldr	r1, [pc, #220]	@ (8002504 <HAL_GPIO_Init+0x2fc>)
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002434:	4b3b      	ldr	r3, [pc, #236]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	43db      	mvns	r3, r3
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	4013      	ands	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002458:	4a32      	ldr	r2, [pc, #200]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800245e:	4b31      	ldr	r3, [pc, #196]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	43db      	mvns	r3, r3
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4013      	ands	r3, r2
 800246c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	4313      	orrs	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002482:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002488:	4b26      	ldr	r3, [pc, #152]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	43db      	mvns	r3, r3
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4013      	ands	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	4013      	ands	r3, r2
 80024c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <HAL_GPIO_Init+0x31c>)
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	fa22 f303 	lsr.w	r3, r2, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f47f ae97 	bne.w	8002220 <HAL_GPIO_Init+0x18>
  }
}
 80024f2:	bf00      	nop
 80024f4:	bf00      	nop
 80024f6:	371c      	adds	r7, #28
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40023800 	.word	0x40023800
 8002504:	40010000 	.word	0x40010000
 8002508:	40020000 	.word	0x40020000
 800250c:	40020400 	.word	0x40020400
 8002510:	40020800 	.word	0x40020800
 8002514:	40020c00 	.word	0x40020c00
 8002518:	40021000 	.word	0x40021000
 800251c:	40021400 	.word	0x40021400
 8002520:	40021800 	.word	0x40021800
 8002524:	40010400 	.word	0x40010400

08002528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	807b      	strh	r3, [r7, #2]
 8002534:	4613      	mov	r3, r2
 8002536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002538:	787b      	ldrb	r3, [r7, #1]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8002544:	e003      	b.n	800254e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	041a      	lsls	r2, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	619a      	str	r2, [r3, #24]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr

08002558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002564:	695a      	ldr	r2, [r3, #20]
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	4013      	ands	r3, r2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d006      	beq.n	800257c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800256e:	4a05      	ldr	r2, [pc, #20]	@ (8002584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff f9aa 	bl	80018d0 <HAL_GPIO_EXTI_Callback>
  }
}
 800257c:	bf00      	nop
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40010400 	.word	0x40010400

08002588 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e12b      	b.n	80027f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d106      	bne.n	80025b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fae4 	bl	8001b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2224      	movs	r2, #36	@ 0x24
 80025b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0201 	bic.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025ec:	f001 fd5e 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 80025f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4a81      	ldr	r2, [pc, #516]	@ (80027fc <HAL_I2C_Init+0x274>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d807      	bhi.n	800260c <HAL_I2C_Init+0x84>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a80      	ldr	r2, [pc, #512]	@ (8002800 <HAL_I2C_Init+0x278>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bf94      	ite	ls
 8002604:	2301      	movls	r3, #1
 8002606:	2300      	movhi	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e006      	b.n	800261a <HAL_I2C_Init+0x92>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4a7d      	ldr	r2, [pc, #500]	@ (8002804 <HAL_I2C_Init+0x27c>)
 8002610:	4293      	cmp	r3, r2
 8002612:	bf94      	ite	ls
 8002614:	2301      	movls	r3, #1
 8002616:	2300      	movhi	r3, #0
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e0e7      	b.n	80027f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a78      	ldr	r2, [pc, #480]	@ (8002808 <HAL_I2C_Init+0x280>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	0c9b      	lsrs	r3, r3, #18
 800262c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	430a      	orrs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a6a      	ldr	r2, [pc, #424]	@ (80027fc <HAL_I2C_Init+0x274>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d802      	bhi.n	800265c <HAL_I2C_Init+0xd4>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	e009      	b.n	8002670 <HAL_I2C_Init+0xe8>
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	4a69      	ldr	r2, [pc, #420]	@ (800280c <HAL_I2C_Init+0x284>)
 8002668:	fba2 2303 	umull	r2, r3, r2, r3
 800266c:	099b      	lsrs	r3, r3, #6
 800266e:	3301      	adds	r3, #1
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	430b      	orrs	r3, r1
 8002676:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	69db      	ldr	r3, [r3, #28]
 800267e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002682:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	495c      	ldr	r1, [pc, #368]	@ (80027fc <HAL_I2C_Init+0x274>)
 800268c:	428b      	cmp	r3, r1
 800268e:	d819      	bhi.n	80026c4 <HAL_I2C_Init+0x13c>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	1e59      	subs	r1, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	fbb1 f3f3 	udiv	r3, r1, r3
 800269e:	1c59      	adds	r1, r3, #1
 80026a0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026a4:	400b      	ands	r3, r1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00a      	beq.n	80026c0 <HAL_I2C_Init+0x138>
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1e59      	subs	r1, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026be:	e051      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 80026c0:	2304      	movs	r3, #4
 80026c2:	e04f      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d111      	bne.n	80026f0 <HAL_I2C_Init+0x168>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	1e58      	subs	r0, r3, #1
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	e012      	b.n	8002716 <HAL_I2C_Init+0x18e>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1e58      	subs	r0, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	0099      	lsls	r1, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	fbb0 f3f3 	udiv	r3, r0, r3
 8002706:	3301      	adds	r3, #1
 8002708:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <HAL_I2C_Init+0x196>
 800271a:	2301      	movs	r3, #1
 800271c:	e022      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d10e      	bne.n	8002744 <HAL_I2C_Init+0x1bc>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1e58      	subs	r0, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	460b      	mov	r3, r1
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	440b      	add	r3, r1
 8002734:	fbb0 f3f3 	udiv	r3, r0, r3
 8002738:	3301      	adds	r3, #1
 800273a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002742:	e00f      	b.n	8002764 <HAL_I2C_Init+0x1dc>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e58      	subs	r0, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6859      	ldr	r1, [r3, #4]
 800274c:	460b      	mov	r3, r1
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	0099      	lsls	r1, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	fbb0 f3f3 	udiv	r3, r0, r3
 800275a:	3301      	adds	r3, #1
 800275c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002760:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	6809      	ldr	r1, [r1, #0]
 8002768:	4313      	orrs	r3, r2
 800276a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69da      	ldr	r2, [r3, #28]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002792:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6911      	ldr	r1, [r2, #16]
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68d2      	ldr	r2, [r2, #12]
 800279e:	4311      	orrs	r1, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	430b      	orrs	r3, r1
 80027a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	431a      	orrs	r2, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2220      	movs	r2, #32
 80027de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	000186a0 	.word	0x000186a0
 8002800:	001e847f 	.word	0x001e847f
 8002804:	003d08ff 	.word	0x003d08ff
 8002808:	431bde83 	.word	0x431bde83
 800280c:	10624dd3 	.word	0x10624dd3

08002810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	4608      	mov	r0, r1
 800281a:	4611      	mov	r1, r2
 800281c:	461a      	mov	r2, r3
 800281e:	4603      	mov	r3, r0
 8002820:	817b      	strh	r3, [r7, #10]
 8002822:	460b      	mov	r3, r1
 8002824:	813b      	strh	r3, [r7, #8]
 8002826:	4613      	mov	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800282a:	f7ff fbb3 	bl	8001f94 <HAL_GetTick>
 800282e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b20      	cmp	r3, #32
 800283a:	f040 80d9 	bne.w	80029f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2319      	movs	r3, #25
 8002844:	2201      	movs	r2, #1
 8002846:	496d      	ldr	r1, [pc, #436]	@ (80029fc <HAL_I2C_Mem_Write+0x1ec>)
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fc8b 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002854:	2302      	movs	r3, #2
 8002856:	e0cc      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_I2C_Mem_Write+0x56>
 8002862:	2302      	movs	r3, #2
 8002864:	e0c5      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d007      	beq.n	800288c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800289a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2221      	movs	r2, #33	@ 0x21
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	4a4d      	ldr	r2, [pc, #308]	@ (8002a00 <HAL_I2C_Mem_Write+0x1f0>)
 80028cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ce:	88f8      	ldrh	r0, [r7, #6]
 80028d0:	893a      	ldrh	r2, [r7, #8]
 80028d2:	8979      	ldrh	r1, [r7, #10]
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	4603      	mov	r3, r0
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f000 fac2 	bl	8002e68 <I2C_RequestMemoryWrite>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d052      	beq.n	8002990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e081      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fd50 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00d      	beq.n	800291a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	2b04      	cmp	r3, #4
 8002904:	d107      	bne.n	8002916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e06b      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800291e:	781a      	ldrb	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	1c5a      	adds	r2, r3, #1
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11b      	bne.n	8002990 <HAL_I2C_Mem_Write+0x180>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800295c:	2b00      	cmp	r3, #0
 800295e:	d017      	beq.n	8002990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002970:	1c5a      	adds	r2, r3, #1
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	3b01      	subs	r3, #1
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1aa      	bne.n	80028ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	f000 fd43 	bl	8003428 <I2C_WaitOnBTFFlagUntilTimeout>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00d      	beq.n	80029c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d107      	bne.n	80029c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e016      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	e000      	b.n	80029f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029f0:	2302      	movs	r3, #2
  }
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	00100002 	.word	0x00100002
 8002a00:	ffff0000 	.word	0xffff0000

08002a04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	@ 0x30
 8002a08:	af02      	add	r7, sp, #8
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	817b      	strh	r3, [r7, #10]
 8002a16:	460b      	mov	r3, r1
 8002a18:	813b      	strh	r3, [r7, #8]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a1e:	f7ff fab9 	bl	8001f94 <HAL_GetTick>
 8002a22:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	f040 8214 	bne.w	8002e5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2319      	movs	r3, #25
 8002a38:	2201      	movs	r2, #1
 8002a3a:	497b      	ldr	r1, [pc, #492]	@ (8002c28 <HAL_I2C_Mem_Read+0x224>)
 8002a3c:	68f8      	ldr	r0, [r7, #12]
 8002a3e:	f000 fb91 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e207      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d101      	bne.n	8002a5a <HAL_I2C_Mem_Read+0x56>
 8002a56:	2302      	movs	r3, #2
 8002a58:	e200      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d007      	beq.n	8002a80 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f042 0201 	orr.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2222      	movs	r2, #34	@ 0x22
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2240      	movs	r2, #64	@ 0x40
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a5b      	ldr	r2, [pc, #364]	@ (8002c2c <HAL_I2C_Mem_Read+0x228>)
 8002ac0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ac2:	88f8      	ldrh	r0, [r7, #6]
 8002ac4:	893a      	ldrh	r2, [r7, #8]
 8002ac6:	8979      	ldrh	r1, [r7, #10]
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fa5e 	bl	8002f94 <I2C_RequestMemoryRead>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e1bc      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aea:	2300      	movs	r3, #0
 8002aec:	623b      	str	r3, [r7, #32]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	623b      	str	r3, [r7, #32]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	623b      	str	r3, [r7, #32]
 8002afe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e190      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d11b      	bne.n	8002b52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	61fb      	str	r3, [r7, #28]
 8002b3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	e170      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d11b      	bne.n	8002b92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	e150      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	617b      	str	r3, [r7, #20]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ba8:	e144      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	f200 80f1 	bhi.w	8002d96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d123      	bne.n	8002c04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 fc79 	bl	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e145      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be2:	1c5a      	adds	r2, r3, #1
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c02:	e117      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d14e      	bne.n	8002caa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c12:	2200      	movs	r2, #0
 8002c14:	4906      	ldr	r1, [pc, #24]	@ (8002c30 <HAL_I2C_Mem_Read+0x22c>)
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 faa4 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d008      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e11a      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
 8002c26:	bf00      	nop
 8002c28:	00100002 	.word	0x00100002
 8002c2c:	ffff0000 	.word	0xffff0000
 8002c30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	691a      	ldr	r2, [r3, #16]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ca8:	e0c4      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	496c      	ldr	r1, [pc, #432]	@ (8002e64 <HAL_I2C_Mem_Read+0x460>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 fa55 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e0cb      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691a      	ldr	r2, [r3, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	1c5a      	adds	r2, r3, #1
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	9300      	str	r3, [sp, #0]
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	4955      	ldr	r1, [pc, #340]	@ (8002e64 <HAL_I2C_Mem_Read+0x460>)
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 fa27 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e09d      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d74:	1c5a      	adds	r2, r3, #1
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d94:	e04e      	b.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 fb8c 	bl	80034b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e058      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	f003 0304 	and.w	r3, r3, #4
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d124      	bne.n	8002e34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d107      	bne.n	8002e02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f47f aeb6 	bne.w	8002baa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3728      	adds	r7, #40	@ 0x28
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	00010004 	.word	0x00010004

08002e68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b088      	sub	sp, #32
 8002e6c:	af02      	add	r7, sp, #8
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	4608      	mov	r0, r1
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	4603      	mov	r3, r0
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	813b      	strh	r3, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f960 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb8:	d103      	bne.n	8002ec2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ec0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e05f      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	492d      	ldr	r1, [pc, #180]	@ (8002f90 <I2C_RequestMemoryWrite+0x128>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f9bb 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e04c      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 fa46 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e02b      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f34:	893b      	ldrh	r3, [r7, #8]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]
 8002f3e:	e021      	b.n	8002f84 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fa20 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d107      	bne.n	8002f76 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e005      	b.n	8002f86 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f7a:	893b      	ldrh	r3, [r7, #8]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	00010002 	.word	0x00010002

08002f94 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fbc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fcc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f8c2 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff4:	d103      	bne.n	8002ffe <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0aa      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003010:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003014:	6a3a      	ldr	r2, [r7, #32]
 8003016:	4952      	ldr	r1, [pc, #328]	@ (8003160 <I2C_RequestMemoryRead+0x1cc>)
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f91d 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e097      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800303e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003040:	6a39      	ldr	r1, [r7, #32]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f9a8 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	2b04      	cmp	r3, #4
 8003054:	d107      	bne.n	8003066 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003064:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e076      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b01      	cmp	r3, #1
 800306e:	d105      	bne.n	800307c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003070:	893b      	ldrh	r3, [r7, #8]
 8003072:	b2da      	uxtb	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	611a      	str	r2, [r3, #16]
 800307a:	e021      	b.n	80030c0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800307c:	893b      	ldrh	r3, [r7, #8]
 800307e:	0a1b      	lsrs	r3, r3, #8
 8003080:	b29b      	uxth	r3, r3
 8003082:	b2da      	uxtb	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800308a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800308c:	6a39      	ldr	r1, [r7, #32]
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f982 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00d      	beq.n	80030b6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d107      	bne.n	80030b2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e050      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c2:	6a39      	ldr	r1, [r7, #32]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f967 	bl	8003398 <I2C_WaitOnTXEFlagUntilTimeout>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00d      	beq.n	80030ec <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d107      	bne.n	80030e8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e035      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030fa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2200      	movs	r2, #0
 8003104:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f000 f82b 	bl	8003164 <I2C_WaitOnFlagUntilTimeout>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00d      	beq.n	8003130 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003122:	d103      	bne.n	800312c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800312a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800312c:	2303      	movs	r3, #3
 800312e:	e013      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	b2da      	uxtb	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	6a3a      	ldr	r2, [r7, #32]
 8003144:	4906      	ldr	r1, [pc, #24]	@ (8003160 <I2C_RequestMemoryRead+0x1cc>)
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f000 f886 	bl	8003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800314c:	4603      	mov	r3, r0
 800314e:	2b00      	cmp	r3, #0
 8003150:	d001      	beq.n	8003156 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	00010002 	.word	0x00010002

08003164 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003174:	e048      	b.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d044      	beq.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fe ff09 	bl	8001f94 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x30>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d139      	bne.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	0c1b      	lsrs	r3, r3, #16
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b01      	cmp	r3, #1
 800319c:	d10d      	bne.n	80031ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	e00c      	b.n	80031d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	43da      	mvns	r2, r3
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4013      	ands	r3, r2
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf0c      	ite	eq
 80031cc:	2301      	moveq	r3, #1
 80031ce:	2300      	movne	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	461a      	mov	r2, r3
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d116      	bne.n	8003208 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e023      	b.n	8003250 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	0c1b      	lsrs	r3, r3, #16
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d10d      	bne.n	800322e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	43da      	mvns	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4013      	ands	r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	bf0c      	ite	eq
 8003224:	2301      	moveq	r3, #1
 8003226:	2300      	movne	r3, #0
 8003228:	b2db      	uxtb	r3, r3
 800322a:	461a      	mov	r2, r3
 800322c:	e00c      	b.n	8003248 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	43da      	mvns	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	4013      	ands	r3, r2
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	461a      	mov	r2, r3
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	429a      	cmp	r2, r3
 800324c:	d093      	beq.n	8003176 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003266:	e071      	b.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003272:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003276:	d123      	bne.n	80032c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003286:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003290:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ac:	f043 0204 	orr.w	r2, r3, #4
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e067      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d041      	beq.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c8:	f7fe fe64 	bl	8001f94 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d302      	bcc.n	80032de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d136      	bne.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	0c1b      	lsrs	r3, r3, #16
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10c      	bne.n	8003302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	43da      	mvns	r2, r3
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	4013      	ands	r3, r2
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	e00b      	b.n	800331a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	699b      	ldr	r3, [r3, #24]
 8003308:	43da      	mvns	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4013      	ands	r3, r2
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf14      	ite	ne
 8003314:	2301      	movne	r3, #1
 8003316:	2300      	moveq	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2220      	movs	r2, #32
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	f043 0220 	orr.w	r2, r3, #32
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e021      	b.n	8003390 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	0c1b      	lsrs	r3, r3, #16
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b01      	cmp	r3, #1
 8003354:	d10c      	bne.n	8003370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	43da      	mvns	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	b29b      	uxth	r3, r3
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	e00b      	b.n	8003388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4013      	ands	r3, r2
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	bf14      	ite	ne
 8003382:	2301      	movne	r3, #1
 8003384:	2300      	moveq	r3, #0
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	f47f af6d 	bne.w	8003268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a4:	e034      	b.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f8e3 	bl	8003572 <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e034      	b.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d028      	beq.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe fde9 	bl	8001f94 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11d      	bne.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033de:	2b80      	cmp	r3, #128	@ 0x80
 80033e0:	d016      	beq.n	8003410 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800341a:	2b80      	cmp	r3, #128	@ 0x80
 800341c:	d1c3      	bne.n	80033a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003434:	e034      	b.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 f89b 	bl	8003572 <I2C_IsAcknowledgeFailed>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e034      	b.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d028      	beq.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344e:	f7fe fda1 	bl	8001f94 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	d302      	bcc.n	8003464 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d11d      	bne.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b04      	cmp	r3, #4
 8003470:	d016      	beq.n	80034a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e007      	b.n	80034b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d1c3      	bne.n	8003436 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c4:	e049      	b.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d119      	bne.n	8003508 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0210 	mvn.w	r2, #16
 80034dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e030      	b.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fe fd44 	bl	8001f94 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11d      	bne.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695b      	ldr	r3, [r3, #20]
 8003524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003528:	2b40      	cmp	r3, #64	@ 0x40
 800352a:	d016      	beq.n	800355a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	f043 0220 	orr.w	r2, r3, #32
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e007      	b.n	800356a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b40      	cmp	r3, #64	@ 0x40
 8003566:	d1ae      	bne.n	80034c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3710      	adds	r7, #16
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003572:	b480      	push	{r7}
 8003574:	b083      	sub	sp, #12
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003588:	d11b      	bne.n	80035c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003592:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ae:	f043 0204 	orr.w	r2, r3, #4
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
	...

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e31d      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e2:	4b94      	ldr	r3, [pc, #592]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035ec:	4b91      	ldr	r3, [pc, #580]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d07b      	beq.n	80036fa <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b08      	cmp	r3, #8
 8003606:	d006      	beq.n	8003616 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d10f      	bne.n	800362e <HAL_RCC_OscConfig+0x5e>
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003614:	d10b      	bne.n	800362e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003616:	4b87      	ldr	r3, [pc, #540]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d06a      	beq.n	80036f8 <HAL_RCC_OscConfig+0x128>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d166      	bne.n	80036f8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e2f7      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b01      	cmp	r3, #1
 8003634:	d106      	bne.n	8003644 <HAL_RCC_OscConfig+0x74>
 8003636:	4b7f      	ldr	r3, [pc, #508]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a7e      	ldr	r2, [pc, #504]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e02d      	b.n	80036a0 <HAL_RCC_OscConfig+0xd0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x96>
 800364c:	4b79      	ldr	r3, [pc, #484]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a78      	ldr	r2, [pc, #480]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b76      	ldr	r3, [pc, #472]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a75      	ldr	r2, [pc, #468]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800365e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e01c      	b.n	80036a0 <HAL_RCC_OscConfig+0xd0>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b05      	cmp	r3, #5
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0xb8>
 800366e:	4b71      	ldr	r3, [pc, #452]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a70      	ldr	r2, [pc, #448]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003674:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	4b6e      	ldr	r3, [pc, #440]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6d      	ldr	r2, [pc, #436]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003680:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	e00b      	b.n	80036a0 <HAL_RCC_OscConfig+0xd0>
 8003688:	4b6a      	ldr	r3, [pc, #424]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a69      	ldr	r2, [pc, #420]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800368e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003692:	6013      	str	r3, [r2, #0]
 8003694:	4b67      	ldr	r3, [pc, #412]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a66      	ldr	r2, [pc, #408]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800369a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800369e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a8:	f7fe fc74 	bl	8001f94 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b0:	f7fe fc70 	bl	8001f94 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	@ 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e2ad      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80036c2:	4b5c      	ldr	r3, [pc, #368]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCC_OscConfig+0xe0>
 80036ce:	e014      	b.n	80036fa <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fe fc60 	bl	8001f94 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036d8:	f7fe fc5c 	bl	8001f94 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	@ 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e299      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80036ea:	4b52      	ldr	r3, [pc, #328]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x108>
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d05a      	beq.n	80037bc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d005      	beq.n	8003718 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b0c      	cmp	r3, #12
 8003710:	d119      	bne.n	8003746 <HAL_RCC_OscConfig+0x176>
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003718:	4b46      	ldr	r3, [pc, #280]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_OscConfig+0x160>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d001      	beq.n	8003730 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e276      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003730:	4b40      	ldr	r3, [pc, #256]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	493d      	ldr	r1, [pc, #244]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003740:	4313      	orrs	r3, r2
 8003742:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003744:	e03a      	b.n	80037bc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d020      	beq.n	8003790 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800374e:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <HAL_RCC_OscConfig+0x268>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fe fc1e 	bl	8001f94 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375c:	f7fe fc1a 	bl	8001f94 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e257      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800376e:	4b31      	ldr	r3, [pc, #196]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377a:	4b2e      	ldr	r3, [pc, #184]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	492a      	ldr	r1, [pc, #168]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800378a:	4313      	orrs	r3, r2
 800378c:	604b      	str	r3, [r1, #4]
 800378e:	e015      	b.n	80037bc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003790:	4b29      	ldr	r3, [pc, #164]	@ (8003838 <HAL_RCC_OscConfig+0x268>)
 8003792:	2200      	movs	r2, #0
 8003794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003796:	f7fe fbfd 	bl	8001f94 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800379e:	f7fe fbf9 	bl	8001f94 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e236      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80037b0:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1f0      	bne.n	800379e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80b8 	beq.w	800393a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d170      	bne.n	80038b2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037d0:	4b18      	ldr	r3, [pc, #96]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_OscConfig+0x218>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e21a      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1a      	ldr	r2, [r3, #32]
 80037ec:	4b11      	ldr	r3, [pc, #68]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d921      	bls.n	800383c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 fc7d 	bl	80040fc <RCC_SetFlashLatencyFromMSIRange>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e208      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800380c:	4b09      	ldr	r3, [pc, #36]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4906      	ldr	r1, [pc, #24]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800381e:	4b05      	ldr	r3, [pc, #20]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	061b      	lsls	r3, r3, #24
 800382c:	4901      	ldr	r1, [pc, #4]	@ (8003834 <HAL_RCC_OscConfig+0x264>)
 800382e:	4313      	orrs	r3, r2
 8003830:	604b      	str	r3, [r1, #4]
 8003832:	e020      	b.n	8003876 <HAL_RCC_OscConfig+0x2a6>
 8003834:	40023800 	.word	0x40023800
 8003838:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800383c:	4b99      	ldr	r3, [pc, #612]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	4996      	ldr	r1, [pc, #600]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800384e:	4b95      	ldr	r3, [pc, #596]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	061b      	lsls	r3, r3, #24
 800385c:	4991      	ldr	r1, [pc, #580]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 800385e:	4313      	orrs	r3, r2
 8003860:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fc48 	bl	80040fc <RCC_SetFlashLatencyFromMSIRange>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e1d3      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	0b5b      	lsrs	r3, r3, #13
 800387c:	3301      	adds	r3, #1
 800387e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003886:	4a87      	ldr	r2, [pc, #540]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	0912      	lsrs	r2, r2, #4
 800388c:	f002 020f 	and.w	r2, r2, #15
 8003890:	4985      	ldr	r1, [pc, #532]	@ (8003aa8 <HAL_RCC_OscConfig+0x4d8>)
 8003892:	5c8a      	ldrb	r2, [r1, r2]
 8003894:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003896:	4a85      	ldr	r2, [pc, #532]	@ (8003aac <HAL_RCC_OscConfig+0x4dc>)
 8003898:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800389a:	4b85      	ldr	r3, [pc, #532]	@ (8003ab0 <HAL_RCC_OscConfig+0x4e0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fe fb2c 	bl	8001efc <HAL_InitTick>
 80038a4:	4603      	mov	r3, r0
 80038a6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d045      	beq.n	800393a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	e1b5      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d029      	beq.n	800390e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038ba:	4b7e      	ldr	r3, [pc, #504]	@ (8003ab4 <HAL_RCC_OscConfig+0x4e4>)
 80038bc:	2201      	movs	r2, #1
 80038be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c0:	f7fe fb68 	bl	8001f94 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038c6:	e008      	b.n	80038da <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038c8:	f7fe fb64 	bl	8001f94 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e1a1      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80038da:	4b72      	ldr	r3, [pc, #456]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d0f0      	beq.n	80038c8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038e6:	4b6f      	ldr	r3, [pc, #444]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	496c      	ldr	r1, [pc, #432]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038f8:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4967      	ldr	r1, [pc, #412]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]
 800390c:	e015      	b.n	800393a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800390e:	4b69      	ldr	r3, [pc, #420]	@ (8003ab4 <HAL_RCC_OscConfig+0x4e4>)
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fb3e 	bl	8001f94 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800391c:	f7fe fb3a 	bl	8001f94 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e177      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800392e:	4b5d      	ldr	r3, [pc, #372]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d030      	beq.n	80039a8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d016      	beq.n	800397c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800394e:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab8 <HAL_RCC_OscConfig+0x4e8>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003954:	f7fe fb1e 	bl	8001f94 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800395c:	f7fe fb1a 	bl	8001f94 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e157      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800396e:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x38c>
 800397a:	e015      	b.n	80039a8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800397c:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab8 <HAL_RCC_OscConfig+0x4e8>)
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003982:	f7fe fb07 	bl	8001f94 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800398a:	f7fe fb03 	bl	8001f94 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e140      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800399c:	4b41      	ldr	r3, [pc, #260]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 800399e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1f0      	bne.n	800398a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80b5 	beq.w	8003b20 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039b6:	2300      	movs	r3, #0
 80039b8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039ba:	4b3a      	ldr	r3, [pc, #232]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039c6:	4b37      	ldr	r3, [pc, #220]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	4a36      	ldr	r2, [pc, #216]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80039cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d0:	6253      	str	r3, [r2, #36]	@ 0x24
 80039d2:	4b34      	ldr	r3, [pc, #208]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039de:	2301      	movs	r3, #1
 80039e0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e2:	4b36      	ldr	r3, [pc, #216]	@ (8003abc <HAL_RCC_OscConfig+0x4ec>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d118      	bne.n	8003a20 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ee:	4b33      	ldr	r3, [pc, #204]	@ (8003abc <HAL_RCC_OscConfig+0x4ec>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a32      	ldr	r2, [pc, #200]	@ (8003abc <HAL_RCC_OscConfig+0x4ec>)
 80039f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039fa:	f7fe facb 	bl	8001f94 <HAL_GetTick>
 80039fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a02:	f7fe fac7 	bl	8001f94 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	@ 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e104      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_RCC_OscConfig+0x4ec>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0f0      	beq.n	8003a02 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d106      	bne.n	8003a36 <HAL_RCC_OscConfig+0x466>
 8003a28:	4b1e      	ldr	r3, [pc, #120]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a32:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a34:	e02d      	b.n	8003a92 <HAL_RCC_OscConfig+0x4c2>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10c      	bne.n	8003a58 <HAL_RCC_OscConfig+0x488>
 8003a3e:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a42:	4a18      	ldr	r2, [pc, #96]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a48:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a4a:	4b16      	ldr	r3, [pc, #88]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	4a15      	ldr	r2, [pc, #84]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a54:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a56:	e01c      	b.n	8003a92 <HAL_RCC_OscConfig+0x4c2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	2b05      	cmp	r3, #5
 8003a5e:	d10c      	bne.n	8003a7a <HAL_RCC_OscConfig+0x4aa>
 8003a60:	4b10      	ldr	r3, [pc, #64]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a64:	4a0f      	ldr	r2, [pc, #60]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a6a:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a70:	4a0c      	ldr	r2, [pc, #48]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a76:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a78:	e00b      	b.n	8003a92 <HAL_RCC_OscConfig+0x4c2>
 8003a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a7e:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a84:	6353      	str	r3, [r2, #52]	@ 0x34
 8003a86:	4b07      	ldr	r3, [pc, #28]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a8a:	4a06      	ldr	r2, [pc, #24]	@ (8003aa4 <HAL_RCC_OscConfig+0x4d4>)
 8003a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a90:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d024      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a9a:	f7fe fa7b 	bl	8001f94 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa0:	e019      	b.n	8003ad6 <HAL_RCC_OscConfig+0x506>
 8003aa2:	bf00      	nop
 8003aa4:	40023800 	.word	0x40023800
 8003aa8:	0800c5f0 	.word	0x0800c5f0
 8003aac:	20000014 	.word	0x20000014
 8003ab0:	20000018 	.word	0x20000018
 8003ab4:	42470020 	.word	0x42470020
 8003ab8:	42470680 	.word	0x42470680
 8003abc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fa68 	bl	8001f94 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e0a3      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ad6:	4b54      	ldr	r3, [pc, #336]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0ee      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4f0>
 8003ae2:	e014      	b.n	8003b0e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae4:	f7fe fa56 	bl	8001f94 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003aea:	e00a      	b.n	8003b02 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aec:	f7fe fa52 	bl	8001f94 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e08d      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003b02:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b06:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1ee      	bne.n	8003aec <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b0e:	7ffb      	ldrb	r3, [r7, #31]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d105      	bne.n	8003b20 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b14:	4b44      	ldr	r3, [pc, #272]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	4a43      	ldr	r2, [pc, #268]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003b1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d079      	beq.n	8003c1c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b0c      	cmp	r3, #12
 8003b2c:	d056      	beq.n	8003bdc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d13b      	bne.n	8003bae <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b3d      	ldr	r3, [pc, #244]	@ (8003c2c <HAL_RCC_OscConfig+0x65c>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fa2a 	bl	8001f94 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe fa26 	bl	8001f94 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e063      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b56:	4b34      	ldr	r3, [pc, #208]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b62:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b72:	4319      	orrs	r1, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	492b      	ldr	r1, [pc, #172]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b80:	4b2a      	ldr	r3, [pc, #168]	@ (8003c2c <HAL_RCC_OscConfig+0x65c>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b86:	f7fe fa05 	bl	8001f94 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b8e:	f7fe fa01 	bl	8001f94 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e03e      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003ba0:	4b21      	ldr	r3, [pc, #132]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0f0      	beq.n	8003b8e <HAL_RCC_OscConfig+0x5be>
 8003bac:	e036      	b.n	8003c1c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bae:	4b1f      	ldr	r3, [pc, #124]	@ (8003c2c <HAL_RCC_OscConfig+0x65c>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fe f9ee 	bl	8001f94 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe f9ea 	bl	8001f94 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e027      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bce:	4b16      	ldr	r3, [pc, #88]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x5ec>
 8003bda:	e01f      	b.n	8003c1c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e01a      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003be8:	4b0f      	ldr	r3, [pc, #60]	@ (8003c28 <HAL_RCC_OscConfig+0x658>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d10d      	bne.n	8003c18 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d106      	bne.n	8003c18 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	42470060 	.word	0x42470060

08003c30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e11a      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c44:	4b8f      	ldr	r3, [pc, #572]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d919      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d105      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x34>
 8003c58:	4b8a      	ldr	r3, [pc, #552]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a89      	ldr	r2, [pc, #548]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003c5e:	f043 0304 	orr.w	r3, r3, #4
 8003c62:	6013      	str	r3, [r2, #0]
 8003c64:	4b87      	ldr	r3, [pc, #540]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f023 0201 	bic.w	r2, r3, #1
 8003c6c:	4985      	ldr	r1, [pc, #532]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c74:	4b83      	ldr	r3, [pc, #524]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d001      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0f9      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c92:	4b7d      	ldr	r3, [pc, #500]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	497a      	ldr	r1, [pc, #488]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 808e 	beq.w	8003dce <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003cba:	4b73      	ldr	r3, [pc, #460]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d121      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e0d7      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d107      	bne.n	8003ce2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d115      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e0cb      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cea:	4b67      	ldr	r3, [pc, #412]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e0bf      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cfa:	4b63      	ldr	r3, [pc, #396]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e0b7      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b5f      	ldr	r3, [pc, #380]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	495c      	ldr	r1, [pc, #368]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d1c:	f7fe f93a 	bl	8001f94 <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d112      	bne.n	8003d50 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d2a:	e00a      	b.n	8003d42 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d2c:	f7fe f932 	bl	8001f94 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e09b      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d42:	4b51      	ldr	r3, [pc, #324]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 030c 	and.w	r3, r3, #12
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d1ee      	bne.n	8003d2c <HAL_RCC_ClockConfig+0xfc>
 8003d4e:	e03e      	b.n	8003dce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b03      	cmp	r3, #3
 8003d56:	d112      	bne.n	8003d7e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d58:	e00a      	b.n	8003d70 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5a:	f7fe f91b 	bl	8001f94 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e084      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d70:	4b45      	ldr	r3, [pc, #276]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b0c      	cmp	r3, #12
 8003d7a:	d1ee      	bne.n	8003d5a <HAL_RCC_ClockConfig+0x12a>
 8003d7c:	e027      	b.n	8003dce <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d11d      	bne.n	8003dc2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d86:	e00a      	b.n	8003d9e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d88:	f7fe f904 	bl	8001f94 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e06d      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d1ee      	bne.n	8003d88 <HAL_RCC_ClockConfig+0x158>
 8003daa:	e010      	b.n	8003dce <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dac:	f7fe f8f2 	bl	8001f94 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e05b      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003dc2:	4b31      	ldr	r3, [pc, #196]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1ee      	bne.n	8003dac <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dce:	4b2d      	ldr	r3, [pc, #180]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d219      	bcs.n	8003e10 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d105      	bne.n	8003dee <HAL_RCC_ClockConfig+0x1be>
 8003de2:	4b28      	ldr	r3, [pc, #160]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a27      	ldr	r2, [pc, #156]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003de8:	f043 0304 	orr.w	r3, r3, #4
 8003dec:	6013      	str	r3, [r2, #0]
 8003dee:	4b25      	ldr	r3, [pc, #148]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	4923      	ldr	r1, [pc, #140]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dfe:	4b21      	ldr	r3, [pc, #132]	@ (8003e84 <HAL_RCC_ClockConfig+0x254>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e034      	b.n	8003e7a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0304 	and.w	r3, r3, #4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e1c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4917      	ldr	r1, [pc, #92]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d009      	beq.n	8003e4e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e3a:	4b13      	ldr	r3, [pc, #76]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	490f      	ldr	r1, [pc, #60]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e4e:	f000 f823 	bl	8003e98 <HAL_RCC_GetSysClockFreq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <HAL_RCC_ClockConfig+0x258>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	091b      	lsrs	r3, r3, #4
 8003e5a:	f003 030f 	and.w	r3, r3, #15
 8003e5e:	490b      	ldr	r1, [pc, #44]	@ (8003e8c <HAL_RCC_ClockConfig+0x25c>)
 8003e60:	5ccb      	ldrb	r3, [r1, r3]
 8003e62:	fa22 f303 	lsr.w	r3, r2, r3
 8003e66:	4a0a      	ldr	r2, [pc, #40]	@ (8003e90 <HAL_RCC_ClockConfig+0x260>)
 8003e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e94 <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7fe f844 	bl	8001efc <HAL_InitTick>
 8003e74:	4603      	mov	r3, r0
 8003e76:	72fb      	strb	r3, [r7, #11]

  return status;
 8003e78:	7afb      	ldrb	r3, [r7, #11]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023c00 	.word	0x40023c00
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	0800c5f0 	.word	0x0800c5f0
 8003e90:	20000014 	.word	0x20000014
 8003e94:	20000018 	.word	0x20000018

08003e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e9c:	b092      	sub	sp, #72	@ 0x48
 8003e9e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003ea0:	4b79      	ldr	r3, [pc, #484]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ea8:	f003 030c 	and.w	r3, r3, #12
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d00d      	beq.n	8003ecc <HAL_RCC_GetSysClockFreq+0x34>
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	f200 80d5 	bhi.w	8004060 <HAL_RCC_GetSysClockFreq+0x1c8>
 8003eb6:	2b04      	cmp	r3, #4
 8003eb8:	d002      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0x28>
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d003      	beq.n	8003ec6 <HAL_RCC_GetSysClockFreq+0x2e>
 8003ebe:	e0cf      	b.n	8004060 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ec0:	4b72      	ldr	r3, [pc, #456]	@ (800408c <HAL_RCC_GetSysClockFreq+0x1f4>)
 8003ec2:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003ec4:	e0da      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ec6:	4b72      	ldr	r3, [pc, #456]	@ (8004090 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8003ec8:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 8003eca:	e0d7      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ece:	0c9b      	lsrs	r3, r3, #18
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8004094 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8003ed6:	5c9b      	ldrb	r3, [r3, r2]
 8003ed8:	63bb      	str	r3, [r7, #56]	@ 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003edc:	0d9b      	lsrs	r3, r3, #22
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ee6:	4b68      	ldr	r3, [pc, #416]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d05d      	beq.n	8003fae <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4604      	mov	r4, r0
 8003efc:	460d      	mov	r5, r1
 8003efe:	4622      	mov	r2, r4
 8003f00:	462b      	mov	r3, r5
 8003f02:	f04f 0000 	mov.w	r0, #0
 8003f06:	f04f 0100 	mov.w	r1, #0
 8003f0a:	0159      	lsls	r1, r3, #5
 8003f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f10:	0150      	lsls	r0, r2, #5
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4621      	mov	r1, r4
 8003f18:	1a51      	subs	r1, r2, r1
 8003f1a:	6139      	str	r1, [r7, #16]
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	f04f 0200 	mov.w	r2, #0
 8003f28:	f04f 0300 	mov.w	r3, #0
 8003f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f30:	4659      	mov	r1, fp
 8003f32:	018b      	lsls	r3, r1, #6
 8003f34:	4651      	mov	r1, sl
 8003f36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f3a:	4651      	mov	r1, sl
 8003f3c:	018a      	lsls	r2, r1, #6
 8003f3e:	46d4      	mov	ip, sl
 8003f40:	ebb2 080c 	subs.w	r8, r2, ip
 8003f44:	4659      	mov	r1, fp
 8003f46:	eb63 0901 	sbc.w	r9, r3, r1
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f5e:	4690      	mov	r8, r2
 8003f60:	4699      	mov	r9, r3
 8003f62:	4623      	mov	r3, r4
 8003f64:	eb18 0303 	adds.w	r3, r8, r3
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	462b      	mov	r3, r5
 8003f6c:	eb49 0303 	adc.w	r3, r9, r3
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	f04f 0200 	mov.w	r2, #0
 8003f76:	f04f 0300 	mov.w	r3, #0
 8003f7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f7e:	4629      	mov	r1, r5
 8003f80:	024b      	lsls	r3, r1, #9
 8003f82:	4620      	mov	r0, r4
 8003f84:	4629      	mov	r1, r5
 8003f86:	4604      	mov	r4, r0
 8003f88:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8003f8c:	4601      	mov	r1, r0
 8003f8e:	024a      	lsls	r2, r1, #9
 8003f90:	4610      	mov	r0, r2
 8003f92:	4619      	mov	r1, r3
 8003f94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f96:	2200      	movs	r2, #0
 8003f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fa0:	f7fd f8f4 	bl	800118c <__aeabi_uldivmod>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	4613      	mov	r3, r2
 8003faa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fac:	e055      	b.n	800405a <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fb6:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fba:	4642      	mov	r2, r8
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	f04f 0000 	mov.w	r0, #0
 8003fc2:	f04f 0100 	mov.w	r1, #0
 8003fc6:	0159      	lsls	r1, r3, #5
 8003fc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fcc:	0150      	lsls	r0, r2, #5
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	46c4      	mov	ip, r8
 8003fd4:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003fd8:	4640      	mov	r0, r8
 8003fda:	4649      	mov	r1, r9
 8003fdc:	468c      	mov	ip, r1
 8003fde:	eb63 0b0c 	sbc.w	fp, r3, ip
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fee:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ff2:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ff6:	ebb2 040a 	subs.w	r4, r2, sl
 8003ffa:	eb63 050b 	sbc.w	r5, r3, fp
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	00eb      	lsls	r3, r5, #3
 8004008:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400c:	00e2      	lsls	r2, r4, #3
 800400e:	4614      	mov	r4, r2
 8004010:	461d      	mov	r5, r3
 8004012:	4603      	mov	r3, r0
 8004014:	18e3      	adds	r3, r4, r3
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	460b      	mov	r3, r1
 800401a:	eb45 0303 	adc.w	r3, r5, r3
 800401e:	607b      	str	r3, [r7, #4]
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 4500 	ldrd	r4, r5, [r7]
 800402c:	4629      	mov	r1, r5
 800402e:	028b      	lsls	r3, r1, #10
 8004030:	4620      	mov	r0, r4
 8004032:	4629      	mov	r1, r5
 8004034:	4604      	mov	r4, r0
 8004036:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800403a:	4601      	mov	r1, r0
 800403c:	028a      	lsls	r2, r1, #10
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004044:	2200      	movs	r2, #0
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	61fa      	str	r2, [r7, #28]
 800404a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800404e:	f7fd f89d 	bl	800118c <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4613      	mov	r3, r2
 8004058:	647b      	str	r3, [r7, #68]	@ 0x44
      }
      sysclockfreq = pllvco;
 800405a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405c:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800405e:	e00d      	b.n	800407c <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004060:	4b09      	ldr	r3, [pc, #36]	@ (8004088 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	0b5b      	lsrs	r3, r3, #13
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	633b      	str	r3, [r7, #48]	@ 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800406c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406e:	3301      	adds	r3, #1
 8004070:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	643b      	str	r3, [r7, #64]	@ 0x40
      break;
 800407a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800407c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 800407e:	4618      	mov	r0, r3
 8004080:	3748      	adds	r7, #72	@ 0x48
 8004082:	46bd      	mov	sp, r7
 8004084:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004088:	40023800 	.word	0x40023800
 800408c:	00f42400 	.word	0x00f42400
 8004090:	007a1200 	.word	0x007a1200
 8004094:	0800c5e4 	.word	0x0800c5e4

08004098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004098:	b480      	push	{r7}
 800409a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800409c:	4b02      	ldr	r3, [pc, #8]	@ (80040a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800409e:	681b      	ldr	r3, [r3, #0]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	20000014 	.word	0x20000014

080040ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040b0:	f7ff fff2 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b05      	ldr	r3, [pc, #20]	@ (80040cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	4903      	ldr	r1, [pc, #12]	@ (80040d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40023800 	.word	0x40023800
 80040d0:	0800c600 	.word	0x0800c600

080040d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040d8:	f7ff ffde 	bl	8004098 <HAL_RCC_GetHCLKFreq>
 80040dc:	4602      	mov	r2, r0
 80040de:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	0adb      	lsrs	r3, r3, #11
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	4903      	ldr	r1, [pc, #12]	@ (80040f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ea:	5ccb      	ldrb	r3, [r1, r3]
 80040ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40023800 	.word	0x40023800
 80040f8:	0800c600 	.word	0x0800c600

080040fc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004104:	2300      	movs	r3, #0
 8004106:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004108:	4b29      	ldr	r3, [pc, #164]	@ (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d12c      	bne.n	800416e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004114:	4b26      	ldr	r3, [pc, #152]	@ (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004120:	4b24      	ldr	r3, [pc, #144]	@ (80041b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8004128:	617b      	str	r3, [r7, #20]
 800412a:	e016      	b.n	800415a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800412c:	4b20      	ldr	r3, [pc, #128]	@ (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800412e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004130:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004136:	6253      	str	r3, [r2, #36]	@ 0x24
 8004138:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800413a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004144:	4b1b      	ldr	r3, [pc, #108]	@ (80041b4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 800414c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800414e:	4b18      	ldr	r3, [pc, #96]	@ (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004152:	4a17      	ldr	r2, [pc, #92]	@ (80041b0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004158:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8004160:	d105      	bne.n	800416e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004168:	d101      	bne.n	800416e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800416a:	2301      	movs	r3, #1
 800416c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8004174:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a0f      	ldr	r2, [pc, #60]	@ (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800417a:	f043 0304 	orr.w	r3, r3, #4
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b0d      	ldr	r3, [pc, #52]	@ (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f023 0201 	bic.w	r2, r3, #1
 8004188:	490b      	ldr	r1, [pc, #44]	@ (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004190:	4b09      	ldr	r3, [pc, #36]	@ (80041b8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	429a      	cmp	r2, r3
 800419c:	d001      	beq.n	80041a2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bc80      	pop	{r7}
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800
 80041b4:	40007000 	.word	0x40007000
 80041b8:	40023c00 	.word	0x40023c00

080041bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e042      	b.n	8004254 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd fd0e 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2224      	movs	r2, #36	@ 0x24
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f971 	bl	80044e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004214:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695a      	ldr	r2, [r3, #20]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004224:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68da      	ldr	r2, [r3, #12]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004234:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08a      	sub	sp, #40	@ 0x28
 8004260:	af02      	add	r7, sp, #8
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	603b      	str	r3, [r7, #0]
 8004268:	4613      	mov	r3, r2
 800426a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b20      	cmp	r3, #32
 800427a:	d175      	bne.n	8004368 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <HAL_UART_Transmit+0x2c>
 8004282:	88fb      	ldrh	r3, [r7, #6]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e06e      	b.n	800436a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2221      	movs	r2, #33	@ 0x21
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800429a:	f7fd fe7b 	bl	8001f94 <HAL_GetTick>
 800429e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	88fa      	ldrh	r2, [r7, #6]
 80042aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b4:	d108      	bne.n	80042c8 <HAL_UART_Transmit+0x6c>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d104      	bne.n	80042c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	61bb      	str	r3, [r7, #24]
 80042c6:	e003      	b.n	80042d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042cc:	2300      	movs	r3, #0
 80042ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042d0:	e02e      	b.n	8004330 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2200      	movs	r2, #0
 80042da:	2180      	movs	r1, #128	@ 0x80
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f848 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e03a      	b.n	800436a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10b      	bne.n	8004312 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	461a      	mov	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004308:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	3302      	adds	r3, #2
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	e007      	b.n	8004322 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	3301      	adds	r3, #1
 8004320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1cb      	bne.n	80042d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2200      	movs	r2, #0
 8004342:	2140      	movs	r1, #64	@ 0x40
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f814 	bl	8004372 <UART_WaitOnFlagUntilTimeout>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e006      	b.n	800436a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	e000      	b.n	800436a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004368:	2302      	movs	r3, #2
  }
}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b086      	sub	sp, #24
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4613      	mov	r3, r2
 8004380:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	e03b      	b.n	80043fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438a:	d037      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438c:	f7fd fe02 	bl	8001f94 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	6a3a      	ldr	r2, [r7, #32]
 8004398:	429a      	cmp	r2, r3
 800439a:	d302      	bcc.n	80043a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800439c:	6a3b      	ldr	r3, [r7, #32]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e03a      	b.n	800441c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d023      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2b80      	cmp	r3, #128	@ 0x80
 80043b8:	d020      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	2b40      	cmp	r3, #64	@ 0x40
 80043be:	d01d      	beq.n	80043fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d116      	bne.n	80043fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043ce:	2300      	movs	r3, #0
 80043d0:	617b      	str	r3, [r7, #20]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	617b      	str	r3, [r7, #20]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f81d 	bl	8004424 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2208      	movs	r2, #8
 80043ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e00f      	b.n	800441c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	429a      	cmp	r2, r3
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	461a      	mov	r2, r3
 8004414:	79fb      	ldrb	r3, [r7, #7]
 8004416:	429a      	cmp	r2, r3
 8004418:	d0b4      	beq.n	8004384 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004424:	b480      	push	{r7}
 8004426:	b095      	sub	sp, #84	@ 0x54
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	330c      	adds	r3, #12
 8004432:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800443c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800444c:	643a      	str	r2, [r7, #64]	@ 0x40
 800444e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004450:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004452:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004454:	e841 2300 	strex	r3, r2, [r1]
 8004458:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800445a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1e5      	bne.n	800442c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	3314      	adds	r3, #20
 8004466:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f023 0301 	bic.w	r3, r3, #1
 8004476:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3314      	adds	r3, #20
 800447e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004480:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004486:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e5      	bne.n	8004460 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004498:	2b01      	cmp	r3, #1
 800449a:	d119      	bne.n	80044d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	330c      	adds	r3, #12
 80044a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	e853 3f00 	ldrex	r3, [r3]
 80044aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f023 0310 	bic.w	r3, r3, #16
 80044b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	330c      	adds	r3, #12
 80044ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044bc:	61ba      	str	r2, [r7, #24]
 80044be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c0:	6979      	ldr	r1, [r7, #20]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	e841 2300 	strex	r3, r2, [r1]
 80044c8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e5      	bne.n	800449c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044de:	bf00      	nop
 80044e0:	3754      	adds	r7, #84	@ 0x54
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	431a      	orrs	r2, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	4313      	orrs	r3, r2
 800451c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004528:	f023 030c 	bic.w	r3, r3, #12
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6812      	ldr	r2, [r2, #0]
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	430b      	orrs	r3, r1
 8004534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	699a      	ldr	r2, [r3, #24]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a55      	ldr	r2, [pc, #340]	@ (80046a8 <UART_SetConfig+0x1c0>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d103      	bne.n	800455e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004556:	f7ff fdbd 	bl	80040d4 <HAL_RCC_GetPCLK2Freq>
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	e002      	b.n	8004564 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800455e:	f7ff fda5 	bl	80040ac <HAL_RCC_GetPCLK1Freq>
 8004562:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800456c:	d14c      	bne.n	8004608 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009a      	lsls	r2, r3, #2
 8004578:	441a      	add	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fbb2 f3f3 	udiv	r3, r2, r3
 8004584:	4a49      	ldr	r2, [pc, #292]	@ (80046ac <UART_SetConfig+0x1c4>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	0119      	lsls	r1, r3, #4
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	4613      	mov	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	009a      	lsls	r2, r3, #2
 8004598:	441a      	add	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a4:	4b41      	ldr	r3, [pc, #260]	@ (80046ac <UART_SetConfig+0x1c4>)
 80045a6:	fba3 0302 	umull	r0, r3, r3, r2
 80045aa:	095b      	lsrs	r3, r3, #5
 80045ac:	2064      	movs	r0, #100	@ 0x64
 80045ae:	fb00 f303 	mul.w	r3, r0, r3
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	00db      	lsls	r3, r3, #3
 80045b6:	3332      	adds	r3, #50	@ 0x32
 80045b8:	4a3c      	ldr	r2, [pc, #240]	@ (80046ac <UART_SetConfig+0x1c4>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	095b      	lsrs	r3, r3, #5
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045c6:	4419      	add	r1, r3
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009a      	lsls	r2, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	fbb2 f2f3 	udiv	r2, r2, r3
 80045de:	4b33      	ldr	r3, [pc, #204]	@ (80046ac <UART_SetConfig+0x1c4>)
 80045e0:	fba3 0302 	umull	r0, r3, r3, r2
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	2064      	movs	r0, #100	@ 0x64
 80045e8:	fb00 f303 	mul.w	r3, r0, r3
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	3332      	adds	r3, #50	@ 0x32
 80045f2:	4a2e      	ldr	r2, [pc, #184]	@ (80046ac <UART_SetConfig+0x1c4>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	440a      	add	r2, r1
 8004604:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004606:	e04a      	b.n	800469e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009a      	lsls	r2, r3, #2
 8004612:	441a      	add	r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	fbb2 f3f3 	udiv	r3, r2, r3
 800461e:	4a23      	ldr	r2, [pc, #140]	@ (80046ac <UART_SetConfig+0x1c4>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	0119      	lsls	r1, r3, #4
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	4613      	mov	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	4413      	add	r3, r2
 8004630:	009a      	lsls	r2, r3, #2
 8004632:	441a      	add	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	fbb2 f2f3 	udiv	r2, r2, r3
 800463e:	4b1b      	ldr	r3, [pc, #108]	@ (80046ac <UART_SetConfig+0x1c4>)
 8004640:	fba3 0302 	umull	r0, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2064      	movs	r0, #100	@ 0x64
 8004648:	fb00 f303 	mul.w	r3, r0, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	3332      	adds	r3, #50	@ 0x32
 8004652:	4a16      	ldr	r2, [pc, #88]	@ (80046ac <UART_SetConfig+0x1c4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800465e:	4419      	add	r1, r3
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4613      	mov	r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	009a      	lsls	r2, r3, #2
 800466a:	441a      	add	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	fbb2 f2f3 	udiv	r2, r2, r3
 8004676:	4b0d      	ldr	r3, [pc, #52]	@ (80046ac <UART_SetConfig+0x1c4>)
 8004678:	fba3 0302 	umull	r0, r3, r3, r2
 800467c:	095b      	lsrs	r3, r3, #5
 800467e:	2064      	movs	r0, #100	@ 0x64
 8004680:	fb00 f303 	mul.w	r3, r0, r3
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	3332      	adds	r3, #50	@ 0x32
 800468a:	4a08      	ldr	r2, [pc, #32]	@ (80046ac <UART_SetConfig+0x1c4>)
 800468c:	fba2 2303 	umull	r2, r3, r2, r3
 8004690:	095b      	lsrs	r3, r3, #5
 8004692:	f003 020f 	and.w	r2, r3, #15
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	440a      	add	r2, r1
 800469c:	609a      	str	r2, [r3, #8]
}
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40013800 	.word	0x40013800
 80046ac:	51eb851f 	.word	0x51eb851f

080046b0 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	607a      	str	r2, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	460b      	mov	r3, r1
 80046be:	72fb      	strb	r3, [r7, #11]
 80046c0:	4613      	mov	r3, r2
 80046c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d102      	bne.n	80046d0 <lsm6dso_read_reg+0x20>
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	e009      	b.n	80046e4 <lsm6dso_read_reg+0x34>

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685c      	ldr	r4, [r3, #4]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	68d8      	ldr	r0, [r3, #12]
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	7af9      	ldrb	r1, [r7, #11]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	47a0      	blx	r4
 80046e0:	6178      	str	r0, [r7, #20]

  return ret;
 80046e2:	697b      	ldr	r3, [r7, #20]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd90      	pop	{r4, r7, pc}

080046ec <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80046ec:	b590      	push	{r4, r7, lr}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	607a      	str	r2, [r7, #4]
 80046f6:	461a      	mov	r2, r3
 80046f8:	460b      	mov	r3, r1
 80046fa:	72fb      	strb	r3, [r7, #11]
 80046fc:	4613      	mov	r3, r2
 80046fe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL) return -1;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d102      	bne.n	800470c <lsm6dso_write_reg+0x20>
 8004706:	f04f 33ff 	mov.w	r3, #4294967295
 800470a:	e009      	b.n	8004720 <lsm6dso_write_reg+0x34>

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681c      	ldr	r4, [r3, #0]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68d8      	ldr	r0, [r3, #12]
 8004714:	893b      	ldrh	r3, [r7, #8]
 8004716:	7af9      	ldrb	r1, [r7, #11]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	47a0      	blx	r4
 800471c:	6178      	str	r0, [r7, #20]

  return ret;
 800471e:	697b      	ldr	r3, [r7, #20]
}
 8004720:	4618      	mov	r0, r3
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bd90      	pop	{r4, r7, pc}

08004728 <lsm6dso_from_fs4_to_mg>:
{
  return ((float_t)lsb) * 0.061f;
}

float_t lsm6dso_from_fs4_to_mg(int16_t lsb)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb) * 0.122f;
 8004732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc fae8 	bl	8000d0c <__aeabi_i2f>
 800473c:	4603      	mov	r3, r0
 800473e:	4904      	ldr	r1, [pc, #16]	@ (8004750 <lsm6dso_from_fs4_to_mg+0x28>)
 8004740:	4618      	mov	r0, r3
 8004742:	f7fc fb37 	bl	8000db4 <__aeabi_fmul>
 8004746:	4603      	mov	r3, r0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	3df9db23 	.word	0x3df9db23

08004754 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	460b      	mov	r3, r1
 800475e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004760:	f107 0208 	add.w	r2, r7, #8
 8004764:	2301      	movs	r3, #1
 8004766:	2110      	movs	r1, #16
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ffa1 	bl	80046b0 <lsm6dso_read_reg>
 800476e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10f      	bne.n	8004796 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8004776:	78fb      	ldrb	r3, [r7, #3]
 8004778:	f003 0303 	and.w	r3, r3, #3
 800477c:	b2da      	uxtb	r2, r3
 800477e:	7a3b      	ldrb	r3, [r7, #8]
 8004780:	f362 0383 	bfi	r3, r2, #2, #2
 8004784:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004786:	f107 0208 	add.w	r2, r7, #8
 800478a:	2301      	movs	r3, #1
 800478c:	2110      	movs	r1, #16
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7ff ffac 	bl	80046ec <lsm6dso_write_reg>
 8004794:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004796:	68fb      	ldr	r3, [r7, #12]
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80047b0:	f107 030c 	add.w	r3, r7, #12
 80047b4:	4619      	mov	r1, r3
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 fa93 	bl	8004ce2 <lsm6dso_fsm_enable_get>
 80047bc:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <lsm6dso_xl_data_rate_set+0x28>
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	e0e0      	b.n	800498a <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80047c8:	7b3b      	ldrb	r3, [r7, #12]
 80047ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80047ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80047d0:	7b3b      	ldrb	r3, [r7, #12]
 80047d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80047d6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80047d8:	4313      	orrs	r3, r2
 80047da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80047dc:	7b3b      	ldrb	r3, [r7, #12]
 80047de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80047e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80047e4:	4313      	orrs	r3, r2
 80047e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80047e8:	7b3b      	ldrb	r3, [r7, #12]
 80047ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80047ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80047f0:	4313      	orrs	r3, r2
 80047f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80047f4:	7b3b      	ldrb	r3, [r7, #12]
 80047f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80047fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80047fc:	4313      	orrs	r3, r2
 80047fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004800:	7b3b      	ldrb	r3, [r7, #12]
 8004802:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004806:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8004808:	4313      	orrs	r3, r2
 800480a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800480c:	7b3b      	ldrb	r3, [r7, #12]
 800480e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004812:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8004814:	4313      	orrs	r3, r2
 8004816:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8004818:	7b3b      	ldrb	r3, [r7, #12]
 800481a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800481e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8004820:	4313      	orrs	r3, r2
 8004822:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004824:	7b7b      	ldrb	r3, [r7, #13]
 8004826:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800482a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800482c:	4313      	orrs	r3, r2
 800482e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004830:	7b7b      	ldrb	r3, [r7, #13]
 8004832:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004836:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8004838:	4313      	orrs	r3, r2
 800483a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800483c:	7b7b      	ldrb	r3, [r7, #13]
 800483e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004842:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8004844:	4313      	orrs	r3, r2
 8004846:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8004848:	7b7b      	ldrb	r3, [r7, #13]
 800484a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800484e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8004850:	4313      	orrs	r3, r2
 8004852:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004854:	7b7b      	ldrb	r3, [r7, #13]
 8004856:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800485a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800485c:	4313      	orrs	r3, r2
 800485e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004860:	7b7b      	ldrb	r3, [r7, #13]
 8004862:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004866:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8004868:	4313      	orrs	r3, r2
 800486a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800486c:	7b7b      	ldrb	r3, [r7, #13]
 800486e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004872:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8004874:	4313      	orrs	r3, r2
 8004876:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8004878:	7b7b      	ldrb	r3, [r7, #13]
 800487a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800487e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8004880:	4313      	orrs	r3, r2
 8004882:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8004884:	2b01      	cmp	r3, #1
 8004886:	d164      	bne.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8004888:	f107 030b 	add.w	r3, r7, #11
 800488c:	4619      	mov	r1, r3
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fa48 	bl	8004d24 <lsm6dso_fsm_data_rate_get>
 8004894:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <lsm6dso_xl_data_rate_set+0x100>
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	e074      	b.n	800498a <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80048a0:	7afb      	ldrb	r3, [r7, #11]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d852      	bhi.n	800494c <lsm6dso_xl_data_rate_set+0x1ac>
 80048a6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <lsm6dso_xl_data_rate_set+0x10c>)
 80048a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ac:	080048bd 	.word	0x080048bd
 80048b0:	080048cf 	.word	0x080048cf
 80048b4:	080048ed 	.word	0x080048ed
 80048b8:	08004917 	.word	0x08004917
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80048bc:	78fb      	ldrb	r3, [r7, #3]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d102      	bne.n	80048c8 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80048c2:	2301      	movs	r3, #1
 80048c4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80048c6:	e044      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80048c8:	78fb      	ldrb	r3, [r7, #3]
 80048ca:	75fb      	strb	r3, [r7, #23]
        break;
 80048cc:	e041      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80048d4:	2302      	movs	r3, #2
 80048d6:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80048d8:	e03b      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80048da:	78fb      	ldrb	r3, [r7, #3]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d102      	bne.n	80048e6 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 80048e0:	2302      	movs	r3, #2
 80048e2:	75fb      	strb	r3, [r7, #23]
        break;
 80048e4:	e035      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	75fb      	strb	r3, [r7, #23]
        break;
 80048ea:	e032      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d102      	bne.n	80048f8 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80048f2:	2303      	movs	r3, #3
 80048f4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80048f6:	e02c      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 80048f8:	78fb      	ldrb	r3, [r7, #3]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 80048fe:	2303      	movs	r3, #3
 8004900:	75fb      	strb	r3, [r7, #23]
        break;
 8004902:	e026      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8004904:	78fb      	ldrb	r3, [r7, #3]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d102      	bne.n	8004910 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800490a:	2303      	movs	r3, #3
 800490c:	75fb      	strb	r3, [r7, #23]
        break;
 800490e:	e020      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	75fb      	strb	r3, [r7, #23]
        break;
 8004914:	e01d      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d102      	bne.n	8004922 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800491c:	2304      	movs	r3, #4
 800491e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8004920:	e017      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d102      	bne.n	800492e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004928:	2304      	movs	r3, #4
 800492a:	75fb      	strb	r3, [r7, #23]
        break;
 800492c:	e011      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800492e:	78fb      	ldrb	r3, [r7, #3]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d102      	bne.n	800493a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004934:	2304      	movs	r3, #4
 8004936:	75fb      	strb	r3, [r7, #23]
        break;
 8004938:	e00b      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d102      	bne.n	8004946 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8004940:	2304      	movs	r3, #4
 8004942:	75fb      	strb	r3, [r7, #23]
        break;
 8004944:	e005      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8004946:	78fb      	ldrb	r3, [r7, #3]
 8004948:	75fb      	strb	r3, [r7, #23]
        break;
 800494a:	e002      	b.n	8004952 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	75fb      	strb	r3, [r7, #23]
        break;
 8004950:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004952:	f107 0208 	add.w	r2, r7, #8
 8004956:	2301      	movs	r3, #1
 8004958:	2110      	movs	r1, #16
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff fea8 	bl	80046b0 <lsm6dso_read_reg>
 8004960:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8004962:	7dfb      	ldrb	r3, [r7, #23]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	b2da      	uxtb	r2, r3
 800496a:	7a3b      	ldrb	r3, [r7, #8]
 800496c:	f362 1307 	bfi	r3, r2, #4, #4
 8004970:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8004972:	f107 0208 	add.w	r2, r7, #8
 8004976:	2301      	movs	r3, #1
 8004978:	2110      	movs	r1, #16
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff feb6 	bl	80046ec <lsm6dso_write_reg>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	613b      	str	r3, [r7, #16]

  return ret;
 8004988:	693b      	ldr	r3, [r7, #16]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop

08004994 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 800499e:	f107 020c 	add.w	r2, r7, #12
 80049a2:	2306      	movs	r3, #6
 80049a4:	2128      	movs	r1, #40	@ 0x28
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fe82 	bl	80046b0 <lsm6dso_read_reg>
 80049ac:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80049ae:	7b7b      	ldrb	r3, [r7, #13]
 80049b0:	b21a      	sxth	r2, r3
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049bc:	b29b      	uxth	r3, r3
 80049be:	021b      	lsls	r3, r3, #8
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	7b3a      	ldrb	r2, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	b21a      	sxth	r2, r3
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80049ce:	7bfa      	ldrb	r2, [r7, #15]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	3302      	adds	r3, #2
 80049d4:	b212      	sxth	r2, r2
 80049d6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	3302      	adds	r3, #2
 80049dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	021b      	lsls	r3, r3, #8
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	7bba      	ldrb	r2, [r7, #14]
 80049e8:	4413      	add	r3, r2
 80049ea:	b29a      	uxth	r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	3302      	adds	r3, #2
 80049f0:	b212      	sxth	r2, r2
 80049f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80049f4:	7c7a      	ldrb	r2, [r7, #17]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	3304      	adds	r3, #4
 80049fa:	b212      	sxth	r2, r2
 80049fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	3304      	adds	r3, #4
 8004a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	021b      	lsls	r3, r3, #8
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	7c3a      	ldrb	r2, [r7, #16]
 8004a0e:	4413      	add	r3, r2
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	3304      	adds	r3, #4
 8004a16:	b212      	sxth	r2, r2
 8004a18:	801a      	strh	r2, [r3, #0]

  return ret;
 8004a1a:	697b      	ldr	r3, [r7, #20]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(const stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8004a30:	2300      	movs	r3, #0
 8004a32:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	7a3b      	ldrb	r3, [r7, #8]
 8004a3e:	f362 1387 	bfi	r3, r2, #6, #2
 8004a42:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8004a44:	f107 0208 	add.w	r2, r7, #8
 8004a48:	2301      	movs	r3, #1
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fe4d 	bl	80046ec <lsm6dso_write_reg>
 8004a52:	60f8      	str	r0, [r7, #12]

  return ret;
 8004a54:	68fb      	ldr	r3, [r7, #12]
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
 8004a66:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8004a68:	2301      	movs	r3, #1
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	210f      	movs	r1, #15
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fe1e 	bl	80046b0 <lsm6dso_read_reg>
 8004a74:	60f8      	str	r0, [r7, #12]

  return ret;
 8004a76:	68fb      	ldr	r3, [r7, #12]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004a8c:	f107 0208 	add.w	r2, r7, #8
 8004a90:	2301      	movs	r3, #1
 8004a92:	2112      	movs	r1, #18
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fe0b 	bl	80046b0 <lsm6dso_read_reg>
 8004a9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <lsm6dso_reset_set+0x42>
  {
    reg.sw_reset = val;
 8004aa2:	78fb      	ldrb	r3, [r7, #3]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	7a3b      	ldrb	r3, [r7, #8]
 8004aac:	f362 0300 	bfi	r3, r2, #0, #1
 8004ab0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004ab2:	f107 0208 	add.w	r2, r7, #8
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	2112      	movs	r1, #18
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7ff fe16 	bl	80046ec <lsm6dso_write_reg>
 8004ac0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3710      	adds	r7, #16
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <lsm6dso_reset_get>:
  * @param  val      Get the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8004ad6:	f107 0208 	add.w	r2, r7, #8
 8004ada:	2301      	movs	r3, #1
 8004adc:	2112      	movs	r1, #18
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fde6 	bl	80046b0 <lsm6dso_read_reg>
 8004ae4:	60f8      	str	r0, [r7, #12]
  *val = reg.sw_reset;
 8004ae6:	7a3b      	ldrb	r3, [r7, #8]
 8004ae8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	701a      	strb	r2, [r3, #0]

  return ret;
 8004af4:	68fb      	ldr	r3, [r7, #12]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(const stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b086      	sub	sp, #24
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	460b      	mov	r3, r1
 8004b08:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004b0a:	f107 020c 	add.w	r2, r7, #12
 8004b0e:	2301      	movs	r3, #1
 8004b10:	2118      	movs	r1, #24
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fdcc 	bl	80046b0 <lsm6dso_read_reg>
 8004b18:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8004b1a:	78fb      	ldrb	r3, [r7, #3]
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	7b3b      	ldrb	r3, [r7, #12]
 8004b28:	f362 0341 	bfi	r3, r2, #1, #1
 8004b2c:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8004b2e:	f107 020c 	add.w	r2, r7, #12
 8004b32:	2301      	movs	r3, #1
 8004b34:	2118      	movs	r1, #24
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fdd8 	bl	80046ec <lsm6dso_write_reg>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	4413      	add	r3, r2
 8004b42:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <lsm6dso_i3c_disable_set+0x50>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	e01b      	b.n	8004b86 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8004b4e:	f107 0210 	add.w	r2, r7, #16
 8004b52:	2301      	movs	r3, #1
 8004b54:	2162      	movs	r1, #98	@ 0x62
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f7ff fdaa 	bl	80046b0 <lsm6dso_read_reg>
 8004b5c:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8004b5e:	78fb      	ldrb	r3, [r7, #3]
 8004b60:	f003 0303 	and.w	r3, r3, #3
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	7c3b      	ldrb	r3, [r7, #16]
 8004b68:	f362 03c4 	bfi	r3, r2, #3, #2
 8004b6c:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8004b6e:	f107 0210 	add.w	r2, r7, #16
 8004b72:	2301      	movs	r3, #1
 8004b74:	2162      	movs	r1, #98	@ 0x62
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f7ff fdb8 	bl	80046ec <lsm6dso_write_reg>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4413      	add	r3, r2
 8004b82:	617b      	str	r3, [r7, #20]

  return ret;
 8004b84:	697b      	ldr	r3, [r7, #20]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}

08004b8e <lsm6dso_fifo_watermark_set>:
  * @param  val      change the values of wtm in reg FIFO_CTRL1
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_watermark_set(const stmdev_ctx_t *ctx, uint16_t val)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b086      	sub	sp, #24
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	807b      	strh	r3, [r7, #2]
  lsm6dso_fifo_ctrl1_t fifo_ctrl1;
  lsm6dso_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 8004b9a:	f107 020c 	add.w	r2, r7, #12
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	2108      	movs	r1, #8
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7ff fd84 	bl	80046b0 <lsm6dso_read_reg>
 8004ba8:	6178      	str	r0, [r7, #20]
  if (ret != 0) { return ret; }
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <lsm6dso_fifo_watermark_set+0x26>
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	e020      	b.n	8004bf6 <lsm6dso_fifo_watermark_set+0x68>

  fifo_ctrl1.wtm = 0x00FFU & (uint8_t)val;
 8004bb4:	887b      	ldrh	r3, [r7, #2]
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	743b      	strb	r3, [r7, #16]
  fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
 8004bba:	887b      	ldrh	r3, [r7, #2]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	7b3b      	ldrb	r3, [r7, #12]
 8004bc8:	f362 0300 	bfi	r3, r2, #0, #1
 8004bcc:	733b      	strb	r3, [r7, #12]

  ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL1, (uint8_t *)&fifo_ctrl1, 1);
 8004bce:	f107 0210 	add.w	r2, r7, #16
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	2107      	movs	r1, #7
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f7ff fd88 	bl	80046ec <lsm6dso_write_reg>
 8004bdc:	6178      	str	r0, [r7, #20]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL2, (uint8_t *)&fifo_ctrl2, 1);
 8004bde:	f107 020c 	add.w	r2, r7, #12
 8004be2:	2301      	movs	r3, #1
 8004be4:	2108      	movs	r1, #8
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f7ff fd80 	bl	80046ec <lsm6dso_write_reg>
 8004bec:	4602      	mov	r2, r0
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	617b      	str	r3, [r7, #20]

  return ret;
 8004bf4:	697b      	ldr	r3, [r7, #20]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <lsm6dso_fifo_xl_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_xl_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_xl_t val)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b084      	sub	sp, #16
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	460b      	mov	r3, r1
 8004c08:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c0a:	f107 0208 	add.w	r2, r7, #8
 8004c0e:	2301      	movs	r3, #1
 8004c10:	2109      	movs	r1, #9
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff fd4c 	bl	80046b0 <lsm6dso_read_reg>
 8004c18:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10f      	bne.n	8004c40 <lsm6dso_fifo_xl_batch_set+0x42>
  {
    reg.bdr_xl = (uint8_t)val;
 8004c20:	78fb      	ldrb	r3, [r7, #3]
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	b2da      	uxtb	r2, r3
 8004c28:	7a3b      	ldrb	r3, [r7, #8]
 8004c2a:	f362 0303 	bfi	r3, r2, #0, #4
 8004c2e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c30:	f107 0208 	add.w	r2, r7, #8
 8004c34:	2301      	movs	r3, #1
 8004c36:	2109      	movs	r1, #9
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff fd57 	bl	80046ec <lsm6dso_write_reg>
 8004c3e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <lsm6dso_fifo_gy_batch_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_gy_batch_set(const stmdev_ctx_t *ctx,
                                  lsm6dso_bdr_gy_t val)
{
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b084      	sub	sp, #16
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	460b      	mov	r3, r1
 8004c54:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl3_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c56:	f107 0208 	add.w	r2, r7, #8
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	2109      	movs	r1, #9
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f7ff fd26 	bl	80046b0 <lsm6dso_read_reg>
 8004c64:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10f      	bne.n	8004c8c <lsm6dso_fifo_gy_batch_set+0x42>
  {
    reg.bdr_gy = (uint8_t)val;
 8004c6c:	78fb      	ldrb	r3, [r7, #3]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	7a3b      	ldrb	r3, [r7, #8]
 8004c76:	f362 1307 	bfi	r3, r2, #4, #4
 8004c7a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL3, (uint8_t *)&reg, 1);
 8004c7c:	f107 0208 	add.w	r2, r7, #8
 8004c80:	2301      	movs	r3, #1
 8004c82:	2109      	movs	r1, #9
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fd31 	bl	80046ec <lsm6dso_write_reg>
 8004c8a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(const stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004ca2:	f107 0208 	add.w	r2, r7, #8
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	210a      	movs	r1, #10
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff fd00 	bl	80046b0 <lsm6dso_read_reg>
 8004cb0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	7a3b      	ldrb	r3, [r7, #8]
 8004cc2:	f362 0302 	bfi	r3, r2, #0, #3
 8004cc6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8004cc8:	f107 0208 	add.w	r2, r7, #8
 8004ccc:	2301      	movs	r3, #1
 8004cce:	210a      	movs	r1, #10
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff fd0b 	bl	80046ec <lsm6dso_write_reg>
 8004cd6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(const stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004cec:	2102      	movs	r1, #2
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f7ff fe98 	bl	8004a24 <lsm6dso_mem_bank_set>
 8004cf4:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	2146      	movs	r1, #70	@ 0x46
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff fcd7 	bl	80046b0 <lsm6dso_read_reg>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4413      	add	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7ff fe89 	bl	8004a24 <lsm6dso_mem_bank_set>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]

  return ret;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(const stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8004d2e:	2102      	movs	r1, #2
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7ff fe77 	bl	8004a24 <lsm6dso_mem_bank_set>
 8004d36:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <lsm6dso_fsm_data_rate_get+0x1e>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	e03a      	b.n	8004db8 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8004d42:	f107 0208 	add.w	r2, r7, #8
 8004d46:	2301      	movs	r3, #1
 8004d48:	215f      	movs	r1, #95	@ 0x5f
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7ff fcb0 	bl	80046b0 <lsm6dso_read_reg>
 8004d50:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d125      	bne.n	8004da4 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8004d58:	7a3b      	ldrb	r3, [r7, #8]
 8004d5a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b03      	cmp	r3, #3
 8004d62:	d81b      	bhi.n	8004d9c <lsm6dso_fsm_data_rate_get+0x78>
 8004d64:	a201      	add	r2, pc, #4	@ (adr r2, 8004d6c <lsm6dso_fsm_data_rate_get+0x48>)
 8004d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6a:	bf00      	nop
 8004d6c:	08004d7d 	.word	0x08004d7d
 8004d70:	08004d85 	.word	0x08004d85
 8004d74:	08004d8d 	.word	0x08004d8d
 8004d78:	08004d95 	.word	0x08004d95
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	701a      	strb	r2, [r3, #0]
      break;
 8004d82:	e010      	b.n	8004da6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	2201      	movs	r2, #1
 8004d88:	701a      	strb	r2, [r3, #0]
      break;
 8004d8a:	e00c      	b.n	8004da6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2202      	movs	r2, #2
 8004d90:	701a      	strb	r2, [r3, #0]
      break;
 8004d92:	e008      	b.n	8004da6 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	2203      	movs	r2, #3
 8004d98:	701a      	strb	r2, [r3, #0]
      break;
 8004d9a:	e004      	b.n	8004da6 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	701a      	strb	r2, [r3, #0]
      break;
 8004da2:	e000      	b.n	8004da6 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8004da4:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8004da6:	2100      	movs	r1, #0
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7ff fe3b 	bl	8004a24 <lsm6dso_mem_bank_set>
 8004dae:	4602      	mov	r2, r0
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4413      	add	r3, r2
 8004db4:	60fb      	str	r3, [r7, #12]

  return ret;
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <lsm6dso_pin_int1_route_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_pin_int1_route_set(const stmdev_ctx_t *ctx,
                                   lsm6dso_pin_int1_route_t val)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b090      	sub	sp, #64	@ 0x40
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	e883 0006 	stmia.w	r3, {r1, r2}
  lsm6dso_pin_int2_route_t  pin_int2_route;
  lsm6dso_emb_func_int1_t   emb_func_int1;
  lsm6dso_fsm_int1_a_t      fsm_int1_a;
  lsm6dso_fsm_int1_b_t      fsm_int1_b;
  lsm6dso_int1_ctrl_t       int1_ctrl = {0};
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  lsm6dso_md1_cfg_t         md1_cfg;
  lsm6dso_ctrl4_c_t         ctrl4_c;
  int32_t                    ret;

  /* INT1_CTRL */
  int1_ctrl.int1_drdy_xl   = val.drdy_xl;
 8004dd4:	793b      	ldrb	r3, [r7, #4]
 8004dd6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004de0:	f362 0300 	bfi	r3, r2, #0, #1
 8004de4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_drdy_g    = val.drdy_g;
 8004de8:	793b      	ldrb	r3, [r7, #4]
 8004dea:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004df4:	f362 0341 	bfi	r3, r2, #1, #1
 8004df8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_boot      = val.boot;
 8004dfc:	793b      	ldrb	r3, [r7, #4]
 8004dfe:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e08:	f362 0382 	bfi	r3, r2, #2, #1
 8004e0c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_th   = val.fifo_th;
 8004e10:	793b      	ldrb	r3, [r7, #4]
 8004e12:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004e16:	b2da      	uxtb	r2, r3
 8004e18:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e1c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004e20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_ovr  = val.fifo_ovr;
 8004e24:	793b      	ldrb	r3, [r7, #4]
 8004e26:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e30:	f362 1304 	bfi	r3, r2, #4, #1
 8004e34:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_fifo_full = val.fifo_full;
 8004e38:	793b      	ldrb	r3, [r7, #4]
 8004e3a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004e3e:	b2da      	uxtb	r2, r3
 8004e40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e44:	f362 1345 	bfi	r3, r2, #5, #1
 8004e48:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.int1_cnt_bdr   = val.fifo_bdr;
 8004e4c:	793b      	ldrb	r3, [r7, #4]
 8004e4e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e58:	f362 1386 	bfi	r3, r2, #6, #1
 8004e5c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  int1_ctrl.den_drdy_flag  = val.den_flag;
 8004e60:	797b      	ldrb	r3, [r7, #5]
 8004e62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8004e66:	b2da      	uxtb	r2, r3
 8004e68:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e6c:	f362 13c7 	bfi	r3, r2, #7, #1
 8004e70:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  ret = lsm6dso_write_reg(ctx, LSM6DSO_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8004e74:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8004e78:	2301      	movs	r3, #1
 8004e7a:	210d      	movs	r1, #13
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7ff fc35 	bl	80046ec <lsm6dso_write_reg>
 8004e82:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004e84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <lsm6dso_pin_int1_route_set+0xce>
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e8c:	e33a      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  /* DRDY for temperature and/or timestamp */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004e8e:	f107 0210 	add.w	r2, r7, #16
 8004e92:	2301      	movs	r3, #1
 8004e94:	2113      	movs	r1, #19
 8004e96:	68f8      	ldr	r0, [r7, #12]
 8004e98:	f7ff fc0a 	bl	80046b0 <lsm6dso_read_reg>
 8004e9c:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <lsm6dso_pin_int1_route_set+0xe8>
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	e32d      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  if ((val.drdy_temp | val.timestamp) != PROPERTY_DISABLE)
 8004ea8:	793b      	ldrb	r3, [r7, #4]
 8004eaa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	797b      	ldrb	r3, [r7, #5]
 8004eb2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <lsm6dso_pin_int1_route_set+0x10a>
  {
    ctrl4_c.int2_on_int1 = PROPERTY_ENABLE;
 8004ec0:	7c3b      	ldrb	r3, [r7, #16]
 8004ec2:	f043 0320 	orr.w	r3, r3, #32
 8004ec6:	743b      	strb	r3, [r7, #16]
 8004ec8:	e003      	b.n	8004ed2 <lsm6dso_pin_int1_route_set+0x112>
  }
  else
  {
    ctrl4_c.int2_on_int1 = PROPERTY_DISABLE;
 8004eca:	7c3b      	ldrb	r3, [r7, #16]
 8004ecc:	f023 0320 	bic.w	r3, r3, #32
 8004ed0:	743b      	strb	r3, [r7, #16]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8004ed2:	f107 0210 	add.w	r2, r7, #16
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	2113      	movs	r1, #19
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff fc06 	bl	80046ec <lsm6dso_write_reg>
 8004ee0:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <lsm6dso_pin_int1_route_set+0x12c>
 8004ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eea:	e30b      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8004eec:	f107 0220 	add.w	r2, r7, #32
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	210e      	movs	r1, #14
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f7ff fbdb 	bl	80046b0 <lsm6dso_read_reg>
 8004efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
  int2_ctrl.int2_drdy_temp = val.drdy_temp;
 8004efc:	793b      	ldrb	r3, [r7, #4]
 8004efe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004f08:	f362 0382 	bfi	r3, r2, #2, #1
 8004f0c:	f887 3020 	strb.w	r3, [r7, #32]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
 8004f10:	f107 0220 	add.w	r2, r7, #32
 8004f14:	2301      	movs	r3, #1
 8004f16:	210e      	movs	r1, #14
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fbe7 	bl	80046ec <lsm6dso_write_reg>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f22:	4413      	add	r3, r2
 8004f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <lsm6dso_pin_int1_route_set+0x170>
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2e:	e2e9      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004f30:	f107 0218 	add.w	r2, r7, #24
 8004f34:	2301      	movs	r3, #1
 8004f36:	215f      	movs	r1, #95	@ 0x5f
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff fbb9 	bl	80046b0 <lsm6dso_read_reg>
 8004f3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  md2_cfg.int2_timestamp = val.timestamp;
 8004f40:	797b      	ldrb	r3, [r7, #5]
 8004f42:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	7e3b      	ldrb	r3, [r7, #24]
 8004f4a:	f362 0300 	bfi	r3, r2, #0, #1
 8004f4e:	763b      	strb	r3, [r7, #24]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8004f50:	f107 0218 	add.w	r2, r7, #24
 8004f54:	2301      	movs	r3, #1
 8004f56:	215f      	movs	r1, #95	@ 0x5f
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fbc7 	bl	80046ec <lsm6dso_write_reg>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f62:	4413      	add	r3, r2
 8004f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8004f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <lsm6dso_pin_int1_route_set+0x1b0>
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6e:	e2c9      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  /* emmbedded and FSM events */
  emb_func_int1.not_used_01 = 0;
 8004f70:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004f74:	f023 0307 	bic.w	r3, r3, #7
 8004f78:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_step_detector = val.step_detector;
 8004f7c:	79bb      	ldrb	r3, [r7, #6]
 8004f7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8004f82:	b2da      	uxtb	r2, r3
 8004f84:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004f88:	f362 03c3 	bfi	r3, r2, #3, #1
 8004f8c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_tilt          = val.tilt;
 8004f90:	79bb      	ldrb	r3, [r7, #6]
 8004f92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004f9c:	f362 1304 	bfi	r3, r2, #4, #1
 8004fa0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_sig_mot       = val.sig_mot;
 8004fa4:	79bb      	ldrb	r3, [r7, #6]
 8004fa6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fb0:	f362 1345 	bfi	r3, r2, #5, #1
 8004fb4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.not_used_02 = 0;
 8004fb8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fc0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  emb_func_int1.int1_fsm_lc        = val.fsm_lc;
 8004fc4:	79bb      	ldrb	r3, [r7, #6]
 8004fc6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004fd0:	f362 13c7 	bfi	r3, r2, #7, #1
 8004fd4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  fsm_int1_a.int1_fsm1 = val.fsm1;
 8004fd8:	79bb      	ldrb	r3, [r7, #6]
 8004fda:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004fe4:	f362 0300 	bfi	r3, r2, #0, #1
 8004fe8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm2 = val.fsm2;
 8004fec:	79bb      	ldrb	r3, [r7, #6]
 8004fee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004ff8:	f362 0341 	bfi	r3, r2, #1, #1
 8004ffc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm3 = val.fsm3;
 8005000:	79bb      	ldrb	r3, [r7, #6]
 8005002:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005006:	b2da      	uxtb	r2, r3
 8005008:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800500c:	f362 0382 	bfi	r3, r2, #2, #1
 8005010:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm4 = val.fsm4;
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005020:	f362 03c3 	bfi	r3, r2, #3, #1
 8005024:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm5 = val.fsm5;
 8005028:	79fb      	ldrb	r3, [r7, #7]
 800502a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800502e:	b2da      	uxtb	r2, r3
 8005030:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005034:	f362 1304 	bfi	r3, r2, #4, #1
 8005038:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm6 = val.fsm6;
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005042:	b2da      	uxtb	r2, r3
 8005044:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005048:	f362 1345 	bfi	r3, r2, #5, #1
 800504c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm7 = val.fsm7;
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800505c:	f362 1386 	bfi	r3, r2, #6, #1
 8005060:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_a.int1_fsm8 = val.fsm8;
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800506a:	b2da      	uxtb	r2, r3
 800506c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005070:	f362 13c7 	bfi	r3, r2, #7, #1
 8005074:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  fsm_int1_b.int1_fsm9  = val.fsm9 ;
 8005078:	79fb      	ldrb	r3, [r7, #7]
 800507a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800507e:	b2da      	uxtb	r2, r3
 8005080:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005084:	f362 0300 	bfi	r3, r2, #0, #1
 8005088:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm10 = val.fsm10;
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005092:	b2da      	uxtb	r2, r3
 8005094:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005098:	f362 0341 	bfi	r3, r2, #1, #1
 800509c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm11 = val.fsm11;
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050ac:	f362 0382 	bfi	r3, r2, #2, #1
 80050b0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm12 = val.fsm12;
 80050b4:	7a3b      	ldrb	r3, [r7, #8]
 80050b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050c0:	f362 03c3 	bfi	r3, r2, #3, #1
 80050c4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm13 = val.fsm13;
 80050c8:	7a3b      	ldrb	r3, [r7, #8]
 80050ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050d4:	f362 1304 	bfi	r3, r2, #4, #1
 80050d8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm14 = val.fsm14;
 80050dc:	7a3b      	ldrb	r3, [r7, #8]
 80050de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80050e2:	b2da      	uxtb	r2, r3
 80050e4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050e8:	f362 1345 	bfi	r3, r2, #5, #1
 80050ec:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm15 = val.fsm15;
 80050f0:	7a3b      	ldrb	r3, [r7, #8]
 80050f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80050fc:	f362 1386 	bfi	r3, r2, #6, #1
 8005100:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  fsm_int1_b.int1_fsm16 = val.fsm16;
 8005104:	7a3b      	ldrb	r3, [r7, #8]
 8005106:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800510a:	b2da      	uxtb	r2, r3
 800510c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005110:	f362 13c7 	bfi	r3, r2, #7, #1
 8005114:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005118:	2102      	movs	r1, #2
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f7ff fc82 	bl	8004a24 <lsm6dso_mem_bank_set>
 8005120:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d001      	beq.n	800512c <lsm6dso_pin_int1_route_set+0x36c>
 8005128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800512a:	e1eb      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  ret = lsm6dso_write_reg(ctx, LSM6DSO_EMB_FUNC_INT1, (uint8_t *)&emb_func_int1, 1);
 800512c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8005130:	2301      	movs	r3, #1
 8005132:	210a      	movs	r1, #10
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fad9 	bl	80046ec <lsm6dso_write_reg>
 800513a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_A, (uint8_t *)&fsm_int1_a, 1);
 800513c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8005140:	2301      	movs	r3, #1
 8005142:	210b      	movs	r1, #11
 8005144:	68f8      	ldr	r0, [r7, #12]
 8005146:	f7ff fad1 	bl	80046ec <lsm6dso_write_reg>
 800514a:	4602      	mov	r2, r0
 800514c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800514e:	4413      	add	r3, r2
 8005150:	63fb      	str	r3, [r7, #60]	@ 0x3c
  ret += lsm6dso_write_reg(ctx, LSM6DSO_FSM_INT1_B, (uint8_t *)&fsm_int1_b, 1);
 8005152:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005156:	2301      	movs	r3, #1
 8005158:	210c      	movs	r1, #12
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f7ff fac6 	bl	80046ec <lsm6dso_write_reg>
 8005160:	4602      	mov	r2, r0
 8005162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005164:	4413      	add	r3, r2
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c

  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8005168:	2100      	movs	r1, #0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f7ff fc5a 	bl	8004a24 <lsm6dso_mem_bank_set>
 8005170:	4602      	mov	r2, r0
 8005172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005174:	4413      	add	r3, r2
 8005176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 8005178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <lsm6dso_pin_int1_route_set+0x3c2>
 800517e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005180:	e1c0      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  /* MD1_CFG */
  md1_cfg.int1_shub         = val.sh_endop;
 8005182:	797b      	ldrb	r3, [r7, #5]
 8005184:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005188:	b2da      	uxtb	r2, r3
 800518a:	7d3b      	ldrb	r3, [r7, #20]
 800518c:	f362 0300 	bfi	r3, r2, #0, #1
 8005190:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_6d           = val.six_d;
 8005192:	797b      	ldrb	r3, [r7, #5]
 8005194:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005198:	b2da      	uxtb	r2, r3
 800519a:	7d3b      	ldrb	r3, [r7, #20]
 800519c:	f362 0382 	bfi	r3, r2, #2, #1
 80051a0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_double_tap   = val.double_tap;
 80051a2:	797b      	ldrb	r3, [r7, #5]
 80051a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	7d3b      	ldrb	r3, [r7, #20]
 80051ac:	f362 03c3 	bfi	r3, r2, #3, #1
 80051b0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_ff           = val.free_fall;
 80051b2:	797b      	ldrb	r3, [r7, #5]
 80051b4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	7d3b      	ldrb	r3, [r7, #20]
 80051bc:	f362 1304 	bfi	r3, r2, #4, #1
 80051c0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_wu           = val.wake_up;
 80051c2:	797b      	ldrb	r3, [r7, #5]
 80051c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80051c8:	b2da      	uxtb	r2, r3
 80051ca:	7d3b      	ldrb	r3, [r7, #20]
 80051cc:	f362 1345 	bfi	r3, r2, #5, #1
 80051d0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_single_tap   = val.single_tap;
 80051d2:	797b      	ldrb	r3, [r7, #5]
 80051d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051d8:	b2da      	uxtb	r2, r3
 80051da:	7d3b      	ldrb	r3, [r7, #20]
 80051dc:	f362 1386 	bfi	r3, r2, #6, #1
 80051e0:	753b      	strb	r3, [r7, #20]
  md1_cfg.int1_sleep_change = val.sleep_change;
 80051e2:	79bb      	ldrb	r3, [r7, #6]
 80051e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	7d3b      	ldrb	r3, [r7, #20]
 80051ec:	f362 13c7 	bfi	r3, r2, #7, #1
 80051f0:	753b      	strb	r3, [r7, #20]

  if ((emb_func_int1.int1_fsm_lc
 80051f2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80051f6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80051fa:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_sig_mot
 80051fc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005200:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005204:	b2db      	uxtb	r3, r3
 8005206:	4313      	orrs	r3, r2
 8005208:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_step_detector
 800520a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800520e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005212:	b2db      	uxtb	r3, r3
 8005214:	4313      	orrs	r3, r2
 8005216:	b2da      	uxtb	r2, r3
       | emb_func_int1.int1_tilt
 8005218:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800521c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005220:	b2db      	uxtb	r3, r3
 8005222:	4313      	orrs	r3, r2
 8005224:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm1
 8005226:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800522a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	4313      	orrs	r3, r2
 8005232:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm2
 8005234:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005238:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800523c:	b2db      	uxtb	r3, r3
 800523e:	4313      	orrs	r3, r2
 8005240:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm3
 8005242:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005246:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800524a:	b2db      	uxtb	r3, r3
 800524c:	4313      	orrs	r3, r2
 800524e:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm4
 8005250:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005254:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005258:	b2db      	uxtb	r3, r3
 800525a:	4313      	orrs	r3, r2
 800525c:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm5
 800525e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005262:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	4313      	orrs	r3, r2
 800526a:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm6
 800526c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005270:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005274:	b2db      	uxtb	r3, r3
 8005276:	4313      	orrs	r3, r2
 8005278:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm7
 800527a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800527e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	4313      	orrs	r3, r2
 8005286:	b2da      	uxtb	r2, r3
       | fsm_int1_a.int1_fsm8
 8005288:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800528c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005290:	b2db      	uxtb	r3, r3
 8005292:	4313      	orrs	r3, r2
 8005294:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm9
 8005296:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800529a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	4313      	orrs	r3, r2
 80052a2:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm10
 80052a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	4313      	orrs	r3, r2
 80052b0:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm11
 80052b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4313      	orrs	r3, r2
 80052be:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm12
 80052c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	4313      	orrs	r3, r2
 80052cc:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm13
 80052ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	4313      	orrs	r3, r2
 80052da:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm14
 80052dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052e0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm15
 80052ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	4313      	orrs	r3, r2
 80052f6:	b2da      	uxtb	r2, r3
       | fsm_int1_b.int1_fsm16) != PROPERTY_DISABLE)
 80052f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80052fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005300:	b2db      	uxtb	r3, r3
 8005302:	4313      	orrs	r3, r2
 8005304:	b2db      	uxtb	r3, r3
  if ((emb_func_int1.int1_fsm_lc
 8005306:	2b00      	cmp	r3, #0
 8005308:	d004      	beq.n	8005314 <lsm6dso_pin_int1_route_set+0x554>
  {
    md1_cfg.int1_emb_func = PROPERTY_ENABLE;
 800530a:	7d3b      	ldrb	r3, [r7, #20]
 800530c:	f043 0302 	orr.w	r3, r3, #2
 8005310:	753b      	strb	r3, [r7, #20]
 8005312:	e003      	b.n	800531c <lsm6dso_pin_int1_route_set+0x55c>
  }
  else
  {
    md1_cfg.int1_emb_func = PROPERTY_DISABLE;
 8005314:	7d3b      	ldrb	r3, [r7, #20]
 8005316:	f023 0302 	bic.w	r3, r3, #2
 800531a:	753b      	strb	r3, [r7, #20]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800531c:	f107 0214 	add.w	r2, r7, #20
 8005320:	2301      	movs	r3, #1
 8005322:	215e      	movs	r1, #94	@ 0x5e
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7ff f9e1 	bl	80046ec <lsm6dso_write_reg>
 800532a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800532c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800532e:	2b00      	cmp	r3, #0
 8005330:	d001      	beq.n	8005336 <lsm6dso_pin_int1_route_set+0x576>
 8005332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005334:	e0e6      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  /* set interrupts_enable = 1 in TAP_CFG2 if it is the case */
  ret = lsm6dso_read_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 8005336:	f107 021c 	add.w	r2, r7, #28
 800533a:	2301      	movs	r3, #1
 800533c:	2158      	movs	r1, #88	@ 0x58
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff f9b6 	bl	80046b0 <lsm6dso_read_reg>
 8005344:	63f8      	str	r0, [r7, #60]	@ 0x3c
  ret += lsm6dso_pin_int2_route_get(ctx, NULL, &pin_int2_route);
 8005346:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800534a:	461a      	mov	r2, r3
 800534c:	2100      	movs	r1, #0
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8dc 	bl	800550c <lsm6dso_pin_int2_route_get>
 8005354:	4602      	mov	r2, r0
 8005356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005358:	4413      	add	r3, r2
 800535a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (ret != 0) { return ret; }
 800535c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <lsm6dso_pin_int1_route_set+0x5a6>
 8005362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005364:	e0ce      	b.n	8005504 <lsm6dso_pin_int1_route_set+0x744>

  if ((pin_int2_route.fifo_bdr
 8005366:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800536a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800536e:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_g
 8005370:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005374:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005378:	b2db      	uxtb	r3, r3
 800537a:	4313      	orrs	r3, r2
 800537c:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_temp
 800537e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005382:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	4313      	orrs	r3, r2
 800538a:	b2da      	uxtb	r2, r3
       | pin_int2_route.drdy_xl
 800538c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005390:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005394:	b2db      	uxtb	r3, r3
 8005396:	4313      	orrs	r3, r2
 8005398:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_full
 800539a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800539e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	4313      	orrs	r3, r2
 80053a6:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_ovr
 80053a8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	4313      	orrs	r3, r2
 80053b4:	b2da      	uxtb	r2, r3
       | pin_int2_route.fifo_th
 80053b6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80053ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	4313      	orrs	r3, r2
 80053c2:	b2da      	uxtb	r2, r3
       | pin_int2_route.six_d
 80053c4:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80053c8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4313      	orrs	r3, r2
 80053d0:	b2da      	uxtb	r2, r3
       | pin_int2_route.double_tap
 80053d2:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80053d6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	4313      	orrs	r3, r2
 80053de:	b2da      	uxtb	r2, r3
       | pin_int2_route.free_fall
 80053e0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80053e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	4313      	orrs	r3, r2
 80053ec:	b2da      	uxtb	r2, r3
       | pin_int2_route.wake_up
 80053ee:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80053f2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	4313      	orrs	r3, r2
 80053fa:	b2da      	uxtb	r2, r3
       | pin_int2_route.single_tap
 80053fc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8005400:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005404:	b2db      	uxtb	r3, r3
 8005406:	4313      	orrs	r3, r2
 8005408:	b2da      	uxtb	r2, r3
       | pin_int2_route.sleep_change
 800540a:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800540e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	4313      	orrs	r3, r2
 8005416:	b2da      	uxtb	r2, r3
       | int1_ctrl.den_drdy_flag
 8005418:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800541c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005420:	b2db      	uxtb	r3, r3
 8005422:	4313      	orrs	r3, r2
 8005424:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_boot
 8005426:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800542a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4313      	orrs	r3, r2
 8005432:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_cnt_bdr
 8005434:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005438:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800543c:	b2db      	uxtb	r3, r3
 800543e:	4313      	orrs	r3, r2
 8005440:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_g
 8005442:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005446:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4313      	orrs	r3, r2
 800544e:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_drdy_xl
 8005450:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005454:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	4313      	orrs	r3, r2
 800545c:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_full
 800545e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005462:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	4313      	orrs	r3, r2
 800546a:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_ovr
 800546c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005470:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	4313      	orrs	r3, r2
 8005478:	b2da      	uxtb	r2, r3
       | int1_ctrl.int1_fifo_th
 800547a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800547e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005482:	b2db      	uxtb	r3, r3
 8005484:	4313      	orrs	r3, r2
 8005486:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_shub
 8005488:	7d3b      	ldrb	r3, [r7, #20]
 800548a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	4313      	orrs	r3, r2
 8005492:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_6d
 8005494:	7d3b      	ldrb	r3, [r7, #20]
 8005496:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	4313      	orrs	r3, r2
 800549e:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_double_tap
 80054a0:	7d3b      	ldrb	r3, [r7, #20]
 80054a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	4313      	orrs	r3, r2
 80054aa:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_ff
 80054ac:	7d3b      	ldrb	r3, [r7, #20]
 80054ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	4313      	orrs	r3, r2
 80054b6:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_wu
 80054b8:	7d3b      	ldrb	r3, [r7, #20]
 80054ba:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	4313      	orrs	r3, r2
 80054c2:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_single_tap
 80054c4:	7d3b      	ldrb	r3, [r7, #20]
 80054c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	4313      	orrs	r3, r2
 80054ce:	b2da      	uxtb	r2, r3
       | md1_cfg.int1_sleep_change) != PROPERTY_DISABLE)
 80054d0:	7d3b      	ldrb	r3, [r7, #20]
 80054d2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	4313      	orrs	r3, r2
 80054da:	b2db      	uxtb	r3, r3
  if ((pin_int2_route.fifo_bdr
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <lsm6dso_pin_int1_route_set+0x72a>
  {
    tap_cfg2.interrupts_enable = PROPERTY_ENABLE;
 80054e0:	7f3b      	ldrb	r3, [r7, #28]
 80054e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054e6:	773b      	strb	r3, [r7, #28]
 80054e8:	e003      	b.n	80054f2 <lsm6dso_pin_int1_route_set+0x732>
  }
  else
  {
    tap_cfg2.interrupts_enable = PROPERTY_DISABLE;
 80054ea:	7f3b      	ldrb	r3, [r7, #28]
 80054ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054f0:	773b      	strb	r3, [r7, #28]
  }

  ret = lsm6dso_write_reg(ctx, LSM6DSO_TAP_CFG2, (uint8_t *) &tap_cfg2, 1);
 80054f2:	f107 021c 	add.w	r2, r7, #28
 80054f6:	2301      	movs	r3, #1
 80054f8:	2158      	movs	r1, #88	@ 0x58
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f7ff f8f6 	bl	80046ec <lsm6dso_write_reg>
 8005500:	63f8      	str	r0, [r7, #60]	@ 0x3c

  return ret;
 8005502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005504:	4618      	mov	r0, r3
 8005506:	3740      	adds	r7, #64	@ 0x40
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <lsm6dso_pin_int2_route_get>:
  *
  */
int32_t lsm6dso_pin_int2_route_get(const stmdev_ctx_t *ctx,
                                   stmdev_ctx_t *aux_ctx,
                                   lsm6dso_pin_int2_route_t *val)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	@ 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
  lsm6dso_int2_ctrl_t      int2_ctrl;
  lsm6dso_md2_cfg_t        md2_cfg;
  lsm6dso_ctrl4_c_t        ctrl4_c;
  lsm6dso_int_ois_t        int_ois;
  int32_t                   ret;
  ret = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (aux_ctx != NULL)
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d010      	beq.n	8005544 <lsm6dso_pin_int2_route_get+0x38>
  {
    ret = lsm6dso_read_reg(aux_ctx, LSM6DSO_INT_OIS,
 8005522:	f107 0210 	add.w	r2, r7, #16
 8005526:	2301      	movs	r3, #1
 8005528:	216f      	movs	r1, #111	@ 0x6f
 800552a:	68b8      	ldr	r0, [r7, #8]
 800552c:	f7ff f8c0 	bl	80046b0 <lsm6dso_read_reg>
 8005530:	62f8      	str	r0, [r7, #44]	@ 0x2c
                           (uint8_t *)&int_ois, 1);
    val->drdy_ois = int_ois.int2_drdy_ois;
 8005532:	7c3b      	ldrb	r3, [r7, #16]
 8005534:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005538:	b2d9      	uxtb	r1, r3
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	7813      	ldrb	r3, [r2, #0]
 800553e:	f361 0300 	bfi	r3, r1, #0, #1
 8005542:	7013      	strb	r3, [r2, #0]
  }

  if (ctx != NULL)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 81c7 	beq.w	80058da <lsm6dso_pin_int2_route_get+0x3ce>
  {
    if (ret == 0)
 800554c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <lsm6dso_pin_int2_route_get+0x50>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8005552:	2102      	movs	r1, #2
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f7ff fa65 	bl	8004a24 <lsm6dso_mem_bank_set>
 800555a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 800555c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800555e:	2b00      	cmp	r3, #0
 8005560:	d107      	bne.n	8005572 <lsm6dso_pin_int2_route_get+0x66>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_INT2,
 8005562:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8005566:	2301      	movs	r3, #1
 8005568:	210e      	movs	r1, #14
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f7ff f8a0 	bl	80046b0 <lsm6dso_read_reg>
 8005570:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&emb_func_int2, 1);
    }

    if (ret == 0)
 8005572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005574:	2b00      	cmp	r3, #0
 8005576:	d107      	bne.n	8005588 <lsm6dso_pin_int2_route_get+0x7c>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_A,
 8005578:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800557c:	2301      	movs	r3, #1
 800557e:	210f      	movs	r1, #15
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff f895 	bl	80046b0 <lsm6dso_read_reg>
 8005586:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_a, 1);
    }

    if (ret == 0)
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d107      	bne.n	800559e <lsm6dso_pin_int2_route_get+0x92>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_INT2_B,
 800558e:	f107 0220 	add.w	r2, r7, #32
 8005592:	2301      	movs	r3, #1
 8005594:	2110      	movs	r1, #16
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff f88a 	bl	80046b0 <lsm6dso_read_reg>
 800559c:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&fsm_int2_b, 1);
    }

    if (ret == 0)
 800559e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <lsm6dso_pin_int2_route_get+0xa2>
    {
      ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80055a4:	2100      	movs	r1, #0
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f7ff fa3c 	bl	8004a24 <lsm6dso_mem_bank_set>
 80055ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ret == 0)
 80055ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d107      	bne.n	80055c4 <lsm6dso_pin_int2_route_get+0xb8>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 80055b4:	f107 021c 	add.w	r2, r7, #28
 80055b8:	2301      	movs	r3, #1
 80055ba:	210e      	movs	r1, #14
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f7ff f877 	bl	80046b0 <lsm6dso_read_reg>
 80055c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&int2_ctrl, 1);
    }

    if (ret == 0)
 80055c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d107      	bne.n	80055da <lsm6dso_pin_int2_route_get+0xce>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG,
 80055ca:	f107 0218 	add.w	r2, r7, #24
 80055ce:	2301      	movs	r3, #1
 80055d0:	215f      	movs	r1, #95	@ 0x5f
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f7ff f86c 	bl	80046b0 <lsm6dso_read_reg>
 80055d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
                             (uint8_t *)&md2_cfg, 1);
    }

    if (ret == 0)
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <lsm6dso_pin_int2_route_get+0xe4>
    {
      ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80055e0:	f107 0214 	add.w	r2, r7, #20
 80055e4:	2301      	movs	r3, #1
 80055e6:	2113      	movs	r1, #19
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f7ff f861 	bl	80046b0 <lsm6dso_read_reg>
 80055ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }

    if (ctrl4_c.int2_on_int1 == PROPERTY_DISABLE)
 80055f0:	7d3b      	ldrb	r3, [r7, #20]
 80055f2:	f003 0320 	and.w	r3, r3, #32
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d128      	bne.n	800564e <lsm6dso_pin_int2_route_get+0x142>
    {
      if (ret == 0)
 80055fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d110      	bne.n	8005624 <lsm6dso_pin_int2_route_get+0x118>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_INT2_CTRL,
 8005602:	f107 021c 	add.w	r2, r7, #28
 8005606:	2301      	movs	r3, #1
 8005608:	210e      	movs	r1, #14
 800560a:	68f8      	ldr	r0, [r7, #12]
 800560c:	f7ff f850 	bl	80046b0 <lsm6dso_read_reg>
 8005610:	62f8      	str	r0, [r7, #44]	@ 0x2c
                               (uint8_t *)&int2_ctrl, 1);
        val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8005612:	7f3b      	ldrb	r3, [r7, #28]
 8005614:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005618:	b2d9      	uxtb	r1, r3
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	7813      	ldrb	r3, [r2, #0]
 800561e:	f361 03c3 	bfi	r3, r1, #3, #1
 8005622:	7013      	strb	r3, [r2, #0]
      }

      if (ret == 0)
 8005624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11b      	bne.n	8005662 <lsm6dso_pin_int2_route_get+0x156>
      {
        ret = lsm6dso_read_reg(ctx, LSM6DSO_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 800562a:	f107 0218 	add.w	r2, r7, #24
 800562e:	2301      	movs	r3, #1
 8005630:	215f      	movs	r1, #95	@ 0x5f
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff f83c 	bl	80046b0 <lsm6dso_read_reg>
 8005638:	62f8      	str	r0, [r7, #44]	@ 0x2c
        val->timestamp = md2_cfg.int2_timestamp;
 800563a:	7e3b      	ldrb	r3, [r7, #24]
 800563c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005640:	b2d9      	uxtb	r1, r3
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	7853      	ldrb	r3, [r2, #1]
 8005646:	f361 0300 	bfi	r3, r1, #0, #1
 800564a:	7053      	strb	r3, [r2, #1]
 800564c:	e009      	b.n	8005662 <lsm6dso_pin_int2_route_get+0x156>
      }
    }

    else
    {
      val->drdy_temp = PROPERTY_DISABLE;
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	7813      	ldrb	r3, [r2, #0]
 8005652:	f023 0308 	bic.w	r3, r3, #8
 8005656:	7013      	strb	r3, [r2, #0]
      val->timestamp = PROPERTY_DISABLE;
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	7853      	ldrb	r3, [r2, #1]
 800565c:	f023 0301 	bic.w	r3, r3, #1
 8005660:	7053      	strb	r3, [r2, #1]
    }

    val->drdy_xl   = int2_ctrl.int2_drdy_xl;
 8005662:	7f3b      	ldrb	r3, [r7, #28]
 8005664:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005668:	b2d9      	uxtb	r1, r3
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	7813      	ldrb	r3, [r2, #0]
 800566e:	f361 0341 	bfi	r3, r1, #1, #1
 8005672:	7013      	strb	r3, [r2, #0]
    val->drdy_g    = int2_ctrl.int2_drdy_g;
 8005674:	7f3b      	ldrb	r3, [r7, #28]
 8005676:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800567a:	b2d9      	uxtb	r1, r3
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	7813      	ldrb	r3, [r2, #0]
 8005680:	f361 0382 	bfi	r3, r1, #2, #1
 8005684:	7013      	strb	r3, [r2, #0]
    val->drdy_temp = int2_ctrl.int2_drdy_temp;
 8005686:	7f3b      	ldrb	r3, [r7, #28]
 8005688:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800568c:	b2d9      	uxtb	r1, r3
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	7813      	ldrb	r3, [r2, #0]
 8005692:	f361 03c3 	bfi	r3, r1, #3, #1
 8005696:	7013      	strb	r3, [r2, #0]
    val->fifo_th   = int2_ctrl.int2_fifo_th;
 8005698:	7f3b      	ldrb	r3, [r7, #28]
 800569a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800569e:	b2d9      	uxtb	r1, r3
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	7813      	ldrb	r3, [r2, #0]
 80056a4:	f361 1304 	bfi	r3, r1, #4, #1
 80056a8:	7013      	strb	r3, [r2, #0]
    val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
 80056aa:	7f3b      	ldrb	r3, [r7, #28]
 80056ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80056b0:	b2d9      	uxtb	r1, r3
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	7813      	ldrb	r3, [r2, #0]
 80056b6:	f361 1345 	bfi	r3, r1, #5, #1
 80056ba:	7013      	strb	r3, [r2, #0]
    val->fifo_full = int2_ctrl.int2_fifo_full;
 80056bc:	7f3b      	ldrb	r3, [r7, #28]
 80056be:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80056c2:	b2d9      	uxtb	r1, r3
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	7813      	ldrb	r3, [r2, #0]
 80056c8:	f361 1386 	bfi	r3, r1, #6, #1
 80056cc:	7013      	strb	r3, [r2, #0]
    val->fifo_bdr   = int2_ctrl.int2_cnt_bdr;
 80056ce:	7f3b      	ldrb	r3, [r7, #28]
 80056d0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80056d4:	b2d9      	uxtb	r1, r3
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	7813      	ldrb	r3, [r2, #0]
 80056da:	f361 13c7 	bfi	r3, r1, #7, #1
 80056de:	7013      	strb	r3, [r2, #0]
    val->timestamp    = md2_cfg.int2_timestamp;
 80056e0:	7e3b      	ldrb	r3, [r7, #24]
 80056e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80056e6:	b2d9      	uxtb	r1, r3
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	7853      	ldrb	r3, [r2, #1]
 80056ec:	f361 0300 	bfi	r3, r1, #0, #1
 80056f0:	7053      	strb	r3, [r2, #1]
    val->six_d        = md2_cfg.int2_6d;
 80056f2:	7e3b      	ldrb	r3, [r7, #24]
 80056f4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80056f8:	b2d9      	uxtb	r1, r3
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	7853      	ldrb	r3, [r2, #1]
 80056fe:	f361 0341 	bfi	r3, r1, #1, #1
 8005702:	7053      	strb	r3, [r2, #1]
    val->double_tap   = md2_cfg.int2_double_tap;
 8005704:	7e3b      	ldrb	r3, [r7, #24]
 8005706:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800570a:	b2d9      	uxtb	r1, r3
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	7853      	ldrb	r3, [r2, #1]
 8005710:	f361 0382 	bfi	r3, r1, #2, #1
 8005714:	7053      	strb	r3, [r2, #1]
    val->free_fall    = md2_cfg.int2_ff;
 8005716:	7e3b      	ldrb	r3, [r7, #24]
 8005718:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800571c:	b2d9      	uxtb	r1, r3
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	7853      	ldrb	r3, [r2, #1]
 8005722:	f361 03c3 	bfi	r3, r1, #3, #1
 8005726:	7053      	strb	r3, [r2, #1]
    val->wake_up      = md2_cfg.int2_wu;
 8005728:	7e3b      	ldrb	r3, [r7, #24]
 800572a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800572e:	b2d9      	uxtb	r1, r3
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	7853      	ldrb	r3, [r2, #1]
 8005734:	f361 1304 	bfi	r3, r1, #4, #1
 8005738:	7053      	strb	r3, [r2, #1]
    val->single_tap   = md2_cfg.int2_single_tap;
 800573a:	7e3b      	ldrb	r3, [r7, #24]
 800573c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8005740:	b2d9      	uxtb	r1, r3
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	7853      	ldrb	r3, [r2, #1]
 8005746:	f361 1345 	bfi	r3, r1, #5, #1
 800574a:	7053      	strb	r3, [r2, #1]
    val->sleep_change = md2_cfg.int2_sleep_change;
 800574c:	7e3b      	ldrb	r3, [r7, #24]
 800574e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005752:	b2d9      	uxtb	r1, r3
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	7853      	ldrb	r3, [r2, #1]
 8005758:	f361 1386 	bfi	r3, r1, #6, #1
 800575c:	7053      	strb	r3, [r2, #1]
    val->step_detector = emb_func_int2. int2_step_detector;
 800575e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005762:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005766:	b2d9      	uxtb	r1, r3
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	7853      	ldrb	r3, [r2, #1]
 800576c:	f361 13c7 	bfi	r3, r1, #7, #1
 8005770:	7053      	strb	r3, [r2, #1]
    val->tilt          = emb_func_int2.int2_tilt;
 8005772:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005776:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800577a:	b2d9      	uxtb	r1, r3
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	7893      	ldrb	r3, [r2, #2]
 8005780:	f361 0300 	bfi	r3, r1, #0, #1
 8005784:	7093      	strb	r3, [r2, #2]
    val->fsm_lc        = emb_func_int2.int2_fsm_lc;
 8005786:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800578a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800578e:	b2d9      	uxtb	r1, r3
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	7893      	ldrb	r3, [r2, #2]
 8005794:	f361 0382 	bfi	r3, r1, #2, #1
 8005798:	7093      	strb	r3, [r2, #2]
    val->fsm1 = fsm_int2_a.int2_fsm1;
 800579a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800579e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80057a2:	b2d9      	uxtb	r1, r3
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	7893      	ldrb	r3, [r2, #2]
 80057a8:	f361 03c3 	bfi	r3, r1, #3, #1
 80057ac:	7093      	strb	r3, [r2, #2]
    val->fsm2 = fsm_int2_a.int2_fsm2;
 80057ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057b6:	b2d9      	uxtb	r1, r3
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	7893      	ldrb	r3, [r2, #2]
 80057bc:	f361 1304 	bfi	r3, r1, #4, #1
 80057c0:	7093      	strb	r3, [r2, #2]
    val->fsm3 = fsm_int2_a.int2_fsm3;
 80057c2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057c6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80057ca:	b2d9      	uxtb	r1, r3
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	7893      	ldrb	r3, [r2, #2]
 80057d0:	f361 1345 	bfi	r3, r1, #5, #1
 80057d4:	7093      	strb	r3, [r2, #2]
    val->fsm4 = fsm_int2_a.int2_fsm4;
 80057d6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057da:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057de:	b2d9      	uxtb	r1, r3
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	7893      	ldrb	r3, [r2, #2]
 80057e4:	f361 1386 	bfi	r3, r1, #6, #1
 80057e8:	7093      	strb	r3, [r2, #2]
    val->fsm5 = fsm_int2_a.int2_fsm5;
 80057ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80057ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057f2:	b2d9      	uxtb	r1, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	7893      	ldrb	r3, [r2, #2]
 80057f8:	f361 13c7 	bfi	r3, r1, #7, #1
 80057fc:	7093      	strb	r3, [r2, #2]
    val->fsm6 = fsm_int2_a.int2_fsm6;
 80057fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005802:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005806:	b2d9      	uxtb	r1, r3
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	78d3      	ldrb	r3, [r2, #3]
 800580c:	f361 0300 	bfi	r3, r1, #0, #1
 8005810:	70d3      	strb	r3, [r2, #3]
    val->fsm7 = fsm_int2_a.int2_fsm7;
 8005812:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005816:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800581a:	b2d9      	uxtb	r1, r3
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	78d3      	ldrb	r3, [r2, #3]
 8005820:	f361 0341 	bfi	r3, r1, #1, #1
 8005824:	70d3      	strb	r3, [r2, #3]
    val->fsm8 = fsm_int2_a.int2_fsm8;
 8005826:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800582a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800582e:	b2d9      	uxtb	r1, r3
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	78d3      	ldrb	r3, [r2, #3]
 8005834:	f361 0382 	bfi	r3, r1, #2, #1
 8005838:	70d3      	strb	r3, [r2, #3]
    val->fsm9  = fsm_int2_b.int2_fsm9;
 800583a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800583e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005842:	b2d9      	uxtb	r1, r3
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	78d3      	ldrb	r3, [r2, #3]
 8005848:	f361 03c3 	bfi	r3, r1, #3, #1
 800584c:	70d3      	strb	r3, [r2, #3]
    val->fsm10 = fsm_int2_b.int2_fsm10;
 800584e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005852:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005856:	b2d9      	uxtb	r1, r3
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	78d3      	ldrb	r3, [r2, #3]
 800585c:	f361 1304 	bfi	r3, r1, #4, #1
 8005860:	70d3      	strb	r3, [r2, #3]
    val->fsm11 = fsm_int2_b.int2_fsm11;
 8005862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005866:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800586a:	b2d9      	uxtb	r1, r3
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	78d3      	ldrb	r3, [r2, #3]
 8005870:	f361 1345 	bfi	r3, r1, #5, #1
 8005874:	70d3      	strb	r3, [r2, #3]
    val->fsm12 = fsm_int2_b.int2_fsm12;
 8005876:	f897 3020 	ldrb.w	r3, [r7, #32]
 800587a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800587e:	b2d9      	uxtb	r1, r3
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	78d3      	ldrb	r3, [r2, #3]
 8005884:	f361 1386 	bfi	r3, r1, #6, #1
 8005888:	70d3      	strb	r3, [r2, #3]
    val->fsm13 = fsm_int2_b.int2_fsm13;
 800588a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800588e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005892:	b2d9      	uxtb	r1, r3
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	78d3      	ldrb	r3, [r2, #3]
 8005898:	f361 13c7 	bfi	r3, r1, #7, #1
 800589c:	70d3      	strb	r3, [r2, #3]
    val->fsm14 = fsm_int2_b.int2_fsm14;
 800589e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058a2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80058a6:	b2d9      	uxtb	r1, r3
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	7913      	ldrb	r3, [r2, #4]
 80058ac:	f361 0300 	bfi	r3, r1, #0, #1
 80058b0:	7113      	strb	r3, [r2, #4]
    val->fsm15 = fsm_int2_b.int2_fsm15;
 80058b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058b6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80058ba:	b2d9      	uxtb	r1, r3
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	7913      	ldrb	r3, [r2, #4]
 80058c0:	f361 0341 	bfi	r3, r1, #1, #1
 80058c4:	7113      	strb	r3, [r2, #4]
    val->fsm16 = fsm_int2_b.int2_fsm16;
 80058c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80058ca:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80058ce:	b2d9      	uxtb	r1, r3
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	7913      	ldrb	r3, [r2, #4]
 80058d4:	f361 0382 	bfi	r3, r1, #2, #1
 80058d8:	7113      	strb	r3, [r2, #4]
  }

  return ret;
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3730      	adds	r7, #48	@ 0x30
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <_fminf>:
 80058e4:	f005 bdd2 	b.w	800b48c <fminf>

080058e8 <neai_classification_init>:
 80058e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ea:	4605      	mov	r5, r0
 80058ec:	4958      	ldr	r1, [pc, #352]	@ (8005a50 <neai_classification_init+0x168>)
 80058ee:	4b59      	ldr	r3, [pc, #356]	@ (8005a54 <neai_classification_init+0x16c>)
 80058f0:	f500 62c0 	add.w	r2, r0, #1536	@ 0x600
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	600d      	str	r5, [r1, #0]
 80058f8:	f8d0 0c00 	ldr.w	r0, [r0, #3072]	@ 0xc00
 80058fc:	f7fb fc20 	bl	8001140 <__aeabi_f2iz>
 8005900:	2300      	movs	r3, #0
 8005902:	2107      	movs	r1, #7
 8005904:	4a54      	ldr	r2, [pc, #336]	@ (8005a58 <neai_classification_init+0x170>)
 8005906:	4e55      	ldr	r6, [pc, #340]	@ (8005a5c <neai_classification_init+0x174>)
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	6033      	str	r3, [r6, #0]
 800590c:	4b54      	ldr	r3, [pc, #336]	@ (8005a60 <neai_classification_init+0x178>)
 800590e:	4c55      	ldr	r4, [pc, #340]	@ (8005a64 <neai_classification_init+0x17c>)
 8005910:	6019      	str	r1, [r3, #0]
 8005912:	4b55      	ldr	r3, [pc, #340]	@ (8005a68 <neai_classification_init+0x180>)
 8005914:	4955      	ldr	r1, [pc, #340]	@ (8005a6c <neai_classification_init+0x184>)
 8005916:	6018      	str	r0, [r3, #0]
 8005918:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
 800591c:	6020      	str	r0, [r4, #0]
 800591e:	4e54      	ldr	r6, [pc, #336]	@ (8005a70 <neai_classification_init+0x188>)
 8005920:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8005924:	6053      	str	r3, [r2, #4]
 8005926:	f203 3301 	addw	r3, r3, #769	@ 0x301
 800592a:	f204 3405 	addw	r4, r4, #773	@ 0x305
 800592e:	f605 4704 	addw	r7, r5, #3076	@ 0xc04
 8005932:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005936:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800593a:	600f      	str	r7, [r1, #0]
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8005942:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8005946:	f7fb fbc9 	bl	80010dc <__aeabi_fcmpeq>
 800594a:	2800      	cmp	r0, #0
 800594c:	d06f      	beq.n	8005a2e <neai_classification_init+0x146>
 800594e:	4949      	ldr	r1, [pc, #292]	@ (8005a74 <neai_classification_init+0x18c>)
 8005950:	6860      	ldr	r0, [r4, #4]
 8005952:	f7fb fbc3 	bl	80010dc <__aeabi_fcmpeq>
 8005956:	2800      	cmp	r0, #0
 8005958:	d069      	beq.n	8005a2e <neai_classification_init+0x146>
 800595a:	f04f 4186 	mov.w	r1, #1124073472	@ 0x43000000
 800595e:	68a0      	ldr	r0, [r4, #8]
 8005960:	f7fb fbbc 	bl	80010dc <__aeabi_fcmpeq>
 8005964:	2800      	cmp	r0, #0
 8005966:	d062      	beq.n	8005a2e <neai_classification_init+0x146>
 8005968:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800596c:	68e0      	ldr	r0, [r4, #12]
 800596e:	f7fb fbb5 	bl	80010dc <__aeabi_fcmpeq>
 8005972:	2800      	cmp	r0, #0
 8005974:	d05b      	beq.n	8005a2e <neai_classification_init+0x146>
 8005976:	2100      	movs	r1, #0
 8005978:	6920      	ldr	r0, [r4, #16]
 800597a:	f7fb fbaf 	bl	80010dc <__aeabi_fcmpeq>
 800597e:	2800      	cmp	r0, #0
 8005980:	d055      	beq.n	8005a2e <neai_classification_init+0x146>
 8005982:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005986:	6960      	ldr	r0, [r4, #20]
 8005988:	f7fb fba8 	bl	80010dc <__aeabi_fcmpeq>
 800598c:	2800      	cmp	r0, #0
 800598e:	d04e      	beq.n	8005a2e <neai_classification_init+0x146>
 8005990:	2100      	movs	r1, #0
 8005992:	69a0      	ldr	r0, [r4, #24]
 8005994:	f7fb fba2 	bl	80010dc <__aeabi_fcmpeq>
 8005998:	2800      	cmp	r0, #0
 800599a:	d048      	beq.n	8005a2e <neai_classification_init+0x146>
 800599c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059a0:	69e0      	ldr	r0, [r4, #28]
 80059a2:	f7fb fb9b 	bl	80010dc <__aeabi_fcmpeq>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d041      	beq.n	8005a2e <neai_classification_init+0x146>
 80059aa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80059ae:	6a20      	ldr	r0, [r4, #32]
 80059b0:	f7fb fb94 	bl	80010dc <__aeabi_fcmpeq>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d03a      	beq.n	8005a2e <neai_classification_init+0x146>
 80059b8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80059bc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80059be:	f7fb fb8d 	bl	80010dc <__aeabi_fcmpeq>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d033      	beq.n	8005a2e <neai_classification_init+0x146>
 80059c6:	2100      	movs	r1, #0
 80059c8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80059ca:	f7fb fb87 	bl	80010dc <__aeabi_fcmpeq>
 80059ce:	b370      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 80059d0:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 80059d4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80059d6:	f7fb fb81 	bl	80010dc <__aeabi_fcmpeq>
 80059da:	b340      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 80059dc:	2100      	movs	r1, #0
 80059de:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80059e0:	f7fb fb7c 	bl	80010dc <__aeabi_fcmpeq>
 80059e4:	b318      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 80059e6:	2100      	movs	r1, #0
 80059e8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80059ea:	f7fb fb77 	bl	80010dc <__aeabi_fcmpeq>
 80059ee:	b1f0      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 80059f0:	2100      	movs	r1, #0
 80059f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80059f4:	f7fb fb72 	bl	80010dc <__aeabi_fcmpeq>
 80059f8:	b1c8      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 80059fa:	491f      	ldr	r1, [pc, #124]	@ (8005a78 <neai_classification_init+0x190>)
 80059fc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80059fe:	f7fb fb6d 	bl	80010dc <__aeabi_fcmpeq>
 8005a02:	b1a0      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 8005a04:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a08:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8005a0a:	f7fb fb67 	bl	80010dc <__aeabi_fcmpeq>
 8005a0e:	b170      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 8005a10:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005a14:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005a16:	f7fb fb61 	bl	80010dc <__aeabi_fcmpeq>
 8005a1a:	b140      	cbz	r0, 8005a2e <neai_classification_init+0x146>
 8005a1c:	4917      	ldr	r1, [pc, #92]	@ (8005a7c <neai_classification_init+0x194>)
 8005a1e:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8005a20:	f7fb fb5c 	bl	80010dc <__aeabi_fcmpeq>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	bf0c      	ite	eq
 8005a28:	237d      	moveq	r3, #125	@ 0x7d
 8005a2a:	2300      	movne	r3, #0
 8005a2c:	e000      	b.n	8005a30 <neai_classification_init+0x148>
 8005a2e:	237d      	movs	r3, #125	@ 0x7d
 8005a30:	4c13      	ldr	r4, [pc, #76]	@ (8005a80 <neai_classification_init+0x198>)
 8005a32:	4914      	ldr	r1, [pc, #80]	@ (8005a84 <neai_classification_init+0x19c>)
 8005a34:	4814      	ldr	r0, [pc, #80]	@ (8005a88 <neai_classification_init+0x1a0>)
 8005a36:	7023      	strb	r3, [r4, #0]
 8005a38:	f7ff ff54 	bl	80058e4 <_fminf>
 8005a3c:	4912      	ldr	r1, [pc, #72]	@ (8005a88 <neai_classification_init+0x1a0>)
 8005a3e:	f7fb fb4d 	bl	80010dc <__aeabi_fcmpeq>
 8005a42:	b108      	cbz	r0, 8005a48 <neai_classification_init+0x160>
 8005a44:	7820      	ldrb	r0, [r4, #0]
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a48:	2381      	movs	r3, #129	@ 0x81
 8005a4a:	7023      	strb	r3, [r4, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a50:	2000111c 	.word	0x2000111c
 8005a54:	20001120 	.word	0x20001120
 8005a58:	200008fc 	.word	0x200008fc
 8005a5c:	2000090c 	.word	0x2000090c
 8005a60:	20000908 	.word	0x20000908
 8005a64:	20000910 	.word	0x20000910
 8005a68:	20000904 	.word	0x20000904
 8005a6c:	20000918 	.word	0x20000918
 8005a70:	20000914 	.word	0x20000914
 8005a74:	40400000 	.word	0x40400000
 8005a78:	49742400 	.word	0x49742400
 8005a7c:	41100000 	.word	0x41100000
 8005a80:	20000020 	.word	0x20000020
 8005a84:	40066666 	.word	0x40066666
 8005a88:	3f8ccccd 	.word	0x3f8ccccd

08005a8c <neai_classification>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	4bab      	ldr	r3, [pc, #684]	@ (8005d40 <neai_classification+0x2b4>)
 8005a92:	b08d      	sub	sp, #52	@ 0x34
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	9102      	str	r1, [sp, #8]
 8005a98:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005a9c:	b113      	cbz	r3, 8005aa4 <neai_classification+0x18>
 8005a9e:	2b81      	cmp	r3, #129	@ 0x81
 8005aa0:	f040 860f 	bne.w	80066c2 <neai_classification+0xc36>
 8005aa4:	4da7      	ldr	r5, [pc, #668]	@ (8005d44 <neai_classification+0x2b8>)
 8005aa6:	4ba8      	ldr	r3, [pc, #672]	@ (8005d48 <neai_classification+0x2bc>)
 8005aa8:	462c      	mov	r4, r5
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	1f06      	subs	r6, r0, #4
 8005aae:	f1a3 0904 	sub.w	r9, r3, #4
 8005ab2:	4ba6      	ldr	r3, [pc, #664]	@ (8005d4c <neai_classification+0x2c0>)
 8005ab4:	f505 68c0 	add.w	r8, r5, #1536	@ 0x600
 8005ab8:	681f      	ldr	r7, [r3, #0]
 8005aba:	3f04      	subs	r7, #4
 8005abc:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8005ac0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8005ac4:	f7fb f86c 	bl	8000ba0 <__aeabi_fsub>
 8005ac8:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8005acc:	f7fb f972 	bl	8000db4 <__aeabi_fmul>
 8005ad0:	f844 0b04 	str.w	r0, [r4], #4
 8005ad4:	45a0      	cmp	r8, r4
 8005ad6:	d1f1      	bne.n	8005abc <neai_classification+0x30>
 8005ad8:	2700      	movs	r7, #0
 8005ada:	4b9d      	ldr	r3, [pc, #628]	@ (8005d50 <neai_classification+0x2c4>)
 8005adc:	4e9d      	ldr	r6, [pc, #628]	@ (8005d54 <neai_classification+0x2c8>)
 8005ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4a9d      	ldr	r2, [pc, #628]	@ (8005d58 <neai_classification+0x2cc>)
 8005ae4:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8005ae8:	3303      	adds	r3, #3
 8005aea:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8005aee:	f842 1f04 	str.w	r1, [r2, #4]!
 8005af2:	d1f7      	bne.n	8005ae4 <neai_classification+0x58>
 8005af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af6:	f8d3 8000 	ldr.w	r8, [r3]
 8005afa:	4b95      	ldr	r3, [pc, #596]	@ (8005d50 <neai_classification+0x2c4>)
 8005afc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b00:	461c      	mov	r4, r3
 8005b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b04:	f854 9f04 	ldr.w	r9, [r4, #4]!
 8005b08:	4641      	mov	r1, r8
 8005b0a:	4648      	mov	r0, r9
 8005b0c:	f7fb faf0 	bl	80010f0 <__aeabi_fcmplt>
 8005b10:	b100      	cbz	r0, 8005b14 <neai_classification+0x88>
 8005b12:	46c8      	mov	r8, r9
 8005b14:	4b91      	ldr	r3, [pc, #580]	@ (8005d5c <neai_classification+0x2d0>)
 8005b16:	42a3      	cmp	r3, r4
 8005b18:	d1f4      	bne.n	8005b04 <neai_classification+0x78>
 8005b1a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005b1e:	4640      	mov	r0, r8
 8005b20:	f7fb f83e 	bl	8000ba0 <__aeabi_fsub>
 8005b24:	f04f 0b00 	mov.w	fp, #0
 8005b28:	4682      	mov	sl, r0
 8005b2a:	4634      	mov	r4, r6
 8005b2c:	4b89      	ldr	r3, [pc, #548]	@ (8005d54 <neai_classification+0x2c8>)
 8005b2e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8005b32:	f8cd b000 	str.w	fp, [sp]
 8005b36:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005b3a:	9706      	str	r7, [sp, #24]
 8005b3c:	f10b 0701 	add.w	r7, fp, #1
 8005b40:	9401      	str	r4, [sp, #4]
 8005b42:	4638      	mov	r0, r7
 8005b44:	f844 ab04 	str.w	sl, [r4], #4
 8005b48:	f7fb f8e0 	bl	8000d0c <__aeabi_i2f>
 8005b4c:	f04f 4185 	mov.w	r1, #1115684864	@ 0x42800000
 8005b50:	f7fb f930 	bl	8000db4 <__aeabi_fmul>
 8005b54:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005b58:	f7fb f822 	bl	8000ba0 <__aeabi_fsub>
 8005b5c:	4605      	mov	r5, r0
 8005b5e:	9800      	ldr	r0, [sp, #0]
 8005b60:	f7fb f8d0 	bl	8000d04 <__aeabi_ui2f>
 8005b64:	4601      	mov	r1, r0
 8005b66:	4628      	mov	r0, r5
 8005b68:	f7fb fad6 	bl	8001118 <__aeabi_fcmpge>
 8005b6c:	4656      	mov	r6, sl
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	d02e      	beq.n	8005bd0 <neai_classification+0x144>
 8005b72:	2300      	movs	r3, #0
 8005b74:	4622      	mov	r2, r4
 8005b76:	462c      	mov	r4, r5
 8005b78:	461d      	mov	r5, r3
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	b2aa      	uxth	r2, r5
 8005b7e:	4610      	mov	r0, r2
 8005b80:	9308      	str	r3, [sp, #32]
 8005b82:	9207      	str	r2, [sp, #28]
 8005b84:	f7fb f8c2 	bl	8000d0c <__aeabi_i2f>
 8005b88:	4631      	mov	r1, r6
 8005b8a:	f7fb f913 	bl	8000db4 <__aeabi_fmul>
 8005b8e:	9b00      	ldr	r3, [sp, #0]
 8005b90:	4a6f      	ldr	r2, [pc, #444]	@ (8005d50 <neai_classification+0x2c4>)
 8005b92:	3501      	adds	r5, #1
 8005b94:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b98:	f7fb f804 	bl	8000ba4 <__addsf3>
 8005b9c:	9a07      	ldr	r2, [sp, #28]
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	1c50      	adds	r0, r2, #1
 8005ba2:	f7fb f8b3 	bl	8000d0c <__aeabi_i2f>
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	4630      	mov	r0, r6
 8005baa:	f7fb f9b7 	bl	8000f1c <__aeabi_fdiv>
 8005bae:	9b00      	ldr	r3, [sp, #0]
 8005bb0:	4606      	mov	r6, r0
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	b293      	uxth	r3, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	f7fb f8a3 	bl	8000d04 <__aeabi_ui2f>
 8005bbe:	4621      	mov	r1, r4
 8005bc0:	f7fb faa0 	bl	8001104 <__aeabi_fcmple>
 8005bc4:	9b08      	ldr	r3, [sp, #32]
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d1d8      	bne.n	8005b7c <neai_classification+0xf0>
 8005bca:	461c      	mov	r4, r3
 8005bcc:	f843 6c04 	str.w	r6, [r3, #-4]
 8005bd0:	4641      	mov	r1, r8
 8005bd2:	f8d9 0000 	ldr.w	r0, [r9]
 8005bd6:	f7fb fa8b 	bl	80010f0 <__aeabi_fcmplt>
 8005bda:	b120      	cbz	r0, 8005be6 <neai_classification+0x15a>
 8005bdc:	9b03      	ldr	r3, [sp, #12]
 8005bde:	f8c9 3000 	str.w	r3, [r9]
 8005be2:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8005be6:	4631      	mov	r1, r6
 8005be8:	4640      	mov	r0, r8
 8005bea:	f7fb fa9f 	bl	800112c <__aeabi_fcmpgt>
 8005bee:	2800      	cmp	r0, #0
 8005bf0:	f000 856b 	beq.w	80066ca <neai_classification+0xc3e>
 8005bf4:	f1bb 0f00 	cmp.w	fp, #0
 8005bf8:	f000 8567 	beq.w	80066ca <neai_classification+0xc3e>
 8005bfc:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 8005c00:	4b54      	ldr	r3, [pc, #336]	@ (8005d54 <neai_classification+0x2c8>)
 8005c02:	9a01      	ldr	r2, [sp, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	9f06      	ldr	r7, [sp, #24]
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	3701      	adds	r7, #1
 8005c0c:	2f03      	cmp	r7, #3
 8005c0e:	f106 0608 	add.w	r6, r6, #8
 8005c12:	f105 0504 	add.w	r5, r5, #4
 8005c16:	f47f af63 	bne.w	8005ae0 <neai_classification+0x54>
 8005c1a:	4b4e      	ldr	r3, [pc, #312]	@ (8005d54 <neai_classification+0x2c8>)
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	681c      	ldr	r4, [r3, #0]
 8005c20:	4620      	mov	r0, r4
 8005c22:	f7fb fa65 	bl	80010f0 <__aeabi_fcmplt>
 8005c26:	b108      	cbz	r0, 8005c2c <neai_classification+0x1a0>
 8005c28:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c2c:	4b49      	ldr	r3, [pc, #292]	@ (8005d54 <neai_classification+0x2c8>)
 8005c2e:	2100      	movs	r1, #0
 8005c30:	601c      	str	r4, [r3, #0]
 8005c32:	685c      	ldr	r4, [r3, #4]
 8005c34:	4620      	mov	r0, r4
 8005c36:	f7fb fa5b 	bl	80010f0 <__aeabi_fcmplt>
 8005c3a:	b108      	cbz	r0, 8005c40 <neai_classification+0x1b4>
 8005c3c:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c40:	4b44      	ldr	r3, [pc, #272]	@ (8005d54 <neai_classification+0x2c8>)
 8005c42:	2100      	movs	r1, #0
 8005c44:	605c      	str	r4, [r3, #4]
 8005c46:	689c      	ldr	r4, [r3, #8]
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7fb fa51 	bl	80010f0 <__aeabi_fcmplt>
 8005c4e:	b108      	cbz	r0, 8005c54 <neai_classification+0x1c8>
 8005c50:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c54:	4b3f      	ldr	r3, [pc, #252]	@ (8005d54 <neai_classification+0x2c8>)
 8005c56:	2100      	movs	r1, #0
 8005c58:	609c      	str	r4, [r3, #8]
 8005c5a:	68dc      	ldr	r4, [r3, #12]
 8005c5c:	4620      	mov	r0, r4
 8005c5e:	f7fb fa47 	bl	80010f0 <__aeabi_fcmplt>
 8005c62:	b108      	cbz	r0, 8005c68 <neai_classification+0x1dc>
 8005c64:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c68:	4b3a      	ldr	r3, [pc, #232]	@ (8005d54 <neai_classification+0x2c8>)
 8005c6a:	2100      	movs	r1, #0
 8005c6c:	60dc      	str	r4, [r3, #12]
 8005c6e:	691c      	ldr	r4, [r3, #16]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f7fb fa3d 	bl	80010f0 <__aeabi_fcmplt>
 8005c76:	b108      	cbz	r0, 8005c7c <neai_classification+0x1f0>
 8005c78:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c7c:	4b35      	ldr	r3, [pc, #212]	@ (8005d54 <neai_classification+0x2c8>)
 8005c7e:	2100      	movs	r1, #0
 8005c80:	611c      	str	r4, [r3, #16]
 8005c82:	695c      	ldr	r4, [r3, #20]
 8005c84:	4620      	mov	r0, r4
 8005c86:	f7fb fa33 	bl	80010f0 <__aeabi_fcmplt>
 8005c8a:	b108      	cbz	r0, 8005c90 <neai_classification+0x204>
 8005c8c:	f104 4400 	add.w	r4, r4, #2147483648	@ 0x80000000
 8005c90:	4b30      	ldr	r3, [pc, #192]	@ (8005d54 <neai_classification+0x2c8>)
 8005c92:	615c      	str	r4, [r3, #20]
 8005c94:	4b32      	ldr	r3, [pc, #200]	@ (8005d60 <neai_classification+0x2d4>)
 8005c96:	681e      	ldr	r6, [r3, #0]
 8005c98:	4b32      	ldr	r3, [pc, #200]	@ (8005d64 <neai_classification+0x2d8>)
 8005c9a:	2e00      	cmp	r6, #0
 8005c9c:	681f      	ldr	r7, [r3, #0]
 8005c9e:	f340 8271 	ble.w	8006184 <neai_classification+0x6f8>
 8005ca2:	4b31      	ldr	r3, [pc, #196]	@ (8005d68 <neai_classification+0x2dc>)
 8005ca4:	4d31      	ldr	r5, [pc, #196]	@ (8005d6c <neai_classification+0x2e0>)
 8005ca6:	f8d3 8000 	ldr.w	r8, [r3]
 8005caa:	4b31      	ldr	r3, [pc, #196]	@ (8005d70 <neai_classification+0x2e4>)
 8005cac:	4c31      	ldr	r4, [pc, #196]	@ (8005d74 <neai_classification+0x2e8>)
 8005cae:	f8d3 b000 	ldr.w	fp, [r3]
 8005cb2:	686b      	ldr	r3, [r5, #4]
 8005cb4:	eb04 008b 	add.w	r0, r4, fp, lsl #2
 8005cb8:	1b9b      	subs	r3, r3, r6
 8005cba:	eb08 0183 	add.w	r1, r8, r3, lsl #2
 8005cbe:	00b3      	lsls	r3, r6, #2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	f001 fe2f 	bl	8007926 <memcpy>
 8005cc8:	2f01      	cmp	r7, #1
 8005cca:	f340 81e1 	ble.w	8006090 <neai_classification+0x604>
 8005cce:	2f03      	cmp	r7, #3
 8005cd0:	bfd8      	it	le
 8005cd2:	2200      	movle	r2, #0
 8005cd4:	f8d5 a000 	ldr.w	sl, [r5]
 8005cd8:	f340 8133 	ble.w	8005f42 <neai_classification+0x4b6>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	1f3a      	subs	r2, r7, #4
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	eb06 030a 	add.w	r3, r6, sl
 8005cea:	e9cd 8a06 	strd	r8, sl, [sp, #24]
 8005cee:	3202      	adds	r2, #2
 8005cf0:	eb08 0983 	add.w	r9, r8, r3, lsl #2
 8005cf4:	00f3      	lsls	r3, r6, #3
 8005cf6:	9303      	str	r3, [sp, #12]
 8005cf8:	eb08 058a 	add.w	r5, r8, sl, lsl #2
 8005cfc:	9201      	str	r2, [sp, #4]
 8005cfe:	9708      	str	r7, [sp, #32]
 8005d00:	9b00      	ldr	r3, [sp, #0]
 8005d02:	4a14      	ldr	r2, [pc, #80]	@ (8005d54 <neai_classification+0x2c8>)
 8005d04:	6829      	ldr	r1, [r5, #0]
 8005d06:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 8005d0a:	3204      	adds	r2, #4
 8005d0c:	4640      	mov	r0, r8
 8005d0e:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8005d12:	f7fb f84f 	bl	8000db4 <__aeabi_fmul>
 8005d16:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 8005d1a:	f7fa ff43 	bl	8000ba4 <__addsf3>
 8005d1e:	4682      	mov	sl, r0
 8005d20:	f844 a02b 	str.w	sl, [r4, fp, lsl #2]
 8005d24:	f8d9 1000 	ldr.w	r1, [r9]
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f7fb f843 	bl	8000db4 <__aeabi_fmul>
 8005d2e:	4651      	mov	r1, sl
 8005d30:	f7fa ff38 	bl	8000ba4 <__addsf3>
 8005d34:	2e01      	cmp	r6, #1
 8005d36:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8005d3a:	f000 80f5 	beq.w	8005f28 <neai_classification+0x49c>
 8005d3e:	e01b      	b.n	8005d78 <neai_classification+0x2ec>
 8005d40:	20000020 	.word	0x20000020
 8005d44:	20000b1c 	.word	0x20000b1c
 8005d48:	2000111c 	.word	0x2000111c
 8005d4c:	20001120 	.word	0x20001120
 8005d50:	2000091c 	.word	0x2000091c
 8005d54:	20001124 	.word	0x20001124
 8005d58:	20000918 	.word	0x20000918
 8005d5c:	20000b18 	.word	0x20000b18
 8005d60:	20000904 	.word	0x20000904
 8005d64:	20000908 	.word	0x20000908
 8005d68:	20000918 	.word	0x20000918
 8005d6c:	200008fc 	.word	0x200008fc
 8005d70:	2000090c 	.word	0x2000090c
 8005d74:	200008d8 	.word	0x200008d8
 8005d78:	6869      	ldr	r1, [r5, #4]
 8005d7a:	f10b 0a01 	add.w	sl, fp, #1
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f7fb f818 	bl	8000db4 <__aeabi_fmul>
 8005d84:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005d88:	f7fa ff0c 	bl	8000ba4 <__addsf3>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005d92:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005d96:	4638      	mov	r0, r7
 8005d98:	9305      	str	r3, [sp, #20]
 8005d9a:	f7fb f80b 	bl	8000db4 <__aeabi_fmul>
 8005d9e:	9b05      	ldr	r3, [sp, #20]
 8005da0:	4619      	mov	r1, r3
 8005da2:	f7fa feff 	bl	8000ba4 <__addsf3>
 8005da6:	2e02      	cmp	r6, #2
 8005da8:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005dac:	f000 80bc 	beq.w	8005f28 <neai_classification+0x49c>
 8005db0:	68a9      	ldr	r1, [r5, #8]
 8005db2:	f10b 0a02 	add.w	sl, fp, #2
 8005db6:	4640      	mov	r0, r8
 8005db8:	f7fa fffc 	bl	8000db4 <__aeabi_fmul>
 8005dbc:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005dc0:	f7fa fef0 	bl	8000ba4 <__addsf3>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005dca:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8005dce:	4638      	mov	r0, r7
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	f7fa ffef 	bl	8000db4 <__aeabi_fmul>
 8005dd6:	9b05      	ldr	r3, [sp, #20]
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f7fa fee3 	bl	8000ba4 <__addsf3>
 8005dde:	2e03      	cmp	r6, #3
 8005de0:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005de4:	f000 80a0 	beq.w	8005f28 <neai_classification+0x49c>
 8005de8:	68e9      	ldr	r1, [r5, #12]
 8005dea:	f10b 0a03 	add.w	sl, fp, #3
 8005dee:	4640      	mov	r0, r8
 8005df0:	f7fa ffe0 	bl	8000db4 <__aeabi_fmul>
 8005df4:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005df8:	f7fa fed4 	bl	8000ba4 <__addsf3>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005e02:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8005e06:	4638      	mov	r0, r7
 8005e08:	9305      	str	r3, [sp, #20]
 8005e0a:	f7fa ffd3 	bl	8000db4 <__aeabi_fmul>
 8005e0e:	9b05      	ldr	r3, [sp, #20]
 8005e10:	4619      	mov	r1, r3
 8005e12:	f7fa fec7 	bl	8000ba4 <__addsf3>
 8005e16:	2e04      	cmp	r6, #4
 8005e18:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005e1c:	f000 8084 	beq.w	8005f28 <neai_classification+0x49c>
 8005e20:	6929      	ldr	r1, [r5, #16]
 8005e22:	f10b 0a04 	add.w	sl, fp, #4
 8005e26:	4640      	mov	r0, r8
 8005e28:	f7fa ffc4 	bl	8000db4 <__aeabi_fmul>
 8005e2c:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005e30:	f7fa feb8 	bl	8000ba4 <__addsf3>
 8005e34:	4603      	mov	r3, r0
 8005e36:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005e3a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8005e3e:	4638      	mov	r0, r7
 8005e40:	9305      	str	r3, [sp, #20]
 8005e42:	f7fa ffb7 	bl	8000db4 <__aeabi_fmul>
 8005e46:	9b05      	ldr	r3, [sp, #20]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f7fa feab 	bl	8000ba4 <__addsf3>
 8005e4e:	2e05      	cmp	r6, #5
 8005e50:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005e54:	d068      	beq.n	8005f28 <neai_classification+0x49c>
 8005e56:	6969      	ldr	r1, [r5, #20]
 8005e58:	f10b 0a05 	add.w	sl, fp, #5
 8005e5c:	4640      	mov	r0, r8
 8005e5e:	f7fa ffa9 	bl	8000db4 <__aeabi_fmul>
 8005e62:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005e66:	f7fa fe9d 	bl	8000ba4 <__addsf3>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005e70:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8005e74:	4638      	mov	r0, r7
 8005e76:	9305      	str	r3, [sp, #20]
 8005e78:	f7fa ff9c 	bl	8000db4 <__aeabi_fmul>
 8005e7c:	9b05      	ldr	r3, [sp, #20]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	f7fa fe90 	bl	8000ba4 <__addsf3>
 8005e84:	2e06      	cmp	r6, #6
 8005e86:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005e8a:	d04d      	beq.n	8005f28 <neai_classification+0x49c>
 8005e8c:	69a9      	ldr	r1, [r5, #24]
 8005e8e:	f10b 0a06 	add.w	sl, fp, #6
 8005e92:	4640      	mov	r0, r8
 8005e94:	f7fa ff8e 	bl	8000db4 <__aeabi_fmul>
 8005e98:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005e9c:	f7fa fe82 	bl	8000ba4 <__addsf3>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005ea6:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8005eaa:	4638      	mov	r0, r7
 8005eac:	9305      	str	r3, [sp, #20]
 8005eae:	f7fa ff81 	bl	8000db4 <__aeabi_fmul>
 8005eb2:	9b05      	ldr	r3, [sp, #20]
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f7fa fe75 	bl	8000ba4 <__addsf3>
 8005eba:	2e07      	cmp	r6, #7
 8005ebc:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005ec0:	d032      	beq.n	8005f28 <neai_classification+0x49c>
 8005ec2:	69e9      	ldr	r1, [r5, #28]
 8005ec4:	f10b 0a07 	add.w	sl, fp, #7
 8005ec8:	4640      	mov	r0, r8
 8005eca:	f7fa ff73 	bl	8000db4 <__aeabi_fmul>
 8005ece:	f854 102a 	ldr.w	r1, [r4, sl, lsl #2]
 8005ed2:	f7fa fe67 	bl	8000ba4 <__addsf3>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	f844 302a 	str.w	r3, [r4, sl, lsl #2]
 8005edc:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	9305      	str	r3, [sp, #20]
 8005ee4:	f7fa ff66 	bl	8000db4 <__aeabi_fmul>
 8005ee8:	9b05      	ldr	r3, [sp, #20]
 8005eea:	4619      	mov	r1, r3
 8005eec:	f7fa fe5a 	bl	8000ba4 <__addsf3>
 8005ef0:	2e08      	cmp	r6, #8
 8005ef2:	f844 002a 	str.w	r0, [r4, sl, lsl #2]
 8005ef6:	d017      	beq.n	8005f28 <neai_classification+0x49c>
 8005ef8:	6a29      	ldr	r1, [r5, #32]
 8005efa:	4640      	mov	r0, r8
 8005efc:	f10b 0808 	add.w	r8, fp, #8
 8005f00:	f7fa ff58 	bl	8000db4 <__aeabi_fmul>
 8005f04:	f854 1028 	ldr.w	r1, [r4, r8, lsl #2]
 8005f08:	f7fa fe4c 	bl	8000ba4 <__addsf3>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4638      	mov	r0, r7
 8005f10:	461f      	mov	r7, r3
 8005f12:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
 8005f16:	f8d9 1020 	ldr.w	r1, [r9, #32]
 8005f1a:	f7fa ff4b 	bl	8000db4 <__aeabi_fmul>
 8005f1e:	4639      	mov	r1, r7
 8005f20:	f7fa fe40 	bl	8000ba4 <__addsf3>
 8005f24:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
 8005f28:	9a03      	ldr	r2, [sp, #12]
 8005f2a:	9b00      	ldr	r3, [sp, #0]
 8005f2c:	4415      	add	r5, r2
 8005f2e:	4491      	add	r9, r2
 8005f30:	9a01      	ldr	r2, [sp, #4]
 8005f32:	3302      	adds	r3, #2
 8005f34:	429a      	cmp	r2, r3
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	f47f aee2 	bne.w	8005d00 <neai_classification+0x274>
 8005f3c:	e9dd 8a06 	ldrd	r8, sl, [sp, #24]
 8005f40:	9f08      	ldr	r7, [sp, #32]
 8005f42:	fb02 a106 	mla	r1, r2, r6, sl
 8005f46:	f10b 0a02 	add.w	sl, fp, #2
 8005f4a:	f8cd a000 	str.w	sl, [sp]
 8005f4e:	4692      	mov	sl, r2
 8005f50:	1e7b      	subs	r3, r7, #1
 8005f52:	eb08 0581 	add.w	r5, r8, r1, lsl #2
 8005f56:	9306      	str	r3, [sp, #24]
 8005f58:	f102 4880 	add.w	r8, r2, #1073741824	@ 0x40000000
 8005f5c:	4bc3      	ldr	r3, [pc, #780]	@ (800626c <neai_classification+0x7e0>)
 8005f5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005f62:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8005f66:	f10b 0303 	add.w	r3, fp, #3
 8005f6a:	9301      	str	r3, [sp, #4]
 8005f6c:	f10b 0304 	add.w	r3, fp, #4
 8005f70:	9303      	str	r3, [sp, #12]
 8005f72:	f10b 0305 	add.w	r3, fp, #5
 8005f76:	9305      	str	r3, [sp, #20]
 8005f78:	f10b 0306 	add.w	r3, fp, #6
 8005f7c:	9307      	str	r3, [sp, #28]
 8005f7e:	f10b 0307 	add.w	r3, fp, #7
 8005f82:	9308      	str	r3, [sp, #32]
 8005f84:	f10b 0308 	add.w	r3, fp, #8
 8005f88:	f10b 0901 	add.w	r9, fp, #1
 8005f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f8e:	f858 7f04 	ldr.w	r7, [r8, #4]!
 8005f92:	6829      	ldr	r1, [r5, #0]
 8005f94:	4638      	mov	r0, r7
 8005f96:	f7fa ff0d 	bl	8000db4 <__aeabi_fmul>
 8005f9a:	f854 102b 	ldr.w	r1, [r4, fp, lsl #2]
 8005f9e:	f7fa fe01 	bl	8000ba4 <__addsf3>
 8005fa2:	2e01      	cmp	r6, #1
 8005fa4:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8005fa8:	d06a      	beq.n	8006080 <neai_classification+0x5f4>
 8005faa:	6869      	ldr	r1, [r5, #4]
 8005fac:	4638      	mov	r0, r7
 8005fae:	f7fa ff01 	bl	8000db4 <__aeabi_fmul>
 8005fb2:	f854 1029 	ldr.w	r1, [r4, r9, lsl #2]
 8005fb6:	f7fa fdf5 	bl	8000ba4 <__addsf3>
 8005fba:	2e02      	cmp	r6, #2
 8005fbc:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
 8005fc0:	d05e      	beq.n	8006080 <neai_classification+0x5f4>
 8005fc2:	68a9      	ldr	r1, [r5, #8]
 8005fc4:	4638      	mov	r0, r7
 8005fc6:	f7fa fef5 	bl	8000db4 <__aeabi_fmul>
 8005fca:	9b00      	ldr	r3, [sp, #0]
 8005fcc:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005fd0:	f7fa fde8 	bl	8000ba4 <__addsf3>
 8005fd4:	9b00      	ldr	r3, [sp, #0]
 8005fd6:	2e03      	cmp	r6, #3
 8005fd8:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8005fdc:	d050      	beq.n	8006080 <neai_classification+0x5f4>
 8005fde:	68e9      	ldr	r1, [r5, #12]
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7fa fee7 	bl	8000db4 <__aeabi_fmul>
 8005fe6:	9b01      	ldr	r3, [sp, #4]
 8005fe8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005fec:	f7fa fdda 	bl	8000ba4 <__addsf3>
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	2e04      	cmp	r6, #4
 8005ff4:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8005ff8:	d042      	beq.n	8006080 <neai_classification+0x5f4>
 8005ffa:	6929      	ldr	r1, [r5, #16]
 8005ffc:	4638      	mov	r0, r7
 8005ffe:	f7fa fed9 	bl	8000db4 <__aeabi_fmul>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006008:	f7fa fdcc 	bl	8000ba4 <__addsf3>
 800600c:	9b03      	ldr	r3, [sp, #12]
 800600e:	2e05      	cmp	r6, #5
 8006010:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8006014:	d034      	beq.n	8006080 <neai_classification+0x5f4>
 8006016:	6969      	ldr	r1, [r5, #20]
 8006018:	4638      	mov	r0, r7
 800601a:	f7fa fecb 	bl	8000db4 <__aeabi_fmul>
 800601e:	9b05      	ldr	r3, [sp, #20]
 8006020:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006024:	f7fa fdbe 	bl	8000ba4 <__addsf3>
 8006028:	9b05      	ldr	r3, [sp, #20]
 800602a:	2e06      	cmp	r6, #6
 800602c:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8006030:	d026      	beq.n	8006080 <neai_classification+0x5f4>
 8006032:	69a9      	ldr	r1, [r5, #24]
 8006034:	4638      	mov	r0, r7
 8006036:	f7fa febd 	bl	8000db4 <__aeabi_fmul>
 800603a:	9b07      	ldr	r3, [sp, #28]
 800603c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8006040:	f7fa fdb0 	bl	8000ba4 <__addsf3>
 8006044:	9b07      	ldr	r3, [sp, #28]
 8006046:	2e07      	cmp	r6, #7
 8006048:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 800604c:	d018      	beq.n	8006080 <neai_classification+0x5f4>
 800604e:	69e9      	ldr	r1, [r5, #28]
 8006050:	4638      	mov	r0, r7
 8006052:	f7fa feaf 	bl	8000db4 <__aeabi_fmul>
 8006056:	9b08      	ldr	r3, [sp, #32]
 8006058:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 800605c:	f7fa fda2 	bl	8000ba4 <__addsf3>
 8006060:	9b08      	ldr	r3, [sp, #32]
 8006062:	2e08      	cmp	r6, #8
 8006064:	f844 0023 	str.w	r0, [r4, r3, lsl #2]
 8006068:	d00a      	beq.n	8006080 <neai_classification+0x5f4>
 800606a:	6a29      	ldr	r1, [r5, #32]
 800606c:	4638      	mov	r0, r7
 800606e:	f7fa fea1 	bl	8000db4 <__aeabi_fmul>
 8006072:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8006074:	f854 1027 	ldr.w	r1, [r4, r7, lsl #2]
 8006078:	f7fa fd94 	bl	8000ba4 <__addsf3>
 800607c:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
 8006080:	9b04      	ldr	r3, [sp, #16]
 8006082:	f10a 0a01 	add.w	sl, sl, #1
 8006086:	441d      	add	r5, r3
 8006088:	9b06      	ldr	r3, [sp, #24]
 800608a:	4553      	cmp	r3, sl
 800608c:	f73f af7f 	bgt.w	8005f8e <neai_classification+0x502>
 8006090:	f854 002b 	ldr.w	r0, [r4, fp, lsl #2]
 8006094:	f7fa f9e0 	bl	8000458 <__aeabi_f2d>
 8006098:	f004 fef4 	bl	800ae84 <tanh>
 800609c:	f7fa fd2c 	bl	8000af8 <__aeabi_d2f>
 80060a0:	2e01      	cmp	r6, #1
 80060a2:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 80060a6:	d06d      	beq.n	8006184 <neai_classification+0x6f8>
 80060a8:	f10b 0501 	add.w	r5, fp, #1
 80060ac:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80060b0:	f7fa f9d2 	bl	8000458 <__aeabi_f2d>
 80060b4:	f004 fee6 	bl	800ae84 <tanh>
 80060b8:	f7fa fd1e 	bl	8000af8 <__aeabi_d2f>
 80060bc:	2e02      	cmp	r6, #2
 80060be:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 80060c2:	d05f      	beq.n	8006184 <neai_classification+0x6f8>
 80060c4:	f10b 0502 	add.w	r5, fp, #2
 80060c8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80060cc:	f7fa f9c4 	bl	8000458 <__aeabi_f2d>
 80060d0:	f004 fed8 	bl	800ae84 <tanh>
 80060d4:	f7fa fd10 	bl	8000af8 <__aeabi_d2f>
 80060d8:	2e03      	cmp	r6, #3
 80060da:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 80060de:	d051      	beq.n	8006184 <neai_classification+0x6f8>
 80060e0:	f10b 0503 	add.w	r5, fp, #3
 80060e4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80060e8:	f7fa f9b6 	bl	8000458 <__aeabi_f2d>
 80060ec:	f004 feca 	bl	800ae84 <tanh>
 80060f0:	f7fa fd02 	bl	8000af8 <__aeabi_d2f>
 80060f4:	2e04      	cmp	r6, #4
 80060f6:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 80060fa:	d043      	beq.n	8006184 <neai_classification+0x6f8>
 80060fc:	f10b 0504 	add.w	r5, fp, #4
 8006100:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006104:	f7fa f9a8 	bl	8000458 <__aeabi_f2d>
 8006108:	f004 febc 	bl	800ae84 <tanh>
 800610c:	f7fa fcf4 	bl	8000af8 <__aeabi_d2f>
 8006110:	2e05      	cmp	r6, #5
 8006112:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8006116:	d035      	beq.n	8006184 <neai_classification+0x6f8>
 8006118:	f10b 0505 	add.w	r5, fp, #5
 800611c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006120:	f7fa f99a 	bl	8000458 <__aeabi_f2d>
 8006124:	f004 feae 	bl	800ae84 <tanh>
 8006128:	f7fa fce6 	bl	8000af8 <__aeabi_d2f>
 800612c:	2e06      	cmp	r6, #6
 800612e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 8006132:	d027      	beq.n	8006184 <neai_classification+0x6f8>
 8006134:	f10b 0506 	add.w	r5, fp, #6
 8006138:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 800613c:	f7fa f98c 	bl	8000458 <__aeabi_f2d>
 8006140:	f004 fea0 	bl	800ae84 <tanh>
 8006144:	f7fa fcd8 	bl	8000af8 <__aeabi_d2f>
 8006148:	2e07      	cmp	r6, #7
 800614a:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800614e:	d019      	beq.n	8006184 <neai_classification+0x6f8>
 8006150:	f10b 0507 	add.w	r5, fp, #7
 8006154:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8006158:	f7fa f97e 	bl	8000458 <__aeabi_f2d>
 800615c:	f004 fe92 	bl	800ae84 <tanh>
 8006160:	f7fa fcca 	bl	8000af8 <__aeabi_d2f>
 8006164:	2e08      	cmp	r6, #8
 8006166:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
 800616a:	d00b      	beq.n	8006184 <neai_classification+0x6f8>
 800616c:	f10b 0b08 	add.w	fp, fp, #8
 8006170:	f854 002b 	ldr.w	r0, [r4, fp, lsl #2]
 8006174:	f7fa f970 	bl	8000458 <__aeabi_f2d>
 8006178:	f004 fe84 	bl	800ae84 <tanh>
 800617c:	f7fa fcbc 	bl	8000af8 <__aeabi_d2f>
 8006180:	f844 002b 	str.w	r0, [r4, fp, lsl #2]
 8006184:	4a3a      	ldr	r2, [pc, #232]	@ (8006270 <neai_classification+0x7e4>)
 8006186:	4b3b      	ldr	r3, [pc, #236]	@ (8006274 <neai_classification+0x7e8>)
 8006188:	f8d2 9000 	ldr.w	r9, [r2]
 800618c:	f8d3 8000 	ldr.w	r8, [r3]
 8006190:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8006194:	f858 7023 	ldr.w	r7, [r8, r3, lsl #2]
 8006198:	9a02      	ldr	r2, [sp, #8]
 800619a:	3301      	adds	r3, #1
 800619c:	6017      	str	r7, [r2, #0]
 800619e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80061a2:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80061a6:	6056      	str	r6, [r2, #4]
 80061a8:	685d      	ldr	r5, [r3, #4]
 80061aa:	f1b9 0f00 	cmp.w	r9, #0
 80061ae:	6095      	str	r5, [r2, #8]
 80061b0:	689c      	ldr	r4, [r3, #8]
 80061b2:	60d4      	str	r4, [r2, #12]
 80061b4:	f340 821c 	ble.w	80065f0 <neai_classification+0xb64>
 80061b8:	4b2f      	ldr	r3, [pc, #188]	@ (8006278 <neai_classification+0x7ec>)
 80061ba:	f8d8 1000 	ldr.w	r1, [r8]
 80061be:	f8d3 a000 	ldr.w	sl, [r3]
 80061c2:	4b2e      	ldr	r3, [pc, #184]	@ (800627c <neai_classification+0x7f0>)
 80061c4:	f853 b02a 	ldr.w	fp, [r3, sl, lsl #2]
 80061c8:	4658      	mov	r0, fp
 80061ca:	f7fa fdf3 	bl	8000db4 <__aeabi_fmul>
 80061ce:	4601      	mov	r1, r0
 80061d0:	4638      	mov	r0, r7
 80061d2:	f7fa fce7 	bl	8000ba4 <__addsf3>
 80061d6:	4607      	mov	r7, r0
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	4658      	mov	r0, fp
 80061dc:	601f      	str	r7, [r3, #0]
 80061de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061e2:	f7fa fde7 	bl	8000db4 <__aeabi_fmul>
 80061e6:	4601      	mov	r1, r0
 80061e8:	4630      	mov	r0, r6
 80061ea:	f7fa fcdb 	bl	8000ba4 <__addsf3>
 80061ee:	4606      	mov	r6, r0
 80061f0:	9b02      	ldr	r3, [sp, #8]
 80061f2:	4658      	mov	r0, fp
 80061f4:	605e      	str	r6, [r3, #4]
 80061f6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80061fa:	f7fa fddb 	bl	8000db4 <__aeabi_fmul>
 80061fe:	4601      	mov	r1, r0
 8006200:	4628      	mov	r0, r5
 8006202:	f7fa fccf 	bl	8000ba4 <__addsf3>
 8006206:	4605      	mov	r5, r0
 8006208:	4658      	mov	r0, fp
 800620a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800620e:	f8cb 5008 	str.w	r5, [fp, #8]
 8006212:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006216:	f7fa fdcd 	bl	8000db4 <__aeabi_fmul>
 800621a:	4601      	mov	r1, r0
 800621c:	4620      	mov	r0, r4
 800621e:	f7fa fcc1 	bl	8000ba4 <__addsf3>
 8006222:	f1b9 0f01 	cmp.w	r9, #1
 8006226:	4604      	mov	r4, r0
 8006228:	f8cb 000c 	str.w	r0, [fp, #12]
 800622c:	f000 81e0 	beq.w	80065f0 <neai_classification+0xb64>
 8006230:	4a12      	ldr	r2, [pc, #72]	@ (800627c <neai_classification+0x7f0>)
 8006232:	f10a 0301 	add.w	r3, sl, #1
 8006236:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 800623a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800623e:	4658      	mov	r0, fp
 8006240:	f7fa fdb8 	bl	8000db4 <__aeabi_fmul>
 8006244:	4601      	mov	r1, r0
 8006246:	4638      	mov	r0, r7
 8006248:	f7fa fcac 	bl	8000ba4 <__addsf3>
 800624c:	4607      	mov	r7, r0
 800624e:	9b02      	ldr	r3, [sp, #8]
 8006250:	4658      	mov	r0, fp
 8006252:	601f      	str	r7, [r3, #0]
 8006254:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8006258:	f7fa fdac 	bl	8000db4 <__aeabi_fmul>
 800625c:	4601      	mov	r1, r0
 800625e:	4630      	mov	r0, r6
 8006260:	f7fa fca0 	bl	8000ba4 <__addsf3>
 8006264:	4606      	mov	r6, r0
 8006266:	9b02      	ldr	r3, [sp, #8]
 8006268:	e00a      	b.n	8006280 <neai_classification+0x7f4>
 800626a:	bf00      	nop
 800626c:	20001124 	.word	0x20001124
 8006270:	20000910 	.word	0x20000910
 8006274:	20000914 	.word	0x20000914
 8006278:	2000090c 	.word	0x2000090c
 800627c:	200008d8 	.word	0x200008d8
 8006280:	4658      	mov	r0, fp
 8006282:	605e      	str	r6, [r3, #4]
 8006284:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8006288:	f7fa fd94 	bl	8000db4 <__aeabi_fmul>
 800628c:	4601      	mov	r1, r0
 800628e:	4628      	mov	r0, r5
 8006290:	f7fa fc88 	bl	8000ba4 <__addsf3>
 8006294:	4605      	mov	r5, r0
 8006296:	4658      	mov	r0, fp
 8006298:	f8dd b008 	ldr.w	fp, [sp, #8]
 800629c:	f8cb 5008 	str.w	r5, [fp, #8]
 80062a0:	f8d8 101c 	ldr.w	r1, [r8, #28]
 80062a4:	f7fa fd86 	bl	8000db4 <__aeabi_fmul>
 80062a8:	4601      	mov	r1, r0
 80062aa:	4620      	mov	r0, r4
 80062ac:	f7fa fc7a 	bl	8000ba4 <__addsf3>
 80062b0:	f1b9 0f02 	cmp.w	r9, #2
 80062b4:	4604      	mov	r4, r0
 80062b6:	f8cb 000c 	str.w	r0, [fp, #12]
 80062ba:	f000 8199 	beq.w	80065f0 <neai_classification+0xb64>
 80062be:	4ab9      	ldr	r2, [pc, #740]	@ (80065a4 <neai_classification+0xb18>)
 80062c0:	f10a 0302 	add.w	r3, sl, #2
 80062c4:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80062c8:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80062cc:	4658      	mov	r0, fp
 80062ce:	f7fa fd71 	bl	8000db4 <__aeabi_fmul>
 80062d2:	4601      	mov	r1, r0
 80062d4:	4638      	mov	r0, r7
 80062d6:	f7fa fc65 	bl	8000ba4 <__addsf3>
 80062da:	4607      	mov	r7, r0
 80062dc:	9b02      	ldr	r3, [sp, #8]
 80062de:	4658      	mov	r0, fp
 80062e0:	601f      	str	r7, [r3, #0]
 80062e2:	f8d8 1024 	ldr.w	r1, [r8, #36]	@ 0x24
 80062e6:	f7fa fd65 	bl	8000db4 <__aeabi_fmul>
 80062ea:	4601      	mov	r1, r0
 80062ec:	4630      	mov	r0, r6
 80062ee:	f7fa fc59 	bl	8000ba4 <__addsf3>
 80062f2:	4606      	mov	r6, r0
 80062f4:	9b02      	ldr	r3, [sp, #8]
 80062f6:	4658      	mov	r0, fp
 80062f8:	605e      	str	r6, [r3, #4]
 80062fa:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 80062fe:	f7fa fd59 	bl	8000db4 <__aeabi_fmul>
 8006302:	4601      	mov	r1, r0
 8006304:	4628      	mov	r0, r5
 8006306:	f7fa fc4d 	bl	8000ba4 <__addsf3>
 800630a:	4605      	mov	r5, r0
 800630c:	4658      	mov	r0, fp
 800630e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006312:	f8cb 5008 	str.w	r5, [fp, #8]
 8006316:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800631a:	f7fa fd4b 	bl	8000db4 <__aeabi_fmul>
 800631e:	4601      	mov	r1, r0
 8006320:	4620      	mov	r0, r4
 8006322:	f7fa fc3f 	bl	8000ba4 <__addsf3>
 8006326:	f1b9 0f03 	cmp.w	r9, #3
 800632a:	4604      	mov	r4, r0
 800632c:	f8cb 000c 	str.w	r0, [fp, #12]
 8006330:	f000 815e 	beq.w	80065f0 <neai_classification+0xb64>
 8006334:	4a9b      	ldr	r2, [pc, #620]	@ (80065a4 <neai_classification+0xb18>)
 8006336:	f10a 0303 	add.w	r3, sl, #3
 800633a:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 800633e:	f8d8 1030 	ldr.w	r1, [r8, #48]	@ 0x30
 8006342:	4658      	mov	r0, fp
 8006344:	f7fa fd36 	bl	8000db4 <__aeabi_fmul>
 8006348:	4601      	mov	r1, r0
 800634a:	4638      	mov	r0, r7
 800634c:	f7fa fc2a 	bl	8000ba4 <__addsf3>
 8006350:	4607      	mov	r7, r0
 8006352:	9b02      	ldr	r3, [sp, #8]
 8006354:	4658      	mov	r0, fp
 8006356:	601f      	str	r7, [r3, #0]
 8006358:	f8d8 1034 	ldr.w	r1, [r8, #52]	@ 0x34
 800635c:	f7fa fd2a 	bl	8000db4 <__aeabi_fmul>
 8006360:	4601      	mov	r1, r0
 8006362:	4630      	mov	r0, r6
 8006364:	f7fa fc1e 	bl	8000ba4 <__addsf3>
 8006368:	4606      	mov	r6, r0
 800636a:	9b02      	ldr	r3, [sp, #8]
 800636c:	4658      	mov	r0, fp
 800636e:	605e      	str	r6, [r3, #4]
 8006370:	f8d8 1038 	ldr.w	r1, [r8, #56]	@ 0x38
 8006374:	f7fa fd1e 	bl	8000db4 <__aeabi_fmul>
 8006378:	4601      	mov	r1, r0
 800637a:	4628      	mov	r0, r5
 800637c:	f7fa fc12 	bl	8000ba4 <__addsf3>
 8006380:	4605      	mov	r5, r0
 8006382:	4658      	mov	r0, fp
 8006384:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006388:	f8cb 5008 	str.w	r5, [fp, #8]
 800638c:	f8d8 103c 	ldr.w	r1, [r8, #60]	@ 0x3c
 8006390:	f7fa fd10 	bl	8000db4 <__aeabi_fmul>
 8006394:	4601      	mov	r1, r0
 8006396:	4620      	mov	r0, r4
 8006398:	f7fa fc04 	bl	8000ba4 <__addsf3>
 800639c:	f1b9 0f04 	cmp.w	r9, #4
 80063a0:	4604      	mov	r4, r0
 80063a2:	f8cb 000c 	str.w	r0, [fp, #12]
 80063a6:	f000 8123 	beq.w	80065f0 <neai_classification+0xb64>
 80063aa:	4a7e      	ldr	r2, [pc, #504]	@ (80065a4 <neai_classification+0xb18>)
 80063ac:	f10a 0304 	add.w	r3, sl, #4
 80063b0:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80063b4:	f8d8 1040 	ldr.w	r1, [r8, #64]	@ 0x40
 80063b8:	4658      	mov	r0, fp
 80063ba:	f7fa fcfb 	bl	8000db4 <__aeabi_fmul>
 80063be:	4601      	mov	r1, r0
 80063c0:	4638      	mov	r0, r7
 80063c2:	f7fa fbef 	bl	8000ba4 <__addsf3>
 80063c6:	4607      	mov	r7, r0
 80063c8:	9b02      	ldr	r3, [sp, #8]
 80063ca:	4658      	mov	r0, fp
 80063cc:	601f      	str	r7, [r3, #0]
 80063ce:	f8d8 1044 	ldr.w	r1, [r8, #68]	@ 0x44
 80063d2:	f7fa fcef 	bl	8000db4 <__aeabi_fmul>
 80063d6:	4601      	mov	r1, r0
 80063d8:	4630      	mov	r0, r6
 80063da:	f7fa fbe3 	bl	8000ba4 <__addsf3>
 80063de:	4606      	mov	r6, r0
 80063e0:	9b02      	ldr	r3, [sp, #8]
 80063e2:	4658      	mov	r0, fp
 80063e4:	605e      	str	r6, [r3, #4]
 80063e6:	f8d8 1048 	ldr.w	r1, [r8, #72]	@ 0x48
 80063ea:	f7fa fce3 	bl	8000db4 <__aeabi_fmul>
 80063ee:	4601      	mov	r1, r0
 80063f0:	4628      	mov	r0, r5
 80063f2:	f7fa fbd7 	bl	8000ba4 <__addsf3>
 80063f6:	4605      	mov	r5, r0
 80063f8:	4658      	mov	r0, fp
 80063fa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80063fe:	f8cb 5008 	str.w	r5, [fp, #8]
 8006402:	f8d8 104c 	ldr.w	r1, [r8, #76]	@ 0x4c
 8006406:	f7fa fcd5 	bl	8000db4 <__aeabi_fmul>
 800640a:	4601      	mov	r1, r0
 800640c:	4620      	mov	r0, r4
 800640e:	f7fa fbc9 	bl	8000ba4 <__addsf3>
 8006412:	f1b9 0f05 	cmp.w	r9, #5
 8006416:	4604      	mov	r4, r0
 8006418:	f8cb 000c 	str.w	r0, [fp, #12]
 800641c:	f000 80e8 	beq.w	80065f0 <neai_classification+0xb64>
 8006420:	4a60      	ldr	r2, [pc, #384]	@ (80065a4 <neai_classification+0xb18>)
 8006422:	f10a 0305 	add.w	r3, sl, #5
 8006426:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 800642a:	f8d8 1050 	ldr.w	r1, [r8, #80]	@ 0x50
 800642e:	4658      	mov	r0, fp
 8006430:	f7fa fcc0 	bl	8000db4 <__aeabi_fmul>
 8006434:	4601      	mov	r1, r0
 8006436:	4638      	mov	r0, r7
 8006438:	f7fa fbb4 	bl	8000ba4 <__addsf3>
 800643c:	4607      	mov	r7, r0
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	4658      	mov	r0, fp
 8006442:	601f      	str	r7, [r3, #0]
 8006444:	f8d8 1054 	ldr.w	r1, [r8, #84]	@ 0x54
 8006448:	f7fa fcb4 	bl	8000db4 <__aeabi_fmul>
 800644c:	4601      	mov	r1, r0
 800644e:	4630      	mov	r0, r6
 8006450:	f7fa fba8 	bl	8000ba4 <__addsf3>
 8006454:	4606      	mov	r6, r0
 8006456:	9b02      	ldr	r3, [sp, #8]
 8006458:	4658      	mov	r0, fp
 800645a:	605e      	str	r6, [r3, #4]
 800645c:	f8d8 1058 	ldr.w	r1, [r8, #88]	@ 0x58
 8006460:	f7fa fca8 	bl	8000db4 <__aeabi_fmul>
 8006464:	4601      	mov	r1, r0
 8006466:	4628      	mov	r0, r5
 8006468:	f7fa fb9c 	bl	8000ba4 <__addsf3>
 800646c:	4605      	mov	r5, r0
 800646e:	4658      	mov	r0, fp
 8006470:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006474:	f8cb 5008 	str.w	r5, [fp, #8]
 8006478:	f8d8 105c 	ldr.w	r1, [r8, #92]	@ 0x5c
 800647c:	f7fa fc9a 	bl	8000db4 <__aeabi_fmul>
 8006480:	4601      	mov	r1, r0
 8006482:	4620      	mov	r0, r4
 8006484:	f7fa fb8e 	bl	8000ba4 <__addsf3>
 8006488:	f1b9 0f06 	cmp.w	r9, #6
 800648c:	4604      	mov	r4, r0
 800648e:	f8cb 000c 	str.w	r0, [fp, #12]
 8006492:	f000 80ad 	beq.w	80065f0 <neai_classification+0xb64>
 8006496:	4a43      	ldr	r2, [pc, #268]	@ (80065a4 <neai_classification+0xb18>)
 8006498:	f10a 0306 	add.w	r3, sl, #6
 800649c:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 80064a0:	f8d8 1060 	ldr.w	r1, [r8, #96]	@ 0x60
 80064a4:	4658      	mov	r0, fp
 80064a6:	f7fa fc85 	bl	8000db4 <__aeabi_fmul>
 80064aa:	4601      	mov	r1, r0
 80064ac:	4638      	mov	r0, r7
 80064ae:	f7fa fb79 	bl	8000ba4 <__addsf3>
 80064b2:	4607      	mov	r7, r0
 80064b4:	9b02      	ldr	r3, [sp, #8]
 80064b6:	4658      	mov	r0, fp
 80064b8:	601f      	str	r7, [r3, #0]
 80064ba:	f8d8 1064 	ldr.w	r1, [r8, #100]	@ 0x64
 80064be:	f7fa fc79 	bl	8000db4 <__aeabi_fmul>
 80064c2:	4601      	mov	r1, r0
 80064c4:	4630      	mov	r0, r6
 80064c6:	f7fa fb6d 	bl	8000ba4 <__addsf3>
 80064ca:	4606      	mov	r6, r0
 80064cc:	9b02      	ldr	r3, [sp, #8]
 80064ce:	4658      	mov	r0, fp
 80064d0:	605e      	str	r6, [r3, #4]
 80064d2:	f8d8 1068 	ldr.w	r1, [r8, #104]	@ 0x68
 80064d6:	f7fa fc6d 	bl	8000db4 <__aeabi_fmul>
 80064da:	4601      	mov	r1, r0
 80064dc:	4628      	mov	r0, r5
 80064de:	f7fa fb61 	bl	8000ba4 <__addsf3>
 80064e2:	4605      	mov	r5, r0
 80064e4:	4658      	mov	r0, fp
 80064e6:	f8dd b008 	ldr.w	fp, [sp, #8]
 80064ea:	f8cb 5008 	str.w	r5, [fp, #8]
 80064ee:	f8d8 106c 	ldr.w	r1, [r8, #108]	@ 0x6c
 80064f2:	f7fa fc5f 	bl	8000db4 <__aeabi_fmul>
 80064f6:	4601      	mov	r1, r0
 80064f8:	4620      	mov	r0, r4
 80064fa:	f7fa fb53 	bl	8000ba4 <__addsf3>
 80064fe:	f1b9 0f07 	cmp.w	r9, #7
 8006502:	4604      	mov	r4, r0
 8006504:	f8cb 000c 	str.w	r0, [fp, #12]
 8006508:	d072      	beq.n	80065f0 <neai_classification+0xb64>
 800650a:	4a26      	ldr	r2, [pc, #152]	@ (80065a4 <neai_classification+0xb18>)
 800650c:	f10a 0307 	add.w	r3, sl, #7
 8006510:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8006514:	f8d8 1070 	ldr.w	r1, [r8, #112]	@ 0x70
 8006518:	4658      	mov	r0, fp
 800651a:	f7fa fc4b 	bl	8000db4 <__aeabi_fmul>
 800651e:	4601      	mov	r1, r0
 8006520:	4638      	mov	r0, r7
 8006522:	f7fa fb3f 	bl	8000ba4 <__addsf3>
 8006526:	4607      	mov	r7, r0
 8006528:	9b02      	ldr	r3, [sp, #8]
 800652a:	4658      	mov	r0, fp
 800652c:	601f      	str	r7, [r3, #0]
 800652e:	f8d8 1074 	ldr.w	r1, [r8, #116]	@ 0x74
 8006532:	f7fa fc3f 	bl	8000db4 <__aeabi_fmul>
 8006536:	4601      	mov	r1, r0
 8006538:	4630      	mov	r0, r6
 800653a:	f7fa fb33 	bl	8000ba4 <__addsf3>
 800653e:	4606      	mov	r6, r0
 8006540:	9b02      	ldr	r3, [sp, #8]
 8006542:	4658      	mov	r0, fp
 8006544:	605e      	str	r6, [r3, #4]
 8006546:	f8d8 1078 	ldr.w	r1, [r8, #120]	@ 0x78
 800654a:	f7fa fc33 	bl	8000db4 <__aeabi_fmul>
 800654e:	4601      	mov	r1, r0
 8006550:	4628      	mov	r0, r5
 8006552:	f7fa fb27 	bl	8000ba4 <__addsf3>
 8006556:	4605      	mov	r5, r0
 8006558:	4658      	mov	r0, fp
 800655a:	f8dd b008 	ldr.w	fp, [sp, #8]
 800655e:	f8cb 5008 	str.w	r5, [fp, #8]
 8006562:	f8d8 107c 	ldr.w	r1, [r8, #124]	@ 0x7c
 8006566:	f7fa fc25 	bl	8000db4 <__aeabi_fmul>
 800656a:	4601      	mov	r1, r0
 800656c:	4620      	mov	r0, r4
 800656e:	f7fa fb19 	bl	8000ba4 <__addsf3>
 8006572:	f1b9 0f08 	cmp.w	r9, #8
 8006576:	4604      	mov	r4, r0
 8006578:	f8cb 000c 	str.w	r0, [fp, #12]
 800657c:	d038      	beq.n	80065f0 <neai_classification+0xb64>
 800657e:	4a09      	ldr	r2, [pc, #36]	@ (80065a4 <neai_classification+0xb18>)
 8006580:	f10a 0308 	add.w	r3, sl, #8
 8006584:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8006588:	f8d8 1080 	ldr.w	r1, [r8, #128]	@ 0x80
 800658c:	4648      	mov	r0, r9
 800658e:	f7fa fc11 	bl	8000db4 <__aeabi_fmul>
 8006592:	4601      	mov	r1, r0
 8006594:	4638      	mov	r0, r7
 8006596:	f7fa fb05 	bl	8000ba4 <__addsf3>
 800659a:	4607      	mov	r7, r0
 800659c:	f8cb 7000 	str.w	r7, [fp]
 80065a0:	e002      	b.n	80065a8 <neai_classification+0xb1c>
 80065a2:	bf00      	nop
 80065a4:	200008d8 	.word	0x200008d8
 80065a8:	f8d8 1084 	ldr.w	r1, [r8, #132]	@ 0x84
 80065ac:	4648      	mov	r0, r9
 80065ae:	f7fa fc01 	bl	8000db4 <__aeabi_fmul>
 80065b2:	4601      	mov	r1, r0
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7fa faf5 	bl	8000ba4 <__addsf3>
 80065ba:	4606      	mov	r6, r0
 80065bc:	f8cb 6004 	str.w	r6, [fp, #4]
 80065c0:	f8d8 1088 	ldr.w	r1, [r8, #136]	@ 0x88
 80065c4:	4648      	mov	r0, r9
 80065c6:	f7fa fbf5 	bl	8000db4 <__aeabi_fmul>
 80065ca:	4601      	mov	r1, r0
 80065cc:	4628      	mov	r0, r5
 80065ce:	f7fa fae9 	bl	8000ba4 <__addsf3>
 80065d2:	4605      	mov	r5, r0
 80065d4:	f8cb 5008 	str.w	r5, [fp, #8]
 80065d8:	f8d8 108c 	ldr.w	r1, [r8, #140]	@ 0x8c
 80065dc:	4648      	mov	r0, r9
 80065de:	f7fa fbe9 	bl	8000db4 <__aeabi_fmul>
 80065e2:	4601      	mov	r1, r0
 80065e4:	4620      	mov	r0, r4
 80065e6:	f7fa fadd 	bl	8000ba4 <__addsf3>
 80065ea:	4604      	mov	r4, r0
 80065ec:	f8cb 000c 	str.w	r0, [fp, #12]
 80065f0:	4639      	mov	r1, r7
 80065f2:	4630      	mov	r0, r6
 80065f4:	f7fa fd9a 	bl	800112c <__aeabi_fcmpgt>
 80065f8:	b900      	cbnz	r0, 80065fc <neai_classification+0xb70>
 80065fa:	463e      	mov	r6, r7
 80065fc:	4629      	mov	r1, r5
 80065fe:	4630      	mov	r0, r6
 8006600:	f7fa fd76 	bl	80010f0 <__aeabi_fcmplt>
 8006604:	b900      	cbnz	r0, 8006608 <neai_classification+0xb7c>
 8006606:	4635      	mov	r5, r6
 8006608:	4621      	mov	r1, r4
 800660a:	4628      	mov	r0, r5
 800660c:	f7fa fd70 	bl	80010f0 <__aeabi_fcmplt>
 8006610:	b900      	cbnz	r0, 8006614 <neai_classification+0xb88>
 8006612:	462c      	mov	r4, r5
 8006614:	2700      	movs	r7, #0
 8006616:	9b02      	ldr	r3, [sp, #8]
 8006618:	4e33      	ldr	r6, [pc, #204]	@ (80066e8 <neai_classification+0xc5c>)
 800661a:	f1a3 0804 	sub.w	r8, r3, #4
 800661e:	f103 050c 	add.w	r5, r3, #12
 8006622:	f858 0f04 	ldr.w	r0, [r8, #4]!
 8006626:	4621      	mov	r1, r4
 8006628:	f7fa faba 	bl	8000ba0 <__aeabi_fsub>
 800662c:	4631      	mov	r1, r6
 800662e:	f7fa fbc1 	bl	8000db4 <__aeabi_fmul>
 8006632:	f004 fcb7 	bl	800afa4 <expf>
 8006636:	4601      	mov	r1, r0
 8006638:	4638      	mov	r0, r7
 800663a:	f8c8 1000 	str.w	r1, [r8]
 800663e:	f7fa fab1 	bl	8000ba4 <__addsf3>
 8006642:	45a8      	cmp	r8, r5
 8006644:	4607      	mov	r7, r0
 8006646:	d1ec      	bne.n	8006622 <neai_classification+0xb96>
 8006648:	4601      	mov	r1, r0
 800664a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800664e:	f7fa fc65 	bl	8000f1c <__aeabi_fdiv>
 8006652:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006656:	4606      	mov	r6, r0
 8006658:	f8d8 1000 	ldr.w	r1, [r8]
 800665c:	f7fa fbaa 	bl	8000db4 <__aeabi_fmul>
 8006660:	4607      	mov	r7, r0
 8006662:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006666:	4630      	mov	r0, r6
 8006668:	f8c8 7000 	str.w	r7, [r8]
 800666c:	f7fa fba2 	bl	8000db4 <__aeabi_fmul>
 8006670:	4604      	mov	r4, r0
 8006672:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006676:	4630      	mov	r0, r6
 8006678:	f8c8 4004 	str.w	r4, [r8, #4]
 800667c:	f7fa fb9a 	bl	8000db4 <__aeabi_fmul>
 8006680:	4605      	mov	r5, r0
 8006682:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006686:	4630      	mov	r0, r6
 8006688:	f8c8 5008 	str.w	r5, [r8, #8]
 800668c:	f7fa fb92 	bl	8000db4 <__aeabi_fmul>
 8006690:	4639      	mov	r1, r7
 8006692:	4606      	mov	r6, r0
 8006694:	f8c8 000c 	str.w	r0, [r8, #12]
 8006698:	4620      	mov	r0, r4
 800669a:	f7fa fd47 	bl	800112c <__aeabi_fcmpgt>
 800669e:	bb00      	cbnz	r0, 80066e2 <neai_classification+0xc56>
 80066a0:	463c      	mov	r4, r7
 80066a2:	2701      	movs	r7, #1
 80066a4:	4629      	mov	r1, r5
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7fa fd22 	bl	80010f0 <__aeabi_fcmplt>
 80066ac:	b9b8      	cbnz	r0, 80066de <neai_classification+0xc52>
 80066ae:	4625      	mov	r5, r4
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7fa fd1c 	bl	80010f0 <__aeabi_fcmplt>
 80066b8:	2800      	cmp	r0, #0
 80066ba:	bf18      	it	ne
 80066bc:	2704      	movne	r7, #4
 80066be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066c0:	801f      	strh	r7, [r3, #0]
 80066c2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066c4:	b00d      	add	sp, #52	@ 0x34
 80066c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ca:	2f02      	cmp	r7, #2
 80066cc:	f04f 0b01 	mov.w	fp, #1
 80066d0:	f47f aa34 	bne.w	8005b3c <neai_classification+0xb0>
 80066d4:	9f06      	ldr	r7, [sp, #24]
 80066d6:	e9dd 5604 	ldrd	r5, r6, [sp, #16]
 80066da:	f7ff ba96 	b.w	8005c0a <neai_classification+0x17e>
 80066de:	2703      	movs	r7, #3
 80066e0:	e7e6      	b.n	80066b0 <neai_classification+0xc24>
 80066e2:	2702      	movs	r7, #2
 80066e4:	e7de      	b.n	80066a4 <neai_classification+0xc18>
 80066e6:	bf00      	nop
 80066e8:	40a00000 	.word	0x40a00000

080066ec <__cvt>:
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f2:	461d      	mov	r5, r3
 80066f4:	bfbb      	ittet	lt
 80066f6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80066fa:	461d      	movlt	r5, r3
 80066fc:	2300      	movge	r3, #0
 80066fe:	232d      	movlt	r3, #45	@ 0x2d
 8006700:	b088      	sub	sp, #32
 8006702:	4614      	mov	r4, r2
 8006704:	bfb8      	it	lt
 8006706:	4614      	movlt	r4, r2
 8006708:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800670a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800670c:	7013      	strb	r3, [r2, #0]
 800670e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006710:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006714:	f023 0820 	bic.w	r8, r3, #32
 8006718:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800671c:	d005      	beq.n	800672a <__cvt+0x3e>
 800671e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006722:	d100      	bne.n	8006726 <__cvt+0x3a>
 8006724:	3601      	adds	r6, #1
 8006726:	2302      	movs	r3, #2
 8006728:	e000      	b.n	800672c <__cvt+0x40>
 800672a:	2303      	movs	r3, #3
 800672c:	aa07      	add	r2, sp, #28
 800672e:	9204      	str	r2, [sp, #16]
 8006730:	aa06      	add	r2, sp, #24
 8006732:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006736:	e9cd 3600 	strd	r3, r6, [sp]
 800673a:	4622      	mov	r2, r4
 800673c:	462b      	mov	r3, r5
 800673e:	f001 f98f 	bl	8007a60 <_dtoa_r>
 8006742:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006746:	4607      	mov	r7, r0
 8006748:	d119      	bne.n	800677e <__cvt+0x92>
 800674a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800674c:	07db      	lsls	r3, r3, #31
 800674e:	d50e      	bpl.n	800676e <__cvt+0x82>
 8006750:	eb00 0906 	add.w	r9, r0, r6
 8006754:	2200      	movs	r2, #0
 8006756:	2300      	movs	r3, #0
 8006758:	4620      	mov	r0, r4
 800675a:	4629      	mov	r1, r5
 800675c:	f7fa f93c 	bl	80009d8 <__aeabi_dcmpeq>
 8006760:	b108      	cbz	r0, 8006766 <__cvt+0x7a>
 8006762:	f8cd 901c 	str.w	r9, [sp, #28]
 8006766:	2230      	movs	r2, #48	@ 0x30
 8006768:	9b07      	ldr	r3, [sp, #28]
 800676a:	454b      	cmp	r3, r9
 800676c:	d31e      	bcc.n	80067ac <__cvt+0xc0>
 800676e:	4638      	mov	r0, r7
 8006770:	9b07      	ldr	r3, [sp, #28]
 8006772:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006774:	1bdb      	subs	r3, r3, r7
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	b008      	add	sp, #32
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006782:	eb00 0906 	add.w	r9, r0, r6
 8006786:	d1e5      	bne.n	8006754 <__cvt+0x68>
 8006788:	7803      	ldrb	r3, [r0, #0]
 800678a:	2b30      	cmp	r3, #48	@ 0x30
 800678c:	d10a      	bne.n	80067a4 <__cvt+0xb8>
 800678e:	2200      	movs	r2, #0
 8006790:	2300      	movs	r3, #0
 8006792:	4620      	mov	r0, r4
 8006794:	4629      	mov	r1, r5
 8006796:	f7fa f91f 	bl	80009d8 <__aeabi_dcmpeq>
 800679a:	b918      	cbnz	r0, 80067a4 <__cvt+0xb8>
 800679c:	f1c6 0601 	rsb	r6, r6, #1
 80067a0:	f8ca 6000 	str.w	r6, [sl]
 80067a4:	f8da 3000 	ldr.w	r3, [sl]
 80067a8:	4499      	add	r9, r3
 80067aa:	e7d3      	b.n	8006754 <__cvt+0x68>
 80067ac:	1c59      	adds	r1, r3, #1
 80067ae:	9107      	str	r1, [sp, #28]
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e7d9      	b.n	8006768 <__cvt+0x7c>

080067b4 <__exponent>:
 80067b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067b6:	2900      	cmp	r1, #0
 80067b8:	bfb6      	itet	lt
 80067ba:	232d      	movlt	r3, #45	@ 0x2d
 80067bc:	232b      	movge	r3, #43	@ 0x2b
 80067be:	4249      	neglt	r1, r1
 80067c0:	2909      	cmp	r1, #9
 80067c2:	7002      	strb	r2, [r0, #0]
 80067c4:	7043      	strb	r3, [r0, #1]
 80067c6:	dd29      	ble.n	800681c <__exponent+0x68>
 80067c8:	f10d 0307 	add.w	r3, sp, #7
 80067cc:	461d      	mov	r5, r3
 80067ce:	270a      	movs	r7, #10
 80067d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80067d4:	461a      	mov	r2, r3
 80067d6:	fb07 1416 	mls	r4, r7, r6, r1
 80067da:	3430      	adds	r4, #48	@ 0x30
 80067dc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067e0:	460c      	mov	r4, r1
 80067e2:	2c63      	cmp	r4, #99	@ 0x63
 80067e4:	4631      	mov	r1, r6
 80067e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80067ea:	dcf1      	bgt.n	80067d0 <__exponent+0x1c>
 80067ec:	3130      	adds	r1, #48	@ 0x30
 80067ee:	1e94      	subs	r4, r2, #2
 80067f0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067f4:	4623      	mov	r3, r4
 80067f6:	1c41      	adds	r1, r0, #1
 80067f8:	42ab      	cmp	r3, r5
 80067fa:	d30a      	bcc.n	8006812 <__exponent+0x5e>
 80067fc:	f10d 0309 	add.w	r3, sp, #9
 8006800:	1a9b      	subs	r3, r3, r2
 8006802:	42ac      	cmp	r4, r5
 8006804:	bf88      	it	hi
 8006806:	2300      	movhi	r3, #0
 8006808:	3302      	adds	r3, #2
 800680a:	4403      	add	r3, r0
 800680c:	1a18      	subs	r0, r3, r0
 800680e:	b003      	add	sp, #12
 8006810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006812:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006816:	f801 6f01 	strb.w	r6, [r1, #1]!
 800681a:	e7ed      	b.n	80067f8 <__exponent+0x44>
 800681c:	2330      	movs	r3, #48	@ 0x30
 800681e:	3130      	adds	r1, #48	@ 0x30
 8006820:	7083      	strb	r3, [r0, #2]
 8006822:	70c1      	strb	r1, [r0, #3]
 8006824:	1d03      	adds	r3, r0, #4
 8006826:	e7f1      	b.n	800680c <__exponent+0x58>

08006828 <_printf_float>:
 8006828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682c:	b091      	sub	sp, #68	@ 0x44
 800682e:	460c      	mov	r4, r1
 8006830:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006834:	4616      	mov	r6, r2
 8006836:	461f      	mov	r7, r3
 8006838:	4605      	mov	r5, r0
 800683a:	f000 ffef 	bl	800781c <_localeconv_r>
 800683e:	6803      	ldr	r3, [r0, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	9308      	str	r3, [sp, #32]
 8006844:	f7f9 fc9c 	bl	8000180 <strlen>
 8006848:	2300      	movs	r3, #0
 800684a:	930e      	str	r3, [sp, #56]	@ 0x38
 800684c:	f8d8 3000 	ldr.w	r3, [r8]
 8006850:	9009      	str	r0, [sp, #36]	@ 0x24
 8006852:	3307      	adds	r3, #7
 8006854:	f023 0307 	bic.w	r3, r3, #7
 8006858:	f103 0208 	add.w	r2, r3, #8
 800685c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006860:	f8d4 b000 	ldr.w	fp, [r4]
 8006864:	f8c8 2000 	str.w	r2, [r8]
 8006868:	e9d3 8900 	ldrd	r8, r9, [r3]
 800686c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006872:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006876:	f04f 32ff 	mov.w	r2, #4294967295
 800687a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800687e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006882:	4b9c      	ldr	r3, [pc, #624]	@ (8006af4 <_printf_float+0x2cc>)
 8006884:	f7fa f8da 	bl	8000a3c <__aeabi_dcmpun>
 8006888:	bb70      	cbnz	r0, 80068e8 <_printf_float+0xc0>
 800688a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800688e:	f04f 32ff 	mov.w	r2, #4294967295
 8006892:	4b98      	ldr	r3, [pc, #608]	@ (8006af4 <_printf_float+0x2cc>)
 8006894:	f7fa f8b4 	bl	8000a00 <__aeabi_dcmple>
 8006898:	bb30      	cbnz	r0, 80068e8 <_printf_float+0xc0>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7fa f8a3 	bl	80009ec <__aeabi_dcmplt>
 80068a6:	b110      	cbz	r0, 80068ae <_printf_float+0x86>
 80068a8:	232d      	movs	r3, #45	@ 0x2d
 80068aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ae:	4a92      	ldr	r2, [pc, #584]	@ (8006af8 <_printf_float+0x2d0>)
 80068b0:	4b92      	ldr	r3, [pc, #584]	@ (8006afc <_printf_float+0x2d4>)
 80068b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068b6:	bf8c      	ite	hi
 80068b8:	4690      	movhi	r8, r2
 80068ba:	4698      	movls	r8, r3
 80068bc:	2303      	movs	r3, #3
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	6123      	str	r3, [r4, #16]
 80068c4:	f02b 0304 	bic.w	r3, fp, #4
 80068c8:	6023      	str	r3, [r4, #0]
 80068ca:	4633      	mov	r3, r6
 80068cc:	4621      	mov	r1, r4
 80068ce:	4628      	mov	r0, r5
 80068d0:	9700      	str	r7, [sp, #0]
 80068d2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80068d4:	f000 f9d4 	bl	8006c80 <_printf_common>
 80068d8:	3001      	adds	r0, #1
 80068da:	f040 8090 	bne.w	80069fe <_printf_float+0x1d6>
 80068de:	f04f 30ff 	mov.w	r0, #4294967295
 80068e2:	b011      	add	sp, #68	@ 0x44
 80068e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068e8:	4642      	mov	r2, r8
 80068ea:	464b      	mov	r3, r9
 80068ec:	4640      	mov	r0, r8
 80068ee:	4649      	mov	r1, r9
 80068f0:	f7fa f8a4 	bl	8000a3c <__aeabi_dcmpun>
 80068f4:	b148      	cbz	r0, 800690a <_printf_float+0xe2>
 80068f6:	464b      	mov	r3, r9
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bfb8      	it	lt
 80068fc:	232d      	movlt	r3, #45	@ 0x2d
 80068fe:	4a80      	ldr	r2, [pc, #512]	@ (8006b00 <_printf_float+0x2d8>)
 8006900:	bfb8      	it	lt
 8006902:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006906:	4b7f      	ldr	r3, [pc, #508]	@ (8006b04 <_printf_float+0x2dc>)
 8006908:	e7d3      	b.n	80068b2 <_printf_float+0x8a>
 800690a:	6863      	ldr	r3, [r4, #4]
 800690c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	d13f      	bne.n	8006994 <_printf_float+0x16c>
 8006914:	2306      	movs	r3, #6
 8006916:	6063      	str	r3, [r4, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	9206      	str	r2, [sp, #24]
 8006922:	aa0e      	add	r2, sp, #56	@ 0x38
 8006924:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006928:	aa0d      	add	r2, sp, #52	@ 0x34
 800692a:	9203      	str	r2, [sp, #12]
 800692c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006930:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006934:	6863      	ldr	r3, [r4, #4]
 8006936:	4642      	mov	r2, r8
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	4628      	mov	r0, r5
 800693c:	464b      	mov	r3, r9
 800693e:	910a      	str	r1, [sp, #40]	@ 0x28
 8006940:	f7ff fed4 	bl	80066ec <__cvt>
 8006944:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006946:	4680      	mov	r8, r0
 8006948:	2947      	cmp	r1, #71	@ 0x47
 800694a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800694c:	d128      	bne.n	80069a0 <_printf_float+0x178>
 800694e:	1cc8      	adds	r0, r1, #3
 8006950:	db02      	blt.n	8006958 <_printf_float+0x130>
 8006952:	6863      	ldr	r3, [r4, #4]
 8006954:	4299      	cmp	r1, r3
 8006956:	dd40      	ble.n	80069da <_printf_float+0x1b2>
 8006958:	f1aa 0a02 	sub.w	sl, sl, #2
 800695c:	fa5f fa8a 	uxtb.w	sl, sl
 8006960:	4652      	mov	r2, sl
 8006962:	3901      	subs	r1, #1
 8006964:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006968:	910d      	str	r1, [sp, #52]	@ 0x34
 800696a:	f7ff ff23 	bl	80067b4 <__exponent>
 800696e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006970:	4681      	mov	r9, r0
 8006972:	1813      	adds	r3, r2, r0
 8006974:	2a01      	cmp	r2, #1
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	dc02      	bgt.n	8006980 <_printf_float+0x158>
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	07d2      	lsls	r2, r2, #31
 800697e:	d501      	bpl.n	8006984 <_printf_float+0x15c>
 8006980:	3301      	adds	r3, #1
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006988:	2b00      	cmp	r3, #0
 800698a:	d09e      	beq.n	80068ca <_printf_float+0xa2>
 800698c:	232d      	movs	r3, #45	@ 0x2d
 800698e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006992:	e79a      	b.n	80068ca <_printf_float+0xa2>
 8006994:	2947      	cmp	r1, #71	@ 0x47
 8006996:	d1bf      	bne.n	8006918 <_printf_float+0xf0>
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1bd      	bne.n	8006918 <_printf_float+0xf0>
 800699c:	2301      	movs	r3, #1
 800699e:	e7ba      	b.n	8006916 <_printf_float+0xee>
 80069a0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069a4:	d9dc      	bls.n	8006960 <_printf_float+0x138>
 80069a6:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069aa:	d118      	bne.n	80069de <_printf_float+0x1b6>
 80069ac:	2900      	cmp	r1, #0
 80069ae:	6863      	ldr	r3, [r4, #4]
 80069b0:	dd0b      	ble.n	80069ca <_printf_float+0x1a2>
 80069b2:	6121      	str	r1, [r4, #16]
 80069b4:	b913      	cbnz	r3, 80069bc <_printf_float+0x194>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	07d0      	lsls	r0, r2, #31
 80069ba:	d502      	bpl.n	80069c2 <_printf_float+0x19a>
 80069bc:	3301      	adds	r3, #1
 80069be:	440b      	add	r3, r1
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	f04f 0900 	mov.w	r9, #0
 80069c6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80069c8:	e7dc      	b.n	8006984 <_printf_float+0x15c>
 80069ca:	b913      	cbnz	r3, 80069d2 <_printf_float+0x1aa>
 80069cc:	6822      	ldr	r2, [r4, #0]
 80069ce:	07d2      	lsls	r2, r2, #31
 80069d0:	d501      	bpl.n	80069d6 <_printf_float+0x1ae>
 80069d2:	3302      	adds	r3, #2
 80069d4:	e7f4      	b.n	80069c0 <_printf_float+0x198>
 80069d6:	2301      	movs	r3, #1
 80069d8:	e7f2      	b.n	80069c0 <_printf_float+0x198>
 80069da:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80069de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069e0:	4299      	cmp	r1, r3
 80069e2:	db05      	blt.n	80069f0 <_printf_float+0x1c8>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	6121      	str	r1, [r4, #16]
 80069e8:	07d8      	lsls	r0, r3, #31
 80069ea:	d5ea      	bpl.n	80069c2 <_printf_float+0x19a>
 80069ec:	1c4b      	adds	r3, r1, #1
 80069ee:	e7e7      	b.n	80069c0 <_printf_float+0x198>
 80069f0:	2900      	cmp	r1, #0
 80069f2:	bfcc      	ite	gt
 80069f4:	2201      	movgt	r2, #1
 80069f6:	f1c1 0202 	rsble	r2, r1, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	e7e0      	b.n	80069c0 <_printf_float+0x198>
 80069fe:	6823      	ldr	r3, [r4, #0]
 8006a00:	055a      	lsls	r2, r3, #21
 8006a02:	d407      	bmi.n	8006a14 <_printf_float+0x1ec>
 8006a04:	6923      	ldr	r3, [r4, #16]
 8006a06:	4642      	mov	r2, r8
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d12b      	bne.n	8006a6a <_printf_float+0x242>
 8006a12:	e764      	b.n	80068de <_printf_float+0xb6>
 8006a14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a18:	f240 80dc 	bls.w	8006bd4 <_printf_float+0x3ac>
 8006a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a20:	2200      	movs	r2, #0
 8006a22:	2300      	movs	r3, #0
 8006a24:	f7f9 ffd8 	bl	80009d8 <__aeabi_dcmpeq>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d033      	beq.n	8006a94 <_printf_float+0x26c>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4631      	mov	r1, r6
 8006a30:	4628      	mov	r0, r5
 8006a32:	4a35      	ldr	r2, [pc, #212]	@ (8006b08 <_printf_float+0x2e0>)
 8006a34:	47b8      	blx	r7
 8006a36:	3001      	adds	r0, #1
 8006a38:	f43f af51 	beq.w	80068de <_printf_float+0xb6>
 8006a3c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006a40:	4543      	cmp	r3, r8
 8006a42:	db02      	blt.n	8006a4a <_printf_float+0x222>
 8006a44:	6823      	ldr	r3, [r4, #0]
 8006a46:	07d8      	lsls	r0, r3, #31
 8006a48:	d50f      	bpl.n	8006a6a <_printf_float+0x242>
 8006a4a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006a4e:	4631      	mov	r1, r6
 8006a50:	4628      	mov	r0, r5
 8006a52:	47b8      	blx	r7
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f af42 	beq.w	80068de <_printf_float+0xb6>
 8006a5a:	f04f 0900 	mov.w	r9, #0
 8006a5e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a62:	f104 0a1a 	add.w	sl, r4, #26
 8006a66:	45c8      	cmp	r8, r9
 8006a68:	dc09      	bgt.n	8006a7e <_printf_float+0x256>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	079b      	lsls	r3, r3, #30
 8006a6e:	f100 8102 	bmi.w	8006c76 <_printf_float+0x44e>
 8006a72:	68e0      	ldr	r0, [r4, #12]
 8006a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a76:	4298      	cmp	r0, r3
 8006a78:	bfb8      	it	lt
 8006a7a:	4618      	movlt	r0, r3
 8006a7c:	e731      	b.n	80068e2 <_printf_float+0xba>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4652      	mov	r2, sl
 8006a82:	4631      	mov	r1, r6
 8006a84:	4628      	mov	r0, r5
 8006a86:	47b8      	blx	r7
 8006a88:	3001      	adds	r0, #1
 8006a8a:	f43f af28 	beq.w	80068de <_printf_float+0xb6>
 8006a8e:	f109 0901 	add.w	r9, r9, #1
 8006a92:	e7e8      	b.n	8006a66 <_printf_float+0x23e>
 8006a94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dc38      	bgt.n	8006b0c <_printf_float+0x2e4>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	4a19      	ldr	r2, [pc, #100]	@ (8006b08 <_printf_float+0x2e0>)
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f af1a 	beq.w	80068de <_printf_float+0xb6>
 8006aaa:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006aae:	ea59 0303 	orrs.w	r3, r9, r3
 8006ab2:	d102      	bne.n	8006aba <_printf_float+0x292>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	07d9      	lsls	r1, r3, #31
 8006ab8:	d5d7      	bpl.n	8006a6a <_printf_float+0x242>
 8006aba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006abe:	4631      	mov	r1, r6
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f af0a 	beq.w	80068de <_printf_float+0xb6>
 8006aca:	f04f 0a00 	mov.w	sl, #0
 8006ace:	f104 0b1a 	add.w	fp, r4, #26
 8006ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ad4:	425b      	negs	r3, r3
 8006ad6:	4553      	cmp	r3, sl
 8006ad8:	dc01      	bgt.n	8006ade <_printf_float+0x2b6>
 8006ada:	464b      	mov	r3, r9
 8006adc:	e793      	b.n	8006a06 <_printf_float+0x1de>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	465a      	mov	r2, fp
 8006ae2:	4631      	mov	r1, r6
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	47b8      	blx	r7
 8006ae8:	3001      	adds	r0, #1
 8006aea:	f43f aef8 	beq.w	80068de <_printf_float+0xb6>
 8006aee:	f10a 0a01 	add.w	sl, sl, #1
 8006af2:	e7ee      	b.n	8006ad2 <_printf_float+0x2aa>
 8006af4:	7fefffff 	.word	0x7fefffff
 8006af8:	0800c60c 	.word	0x0800c60c
 8006afc:	0800c608 	.word	0x0800c608
 8006b00:	0800c614 	.word	0x0800c614
 8006b04:	0800c610 	.word	0x0800c610
 8006b08:	0800c618 	.word	0x0800c618
 8006b0c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b0e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006b12:	4553      	cmp	r3, sl
 8006b14:	bfa8      	it	ge
 8006b16:	4653      	movge	r3, sl
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	dc36      	bgt.n	8006b8c <_printf_float+0x364>
 8006b1e:	f04f 0b00 	mov.w	fp, #0
 8006b22:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b26:	f104 021a 	add.w	r2, r4, #26
 8006b2a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b2e:	eba3 0309 	sub.w	r3, r3, r9
 8006b32:	455b      	cmp	r3, fp
 8006b34:	dc31      	bgt.n	8006b9a <_printf_float+0x372>
 8006b36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b38:	459a      	cmp	sl, r3
 8006b3a:	dc3a      	bgt.n	8006bb2 <_printf_float+0x38a>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	07da      	lsls	r2, r3, #31
 8006b40:	d437      	bmi.n	8006bb2 <_printf_float+0x38a>
 8006b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b44:	ebaa 0903 	sub.w	r9, sl, r3
 8006b48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b4a:	ebaa 0303 	sub.w	r3, sl, r3
 8006b4e:	4599      	cmp	r9, r3
 8006b50:	bfa8      	it	ge
 8006b52:	4699      	movge	r9, r3
 8006b54:	f1b9 0f00 	cmp.w	r9, #0
 8006b58:	dc33      	bgt.n	8006bc2 <_printf_float+0x39a>
 8006b5a:	f04f 0800 	mov.w	r8, #0
 8006b5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b62:	f104 0b1a 	add.w	fp, r4, #26
 8006b66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b68:	ebaa 0303 	sub.w	r3, sl, r3
 8006b6c:	eba3 0309 	sub.w	r3, r3, r9
 8006b70:	4543      	cmp	r3, r8
 8006b72:	f77f af7a 	ble.w	8006a6a <_printf_float+0x242>
 8006b76:	2301      	movs	r3, #1
 8006b78:	465a      	mov	r2, fp
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b8      	blx	r7
 8006b80:	3001      	adds	r0, #1
 8006b82:	f43f aeac 	beq.w	80068de <_printf_float+0xb6>
 8006b86:	f108 0801 	add.w	r8, r8, #1
 8006b8a:	e7ec      	b.n	8006b66 <_printf_float+0x33e>
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	4631      	mov	r1, r6
 8006b90:	4628      	mov	r0, r5
 8006b92:	47b8      	blx	r7
 8006b94:	3001      	adds	r0, #1
 8006b96:	d1c2      	bne.n	8006b1e <_printf_float+0x2f6>
 8006b98:	e6a1      	b.n	80068de <_printf_float+0xb6>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4631      	mov	r1, r6
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	920a      	str	r2, [sp, #40]	@ 0x28
 8006ba2:	47b8      	blx	r7
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	f43f ae9a 	beq.w	80068de <_printf_float+0xb6>
 8006baa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bac:	f10b 0b01 	add.w	fp, fp, #1
 8006bb0:	e7bb      	b.n	8006b2a <_printf_float+0x302>
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	d1c0      	bne.n	8006b42 <_printf_float+0x31a>
 8006bc0:	e68d      	b.n	80068de <_printf_float+0xb6>
 8006bc2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	4631      	mov	r1, r6
 8006bc8:	4628      	mov	r0, r5
 8006bca:	4442      	add	r2, r8
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d1c3      	bne.n	8006b5a <_printf_float+0x332>
 8006bd2:	e684      	b.n	80068de <_printf_float+0xb6>
 8006bd4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006bd8:	f1ba 0f01 	cmp.w	sl, #1
 8006bdc:	dc01      	bgt.n	8006be2 <_printf_float+0x3ba>
 8006bde:	07db      	lsls	r3, r3, #31
 8006be0:	d536      	bpl.n	8006c50 <_printf_float+0x428>
 8006be2:	2301      	movs	r3, #1
 8006be4:	4642      	mov	r2, r8
 8006be6:	4631      	mov	r1, r6
 8006be8:	4628      	mov	r0, r5
 8006bea:	47b8      	blx	r7
 8006bec:	3001      	adds	r0, #1
 8006bee:	f43f ae76 	beq.w	80068de <_printf_float+0xb6>
 8006bf2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	f43f ae6e 	beq.w	80068de <_printf_float+0xb6>
 8006c02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c06:	2200      	movs	r2, #0
 8006c08:	2300      	movs	r3, #0
 8006c0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c0e:	f7f9 fee3 	bl	80009d8 <__aeabi_dcmpeq>
 8006c12:	b9c0      	cbnz	r0, 8006c46 <_printf_float+0x41e>
 8006c14:	4653      	mov	r3, sl
 8006c16:	f108 0201 	add.w	r2, r8, #1
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	d10c      	bne.n	8006c3e <_printf_float+0x416>
 8006c24:	e65b      	b.n	80068de <_printf_float+0xb6>
 8006c26:	2301      	movs	r3, #1
 8006c28:	465a      	mov	r2, fp
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	f43f ae54 	beq.w	80068de <_printf_float+0xb6>
 8006c36:	f108 0801 	add.w	r8, r8, #1
 8006c3a:	45d0      	cmp	r8, sl
 8006c3c:	dbf3      	blt.n	8006c26 <_printf_float+0x3fe>
 8006c3e:	464b      	mov	r3, r9
 8006c40:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c44:	e6e0      	b.n	8006a08 <_printf_float+0x1e0>
 8006c46:	f04f 0800 	mov.w	r8, #0
 8006c4a:	f104 0b1a 	add.w	fp, r4, #26
 8006c4e:	e7f4      	b.n	8006c3a <_printf_float+0x412>
 8006c50:	2301      	movs	r3, #1
 8006c52:	4642      	mov	r2, r8
 8006c54:	e7e1      	b.n	8006c1a <_printf_float+0x3f2>
 8006c56:	2301      	movs	r3, #1
 8006c58:	464a      	mov	r2, r9
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	f43f ae3c 	beq.w	80068de <_printf_float+0xb6>
 8006c66:	f108 0801 	add.w	r8, r8, #1
 8006c6a:	68e3      	ldr	r3, [r4, #12]
 8006c6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006c6e:	1a5b      	subs	r3, r3, r1
 8006c70:	4543      	cmp	r3, r8
 8006c72:	dcf0      	bgt.n	8006c56 <_printf_float+0x42e>
 8006c74:	e6fd      	b.n	8006a72 <_printf_float+0x24a>
 8006c76:	f04f 0800 	mov.w	r8, #0
 8006c7a:	f104 0919 	add.w	r9, r4, #25
 8006c7e:	e7f4      	b.n	8006c6a <_printf_float+0x442>

08006c80 <_printf_common>:
 8006c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	4616      	mov	r6, r2
 8006c86:	4698      	mov	r8, r3
 8006c88:	688a      	ldr	r2, [r1, #8]
 8006c8a:	690b      	ldr	r3, [r1, #16]
 8006c8c:	4607      	mov	r7, r0
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	bfb8      	it	lt
 8006c92:	4613      	movlt	r3, r2
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c9a:	460c      	mov	r4, r1
 8006c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ca0:	b10a      	cbz	r2, 8006ca6 <_printf_common+0x26>
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	6033      	str	r3, [r6, #0]
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	0699      	lsls	r1, r3, #26
 8006caa:	bf42      	ittt	mi
 8006cac:	6833      	ldrmi	r3, [r6, #0]
 8006cae:	3302      	addmi	r3, #2
 8006cb0:	6033      	strmi	r3, [r6, #0]
 8006cb2:	6825      	ldr	r5, [r4, #0]
 8006cb4:	f015 0506 	ands.w	r5, r5, #6
 8006cb8:	d106      	bne.n	8006cc8 <_printf_common+0x48>
 8006cba:	f104 0a19 	add.w	sl, r4, #25
 8006cbe:	68e3      	ldr	r3, [r4, #12]
 8006cc0:	6832      	ldr	r2, [r6, #0]
 8006cc2:	1a9b      	subs	r3, r3, r2
 8006cc4:	42ab      	cmp	r3, r5
 8006cc6:	dc2b      	bgt.n	8006d20 <_printf_common+0xa0>
 8006cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006ccc:	6822      	ldr	r2, [r4, #0]
 8006cce:	3b00      	subs	r3, #0
 8006cd0:	bf18      	it	ne
 8006cd2:	2301      	movne	r3, #1
 8006cd4:	0692      	lsls	r2, r2, #26
 8006cd6:	d430      	bmi.n	8006d3a <_printf_common+0xba>
 8006cd8:	4641      	mov	r1, r8
 8006cda:	4638      	mov	r0, r7
 8006cdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ce0:	47c8      	blx	r9
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d023      	beq.n	8006d2e <_printf_common+0xae>
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	6922      	ldr	r2, [r4, #16]
 8006cea:	f003 0306 	and.w	r3, r3, #6
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	bf14      	ite	ne
 8006cf2:	2500      	movne	r5, #0
 8006cf4:	6833      	ldreq	r3, [r6, #0]
 8006cf6:	f04f 0600 	mov.w	r6, #0
 8006cfa:	bf08      	it	eq
 8006cfc:	68e5      	ldreq	r5, [r4, #12]
 8006cfe:	f104 041a 	add.w	r4, r4, #26
 8006d02:	bf08      	it	eq
 8006d04:	1aed      	subeq	r5, r5, r3
 8006d06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006d0a:	bf08      	it	eq
 8006d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d10:	4293      	cmp	r3, r2
 8006d12:	bfc4      	itt	gt
 8006d14:	1a9b      	subgt	r3, r3, r2
 8006d16:	18ed      	addgt	r5, r5, r3
 8006d18:	42b5      	cmp	r5, r6
 8006d1a:	d11a      	bne.n	8006d52 <_printf_common+0xd2>
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	e008      	b.n	8006d32 <_printf_common+0xb2>
 8006d20:	2301      	movs	r3, #1
 8006d22:	4652      	mov	r2, sl
 8006d24:	4641      	mov	r1, r8
 8006d26:	4638      	mov	r0, r7
 8006d28:	47c8      	blx	r9
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d103      	bne.n	8006d36 <_printf_common+0xb6>
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d36:	3501      	adds	r5, #1
 8006d38:	e7c1      	b.n	8006cbe <_printf_common+0x3e>
 8006d3a:	2030      	movs	r0, #48	@ 0x30
 8006d3c:	18e1      	adds	r1, r4, r3
 8006d3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d48:	4422      	add	r2, r4
 8006d4a:	3302      	adds	r3, #2
 8006d4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d50:	e7c2      	b.n	8006cd8 <_printf_common+0x58>
 8006d52:	2301      	movs	r3, #1
 8006d54:	4622      	mov	r2, r4
 8006d56:	4641      	mov	r1, r8
 8006d58:	4638      	mov	r0, r7
 8006d5a:	47c8      	blx	r9
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d0e6      	beq.n	8006d2e <_printf_common+0xae>
 8006d60:	3601      	adds	r6, #1
 8006d62:	e7d9      	b.n	8006d18 <_printf_common+0x98>

08006d64 <_printf_i>:
 8006d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	7e0f      	ldrb	r7, [r1, #24]
 8006d6a:	4691      	mov	r9, r2
 8006d6c:	2f78      	cmp	r7, #120	@ 0x78
 8006d6e:	4680      	mov	r8, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	469a      	mov	sl, r3
 8006d74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d7a:	d807      	bhi.n	8006d8c <_printf_i+0x28>
 8006d7c:	2f62      	cmp	r7, #98	@ 0x62
 8006d7e:	d80a      	bhi.n	8006d96 <_printf_i+0x32>
 8006d80:	2f00      	cmp	r7, #0
 8006d82:	f000 80d1 	beq.w	8006f28 <_printf_i+0x1c4>
 8006d86:	2f58      	cmp	r7, #88	@ 0x58
 8006d88:	f000 80b8 	beq.w	8006efc <_printf_i+0x198>
 8006d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d94:	e03a      	b.n	8006e0c <_printf_i+0xa8>
 8006d96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d9a:	2b15      	cmp	r3, #21
 8006d9c:	d8f6      	bhi.n	8006d8c <_printf_i+0x28>
 8006d9e:	a101      	add	r1, pc, #4	@ (adr r1, 8006da4 <_printf_i+0x40>)
 8006da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006da4:	08006dfd 	.word	0x08006dfd
 8006da8:	08006e11 	.word	0x08006e11
 8006dac:	08006d8d 	.word	0x08006d8d
 8006db0:	08006d8d 	.word	0x08006d8d
 8006db4:	08006d8d 	.word	0x08006d8d
 8006db8:	08006d8d 	.word	0x08006d8d
 8006dbc:	08006e11 	.word	0x08006e11
 8006dc0:	08006d8d 	.word	0x08006d8d
 8006dc4:	08006d8d 	.word	0x08006d8d
 8006dc8:	08006d8d 	.word	0x08006d8d
 8006dcc:	08006d8d 	.word	0x08006d8d
 8006dd0:	08006f0f 	.word	0x08006f0f
 8006dd4:	08006e3b 	.word	0x08006e3b
 8006dd8:	08006ec9 	.word	0x08006ec9
 8006ddc:	08006d8d 	.word	0x08006d8d
 8006de0:	08006d8d 	.word	0x08006d8d
 8006de4:	08006f31 	.word	0x08006f31
 8006de8:	08006d8d 	.word	0x08006d8d
 8006dec:	08006e3b 	.word	0x08006e3b
 8006df0:	08006d8d 	.word	0x08006d8d
 8006df4:	08006d8d 	.word	0x08006d8d
 8006df8:	08006ed1 	.word	0x08006ed1
 8006dfc:	6833      	ldr	r3, [r6, #0]
 8006dfe:	1d1a      	adds	r2, r3, #4
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6032      	str	r2, [r6, #0]
 8006e04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e09c      	b.n	8006f4a <_printf_i+0x1e6>
 8006e10:	6833      	ldr	r3, [r6, #0]
 8006e12:	6820      	ldr	r0, [r4, #0]
 8006e14:	1d19      	adds	r1, r3, #4
 8006e16:	6031      	str	r1, [r6, #0]
 8006e18:	0606      	lsls	r6, r0, #24
 8006e1a:	d501      	bpl.n	8006e20 <_printf_i+0xbc>
 8006e1c:	681d      	ldr	r5, [r3, #0]
 8006e1e:	e003      	b.n	8006e28 <_printf_i+0xc4>
 8006e20:	0645      	lsls	r5, r0, #25
 8006e22:	d5fb      	bpl.n	8006e1c <_printf_i+0xb8>
 8006e24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	da03      	bge.n	8006e34 <_printf_i+0xd0>
 8006e2c:	232d      	movs	r3, #45	@ 0x2d
 8006e2e:	426d      	negs	r5, r5
 8006e30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e34:	230a      	movs	r3, #10
 8006e36:	4858      	ldr	r0, [pc, #352]	@ (8006f98 <_printf_i+0x234>)
 8006e38:	e011      	b.n	8006e5e <_printf_i+0xfa>
 8006e3a:	6821      	ldr	r1, [r4, #0]
 8006e3c:	6833      	ldr	r3, [r6, #0]
 8006e3e:	0608      	lsls	r0, r1, #24
 8006e40:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e44:	d402      	bmi.n	8006e4c <_printf_i+0xe8>
 8006e46:	0649      	lsls	r1, r1, #25
 8006e48:	bf48      	it	mi
 8006e4a:	b2ad      	uxthmi	r5, r5
 8006e4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	bf14      	ite	ne
 8006e52:	230a      	movne	r3, #10
 8006e54:	2308      	moveq	r3, #8
 8006e56:	4850      	ldr	r0, [pc, #320]	@ (8006f98 <_printf_i+0x234>)
 8006e58:	2100      	movs	r1, #0
 8006e5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e5e:	6866      	ldr	r6, [r4, #4]
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	60a6      	str	r6, [r4, #8]
 8006e64:	db05      	blt.n	8006e72 <_printf_i+0x10e>
 8006e66:	6821      	ldr	r1, [r4, #0]
 8006e68:	432e      	orrs	r6, r5
 8006e6a:	f021 0104 	bic.w	r1, r1, #4
 8006e6e:	6021      	str	r1, [r4, #0]
 8006e70:	d04b      	beq.n	8006f0a <_printf_i+0x1a6>
 8006e72:	4616      	mov	r6, r2
 8006e74:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e78:	fb03 5711 	mls	r7, r3, r1, r5
 8006e7c:	5dc7      	ldrb	r7, [r0, r7]
 8006e7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e82:	462f      	mov	r7, r5
 8006e84:	42bb      	cmp	r3, r7
 8006e86:	460d      	mov	r5, r1
 8006e88:	d9f4      	bls.n	8006e74 <_printf_i+0x110>
 8006e8a:	2b08      	cmp	r3, #8
 8006e8c:	d10b      	bne.n	8006ea6 <_printf_i+0x142>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	07df      	lsls	r7, r3, #31
 8006e92:	d508      	bpl.n	8006ea6 <_printf_i+0x142>
 8006e94:	6923      	ldr	r3, [r4, #16]
 8006e96:	6861      	ldr	r1, [r4, #4]
 8006e98:	4299      	cmp	r1, r3
 8006e9a:	bfde      	ittt	le
 8006e9c:	2330      	movle	r3, #48	@ 0x30
 8006e9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ea2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ea6:	1b92      	subs	r2, r2, r6
 8006ea8:	6122      	str	r2, [r4, #16]
 8006eaa:	464b      	mov	r3, r9
 8006eac:	4621      	mov	r1, r4
 8006eae:	4640      	mov	r0, r8
 8006eb0:	f8cd a000 	str.w	sl, [sp]
 8006eb4:	aa03      	add	r2, sp, #12
 8006eb6:	f7ff fee3 	bl	8006c80 <_printf_common>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d14a      	bne.n	8006f54 <_printf_i+0x1f0>
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	b004      	add	sp, #16
 8006ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	f043 0320 	orr.w	r3, r3, #32
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	2778      	movs	r7, #120	@ 0x78
 8006ed2:	4832      	ldr	r0, [pc, #200]	@ (8006f9c <_printf_i+0x238>)
 8006ed4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ed8:	6823      	ldr	r3, [r4, #0]
 8006eda:	6831      	ldr	r1, [r6, #0]
 8006edc:	061f      	lsls	r7, r3, #24
 8006ede:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ee2:	d402      	bmi.n	8006eea <_printf_i+0x186>
 8006ee4:	065f      	lsls	r7, r3, #25
 8006ee6:	bf48      	it	mi
 8006ee8:	b2ad      	uxthmi	r5, r5
 8006eea:	6031      	str	r1, [r6, #0]
 8006eec:	07d9      	lsls	r1, r3, #31
 8006eee:	bf44      	itt	mi
 8006ef0:	f043 0320 	orrmi.w	r3, r3, #32
 8006ef4:	6023      	strmi	r3, [r4, #0]
 8006ef6:	b11d      	cbz	r5, 8006f00 <_printf_i+0x19c>
 8006ef8:	2310      	movs	r3, #16
 8006efa:	e7ad      	b.n	8006e58 <_printf_i+0xf4>
 8006efc:	4826      	ldr	r0, [pc, #152]	@ (8006f98 <_printf_i+0x234>)
 8006efe:	e7e9      	b.n	8006ed4 <_printf_i+0x170>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	f023 0320 	bic.w	r3, r3, #32
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	e7f6      	b.n	8006ef8 <_printf_i+0x194>
 8006f0a:	4616      	mov	r6, r2
 8006f0c:	e7bd      	b.n	8006e8a <_printf_i+0x126>
 8006f0e:	6833      	ldr	r3, [r6, #0]
 8006f10:	6825      	ldr	r5, [r4, #0]
 8006f12:	1d18      	adds	r0, r3, #4
 8006f14:	6961      	ldr	r1, [r4, #20]
 8006f16:	6030      	str	r0, [r6, #0]
 8006f18:	062e      	lsls	r6, r5, #24
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	d501      	bpl.n	8006f22 <_printf_i+0x1be>
 8006f1e:	6019      	str	r1, [r3, #0]
 8006f20:	e002      	b.n	8006f28 <_printf_i+0x1c4>
 8006f22:	0668      	lsls	r0, r5, #25
 8006f24:	d5fb      	bpl.n	8006f1e <_printf_i+0x1ba>
 8006f26:	8019      	strh	r1, [r3, #0]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	4616      	mov	r6, r2
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	e7bc      	b.n	8006eaa <_printf_i+0x146>
 8006f30:	6833      	ldr	r3, [r6, #0]
 8006f32:	2100      	movs	r1, #0
 8006f34:	1d1a      	adds	r2, r3, #4
 8006f36:	6032      	str	r2, [r6, #0]
 8006f38:	681e      	ldr	r6, [r3, #0]
 8006f3a:	6862      	ldr	r2, [r4, #4]
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f000 fce4 	bl	800790a <memchr>
 8006f42:	b108      	cbz	r0, 8006f48 <_printf_i+0x1e4>
 8006f44:	1b80      	subs	r0, r0, r6
 8006f46:	6060      	str	r0, [r4, #4]
 8006f48:	6863      	ldr	r3, [r4, #4]
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f52:	e7aa      	b.n	8006eaa <_printf_i+0x146>
 8006f54:	4632      	mov	r2, r6
 8006f56:	4649      	mov	r1, r9
 8006f58:	4640      	mov	r0, r8
 8006f5a:	6923      	ldr	r3, [r4, #16]
 8006f5c:	47d0      	blx	sl
 8006f5e:	3001      	adds	r0, #1
 8006f60:	d0ad      	beq.n	8006ebe <_printf_i+0x15a>
 8006f62:	6823      	ldr	r3, [r4, #0]
 8006f64:	079b      	lsls	r3, r3, #30
 8006f66:	d413      	bmi.n	8006f90 <_printf_i+0x22c>
 8006f68:	68e0      	ldr	r0, [r4, #12]
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	4298      	cmp	r0, r3
 8006f6e:	bfb8      	it	lt
 8006f70:	4618      	movlt	r0, r3
 8006f72:	e7a6      	b.n	8006ec2 <_printf_i+0x15e>
 8006f74:	2301      	movs	r3, #1
 8006f76:	4632      	mov	r2, r6
 8006f78:	4649      	mov	r1, r9
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	47d0      	blx	sl
 8006f7e:	3001      	adds	r0, #1
 8006f80:	d09d      	beq.n	8006ebe <_printf_i+0x15a>
 8006f82:	3501      	adds	r5, #1
 8006f84:	68e3      	ldr	r3, [r4, #12]
 8006f86:	9903      	ldr	r1, [sp, #12]
 8006f88:	1a5b      	subs	r3, r3, r1
 8006f8a:	42ab      	cmp	r3, r5
 8006f8c:	dcf2      	bgt.n	8006f74 <_printf_i+0x210>
 8006f8e:	e7eb      	b.n	8006f68 <_printf_i+0x204>
 8006f90:	2500      	movs	r5, #0
 8006f92:	f104 0619 	add.w	r6, r4, #25
 8006f96:	e7f5      	b.n	8006f84 <_printf_i+0x220>
 8006f98:	0800c61a 	.word	0x0800c61a
 8006f9c:	0800c62b 	.word	0x0800c62b

08006fa0 <_scanf_float>:
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	b087      	sub	sp, #28
 8006fa6:	9303      	str	r3, [sp, #12]
 8006fa8:	688b      	ldr	r3, [r1, #8]
 8006faa:	4691      	mov	r9, r2
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006fb2:	bf82      	ittt	hi
 8006fb4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006fb8:	eb03 0b05 	addhi.w	fp, r3, r5
 8006fbc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006fc0:	460a      	mov	r2, r1
 8006fc2:	f04f 0500 	mov.w	r5, #0
 8006fc6:	bf88      	it	hi
 8006fc8:	608b      	strhi	r3, [r1, #8]
 8006fca:	680b      	ldr	r3, [r1, #0]
 8006fcc:	4680      	mov	r8, r0
 8006fce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006fd2:	f842 3b1c 	str.w	r3, [r2], #28
 8006fd6:	460c      	mov	r4, r1
 8006fd8:	bf98      	it	ls
 8006fda:	f04f 0b00 	movls.w	fp, #0
 8006fde:	4616      	mov	r6, r2
 8006fe0:	46aa      	mov	sl, r5
 8006fe2:	462f      	mov	r7, r5
 8006fe4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006fe8:	9201      	str	r2, [sp, #4]
 8006fea:	9502      	str	r5, [sp, #8]
 8006fec:	68a2      	ldr	r2, [r4, #8]
 8006fee:	b15a      	cbz	r2, 8007008 <_scanf_float+0x68>
 8006ff0:	f8d9 3000 	ldr.w	r3, [r9]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ff8:	d862      	bhi.n	80070c0 <_scanf_float+0x120>
 8006ffa:	2b40      	cmp	r3, #64	@ 0x40
 8006ffc:	d83a      	bhi.n	8007074 <_scanf_float+0xd4>
 8006ffe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007002:	b2c8      	uxtb	r0, r1
 8007004:	280e      	cmp	r0, #14
 8007006:	d938      	bls.n	800707a <_scanf_float+0xda>
 8007008:	b11f      	cbz	r7, 8007012 <_scanf_float+0x72>
 800700a:	6823      	ldr	r3, [r4, #0]
 800700c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007016:	f1ba 0f01 	cmp.w	sl, #1
 800701a:	f200 8114 	bhi.w	8007246 <_scanf_float+0x2a6>
 800701e:	9b01      	ldr	r3, [sp, #4]
 8007020:	429e      	cmp	r6, r3
 8007022:	f200 8105 	bhi.w	8007230 <_scanf_float+0x290>
 8007026:	2001      	movs	r0, #1
 8007028:	b007      	add	sp, #28
 800702a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800702e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007032:	2a0d      	cmp	r2, #13
 8007034:	d8e8      	bhi.n	8007008 <_scanf_float+0x68>
 8007036:	a101      	add	r1, pc, #4	@ (adr r1, 800703c <_scanf_float+0x9c>)
 8007038:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800703c:	08007185 	.word	0x08007185
 8007040:	08007009 	.word	0x08007009
 8007044:	08007009 	.word	0x08007009
 8007048:	08007009 	.word	0x08007009
 800704c:	080071e1 	.word	0x080071e1
 8007050:	080071bb 	.word	0x080071bb
 8007054:	08007009 	.word	0x08007009
 8007058:	08007009 	.word	0x08007009
 800705c:	08007193 	.word	0x08007193
 8007060:	08007009 	.word	0x08007009
 8007064:	08007009 	.word	0x08007009
 8007068:	08007009 	.word	0x08007009
 800706c:	08007009 	.word	0x08007009
 8007070:	0800714f 	.word	0x0800714f
 8007074:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007078:	e7db      	b.n	8007032 <_scanf_float+0x92>
 800707a:	290e      	cmp	r1, #14
 800707c:	d8c4      	bhi.n	8007008 <_scanf_float+0x68>
 800707e:	a001      	add	r0, pc, #4	@ (adr r0, 8007084 <_scanf_float+0xe4>)
 8007080:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007084:	0800713f 	.word	0x0800713f
 8007088:	08007009 	.word	0x08007009
 800708c:	0800713f 	.word	0x0800713f
 8007090:	080071cf 	.word	0x080071cf
 8007094:	08007009 	.word	0x08007009
 8007098:	080070e1 	.word	0x080070e1
 800709c:	08007125 	.word	0x08007125
 80070a0:	08007125 	.word	0x08007125
 80070a4:	08007125 	.word	0x08007125
 80070a8:	08007125 	.word	0x08007125
 80070ac:	08007125 	.word	0x08007125
 80070b0:	08007125 	.word	0x08007125
 80070b4:	08007125 	.word	0x08007125
 80070b8:	08007125 	.word	0x08007125
 80070bc:	08007125 	.word	0x08007125
 80070c0:	2b6e      	cmp	r3, #110	@ 0x6e
 80070c2:	d809      	bhi.n	80070d8 <_scanf_float+0x138>
 80070c4:	2b60      	cmp	r3, #96	@ 0x60
 80070c6:	d8b2      	bhi.n	800702e <_scanf_float+0x8e>
 80070c8:	2b54      	cmp	r3, #84	@ 0x54
 80070ca:	d07b      	beq.n	80071c4 <_scanf_float+0x224>
 80070cc:	2b59      	cmp	r3, #89	@ 0x59
 80070ce:	d19b      	bne.n	8007008 <_scanf_float+0x68>
 80070d0:	2d07      	cmp	r5, #7
 80070d2:	d199      	bne.n	8007008 <_scanf_float+0x68>
 80070d4:	2508      	movs	r5, #8
 80070d6:	e02f      	b.n	8007138 <_scanf_float+0x198>
 80070d8:	2b74      	cmp	r3, #116	@ 0x74
 80070da:	d073      	beq.n	80071c4 <_scanf_float+0x224>
 80070dc:	2b79      	cmp	r3, #121	@ 0x79
 80070de:	e7f6      	b.n	80070ce <_scanf_float+0x12e>
 80070e0:	6821      	ldr	r1, [r4, #0]
 80070e2:	05c8      	lsls	r0, r1, #23
 80070e4:	d51e      	bpl.n	8007124 <_scanf_float+0x184>
 80070e6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80070ea:	6021      	str	r1, [r4, #0]
 80070ec:	3701      	adds	r7, #1
 80070ee:	f1bb 0f00 	cmp.w	fp, #0
 80070f2:	d003      	beq.n	80070fc <_scanf_float+0x15c>
 80070f4:	3201      	adds	r2, #1
 80070f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070fa:	60a2      	str	r2, [r4, #8]
 80070fc:	68a3      	ldr	r3, [r4, #8]
 80070fe:	3b01      	subs	r3, #1
 8007100:	60a3      	str	r3, [r4, #8]
 8007102:	6923      	ldr	r3, [r4, #16]
 8007104:	3301      	adds	r3, #1
 8007106:	6123      	str	r3, [r4, #16]
 8007108:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800710c:	3b01      	subs	r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	f8c9 3004 	str.w	r3, [r9, #4]
 8007114:	f340 8083 	ble.w	800721e <_scanf_float+0x27e>
 8007118:	f8d9 3000 	ldr.w	r3, [r9]
 800711c:	3301      	adds	r3, #1
 800711e:	f8c9 3000 	str.w	r3, [r9]
 8007122:	e763      	b.n	8006fec <_scanf_float+0x4c>
 8007124:	eb1a 0105 	adds.w	r1, sl, r5
 8007128:	f47f af6e 	bne.w	8007008 <_scanf_float+0x68>
 800712c:	460d      	mov	r5, r1
 800712e:	468a      	mov	sl, r1
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007136:	6022      	str	r2, [r4, #0]
 8007138:	f806 3b01 	strb.w	r3, [r6], #1
 800713c:	e7de      	b.n	80070fc <_scanf_float+0x15c>
 800713e:	6822      	ldr	r2, [r4, #0]
 8007140:	0610      	lsls	r0, r2, #24
 8007142:	f57f af61 	bpl.w	8007008 <_scanf_float+0x68>
 8007146:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800714a:	6022      	str	r2, [r4, #0]
 800714c:	e7f4      	b.n	8007138 <_scanf_float+0x198>
 800714e:	f1ba 0f00 	cmp.w	sl, #0
 8007152:	d10c      	bne.n	800716e <_scanf_float+0x1ce>
 8007154:	b977      	cbnz	r7, 8007174 <_scanf_float+0x1d4>
 8007156:	6822      	ldr	r2, [r4, #0]
 8007158:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800715c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007160:	d108      	bne.n	8007174 <_scanf_float+0x1d4>
 8007162:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007166:	f04f 0a01 	mov.w	sl, #1
 800716a:	6022      	str	r2, [r4, #0]
 800716c:	e7e4      	b.n	8007138 <_scanf_float+0x198>
 800716e:	f1ba 0f02 	cmp.w	sl, #2
 8007172:	d051      	beq.n	8007218 <_scanf_float+0x278>
 8007174:	2d01      	cmp	r5, #1
 8007176:	d002      	beq.n	800717e <_scanf_float+0x1de>
 8007178:	2d04      	cmp	r5, #4
 800717a:	f47f af45 	bne.w	8007008 <_scanf_float+0x68>
 800717e:	3501      	adds	r5, #1
 8007180:	b2ed      	uxtb	r5, r5
 8007182:	e7d9      	b.n	8007138 <_scanf_float+0x198>
 8007184:	f1ba 0f01 	cmp.w	sl, #1
 8007188:	f47f af3e 	bne.w	8007008 <_scanf_float+0x68>
 800718c:	f04f 0a02 	mov.w	sl, #2
 8007190:	e7d2      	b.n	8007138 <_scanf_float+0x198>
 8007192:	b975      	cbnz	r5, 80071b2 <_scanf_float+0x212>
 8007194:	2f00      	cmp	r7, #0
 8007196:	f47f af38 	bne.w	800700a <_scanf_float+0x6a>
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80071a0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80071a4:	f040 80ff 	bne.w	80073a6 <_scanf_float+0x406>
 80071a8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80071ac:	2501      	movs	r5, #1
 80071ae:	6022      	str	r2, [r4, #0]
 80071b0:	e7c2      	b.n	8007138 <_scanf_float+0x198>
 80071b2:	2d03      	cmp	r5, #3
 80071b4:	d0e3      	beq.n	800717e <_scanf_float+0x1de>
 80071b6:	2d05      	cmp	r5, #5
 80071b8:	e7df      	b.n	800717a <_scanf_float+0x1da>
 80071ba:	2d02      	cmp	r5, #2
 80071bc:	f47f af24 	bne.w	8007008 <_scanf_float+0x68>
 80071c0:	2503      	movs	r5, #3
 80071c2:	e7b9      	b.n	8007138 <_scanf_float+0x198>
 80071c4:	2d06      	cmp	r5, #6
 80071c6:	f47f af1f 	bne.w	8007008 <_scanf_float+0x68>
 80071ca:	2507      	movs	r5, #7
 80071cc:	e7b4      	b.n	8007138 <_scanf_float+0x198>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	0591      	lsls	r1, r2, #22
 80071d2:	f57f af19 	bpl.w	8007008 <_scanf_float+0x68>
 80071d6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80071da:	6022      	str	r2, [r4, #0]
 80071dc:	9702      	str	r7, [sp, #8]
 80071de:	e7ab      	b.n	8007138 <_scanf_float+0x198>
 80071e0:	6822      	ldr	r2, [r4, #0]
 80071e2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80071e6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80071ea:	d005      	beq.n	80071f8 <_scanf_float+0x258>
 80071ec:	0550      	lsls	r0, r2, #21
 80071ee:	f57f af0b 	bpl.w	8007008 <_scanf_float+0x68>
 80071f2:	2f00      	cmp	r7, #0
 80071f4:	f000 80d7 	beq.w	80073a6 <_scanf_float+0x406>
 80071f8:	0591      	lsls	r1, r2, #22
 80071fa:	bf58      	it	pl
 80071fc:	9902      	ldrpl	r1, [sp, #8]
 80071fe:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007202:	bf58      	it	pl
 8007204:	1a79      	subpl	r1, r7, r1
 8007206:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800720a:	f04f 0700 	mov.w	r7, #0
 800720e:	bf58      	it	pl
 8007210:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007214:	6022      	str	r2, [r4, #0]
 8007216:	e78f      	b.n	8007138 <_scanf_float+0x198>
 8007218:	f04f 0a03 	mov.w	sl, #3
 800721c:	e78c      	b.n	8007138 <_scanf_float+0x198>
 800721e:	4649      	mov	r1, r9
 8007220:	4640      	mov	r0, r8
 8007222:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007226:	4798      	blx	r3
 8007228:	2800      	cmp	r0, #0
 800722a:	f43f aedf 	beq.w	8006fec <_scanf_float+0x4c>
 800722e:	e6eb      	b.n	8007008 <_scanf_float+0x68>
 8007230:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007234:	464a      	mov	r2, r9
 8007236:	4640      	mov	r0, r8
 8007238:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800723c:	4798      	blx	r3
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	3b01      	subs	r3, #1
 8007242:	6123      	str	r3, [r4, #16]
 8007244:	e6eb      	b.n	800701e <_scanf_float+0x7e>
 8007246:	1e6b      	subs	r3, r5, #1
 8007248:	2b06      	cmp	r3, #6
 800724a:	d824      	bhi.n	8007296 <_scanf_float+0x2f6>
 800724c:	2d02      	cmp	r5, #2
 800724e:	d836      	bhi.n	80072be <_scanf_float+0x31e>
 8007250:	9b01      	ldr	r3, [sp, #4]
 8007252:	429e      	cmp	r6, r3
 8007254:	f67f aee7 	bls.w	8007026 <_scanf_float+0x86>
 8007258:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800725c:	464a      	mov	r2, r9
 800725e:	4640      	mov	r0, r8
 8007260:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007264:	4798      	blx	r3
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	3b01      	subs	r3, #1
 800726a:	6123      	str	r3, [r4, #16]
 800726c:	e7f0      	b.n	8007250 <_scanf_float+0x2b0>
 800726e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007272:	464a      	mov	r2, r9
 8007274:	4640      	mov	r0, r8
 8007276:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800727a:	4798      	blx	r3
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	3b01      	subs	r3, #1
 8007280:	6123      	str	r3, [r4, #16]
 8007282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007286:	fa5f fa8a 	uxtb.w	sl, sl
 800728a:	f1ba 0f02 	cmp.w	sl, #2
 800728e:	d1ee      	bne.n	800726e <_scanf_float+0x2ce>
 8007290:	3d03      	subs	r5, #3
 8007292:	b2ed      	uxtb	r5, r5
 8007294:	1b76      	subs	r6, r6, r5
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	05da      	lsls	r2, r3, #23
 800729a:	d530      	bpl.n	80072fe <_scanf_float+0x35e>
 800729c:	055b      	lsls	r3, r3, #21
 800729e:	d511      	bpl.n	80072c4 <_scanf_float+0x324>
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	429e      	cmp	r6, r3
 80072a4:	f67f aebf 	bls.w	8007026 <_scanf_float+0x86>
 80072a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072ac:	464a      	mov	r2, r9
 80072ae:	4640      	mov	r0, r8
 80072b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80072b4:	4798      	blx	r3
 80072b6:	6923      	ldr	r3, [r4, #16]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	6123      	str	r3, [r4, #16]
 80072bc:	e7f0      	b.n	80072a0 <_scanf_float+0x300>
 80072be:	46aa      	mov	sl, r5
 80072c0:	46b3      	mov	fp, r6
 80072c2:	e7de      	b.n	8007282 <_scanf_float+0x2e2>
 80072c4:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	2965      	cmp	r1, #101	@ 0x65
 80072cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80072d0:	f106 35ff 	add.w	r5, r6, #4294967295
 80072d4:	6123      	str	r3, [r4, #16]
 80072d6:	d00c      	beq.n	80072f2 <_scanf_float+0x352>
 80072d8:	2945      	cmp	r1, #69	@ 0x45
 80072da:	d00a      	beq.n	80072f2 <_scanf_float+0x352>
 80072dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072e0:	464a      	mov	r2, r9
 80072e2:	4640      	mov	r0, r8
 80072e4:	4798      	blx	r3
 80072e6:	6923      	ldr	r3, [r4, #16]
 80072e8:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80072ec:	3b01      	subs	r3, #1
 80072ee:	1eb5      	subs	r5, r6, #2
 80072f0:	6123      	str	r3, [r4, #16]
 80072f2:	464a      	mov	r2, r9
 80072f4:	4640      	mov	r0, r8
 80072f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072fa:	4798      	blx	r3
 80072fc:	462e      	mov	r6, r5
 80072fe:	6822      	ldr	r2, [r4, #0]
 8007300:	f012 0210 	ands.w	r2, r2, #16
 8007304:	d001      	beq.n	800730a <_scanf_float+0x36a>
 8007306:	2000      	movs	r0, #0
 8007308:	e68e      	b.n	8007028 <_scanf_float+0x88>
 800730a:	7032      	strb	r2, [r6, #0]
 800730c:	6823      	ldr	r3, [r4, #0]
 800730e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007316:	d125      	bne.n	8007364 <_scanf_float+0x3c4>
 8007318:	9b02      	ldr	r3, [sp, #8]
 800731a:	429f      	cmp	r7, r3
 800731c:	d00a      	beq.n	8007334 <_scanf_float+0x394>
 800731e:	1bda      	subs	r2, r3, r7
 8007320:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007324:	429e      	cmp	r6, r3
 8007326:	bf28      	it	cs
 8007328:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800732c:	4630      	mov	r0, r6
 800732e:	491f      	ldr	r1, [pc, #124]	@ (80073ac <_scanf_float+0x40c>)
 8007330:	f000 f972 	bl	8007618 <siprintf>
 8007334:	2200      	movs	r2, #0
 8007336:	4640      	mov	r0, r8
 8007338:	9901      	ldr	r1, [sp, #4]
 800733a:	f002 fcfd 	bl	8009d38 <_strtod_r>
 800733e:	9b03      	ldr	r3, [sp, #12]
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f015 0f02 	tst.w	r5, #2
 8007348:	4606      	mov	r6, r0
 800734a:	460f      	mov	r7, r1
 800734c:	f103 0204 	add.w	r2, r3, #4
 8007350:	d015      	beq.n	800737e <_scanf_float+0x3de>
 8007352:	9903      	ldr	r1, [sp, #12]
 8007354:	600a      	str	r2, [r1, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	e9c3 6700 	strd	r6, r7, [r3]
 800735c:	68e3      	ldr	r3, [r4, #12]
 800735e:	3301      	adds	r3, #1
 8007360:	60e3      	str	r3, [r4, #12]
 8007362:	e7d0      	b.n	8007306 <_scanf_float+0x366>
 8007364:	9b04      	ldr	r3, [sp, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0e4      	beq.n	8007334 <_scanf_float+0x394>
 800736a:	9905      	ldr	r1, [sp, #20]
 800736c:	230a      	movs	r3, #10
 800736e:	4640      	mov	r0, r8
 8007370:	3101      	adds	r1, #1
 8007372:	f002 fd61 	bl	8009e38 <_strtol_r>
 8007376:	9b04      	ldr	r3, [sp, #16]
 8007378:	9e05      	ldr	r6, [sp, #20]
 800737a:	1ac2      	subs	r2, r0, r3
 800737c:	e7d0      	b.n	8007320 <_scanf_float+0x380>
 800737e:	076d      	lsls	r5, r5, #29
 8007380:	d4e7      	bmi.n	8007352 <_scanf_float+0x3b2>
 8007382:	9d03      	ldr	r5, [sp, #12]
 8007384:	602a      	str	r2, [r5, #0]
 8007386:	681d      	ldr	r5, [r3, #0]
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	f7f9 fb56 	bl	8000a3c <__aeabi_dcmpun>
 8007390:	b120      	cbz	r0, 800739c <_scanf_float+0x3fc>
 8007392:	4807      	ldr	r0, [pc, #28]	@ (80073b0 <_scanf_float+0x410>)
 8007394:	f000 fad6 	bl	8007944 <nanf>
 8007398:	6028      	str	r0, [r5, #0]
 800739a:	e7df      	b.n	800735c <_scanf_float+0x3bc>
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fbaa 	bl	8000af8 <__aeabi_d2f>
 80073a4:	e7f8      	b.n	8007398 <_scanf_float+0x3f8>
 80073a6:	2700      	movs	r7, #0
 80073a8:	e633      	b.n	8007012 <_scanf_float+0x72>
 80073aa:	bf00      	nop
 80073ac:	0800c63c 	.word	0x0800c63c
 80073b0:	0800c77d 	.word	0x0800c77d

080073b4 <std>:
 80073b4:	2300      	movs	r3, #0
 80073b6:	b510      	push	{r4, lr}
 80073b8:	4604      	mov	r4, r0
 80073ba:	e9c0 3300 	strd	r3, r3, [r0]
 80073be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073c2:	6083      	str	r3, [r0, #8]
 80073c4:	8181      	strh	r1, [r0, #12]
 80073c6:	6643      	str	r3, [r0, #100]	@ 0x64
 80073c8:	81c2      	strh	r2, [r0, #14]
 80073ca:	6183      	str	r3, [r0, #24]
 80073cc:	4619      	mov	r1, r3
 80073ce:	2208      	movs	r2, #8
 80073d0:	305c      	adds	r0, #92	@ 0x5c
 80073d2:	f000 fa1b 	bl	800780c <memset>
 80073d6:	4b0d      	ldr	r3, [pc, #52]	@ (800740c <std+0x58>)
 80073d8:	6224      	str	r4, [r4, #32]
 80073da:	6263      	str	r3, [r4, #36]	@ 0x24
 80073dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007410 <std+0x5c>)
 80073de:	62a3      	str	r3, [r4, #40]	@ 0x28
 80073e0:	4b0c      	ldr	r3, [pc, #48]	@ (8007414 <std+0x60>)
 80073e2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80073e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <std+0x64>)
 80073e6:	6323      	str	r3, [r4, #48]	@ 0x30
 80073e8:	4b0c      	ldr	r3, [pc, #48]	@ (800741c <std+0x68>)
 80073ea:	429c      	cmp	r4, r3
 80073ec:	d006      	beq.n	80073fc <std+0x48>
 80073ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073f2:	4294      	cmp	r4, r2
 80073f4:	d002      	beq.n	80073fc <std+0x48>
 80073f6:	33d0      	adds	r3, #208	@ 0xd0
 80073f8:	429c      	cmp	r4, r3
 80073fa:	d105      	bne.n	8007408 <std+0x54>
 80073fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007404:	f000 ba7e 	b.w	8007904 <__retarget_lock_init_recursive>
 8007408:	bd10      	pop	{r4, pc}
 800740a:	bf00      	nop
 800740c:	0800765d 	.word	0x0800765d
 8007410:	0800767f 	.word	0x0800767f
 8007414:	080076b7 	.word	0x080076b7
 8007418:	080076db 	.word	0x080076db
 800741c:	2000113c 	.word	0x2000113c

08007420 <stdio_exit_handler>:
 8007420:	4a02      	ldr	r2, [pc, #8]	@ (800742c <stdio_exit_handler+0xc>)
 8007422:	4903      	ldr	r1, [pc, #12]	@ (8007430 <stdio_exit_handler+0x10>)
 8007424:	4803      	ldr	r0, [pc, #12]	@ (8007434 <stdio_exit_handler+0x14>)
 8007426:	f000 b869 	b.w	80074fc <_fwalk_sglue>
 800742a:	bf00      	nop
 800742c:	20000024 	.word	0x20000024
 8007430:	0800a46d 	.word	0x0800a46d
 8007434:	20000034 	.word	0x20000034

08007438 <cleanup_stdio>:
 8007438:	6841      	ldr	r1, [r0, #4]
 800743a:	4b0c      	ldr	r3, [pc, #48]	@ (800746c <cleanup_stdio+0x34>)
 800743c:	b510      	push	{r4, lr}
 800743e:	4299      	cmp	r1, r3
 8007440:	4604      	mov	r4, r0
 8007442:	d001      	beq.n	8007448 <cleanup_stdio+0x10>
 8007444:	f003 f812 	bl	800a46c <_fflush_r>
 8007448:	68a1      	ldr	r1, [r4, #8]
 800744a:	4b09      	ldr	r3, [pc, #36]	@ (8007470 <cleanup_stdio+0x38>)
 800744c:	4299      	cmp	r1, r3
 800744e:	d002      	beq.n	8007456 <cleanup_stdio+0x1e>
 8007450:	4620      	mov	r0, r4
 8007452:	f003 f80b 	bl	800a46c <_fflush_r>
 8007456:	68e1      	ldr	r1, [r4, #12]
 8007458:	4b06      	ldr	r3, [pc, #24]	@ (8007474 <cleanup_stdio+0x3c>)
 800745a:	4299      	cmp	r1, r3
 800745c:	d004      	beq.n	8007468 <cleanup_stdio+0x30>
 800745e:	4620      	mov	r0, r4
 8007460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007464:	f003 b802 	b.w	800a46c <_fflush_r>
 8007468:	bd10      	pop	{r4, pc}
 800746a:	bf00      	nop
 800746c:	2000113c 	.word	0x2000113c
 8007470:	200011a4 	.word	0x200011a4
 8007474:	2000120c 	.word	0x2000120c

08007478 <global_stdio_init.part.0>:
 8007478:	b510      	push	{r4, lr}
 800747a:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <global_stdio_init.part.0+0x30>)
 800747c:	4c0b      	ldr	r4, [pc, #44]	@ (80074ac <global_stdio_init.part.0+0x34>)
 800747e:	4a0c      	ldr	r2, [pc, #48]	@ (80074b0 <global_stdio_init.part.0+0x38>)
 8007480:	4620      	mov	r0, r4
 8007482:	601a      	str	r2, [r3, #0]
 8007484:	2104      	movs	r1, #4
 8007486:	2200      	movs	r2, #0
 8007488:	f7ff ff94 	bl	80073b4 <std>
 800748c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007490:	2201      	movs	r2, #1
 8007492:	2109      	movs	r1, #9
 8007494:	f7ff ff8e 	bl	80073b4 <std>
 8007498:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800749c:	2202      	movs	r2, #2
 800749e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a2:	2112      	movs	r1, #18
 80074a4:	f7ff bf86 	b.w	80073b4 <std>
 80074a8:	20001274 	.word	0x20001274
 80074ac:	2000113c 	.word	0x2000113c
 80074b0:	08007421 	.word	0x08007421

080074b4 <__sfp_lock_acquire>:
 80074b4:	4801      	ldr	r0, [pc, #4]	@ (80074bc <__sfp_lock_acquire+0x8>)
 80074b6:	f000 ba26 	b.w	8007906 <__retarget_lock_acquire_recursive>
 80074ba:	bf00      	nop
 80074bc:	2000127d 	.word	0x2000127d

080074c0 <__sfp_lock_release>:
 80074c0:	4801      	ldr	r0, [pc, #4]	@ (80074c8 <__sfp_lock_release+0x8>)
 80074c2:	f000 ba21 	b.w	8007908 <__retarget_lock_release_recursive>
 80074c6:	bf00      	nop
 80074c8:	2000127d 	.word	0x2000127d

080074cc <__sinit>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	4604      	mov	r4, r0
 80074d0:	f7ff fff0 	bl	80074b4 <__sfp_lock_acquire>
 80074d4:	6a23      	ldr	r3, [r4, #32]
 80074d6:	b11b      	cbz	r3, 80074e0 <__sinit+0x14>
 80074d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074dc:	f7ff bff0 	b.w	80074c0 <__sfp_lock_release>
 80074e0:	4b04      	ldr	r3, [pc, #16]	@ (80074f4 <__sinit+0x28>)
 80074e2:	6223      	str	r3, [r4, #32]
 80074e4:	4b04      	ldr	r3, [pc, #16]	@ (80074f8 <__sinit+0x2c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f5      	bne.n	80074d8 <__sinit+0xc>
 80074ec:	f7ff ffc4 	bl	8007478 <global_stdio_init.part.0>
 80074f0:	e7f2      	b.n	80074d8 <__sinit+0xc>
 80074f2:	bf00      	nop
 80074f4:	08007439 	.word	0x08007439
 80074f8:	20001274 	.word	0x20001274

080074fc <_fwalk_sglue>:
 80074fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007500:	4607      	mov	r7, r0
 8007502:	4688      	mov	r8, r1
 8007504:	4614      	mov	r4, r2
 8007506:	2600      	movs	r6, #0
 8007508:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800750c:	f1b9 0901 	subs.w	r9, r9, #1
 8007510:	d505      	bpl.n	800751e <_fwalk_sglue+0x22>
 8007512:	6824      	ldr	r4, [r4, #0]
 8007514:	2c00      	cmp	r4, #0
 8007516:	d1f7      	bne.n	8007508 <_fwalk_sglue+0xc>
 8007518:	4630      	mov	r0, r6
 800751a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751e:	89ab      	ldrh	r3, [r5, #12]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d907      	bls.n	8007534 <_fwalk_sglue+0x38>
 8007524:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007528:	3301      	adds	r3, #1
 800752a:	d003      	beq.n	8007534 <_fwalk_sglue+0x38>
 800752c:	4629      	mov	r1, r5
 800752e:	4638      	mov	r0, r7
 8007530:	47c0      	blx	r8
 8007532:	4306      	orrs	r6, r0
 8007534:	3568      	adds	r5, #104	@ 0x68
 8007536:	e7e9      	b.n	800750c <_fwalk_sglue+0x10>

08007538 <iprintf>:
 8007538:	b40f      	push	{r0, r1, r2, r3}
 800753a:	b507      	push	{r0, r1, r2, lr}
 800753c:	4906      	ldr	r1, [pc, #24]	@ (8007558 <iprintf+0x20>)
 800753e:	ab04      	add	r3, sp, #16
 8007540:	6808      	ldr	r0, [r1, #0]
 8007542:	f853 2b04 	ldr.w	r2, [r3], #4
 8007546:	6881      	ldr	r1, [r0, #8]
 8007548:	9301      	str	r3, [sp, #4]
 800754a:	f002 fdf7 	bl	800a13c <_vfiprintf_r>
 800754e:	b003      	add	sp, #12
 8007550:	f85d eb04 	ldr.w	lr, [sp], #4
 8007554:	b004      	add	sp, #16
 8007556:	4770      	bx	lr
 8007558:	20000030 	.word	0x20000030

0800755c <_puts_r>:
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b570      	push	{r4, r5, r6, lr}
 8007560:	4605      	mov	r5, r0
 8007562:	460e      	mov	r6, r1
 8007564:	6884      	ldr	r4, [r0, #8]
 8007566:	b90b      	cbnz	r3, 800756c <_puts_r+0x10>
 8007568:	f7ff ffb0 	bl	80074cc <__sinit>
 800756c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800756e:	07db      	lsls	r3, r3, #31
 8007570:	d405      	bmi.n	800757e <_puts_r+0x22>
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	0598      	lsls	r0, r3, #22
 8007576:	d402      	bmi.n	800757e <_puts_r+0x22>
 8007578:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800757a:	f000 f9c4 	bl	8007906 <__retarget_lock_acquire_recursive>
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	0719      	lsls	r1, r3, #28
 8007582:	d502      	bpl.n	800758a <_puts_r+0x2e>
 8007584:	6923      	ldr	r3, [r4, #16]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d135      	bne.n	80075f6 <_puts_r+0x9a>
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f000 f8e7 	bl	8007760 <__swsetup_r>
 8007592:	b380      	cbz	r0, 80075f6 <_puts_r+0x9a>
 8007594:	f04f 35ff 	mov.w	r5, #4294967295
 8007598:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800759a:	07da      	lsls	r2, r3, #31
 800759c:	d405      	bmi.n	80075aa <_puts_r+0x4e>
 800759e:	89a3      	ldrh	r3, [r4, #12]
 80075a0:	059b      	lsls	r3, r3, #22
 80075a2:	d402      	bmi.n	80075aa <_puts_r+0x4e>
 80075a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075a6:	f000 f9af 	bl	8007908 <__retarget_lock_release_recursive>
 80075aa:	4628      	mov	r0, r5
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da04      	bge.n	80075bc <_puts_r+0x60>
 80075b2:	69a2      	ldr	r2, [r4, #24]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	dc17      	bgt.n	80075e8 <_puts_r+0x8c>
 80075b8:	290a      	cmp	r1, #10
 80075ba:	d015      	beq.n	80075e8 <_puts_r+0x8c>
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	1c5a      	adds	r2, r3, #1
 80075c0:	6022      	str	r2, [r4, #0]
 80075c2:	7019      	strb	r1, [r3, #0]
 80075c4:	68a3      	ldr	r3, [r4, #8]
 80075c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80075ca:	3b01      	subs	r3, #1
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	2900      	cmp	r1, #0
 80075d0:	d1ed      	bne.n	80075ae <_puts_r+0x52>
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	da11      	bge.n	80075fa <_puts_r+0x9e>
 80075d6:	4622      	mov	r2, r4
 80075d8:	210a      	movs	r1, #10
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 f881 	bl	80076e2 <__swbuf_r>
 80075e0:	3001      	adds	r0, #1
 80075e2:	d0d7      	beq.n	8007594 <_puts_r+0x38>
 80075e4:	250a      	movs	r5, #10
 80075e6:	e7d7      	b.n	8007598 <_puts_r+0x3c>
 80075e8:	4622      	mov	r2, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f879 	bl	80076e2 <__swbuf_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d1e7      	bne.n	80075c4 <_puts_r+0x68>
 80075f4:	e7ce      	b.n	8007594 <_puts_r+0x38>
 80075f6:	3e01      	subs	r6, #1
 80075f8:	e7e4      	b.n	80075c4 <_puts_r+0x68>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	6022      	str	r2, [r4, #0]
 8007600:	220a      	movs	r2, #10
 8007602:	701a      	strb	r2, [r3, #0]
 8007604:	e7ee      	b.n	80075e4 <_puts_r+0x88>
	...

08007608 <puts>:
 8007608:	4b02      	ldr	r3, [pc, #8]	@ (8007614 <puts+0xc>)
 800760a:	4601      	mov	r1, r0
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f7ff bfa5 	b.w	800755c <_puts_r>
 8007612:	bf00      	nop
 8007614:	20000030 	.word	0x20000030

08007618 <siprintf>:
 8007618:	b40e      	push	{r1, r2, r3}
 800761a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800761e:	b510      	push	{r4, lr}
 8007620:	2400      	movs	r4, #0
 8007622:	b09d      	sub	sp, #116	@ 0x74
 8007624:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007626:	9002      	str	r0, [sp, #8]
 8007628:	9006      	str	r0, [sp, #24]
 800762a:	9107      	str	r1, [sp, #28]
 800762c:	9104      	str	r1, [sp, #16]
 800762e:	4809      	ldr	r0, [pc, #36]	@ (8007654 <siprintf+0x3c>)
 8007630:	4909      	ldr	r1, [pc, #36]	@ (8007658 <siprintf+0x40>)
 8007632:	f853 2b04 	ldr.w	r2, [r3], #4
 8007636:	9105      	str	r1, [sp, #20]
 8007638:	6800      	ldr	r0, [r0, #0]
 800763a:	a902      	add	r1, sp, #8
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007640:	f002 fc58 	bl	8009ef4 <_svfiprintf_r>
 8007644:	9b02      	ldr	r3, [sp, #8]
 8007646:	701c      	strb	r4, [r3, #0]
 8007648:	b01d      	add	sp, #116	@ 0x74
 800764a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800764e:	b003      	add	sp, #12
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	20000030 	.word	0x20000030
 8007658:	ffff0208 	.word	0xffff0208

0800765c <__sread>:
 800765c:	b510      	push	{r4, lr}
 800765e:	460c      	mov	r4, r1
 8007660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007664:	f000 f900 	bl	8007868 <_read_r>
 8007668:	2800      	cmp	r0, #0
 800766a:	bfab      	itete	ge
 800766c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800766e:	89a3      	ldrhlt	r3, [r4, #12]
 8007670:	181b      	addge	r3, r3, r0
 8007672:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007676:	bfac      	ite	ge
 8007678:	6563      	strge	r3, [r4, #84]	@ 0x54
 800767a:	81a3      	strhlt	r3, [r4, #12]
 800767c:	bd10      	pop	{r4, pc}

0800767e <__swrite>:
 800767e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007682:	461f      	mov	r7, r3
 8007684:	898b      	ldrh	r3, [r1, #12]
 8007686:	4605      	mov	r5, r0
 8007688:	05db      	lsls	r3, r3, #23
 800768a:	460c      	mov	r4, r1
 800768c:	4616      	mov	r6, r2
 800768e:	d505      	bpl.n	800769c <__swrite+0x1e>
 8007690:	2302      	movs	r3, #2
 8007692:	2200      	movs	r2, #0
 8007694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007698:	f000 f8d4 	bl	8007844 <_lseek_r>
 800769c:	89a3      	ldrh	r3, [r4, #12]
 800769e:	4632      	mov	r2, r6
 80076a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076a4:	81a3      	strh	r3, [r4, #12]
 80076a6:	4628      	mov	r0, r5
 80076a8:	463b      	mov	r3, r7
 80076aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076b2:	f000 b8eb 	b.w	800788c <_write_r>

080076b6 <__sseek>:
 80076b6:	b510      	push	{r4, lr}
 80076b8:	460c      	mov	r4, r1
 80076ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076be:	f000 f8c1 	bl	8007844 <_lseek_r>
 80076c2:	1c43      	adds	r3, r0, #1
 80076c4:	89a3      	ldrh	r3, [r4, #12]
 80076c6:	bf15      	itete	ne
 80076c8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80076ca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80076ce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80076d2:	81a3      	strheq	r3, [r4, #12]
 80076d4:	bf18      	it	ne
 80076d6:	81a3      	strhne	r3, [r4, #12]
 80076d8:	bd10      	pop	{r4, pc}

080076da <__sclose>:
 80076da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076de:	f000 b8a1 	b.w	8007824 <_close_r>

080076e2 <__swbuf_r>:
 80076e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e4:	460e      	mov	r6, r1
 80076e6:	4614      	mov	r4, r2
 80076e8:	4605      	mov	r5, r0
 80076ea:	b118      	cbz	r0, 80076f4 <__swbuf_r+0x12>
 80076ec:	6a03      	ldr	r3, [r0, #32]
 80076ee:	b90b      	cbnz	r3, 80076f4 <__swbuf_r+0x12>
 80076f0:	f7ff feec 	bl	80074cc <__sinit>
 80076f4:	69a3      	ldr	r3, [r4, #24]
 80076f6:	60a3      	str	r3, [r4, #8]
 80076f8:	89a3      	ldrh	r3, [r4, #12]
 80076fa:	071a      	lsls	r2, r3, #28
 80076fc:	d501      	bpl.n	8007702 <__swbuf_r+0x20>
 80076fe:	6923      	ldr	r3, [r4, #16]
 8007700:	b943      	cbnz	r3, 8007714 <__swbuf_r+0x32>
 8007702:	4621      	mov	r1, r4
 8007704:	4628      	mov	r0, r5
 8007706:	f000 f82b 	bl	8007760 <__swsetup_r>
 800770a:	b118      	cbz	r0, 8007714 <__swbuf_r+0x32>
 800770c:	f04f 37ff 	mov.w	r7, #4294967295
 8007710:	4638      	mov	r0, r7
 8007712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	b2f6      	uxtb	r6, r6
 800771a:	1a98      	subs	r0, r3, r2
 800771c:	6963      	ldr	r3, [r4, #20]
 800771e:	4637      	mov	r7, r6
 8007720:	4283      	cmp	r3, r0
 8007722:	dc05      	bgt.n	8007730 <__swbuf_r+0x4e>
 8007724:	4621      	mov	r1, r4
 8007726:	4628      	mov	r0, r5
 8007728:	f002 fea0 	bl	800a46c <_fflush_r>
 800772c:	2800      	cmp	r0, #0
 800772e:	d1ed      	bne.n	800770c <__swbuf_r+0x2a>
 8007730:	68a3      	ldr	r3, [r4, #8]
 8007732:	3b01      	subs	r3, #1
 8007734:	60a3      	str	r3, [r4, #8]
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	6022      	str	r2, [r4, #0]
 800773c:	701e      	strb	r6, [r3, #0]
 800773e:	6962      	ldr	r2, [r4, #20]
 8007740:	1c43      	adds	r3, r0, #1
 8007742:	429a      	cmp	r2, r3
 8007744:	d004      	beq.n	8007750 <__swbuf_r+0x6e>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	07db      	lsls	r3, r3, #31
 800774a:	d5e1      	bpl.n	8007710 <__swbuf_r+0x2e>
 800774c:	2e0a      	cmp	r6, #10
 800774e:	d1df      	bne.n	8007710 <__swbuf_r+0x2e>
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f002 fe8a 	bl	800a46c <_fflush_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0d9      	beq.n	8007710 <__swbuf_r+0x2e>
 800775c:	e7d6      	b.n	800770c <__swbuf_r+0x2a>
	...

08007760 <__swsetup_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4b29      	ldr	r3, [pc, #164]	@ (8007808 <__swsetup_r+0xa8>)
 8007764:	4605      	mov	r5, r0
 8007766:	6818      	ldr	r0, [r3, #0]
 8007768:	460c      	mov	r4, r1
 800776a:	b118      	cbz	r0, 8007774 <__swsetup_r+0x14>
 800776c:	6a03      	ldr	r3, [r0, #32]
 800776e:	b90b      	cbnz	r3, 8007774 <__swsetup_r+0x14>
 8007770:	f7ff feac 	bl	80074cc <__sinit>
 8007774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007778:	0719      	lsls	r1, r3, #28
 800777a:	d422      	bmi.n	80077c2 <__swsetup_r+0x62>
 800777c:	06da      	lsls	r2, r3, #27
 800777e:	d407      	bmi.n	8007790 <__swsetup_r+0x30>
 8007780:	2209      	movs	r2, #9
 8007782:	602a      	str	r2, [r5, #0]
 8007784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007788:	f04f 30ff 	mov.w	r0, #4294967295
 800778c:	81a3      	strh	r3, [r4, #12]
 800778e:	e033      	b.n	80077f8 <__swsetup_r+0x98>
 8007790:	0758      	lsls	r0, r3, #29
 8007792:	d512      	bpl.n	80077ba <__swsetup_r+0x5a>
 8007794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007796:	b141      	cbz	r1, 80077aa <__swsetup_r+0x4a>
 8007798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800779c:	4299      	cmp	r1, r3
 800779e:	d002      	beq.n	80077a6 <__swsetup_r+0x46>
 80077a0:	4628      	mov	r0, r5
 80077a2:	f000 ff31 	bl	8008608 <_free_r>
 80077a6:	2300      	movs	r3, #0
 80077a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	2300      	movs	r3, #0
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	6923      	ldr	r3, [r4, #16]
 80077b8:	6023      	str	r3, [r4, #0]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	f043 0308 	orr.w	r3, r3, #8
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	b94b      	cbnz	r3, 80077da <__swsetup_r+0x7a>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80077cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077d0:	d003      	beq.n	80077da <__swsetup_r+0x7a>
 80077d2:	4621      	mov	r1, r4
 80077d4:	4628      	mov	r0, r5
 80077d6:	f002 fe96 	bl	800a506 <__smakebuf_r>
 80077da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077de:	f013 0201 	ands.w	r2, r3, #1
 80077e2:	d00a      	beq.n	80077fa <__swsetup_r+0x9a>
 80077e4:	2200      	movs	r2, #0
 80077e6:	60a2      	str	r2, [r4, #8]
 80077e8:	6962      	ldr	r2, [r4, #20]
 80077ea:	4252      	negs	r2, r2
 80077ec:	61a2      	str	r2, [r4, #24]
 80077ee:	6922      	ldr	r2, [r4, #16]
 80077f0:	b942      	cbnz	r2, 8007804 <__swsetup_r+0xa4>
 80077f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077f6:	d1c5      	bne.n	8007784 <__swsetup_r+0x24>
 80077f8:	bd38      	pop	{r3, r4, r5, pc}
 80077fa:	0799      	lsls	r1, r3, #30
 80077fc:	bf58      	it	pl
 80077fe:	6962      	ldrpl	r2, [r4, #20]
 8007800:	60a2      	str	r2, [r4, #8]
 8007802:	e7f4      	b.n	80077ee <__swsetup_r+0x8e>
 8007804:	2000      	movs	r0, #0
 8007806:	e7f7      	b.n	80077f8 <__swsetup_r+0x98>
 8007808:	20000030 	.word	0x20000030

0800780c <memset>:
 800780c:	4603      	mov	r3, r0
 800780e:	4402      	add	r2, r0
 8007810:	4293      	cmp	r3, r2
 8007812:	d100      	bne.n	8007816 <memset+0xa>
 8007814:	4770      	bx	lr
 8007816:	f803 1b01 	strb.w	r1, [r3], #1
 800781a:	e7f9      	b.n	8007810 <memset+0x4>

0800781c <_localeconv_r>:
 800781c:	4800      	ldr	r0, [pc, #0]	@ (8007820 <_localeconv_r+0x4>)
 800781e:	4770      	bx	lr
 8007820:	20000170 	.word	0x20000170

08007824 <_close_r>:
 8007824:	b538      	push	{r3, r4, r5, lr}
 8007826:	2300      	movs	r3, #0
 8007828:	4d05      	ldr	r5, [pc, #20]	@ (8007840 <_close_r+0x1c>)
 800782a:	4604      	mov	r4, r0
 800782c:	4608      	mov	r0, r1
 800782e:	602b      	str	r3, [r5, #0]
 8007830:	f7fa faba 	bl	8001da8 <_close>
 8007834:	1c43      	adds	r3, r0, #1
 8007836:	d102      	bne.n	800783e <_close_r+0x1a>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	b103      	cbz	r3, 800783e <_close_r+0x1a>
 800783c:	6023      	str	r3, [r4, #0]
 800783e:	bd38      	pop	{r3, r4, r5, pc}
 8007840:	20001278 	.word	0x20001278

08007844 <_lseek_r>:
 8007844:	b538      	push	{r3, r4, r5, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	4611      	mov	r1, r2
 800784c:	2200      	movs	r2, #0
 800784e:	4d05      	ldr	r5, [pc, #20]	@ (8007864 <_lseek_r+0x20>)
 8007850:	602a      	str	r2, [r5, #0]
 8007852:	461a      	mov	r2, r3
 8007854:	f7fa facc 	bl	8001df0 <_lseek>
 8007858:	1c43      	adds	r3, r0, #1
 800785a:	d102      	bne.n	8007862 <_lseek_r+0x1e>
 800785c:	682b      	ldr	r3, [r5, #0]
 800785e:	b103      	cbz	r3, 8007862 <_lseek_r+0x1e>
 8007860:	6023      	str	r3, [r4, #0]
 8007862:	bd38      	pop	{r3, r4, r5, pc}
 8007864:	20001278 	.word	0x20001278

08007868 <_read_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	4611      	mov	r1, r2
 8007870:	2200      	movs	r2, #0
 8007872:	4d05      	ldr	r5, [pc, #20]	@ (8007888 <_read_r+0x20>)
 8007874:	602a      	str	r2, [r5, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	f7fa fa5d 	bl	8001d36 <_read>
 800787c:	1c43      	adds	r3, r0, #1
 800787e:	d102      	bne.n	8007886 <_read_r+0x1e>
 8007880:	682b      	ldr	r3, [r5, #0]
 8007882:	b103      	cbz	r3, 8007886 <_read_r+0x1e>
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	bd38      	pop	{r3, r4, r5, pc}
 8007888:	20001278 	.word	0x20001278

0800788c <_write_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	4611      	mov	r1, r2
 8007894:	2200      	movs	r2, #0
 8007896:	4d05      	ldr	r5, [pc, #20]	@ (80078ac <_write_r+0x20>)
 8007898:	602a      	str	r2, [r5, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	f7fa fa68 	bl	8001d70 <_write>
 80078a0:	1c43      	adds	r3, r0, #1
 80078a2:	d102      	bne.n	80078aa <_write_r+0x1e>
 80078a4:	682b      	ldr	r3, [r5, #0]
 80078a6:	b103      	cbz	r3, 80078aa <_write_r+0x1e>
 80078a8:	6023      	str	r3, [r4, #0]
 80078aa:	bd38      	pop	{r3, r4, r5, pc}
 80078ac:	20001278 	.word	0x20001278

080078b0 <__errno>:
 80078b0:	4b01      	ldr	r3, [pc, #4]	@ (80078b8 <__errno+0x8>)
 80078b2:	6818      	ldr	r0, [r3, #0]
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	20000030 	.word	0x20000030

080078bc <__libc_init_array>:
 80078bc:	b570      	push	{r4, r5, r6, lr}
 80078be:	2600      	movs	r6, #0
 80078c0:	4d0c      	ldr	r5, [pc, #48]	@ (80078f4 <__libc_init_array+0x38>)
 80078c2:	4c0d      	ldr	r4, [pc, #52]	@ (80078f8 <__libc_init_array+0x3c>)
 80078c4:	1b64      	subs	r4, r4, r5
 80078c6:	10a4      	asrs	r4, r4, #2
 80078c8:	42a6      	cmp	r6, r4
 80078ca:	d109      	bne.n	80078e0 <__libc_init_array+0x24>
 80078cc:	f003 ff28 	bl	800b720 <_init>
 80078d0:	2600      	movs	r6, #0
 80078d2:	4d0a      	ldr	r5, [pc, #40]	@ (80078fc <__libc_init_array+0x40>)
 80078d4:	4c0a      	ldr	r4, [pc, #40]	@ (8007900 <__libc_init_array+0x44>)
 80078d6:	1b64      	subs	r4, r4, r5
 80078d8:	10a4      	asrs	r4, r4, #2
 80078da:	42a6      	cmp	r6, r4
 80078dc:	d105      	bne.n	80078ea <__libc_init_array+0x2e>
 80078de:	bd70      	pop	{r4, r5, r6, pc}
 80078e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078e4:	4798      	blx	r3
 80078e6:	3601      	adds	r6, #1
 80078e8:	e7ee      	b.n	80078c8 <__libc_init_array+0xc>
 80078ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80078ee:	4798      	blx	r3
 80078f0:	3601      	adds	r6, #1
 80078f2:	e7f2      	b.n	80078da <__libc_init_array+0x1e>
 80078f4:	0800ca70 	.word	0x0800ca70
 80078f8:	0800ca70 	.word	0x0800ca70
 80078fc:	0800ca70 	.word	0x0800ca70
 8007900:	0800ca74 	.word	0x0800ca74

08007904 <__retarget_lock_init_recursive>:
 8007904:	4770      	bx	lr

08007906 <__retarget_lock_acquire_recursive>:
 8007906:	4770      	bx	lr

08007908 <__retarget_lock_release_recursive>:
 8007908:	4770      	bx	lr

0800790a <memchr>:
 800790a:	4603      	mov	r3, r0
 800790c:	b510      	push	{r4, lr}
 800790e:	b2c9      	uxtb	r1, r1
 8007910:	4402      	add	r2, r0
 8007912:	4293      	cmp	r3, r2
 8007914:	4618      	mov	r0, r3
 8007916:	d101      	bne.n	800791c <memchr+0x12>
 8007918:	2000      	movs	r0, #0
 800791a:	e003      	b.n	8007924 <memchr+0x1a>
 800791c:	7804      	ldrb	r4, [r0, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	428c      	cmp	r4, r1
 8007922:	d1f6      	bne.n	8007912 <memchr+0x8>
 8007924:	bd10      	pop	{r4, pc}

08007926 <memcpy>:
 8007926:	440a      	add	r2, r1
 8007928:	4291      	cmp	r1, r2
 800792a:	f100 33ff 	add.w	r3, r0, #4294967295
 800792e:	d100      	bne.n	8007932 <memcpy+0xc>
 8007930:	4770      	bx	lr
 8007932:	b510      	push	{r4, lr}
 8007934:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007938:	4291      	cmp	r1, r2
 800793a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793e:	d1f9      	bne.n	8007934 <memcpy+0xe>
 8007940:	bd10      	pop	{r4, pc}
	...

08007944 <nanf>:
 8007944:	4800      	ldr	r0, [pc, #0]	@ (8007948 <nanf+0x4>)
 8007946:	4770      	bx	lr
 8007948:	7fc00000 	.word	0x7fc00000

0800794c <quorem>:
 800794c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007950:	6903      	ldr	r3, [r0, #16]
 8007952:	690c      	ldr	r4, [r1, #16]
 8007954:	4607      	mov	r7, r0
 8007956:	42a3      	cmp	r3, r4
 8007958:	db7e      	blt.n	8007a58 <quorem+0x10c>
 800795a:	3c01      	subs	r4, #1
 800795c:	00a3      	lsls	r3, r4, #2
 800795e:	f100 0514 	add.w	r5, r0, #20
 8007962:	f101 0814 	add.w	r8, r1, #20
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007976:	3301      	adds	r3, #1
 8007978:	429a      	cmp	r2, r3
 800797a:	fbb2 f6f3 	udiv	r6, r2, r3
 800797e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007982:	d32e      	bcc.n	80079e2 <quorem+0x96>
 8007984:	f04f 0a00 	mov.w	sl, #0
 8007988:	46c4      	mov	ip, r8
 800798a:	46ae      	mov	lr, r5
 800798c:	46d3      	mov	fp, sl
 800798e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007992:	b298      	uxth	r0, r3
 8007994:	fb06 a000 	mla	r0, r6, r0, sl
 8007998:	0c1b      	lsrs	r3, r3, #16
 800799a:	0c02      	lsrs	r2, r0, #16
 800799c:	fb06 2303 	mla	r3, r6, r3, r2
 80079a0:	f8de 2000 	ldr.w	r2, [lr]
 80079a4:	b280      	uxth	r0, r0
 80079a6:	b292      	uxth	r2, r2
 80079a8:	1a12      	subs	r2, r2, r0
 80079aa:	445a      	add	r2, fp
 80079ac:	f8de 0000 	ldr.w	r0, [lr]
 80079b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80079ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80079be:	b292      	uxth	r2, r2
 80079c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80079c4:	45e1      	cmp	r9, ip
 80079c6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80079ca:	f84e 2b04 	str.w	r2, [lr], #4
 80079ce:	d2de      	bcs.n	800798e <quorem+0x42>
 80079d0:	9b00      	ldr	r3, [sp, #0]
 80079d2:	58eb      	ldr	r3, [r5, r3]
 80079d4:	b92b      	cbnz	r3, 80079e2 <quorem+0x96>
 80079d6:	9b01      	ldr	r3, [sp, #4]
 80079d8:	3b04      	subs	r3, #4
 80079da:	429d      	cmp	r5, r3
 80079dc:	461a      	mov	r2, r3
 80079de:	d32f      	bcc.n	8007a40 <quorem+0xf4>
 80079e0:	613c      	str	r4, [r7, #16]
 80079e2:	4638      	mov	r0, r7
 80079e4:	f001 f9ca 	bl	8008d7c <__mcmp>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	db25      	blt.n	8007a38 <quorem+0xec>
 80079ec:	4629      	mov	r1, r5
 80079ee:	2000      	movs	r0, #0
 80079f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80079f4:	f8d1 c000 	ldr.w	ip, [r1]
 80079f8:	fa1f fe82 	uxth.w	lr, r2
 80079fc:	fa1f f38c 	uxth.w	r3, ip
 8007a00:	eba3 030e 	sub.w	r3, r3, lr
 8007a04:	4403      	add	r3, r0
 8007a06:	0c12      	lsrs	r2, r2, #16
 8007a08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a16:	45c1      	cmp	r9, r8
 8007a18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a1c:	f841 3b04 	str.w	r3, [r1], #4
 8007a20:	d2e6      	bcs.n	80079f0 <quorem+0xa4>
 8007a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a2a:	b922      	cbnz	r2, 8007a36 <quorem+0xea>
 8007a2c:	3b04      	subs	r3, #4
 8007a2e:	429d      	cmp	r5, r3
 8007a30:	461a      	mov	r2, r3
 8007a32:	d30b      	bcc.n	8007a4c <quorem+0x100>
 8007a34:	613c      	str	r4, [r7, #16]
 8007a36:	3601      	adds	r6, #1
 8007a38:	4630      	mov	r0, r6
 8007a3a:	b003      	add	sp, #12
 8007a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a40:	6812      	ldr	r2, [r2, #0]
 8007a42:	3b04      	subs	r3, #4
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d1cb      	bne.n	80079e0 <quorem+0x94>
 8007a48:	3c01      	subs	r4, #1
 8007a4a:	e7c6      	b.n	80079da <quorem+0x8e>
 8007a4c:	6812      	ldr	r2, [r2, #0]
 8007a4e:	3b04      	subs	r3, #4
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	d1ef      	bne.n	8007a34 <quorem+0xe8>
 8007a54:	3c01      	subs	r4, #1
 8007a56:	e7ea      	b.n	8007a2e <quorem+0xe2>
 8007a58:	2000      	movs	r0, #0
 8007a5a:	e7ee      	b.n	8007a3a <quorem+0xee>
 8007a5c:	0000      	movs	r0, r0
	...

08007a60 <_dtoa_r>:
 8007a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a64:	4614      	mov	r4, r2
 8007a66:	461d      	mov	r5, r3
 8007a68:	69c7      	ldr	r7, [r0, #28]
 8007a6a:	b097      	sub	sp, #92	@ 0x5c
 8007a6c:	4681      	mov	r9, r0
 8007a6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007a72:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a74:	b97f      	cbnz	r7, 8007a96 <_dtoa_r+0x36>
 8007a76:	2010      	movs	r0, #16
 8007a78:	f000 fe0e 	bl	8008698 <malloc>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	f8c9 001c 	str.w	r0, [r9, #28]
 8007a82:	b920      	cbnz	r0, 8007a8e <_dtoa_r+0x2e>
 8007a84:	21ef      	movs	r1, #239	@ 0xef
 8007a86:	4bac      	ldr	r3, [pc, #688]	@ (8007d38 <_dtoa_r+0x2d8>)
 8007a88:	48ac      	ldr	r0, [pc, #688]	@ (8007d3c <_dtoa_r+0x2dc>)
 8007a8a:	f002 fddd 	bl	800a648 <__assert_func>
 8007a8e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a92:	6007      	str	r7, [r0, #0]
 8007a94:	60c7      	str	r7, [r0, #12]
 8007a96:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a9a:	6819      	ldr	r1, [r3, #0]
 8007a9c:	b159      	cbz	r1, 8007ab6 <_dtoa_r+0x56>
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	4093      	lsls	r3, r2
 8007aa4:	604a      	str	r2, [r1, #4]
 8007aa6:	608b      	str	r3, [r1, #8]
 8007aa8:	4648      	mov	r0, r9
 8007aaa:	f000 feeb 	bl	8008884 <_Bfree>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	1e2b      	subs	r3, r5, #0
 8007ab8:	bfaf      	iteee	ge
 8007aba:	2300      	movge	r3, #0
 8007abc:	2201      	movlt	r2, #1
 8007abe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007ac2:	9307      	strlt	r3, [sp, #28]
 8007ac4:	bfa8      	it	ge
 8007ac6:	6033      	strge	r3, [r6, #0]
 8007ac8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8007acc:	4b9c      	ldr	r3, [pc, #624]	@ (8007d40 <_dtoa_r+0x2e0>)
 8007ace:	bfb8      	it	lt
 8007ad0:	6032      	strlt	r2, [r6, #0]
 8007ad2:	ea33 0308 	bics.w	r3, r3, r8
 8007ad6:	d112      	bne.n	8007afe <_dtoa_r+0x9e>
 8007ad8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007adc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ade:	6013      	str	r3, [r2, #0]
 8007ae0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007ae4:	4323      	orrs	r3, r4
 8007ae6:	f000 855e 	beq.w	80085a6 <_dtoa_r+0xb46>
 8007aea:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007aec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007d44 <_dtoa_r+0x2e4>
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 8560 	beq.w	80085b6 <_dtoa_r+0xb56>
 8007af6:	f10a 0303 	add.w	r3, sl, #3
 8007afa:	f000 bd5a 	b.w	80085b2 <_dtoa_r+0xb52>
 8007afe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b02:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f7f8 ff63 	bl	80009d8 <__aeabi_dcmpeq>
 8007b12:	4607      	mov	r7, r0
 8007b14:	b158      	cbz	r0, 8007b2e <_dtoa_r+0xce>
 8007b16:	2301      	movs	r3, #1
 8007b18:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007b1e:	b113      	cbz	r3, 8007b26 <_dtoa_r+0xc6>
 8007b20:	4b89      	ldr	r3, [pc, #548]	@ (8007d48 <_dtoa_r+0x2e8>)
 8007b22:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007d4c <_dtoa_r+0x2ec>
 8007b2a:	f000 bd44 	b.w	80085b6 <_dtoa_r+0xb56>
 8007b2e:	ab14      	add	r3, sp, #80	@ 0x50
 8007b30:	9301      	str	r3, [sp, #4]
 8007b32:	ab15      	add	r3, sp, #84	@ 0x54
 8007b34:	9300      	str	r3, [sp, #0]
 8007b36:	4648      	mov	r0, r9
 8007b38:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007b3c:	f001 fa36 	bl	8008fac <__d2b>
 8007b40:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007b44:	9003      	str	r0, [sp, #12]
 8007b46:	2e00      	cmp	r6, #0
 8007b48:	d078      	beq.n	8007c3c <_dtoa_r+0x1dc>
 8007b4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b50:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b58:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b5c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b60:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b62:	4619      	mov	r1, r3
 8007b64:	2200      	movs	r2, #0
 8007b66:	4b7a      	ldr	r3, [pc, #488]	@ (8007d50 <_dtoa_r+0x2f0>)
 8007b68:	f7f8 fb16 	bl	8000198 <__aeabi_dsub>
 8007b6c:	a36c      	add	r3, pc, #432	@ (adr r3, 8007d20 <_dtoa_r+0x2c0>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fcc9 	bl	8000508 <__aeabi_dmul>
 8007b76:	a36c      	add	r3, pc, #432	@ (adr r3, 8007d28 <_dtoa_r+0x2c8>)
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f7f8 fb0e 	bl	800019c <__adddf3>
 8007b80:	4604      	mov	r4, r0
 8007b82:	4630      	mov	r0, r6
 8007b84:	460d      	mov	r5, r1
 8007b86:	f7f8 fc55 	bl	8000434 <__aeabi_i2d>
 8007b8a:	a369      	add	r3, pc, #420	@ (adr r3, 8007d30 <_dtoa_r+0x2d0>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 fcba 	bl	8000508 <__aeabi_dmul>
 8007b94:	4602      	mov	r2, r0
 8007b96:	460b      	mov	r3, r1
 8007b98:	4620      	mov	r0, r4
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	f7f8 fafe 	bl	800019c <__adddf3>
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	460d      	mov	r5, r1
 8007ba4:	f7f8 ff60 	bl	8000a68 <__aeabi_d2iz>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	4607      	mov	r7, r0
 8007bac:	2300      	movs	r3, #0
 8007bae:	4620      	mov	r0, r4
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	f7f8 ff1b 	bl	80009ec <__aeabi_dcmplt>
 8007bb6:	b140      	cbz	r0, 8007bca <_dtoa_r+0x16a>
 8007bb8:	4638      	mov	r0, r7
 8007bba:	f7f8 fc3b 	bl	8000434 <__aeabi_i2d>
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	462b      	mov	r3, r5
 8007bc2:	f7f8 ff09 	bl	80009d8 <__aeabi_dcmpeq>
 8007bc6:	b900      	cbnz	r0, 8007bca <_dtoa_r+0x16a>
 8007bc8:	3f01      	subs	r7, #1
 8007bca:	2f16      	cmp	r7, #22
 8007bcc:	d854      	bhi.n	8007c78 <_dtoa_r+0x218>
 8007bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bd2:	4b60      	ldr	r3, [pc, #384]	@ (8007d54 <_dtoa_r+0x2f4>)
 8007bd4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bdc:	f7f8 ff06 	bl	80009ec <__aeabi_dcmplt>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	d04b      	beq.n	8007c7c <_dtoa_r+0x21c>
 8007be4:	2300      	movs	r3, #0
 8007be6:	3f01      	subs	r7, #1
 8007be8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bea:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bec:	1b9b      	subs	r3, r3, r6
 8007bee:	1e5a      	subs	r2, r3, #1
 8007bf0:	bf49      	itett	mi
 8007bf2:	f1c3 0301 	rsbmi	r3, r3, #1
 8007bf6:	2300      	movpl	r3, #0
 8007bf8:	9304      	strmi	r3, [sp, #16]
 8007bfa:	2300      	movmi	r3, #0
 8007bfc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bfe:	bf54      	ite	pl
 8007c00:	9304      	strpl	r3, [sp, #16]
 8007c02:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	db3b      	blt.n	8007c80 <_dtoa_r+0x220>
 8007c08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c0a:	970e      	str	r7, [sp, #56]	@ 0x38
 8007c0c:	443b      	add	r3, r7
 8007c0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c10:	2300      	movs	r3, #0
 8007c12:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	d865      	bhi.n	8007ce6 <_dtoa_r+0x286>
 8007c1a:	2b05      	cmp	r3, #5
 8007c1c:	bfc4      	itt	gt
 8007c1e:	3b04      	subgt	r3, #4
 8007c20:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007c22:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007c24:	bfc8      	it	gt
 8007c26:	2400      	movgt	r4, #0
 8007c28:	f1a3 0302 	sub.w	r3, r3, #2
 8007c2c:	bfd8      	it	le
 8007c2e:	2401      	movle	r4, #1
 8007c30:	2b03      	cmp	r3, #3
 8007c32:	d864      	bhi.n	8007cfe <_dtoa_r+0x29e>
 8007c34:	e8df f003 	tbb	[pc, r3]
 8007c38:	2c385553 	.word	0x2c385553
 8007c3c:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007c40:	441e      	add	r6, r3
 8007c42:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	bfc1      	itttt	gt
 8007c4a:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c4e:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c52:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c56:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c5a:	bfd6      	itet	le
 8007c5c:	f1c3 0320 	rsble	r3, r3, #32
 8007c60:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c64:	fa04 f003 	lslle.w	r0, r4, r3
 8007c68:	f7f8 fbd4 	bl	8000414 <__aeabi_ui2d>
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c72:	3e01      	subs	r6, #1
 8007c74:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c76:	e774      	b.n	8007b62 <_dtoa_r+0x102>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7b5      	b.n	8007be8 <_dtoa_r+0x188>
 8007c7c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007c7e:	e7b4      	b.n	8007bea <_dtoa_r+0x18a>
 8007c80:	9b04      	ldr	r3, [sp, #16]
 8007c82:	1bdb      	subs	r3, r3, r7
 8007c84:	9304      	str	r3, [sp, #16]
 8007c86:	427b      	negs	r3, r7
 8007c88:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c8e:	e7c1      	b.n	8007c14 <_dtoa_r+0x1b4>
 8007c90:	2301      	movs	r3, #1
 8007c92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c96:	eb07 0b03 	add.w	fp, r7, r3
 8007c9a:	f10b 0301 	add.w	r3, fp, #1
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	9308      	str	r3, [sp, #32]
 8007ca2:	bfb8      	it	lt
 8007ca4:	2301      	movlt	r3, #1
 8007ca6:	e006      	b.n	8007cb6 <_dtoa_r+0x256>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dd28      	ble.n	8007d04 <_dtoa_r+0x2a4>
 8007cb2:	469b      	mov	fp, r3
 8007cb4:	9308      	str	r3, [sp, #32]
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	2204      	movs	r2, #4
 8007cba:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007cbe:	f102 0514 	add.w	r5, r2, #20
 8007cc2:	429d      	cmp	r5, r3
 8007cc4:	d926      	bls.n	8007d14 <_dtoa_r+0x2b4>
 8007cc6:	6041      	str	r1, [r0, #4]
 8007cc8:	4648      	mov	r0, r9
 8007cca:	f000 fd9b 	bl	8008804 <_Balloc>
 8007cce:	4682      	mov	sl, r0
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d143      	bne.n	8007d5c <_dtoa_r+0x2fc>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007cda:	4b1f      	ldr	r3, [pc, #124]	@ (8007d58 <_dtoa_r+0x2f8>)
 8007cdc:	e6d4      	b.n	8007a88 <_dtoa_r+0x28>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e7e3      	b.n	8007caa <_dtoa_r+0x24a>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	e7d5      	b.n	8007c92 <_dtoa_r+0x232>
 8007ce6:	2401      	movs	r4, #1
 8007ce8:	2300      	movs	r3, #0
 8007cea:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007cec:	9320      	str	r3, [sp, #128]	@ 0x80
 8007cee:	f04f 3bff 	mov.w	fp, #4294967295
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	2312      	movs	r3, #18
 8007cf6:	f8cd b020 	str.w	fp, [sp, #32]
 8007cfa:	9221      	str	r2, [sp, #132]	@ 0x84
 8007cfc:	e7db      	b.n	8007cb6 <_dtoa_r+0x256>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d02:	e7f4      	b.n	8007cee <_dtoa_r+0x28e>
 8007d04:	f04f 0b01 	mov.w	fp, #1
 8007d08:	465b      	mov	r3, fp
 8007d0a:	f8cd b020 	str.w	fp, [sp, #32]
 8007d0e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8007d12:	e7d0      	b.n	8007cb6 <_dtoa_r+0x256>
 8007d14:	3101      	adds	r1, #1
 8007d16:	0052      	lsls	r2, r2, #1
 8007d18:	e7d1      	b.n	8007cbe <_dtoa_r+0x25e>
 8007d1a:	bf00      	nop
 8007d1c:	f3af 8000 	nop.w
 8007d20:	636f4361 	.word	0x636f4361
 8007d24:	3fd287a7 	.word	0x3fd287a7
 8007d28:	8b60c8b3 	.word	0x8b60c8b3
 8007d2c:	3fc68a28 	.word	0x3fc68a28
 8007d30:	509f79fb 	.word	0x509f79fb
 8007d34:	3fd34413 	.word	0x3fd34413
 8007d38:	0800c64e 	.word	0x0800c64e
 8007d3c:	0800c665 	.word	0x0800c665
 8007d40:	7ff00000 	.word	0x7ff00000
 8007d44:	0800c64a 	.word	0x0800c64a
 8007d48:	0800c619 	.word	0x0800c619
 8007d4c:	0800c618 	.word	0x0800c618
 8007d50:	3ff80000 	.word	0x3ff80000
 8007d54:	0800c818 	.word	0x0800c818
 8007d58:	0800c6bd 	.word	0x0800c6bd
 8007d5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007d60:	6018      	str	r0, [r3, #0]
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	2b0e      	cmp	r3, #14
 8007d66:	f200 80a1 	bhi.w	8007eac <_dtoa_r+0x44c>
 8007d6a:	2c00      	cmp	r4, #0
 8007d6c:	f000 809e 	beq.w	8007eac <_dtoa_r+0x44c>
 8007d70:	2f00      	cmp	r7, #0
 8007d72:	dd33      	ble.n	8007ddc <_dtoa_r+0x37c>
 8007d74:	4b9c      	ldr	r3, [pc, #624]	@ (8007fe8 <_dtoa_r+0x588>)
 8007d76:	f007 020f 	and.w	r2, r7, #15
 8007d7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d7e:	05f8      	lsls	r0, r7, #23
 8007d80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d84:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007d88:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d8c:	d516      	bpl.n	8007dbc <_dtoa_r+0x35c>
 8007d8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d92:	4b96      	ldr	r3, [pc, #600]	@ (8007fec <_dtoa_r+0x58c>)
 8007d94:	2603      	movs	r6, #3
 8007d96:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d9a:	f7f8 fcdf 	bl	800075c <__aeabi_ddiv>
 8007d9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007da2:	f004 040f 	and.w	r4, r4, #15
 8007da6:	4d91      	ldr	r5, [pc, #580]	@ (8007fec <_dtoa_r+0x58c>)
 8007da8:	b954      	cbnz	r4, 8007dc0 <_dtoa_r+0x360>
 8007daa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007dae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007db2:	f7f8 fcd3 	bl	800075c <__aeabi_ddiv>
 8007db6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007dba:	e028      	b.n	8007e0e <_dtoa_r+0x3ae>
 8007dbc:	2602      	movs	r6, #2
 8007dbe:	e7f2      	b.n	8007da6 <_dtoa_r+0x346>
 8007dc0:	07e1      	lsls	r1, r4, #31
 8007dc2:	d508      	bpl.n	8007dd6 <_dtoa_r+0x376>
 8007dc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007dc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dcc:	f7f8 fb9c 	bl	8000508 <__aeabi_dmul>
 8007dd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007dd4:	3601      	adds	r6, #1
 8007dd6:	1064      	asrs	r4, r4, #1
 8007dd8:	3508      	adds	r5, #8
 8007dda:	e7e5      	b.n	8007da8 <_dtoa_r+0x348>
 8007ddc:	f000 80af 	beq.w	8007f3e <_dtoa_r+0x4de>
 8007de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007de4:	427c      	negs	r4, r7
 8007de6:	4b80      	ldr	r3, [pc, #512]	@ (8007fe8 <_dtoa_r+0x588>)
 8007de8:	f004 020f 	and.w	r2, r4, #15
 8007dec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df4:	f7f8 fb88 	bl	8000508 <__aeabi_dmul>
 8007df8:	2602      	movs	r6, #2
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e00:	4d7a      	ldr	r5, [pc, #488]	@ (8007fec <_dtoa_r+0x58c>)
 8007e02:	1124      	asrs	r4, r4, #4
 8007e04:	2c00      	cmp	r4, #0
 8007e06:	f040 808f 	bne.w	8007f28 <_dtoa_r+0x4c8>
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d1d3      	bne.n	8007db6 <_dtoa_r+0x356>
 8007e0e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8007e12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f000 8094 	beq.w	8007f42 <_dtoa_r+0x4e2>
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	4629      	mov	r1, r5
 8007e20:	4b73      	ldr	r3, [pc, #460]	@ (8007ff0 <_dtoa_r+0x590>)
 8007e22:	f7f8 fde3 	bl	80009ec <__aeabi_dcmplt>
 8007e26:	2800      	cmp	r0, #0
 8007e28:	f000 808b 	beq.w	8007f42 <_dtoa_r+0x4e2>
 8007e2c:	9b08      	ldr	r3, [sp, #32]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	f000 8087 	beq.w	8007f42 <_dtoa_r+0x4e2>
 8007e34:	f1bb 0f00 	cmp.w	fp, #0
 8007e38:	dd34      	ble.n	8007ea4 <_dtoa_r+0x444>
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4629      	mov	r1, r5
 8007e40:	4b6c      	ldr	r3, [pc, #432]	@ (8007ff4 <_dtoa_r+0x594>)
 8007e42:	f7f8 fb61 	bl	8000508 <__aeabi_dmul>
 8007e46:	465c      	mov	r4, fp
 8007e48:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e4c:	f107 38ff 	add.w	r8, r7, #4294967295
 8007e50:	3601      	adds	r6, #1
 8007e52:	4630      	mov	r0, r6
 8007e54:	f7f8 faee 	bl	8000434 <__aeabi_i2d>
 8007e58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e5c:	f7f8 fb54 	bl	8000508 <__aeabi_dmul>
 8007e60:	2200      	movs	r2, #0
 8007e62:	4b65      	ldr	r3, [pc, #404]	@ (8007ff8 <_dtoa_r+0x598>)
 8007e64:	f7f8 f99a 	bl	800019c <__adddf3>
 8007e68:	4605      	mov	r5, r0
 8007e6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e6e:	2c00      	cmp	r4, #0
 8007e70:	d16a      	bne.n	8007f48 <_dtoa_r+0x4e8>
 8007e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e76:	2200      	movs	r2, #0
 8007e78:	4b60      	ldr	r3, [pc, #384]	@ (8007ffc <_dtoa_r+0x59c>)
 8007e7a:	f7f8 f98d 	bl	8000198 <__aeabi_dsub>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e86:	462a      	mov	r2, r5
 8007e88:	4633      	mov	r3, r6
 8007e8a:	f7f8 fdcd 	bl	8000a28 <__aeabi_dcmpgt>
 8007e8e:	2800      	cmp	r0, #0
 8007e90:	f040 8298 	bne.w	80083c4 <_dtoa_r+0x964>
 8007e94:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e98:	462a      	mov	r2, r5
 8007e9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e9e:	f7f8 fda5 	bl	80009ec <__aeabi_dcmplt>
 8007ea2:	bb38      	cbnz	r0, 8007ef4 <_dtoa_r+0x494>
 8007ea4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007ea8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007eac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f2c0 8157 	blt.w	8008162 <_dtoa_r+0x702>
 8007eb4:	2f0e      	cmp	r7, #14
 8007eb6:	f300 8154 	bgt.w	8008162 <_dtoa_r+0x702>
 8007eba:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe8 <_dtoa_r+0x588>)
 8007ebc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ec4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ec8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f280 80e5 	bge.w	800809a <_dtoa_r+0x63a>
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f300 80e1 	bgt.w	800809a <_dtoa_r+0x63a>
 8007ed8:	d10c      	bne.n	8007ef4 <_dtoa_r+0x494>
 8007eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	4b46      	ldr	r3, [pc, #280]	@ (8007ffc <_dtoa_r+0x59c>)
 8007ee2:	f7f8 fb11 	bl	8000508 <__aeabi_dmul>
 8007ee6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007eea:	f7f8 fd93 	bl	8000a14 <__aeabi_dcmpge>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f000 8266 	beq.w	80083c0 <_dtoa_r+0x960>
 8007ef4:	2400      	movs	r4, #0
 8007ef6:	4625      	mov	r5, r4
 8007ef8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007efa:	4656      	mov	r6, sl
 8007efc:	ea6f 0803 	mvn.w	r8, r3
 8007f00:	2700      	movs	r7, #0
 8007f02:	4621      	mov	r1, r4
 8007f04:	4648      	mov	r0, r9
 8007f06:	f000 fcbd 	bl	8008884 <_Bfree>
 8007f0a:	2d00      	cmp	r5, #0
 8007f0c:	f000 80bd 	beq.w	800808a <_dtoa_r+0x62a>
 8007f10:	b12f      	cbz	r7, 8007f1e <_dtoa_r+0x4be>
 8007f12:	42af      	cmp	r7, r5
 8007f14:	d003      	beq.n	8007f1e <_dtoa_r+0x4be>
 8007f16:	4639      	mov	r1, r7
 8007f18:	4648      	mov	r0, r9
 8007f1a:	f000 fcb3 	bl	8008884 <_Bfree>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4648      	mov	r0, r9
 8007f22:	f000 fcaf 	bl	8008884 <_Bfree>
 8007f26:	e0b0      	b.n	800808a <_dtoa_r+0x62a>
 8007f28:	07e2      	lsls	r2, r4, #31
 8007f2a:	d505      	bpl.n	8007f38 <_dtoa_r+0x4d8>
 8007f2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f30:	f7f8 faea 	bl	8000508 <__aeabi_dmul>
 8007f34:	2301      	movs	r3, #1
 8007f36:	3601      	adds	r6, #1
 8007f38:	1064      	asrs	r4, r4, #1
 8007f3a:	3508      	adds	r5, #8
 8007f3c:	e762      	b.n	8007e04 <_dtoa_r+0x3a4>
 8007f3e:	2602      	movs	r6, #2
 8007f40:	e765      	b.n	8007e0e <_dtoa_r+0x3ae>
 8007f42:	46b8      	mov	r8, r7
 8007f44:	9c08      	ldr	r4, [sp, #32]
 8007f46:	e784      	b.n	8007e52 <_dtoa_r+0x3f2>
 8007f48:	4b27      	ldr	r3, [pc, #156]	@ (8007fe8 <_dtoa_r+0x588>)
 8007f4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f54:	4454      	add	r4, sl
 8007f56:	2900      	cmp	r1, #0
 8007f58:	d054      	beq.n	8008004 <_dtoa_r+0x5a4>
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	4928      	ldr	r1, [pc, #160]	@ (8008000 <_dtoa_r+0x5a0>)
 8007f5e:	f7f8 fbfd 	bl	800075c <__aeabi_ddiv>
 8007f62:	4633      	mov	r3, r6
 8007f64:	462a      	mov	r2, r5
 8007f66:	f7f8 f917 	bl	8000198 <__aeabi_dsub>
 8007f6a:	4656      	mov	r6, sl
 8007f6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f74:	f7f8 fd78 	bl	8000a68 <__aeabi_d2iz>
 8007f78:	4605      	mov	r5, r0
 8007f7a:	f7f8 fa5b 	bl	8000434 <__aeabi_i2d>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f86:	f7f8 f907 	bl	8000198 <__aeabi_dsub>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	3530      	adds	r5, #48	@ 0x30
 8007f90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007f94:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f98:	f806 5b01 	strb.w	r5, [r6], #1
 8007f9c:	f7f8 fd26 	bl	80009ec <__aeabi_dcmplt>
 8007fa0:	2800      	cmp	r0, #0
 8007fa2:	d172      	bne.n	800808a <_dtoa_r+0x62a>
 8007fa4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fa8:	2000      	movs	r0, #0
 8007faa:	4911      	ldr	r1, [pc, #68]	@ (8007ff0 <_dtoa_r+0x590>)
 8007fac:	f7f8 f8f4 	bl	8000198 <__aeabi_dsub>
 8007fb0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fb4:	f7f8 fd1a 	bl	80009ec <__aeabi_dcmplt>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	f040 80b4 	bne.w	8008126 <_dtoa_r+0x6c6>
 8007fbe:	42a6      	cmp	r6, r4
 8007fc0:	f43f af70 	beq.w	8007ea4 <_dtoa_r+0x444>
 8007fc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fc8:	2200      	movs	r2, #0
 8007fca:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff4 <_dtoa_r+0x594>)
 8007fcc:	f7f8 fa9c 	bl	8000508 <__aeabi_dmul>
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fda:	4b06      	ldr	r3, [pc, #24]	@ (8007ff4 <_dtoa_r+0x594>)
 8007fdc:	f7f8 fa94 	bl	8000508 <__aeabi_dmul>
 8007fe0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fe4:	e7c4      	b.n	8007f70 <_dtoa_r+0x510>
 8007fe6:	bf00      	nop
 8007fe8:	0800c818 	.word	0x0800c818
 8007fec:	0800c7f0 	.word	0x0800c7f0
 8007ff0:	3ff00000 	.word	0x3ff00000
 8007ff4:	40240000 	.word	0x40240000
 8007ff8:	401c0000 	.word	0x401c0000
 8007ffc:	40140000 	.word	0x40140000
 8008000:	3fe00000 	.word	0x3fe00000
 8008004:	4631      	mov	r1, r6
 8008006:	4628      	mov	r0, r5
 8008008:	f7f8 fa7e 	bl	8000508 <__aeabi_dmul>
 800800c:	4656      	mov	r6, sl
 800800e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008012:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008018:	f7f8 fd26 	bl	8000a68 <__aeabi_d2iz>
 800801c:	4605      	mov	r5, r0
 800801e:	f7f8 fa09 	bl	8000434 <__aeabi_i2d>
 8008022:	4602      	mov	r2, r0
 8008024:	460b      	mov	r3, r1
 8008026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802a:	f7f8 f8b5 	bl	8000198 <__aeabi_dsub>
 800802e:	4602      	mov	r2, r0
 8008030:	460b      	mov	r3, r1
 8008032:	3530      	adds	r5, #48	@ 0x30
 8008034:	f806 5b01 	strb.w	r5, [r6], #1
 8008038:	42a6      	cmp	r6, r4
 800803a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800803e:	f04f 0200 	mov.w	r2, #0
 8008042:	d124      	bne.n	800808e <_dtoa_r+0x62e>
 8008044:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008048:	4bae      	ldr	r3, [pc, #696]	@ (8008304 <_dtoa_r+0x8a4>)
 800804a:	f7f8 f8a7 	bl	800019c <__adddf3>
 800804e:	4602      	mov	r2, r0
 8008050:	460b      	mov	r3, r1
 8008052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008056:	f7f8 fce7 	bl	8000a28 <__aeabi_dcmpgt>
 800805a:	2800      	cmp	r0, #0
 800805c:	d163      	bne.n	8008126 <_dtoa_r+0x6c6>
 800805e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008062:	2000      	movs	r0, #0
 8008064:	49a7      	ldr	r1, [pc, #668]	@ (8008304 <_dtoa_r+0x8a4>)
 8008066:	f7f8 f897 	bl	8000198 <__aeabi_dsub>
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008072:	f7f8 fcbb 	bl	80009ec <__aeabi_dcmplt>
 8008076:	2800      	cmp	r0, #0
 8008078:	f43f af14 	beq.w	8007ea4 <_dtoa_r+0x444>
 800807c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800807e:	1e73      	subs	r3, r6, #1
 8008080:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008082:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008086:	2b30      	cmp	r3, #48	@ 0x30
 8008088:	d0f8      	beq.n	800807c <_dtoa_r+0x61c>
 800808a:	4647      	mov	r7, r8
 800808c:	e03b      	b.n	8008106 <_dtoa_r+0x6a6>
 800808e:	4b9e      	ldr	r3, [pc, #632]	@ (8008308 <_dtoa_r+0x8a8>)
 8008090:	f7f8 fa3a 	bl	8000508 <__aeabi_dmul>
 8008094:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008098:	e7bc      	b.n	8008014 <_dtoa_r+0x5b4>
 800809a:	4656      	mov	r6, sl
 800809c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80080a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080a4:	4620      	mov	r0, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	f7f8 fb58 	bl	800075c <__aeabi_ddiv>
 80080ac:	f7f8 fcdc 	bl	8000a68 <__aeabi_d2iz>
 80080b0:	4680      	mov	r8, r0
 80080b2:	f7f8 f9bf 	bl	8000434 <__aeabi_i2d>
 80080b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080ba:	f7f8 fa25 	bl	8000508 <__aeabi_dmul>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4620      	mov	r0, r4
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7f8 f867 	bl	8000198 <__aeabi_dsub>
 80080ca:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80080ce:	9d08      	ldr	r5, [sp, #32]
 80080d0:	f806 4b01 	strb.w	r4, [r6], #1
 80080d4:	eba6 040a 	sub.w	r4, r6, sl
 80080d8:	42a5      	cmp	r5, r4
 80080da:	4602      	mov	r2, r0
 80080dc:	460b      	mov	r3, r1
 80080de:	d133      	bne.n	8008148 <_dtoa_r+0x6e8>
 80080e0:	f7f8 f85c 	bl	800019c <__adddf3>
 80080e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080e8:	4604      	mov	r4, r0
 80080ea:	460d      	mov	r5, r1
 80080ec:	f7f8 fc9c 	bl	8000a28 <__aeabi_dcmpgt>
 80080f0:	b9c0      	cbnz	r0, 8008124 <_dtoa_r+0x6c4>
 80080f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 fc6d 	bl	80009d8 <__aeabi_dcmpeq>
 80080fe:	b110      	cbz	r0, 8008106 <_dtoa_r+0x6a6>
 8008100:	f018 0f01 	tst.w	r8, #1
 8008104:	d10e      	bne.n	8008124 <_dtoa_r+0x6c4>
 8008106:	4648      	mov	r0, r9
 8008108:	9903      	ldr	r1, [sp, #12]
 800810a:	f000 fbbb 	bl	8008884 <_Bfree>
 800810e:	2300      	movs	r3, #0
 8008110:	7033      	strb	r3, [r6, #0]
 8008112:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008114:	3701      	adds	r7, #1
 8008116:	601f      	str	r7, [r3, #0]
 8008118:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 824b 	beq.w	80085b6 <_dtoa_r+0xb56>
 8008120:	601e      	str	r6, [r3, #0]
 8008122:	e248      	b.n	80085b6 <_dtoa_r+0xb56>
 8008124:	46b8      	mov	r8, r7
 8008126:	4633      	mov	r3, r6
 8008128:	461e      	mov	r6, r3
 800812a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800812e:	2a39      	cmp	r2, #57	@ 0x39
 8008130:	d106      	bne.n	8008140 <_dtoa_r+0x6e0>
 8008132:	459a      	cmp	sl, r3
 8008134:	d1f8      	bne.n	8008128 <_dtoa_r+0x6c8>
 8008136:	2230      	movs	r2, #48	@ 0x30
 8008138:	f108 0801 	add.w	r8, r8, #1
 800813c:	f88a 2000 	strb.w	r2, [sl]
 8008140:	781a      	ldrb	r2, [r3, #0]
 8008142:	3201      	adds	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]
 8008146:	e7a0      	b.n	800808a <_dtoa_r+0x62a>
 8008148:	2200      	movs	r2, #0
 800814a:	4b6f      	ldr	r3, [pc, #444]	@ (8008308 <_dtoa_r+0x8a8>)
 800814c:	f7f8 f9dc 	bl	8000508 <__aeabi_dmul>
 8008150:	2200      	movs	r2, #0
 8008152:	2300      	movs	r3, #0
 8008154:	4604      	mov	r4, r0
 8008156:	460d      	mov	r5, r1
 8008158:	f7f8 fc3e 	bl	80009d8 <__aeabi_dcmpeq>
 800815c:	2800      	cmp	r0, #0
 800815e:	d09f      	beq.n	80080a0 <_dtoa_r+0x640>
 8008160:	e7d1      	b.n	8008106 <_dtoa_r+0x6a6>
 8008162:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008164:	2a00      	cmp	r2, #0
 8008166:	f000 80ea 	beq.w	800833e <_dtoa_r+0x8de>
 800816a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800816c:	2a01      	cmp	r2, #1
 800816e:	f300 80cd 	bgt.w	800830c <_dtoa_r+0x8ac>
 8008172:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008174:	2a00      	cmp	r2, #0
 8008176:	f000 80c1 	beq.w	80082fc <_dtoa_r+0x89c>
 800817a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800817e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008180:	9e04      	ldr	r6, [sp, #16]
 8008182:	9a04      	ldr	r2, [sp, #16]
 8008184:	2101      	movs	r1, #1
 8008186:	441a      	add	r2, r3
 8008188:	9204      	str	r2, [sp, #16]
 800818a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800818c:	4648      	mov	r0, r9
 800818e:	441a      	add	r2, r3
 8008190:	9209      	str	r2, [sp, #36]	@ 0x24
 8008192:	f000 fc75 	bl	8008a80 <__i2b>
 8008196:	4605      	mov	r5, r0
 8008198:	b166      	cbz	r6, 80081b4 <_dtoa_r+0x754>
 800819a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd09      	ble.n	80081b4 <_dtoa_r+0x754>
 80081a0:	42b3      	cmp	r3, r6
 80081a2:	bfa8      	it	ge
 80081a4:	4633      	movge	r3, r6
 80081a6:	9a04      	ldr	r2, [sp, #16]
 80081a8:	1af6      	subs	r6, r6, r3
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	9204      	str	r2, [sp, #16]
 80081ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b6:	b30b      	cbz	r3, 80081fc <_dtoa_r+0x79c>
 80081b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80c6 	beq.w	800834c <_dtoa_r+0x8ec>
 80081c0:	2c00      	cmp	r4, #0
 80081c2:	f000 80c0 	beq.w	8008346 <_dtoa_r+0x8e6>
 80081c6:	4629      	mov	r1, r5
 80081c8:	4622      	mov	r2, r4
 80081ca:	4648      	mov	r0, r9
 80081cc:	f000 fd10 	bl	8008bf0 <__pow5mult>
 80081d0:	9a03      	ldr	r2, [sp, #12]
 80081d2:	4601      	mov	r1, r0
 80081d4:	4605      	mov	r5, r0
 80081d6:	4648      	mov	r0, r9
 80081d8:	f000 fc68 	bl	8008aac <__multiply>
 80081dc:	9903      	ldr	r1, [sp, #12]
 80081de:	4680      	mov	r8, r0
 80081e0:	4648      	mov	r0, r9
 80081e2:	f000 fb4f 	bl	8008884 <_Bfree>
 80081e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081e8:	1b1b      	subs	r3, r3, r4
 80081ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80081ec:	f000 80b1 	beq.w	8008352 <_dtoa_r+0x8f2>
 80081f0:	4641      	mov	r1, r8
 80081f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081f4:	4648      	mov	r0, r9
 80081f6:	f000 fcfb 	bl	8008bf0 <__pow5mult>
 80081fa:	9003      	str	r0, [sp, #12]
 80081fc:	2101      	movs	r1, #1
 80081fe:	4648      	mov	r0, r9
 8008200:	f000 fc3e 	bl	8008a80 <__i2b>
 8008204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008206:	4604      	mov	r4, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 81d8 	beq.w	80085be <_dtoa_r+0xb5e>
 800820e:	461a      	mov	r2, r3
 8008210:	4601      	mov	r1, r0
 8008212:	4648      	mov	r0, r9
 8008214:	f000 fcec 	bl	8008bf0 <__pow5mult>
 8008218:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800821a:	4604      	mov	r4, r0
 800821c:	2b01      	cmp	r3, #1
 800821e:	f300 809f 	bgt.w	8008360 <_dtoa_r+0x900>
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	f040 8097 	bne.w	8008358 <_dtoa_r+0x8f8>
 800822a:	9b07      	ldr	r3, [sp, #28]
 800822c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008230:	2b00      	cmp	r3, #0
 8008232:	f040 8093 	bne.w	800835c <_dtoa_r+0x8fc>
 8008236:	9b07      	ldr	r3, [sp, #28]
 8008238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800823c:	0d1b      	lsrs	r3, r3, #20
 800823e:	051b      	lsls	r3, r3, #20
 8008240:	b133      	cbz	r3, 8008250 <_dtoa_r+0x7f0>
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	3301      	adds	r3, #1
 8008246:	9304      	str	r3, [sp, #16]
 8008248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800824a:	3301      	adds	r3, #1
 800824c:	9309      	str	r3, [sp, #36]	@ 0x24
 800824e:	2301      	movs	r3, #1
 8008250:	930a      	str	r3, [sp, #40]	@ 0x28
 8008252:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 81b8 	beq.w	80085ca <_dtoa_r+0xb6a>
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008260:	6918      	ldr	r0, [r3, #16]
 8008262:	f000 fbc1 	bl	80089e8 <__hi0bits>
 8008266:	f1c0 0020 	rsb	r0, r0, #32
 800826a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826c:	4418      	add	r0, r3
 800826e:	f010 001f 	ands.w	r0, r0, #31
 8008272:	f000 8082 	beq.w	800837a <_dtoa_r+0x91a>
 8008276:	f1c0 0320 	rsb	r3, r0, #32
 800827a:	2b04      	cmp	r3, #4
 800827c:	dd73      	ble.n	8008366 <_dtoa_r+0x906>
 800827e:	9b04      	ldr	r3, [sp, #16]
 8008280:	f1c0 001c 	rsb	r0, r0, #28
 8008284:	4403      	add	r3, r0
 8008286:	9304      	str	r3, [sp, #16]
 8008288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800828a:	4406      	add	r6, r0
 800828c:	4403      	add	r3, r0
 800828e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	dd05      	ble.n	80082a2 <_dtoa_r+0x842>
 8008296:	461a      	mov	r2, r3
 8008298:	4648      	mov	r0, r9
 800829a:	9903      	ldr	r1, [sp, #12]
 800829c:	f000 fd02 	bl	8008ca4 <__lshift>
 80082a0:	9003      	str	r0, [sp, #12]
 80082a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dd05      	ble.n	80082b4 <_dtoa_r+0x854>
 80082a8:	4621      	mov	r1, r4
 80082aa:	461a      	mov	r2, r3
 80082ac:	4648      	mov	r0, r9
 80082ae:	f000 fcf9 	bl	8008ca4 <__lshift>
 80082b2:	4604      	mov	r4, r0
 80082b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d061      	beq.n	800837e <_dtoa_r+0x91e>
 80082ba:	4621      	mov	r1, r4
 80082bc:	9803      	ldr	r0, [sp, #12]
 80082be:	f000 fd5d 	bl	8008d7c <__mcmp>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	da5b      	bge.n	800837e <_dtoa_r+0x91e>
 80082c6:	2300      	movs	r3, #0
 80082c8:	220a      	movs	r2, #10
 80082ca:	4648      	mov	r0, r9
 80082cc:	9903      	ldr	r1, [sp, #12]
 80082ce:	f000 fafb 	bl	80088c8 <__multadd>
 80082d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80082d4:	f107 38ff 	add.w	r8, r7, #4294967295
 80082d8:	9003      	str	r0, [sp, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 8177 	beq.w	80085ce <_dtoa_r+0xb6e>
 80082e0:	4629      	mov	r1, r5
 80082e2:	2300      	movs	r3, #0
 80082e4:	220a      	movs	r2, #10
 80082e6:	4648      	mov	r0, r9
 80082e8:	f000 faee 	bl	80088c8 <__multadd>
 80082ec:	f1bb 0f00 	cmp.w	fp, #0
 80082f0:	4605      	mov	r5, r0
 80082f2:	dc6f      	bgt.n	80083d4 <_dtoa_r+0x974>
 80082f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	dc49      	bgt.n	800838e <_dtoa_r+0x92e>
 80082fa:	e06b      	b.n	80083d4 <_dtoa_r+0x974>
 80082fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008302:	e73c      	b.n	800817e <_dtoa_r+0x71e>
 8008304:	3fe00000 	.word	0x3fe00000
 8008308:	40240000 	.word	0x40240000
 800830c:	9b08      	ldr	r3, [sp, #32]
 800830e:	1e5c      	subs	r4, r3, #1
 8008310:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008312:	42a3      	cmp	r3, r4
 8008314:	db09      	blt.n	800832a <_dtoa_r+0x8ca>
 8008316:	1b1c      	subs	r4, r3, r4
 8008318:	9b08      	ldr	r3, [sp, #32]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f6bf af30 	bge.w	8008180 <_dtoa_r+0x720>
 8008320:	9b04      	ldr	r3, [sp, #16]
 8008322:	9a08      	ldr	r2, [sp, #32]
 8008324:	1a9e      	subs	r6, r3, r2
 8008326:	2300      	movs	r3, #0
 8008328:	e72b      	b.n	8008182 <_dtoa_r+0x722>
 800832a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800832c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800832e:	1ae3      	subs	r3, r4, r3
 8008330:	441a      	add	r2, r3
 8008332:	940a      	str	r4, [sp, #40]	@ 0x28
 8008334:	9e04      	ldr	r6, [sp, #16]
 8008336:	2400      	movs	r4, #0
 8008338:	9b08      	ldr	r3, [sp, #32]
 800833a:	920e      	str	r2, [sp, #56]	@ 0x38
 800833c:	e721      	b.n	8008182 <_dtoa_r+0x722>
 800833e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008340:	9e04      	ldr	r6, [sp, #16]
 8008342:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008344:	e728      	b.n	8008198 <_dtoa_r+0x738>
 8008346:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800834a:	e751      	b.n	80081f0 <_dtoa_r+0x790>
 800834c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800834e:	9903      	ldr	r1, [sp, #12]
 8008350:	e750      	b.n	80081f4 <_dtoa_r+0x794>
 8008352:	f8cd 800c 	str.w	r8, [sp, #12]
 8008356:	e751      	b.n	80081fc <_dtoa_r+0x79c>
 8008358:	2300      	movs	r3, #0
 800835a:	e779      	b.n	8008250 <_dtoa_r+0x7f0>
 800835c:	9b06      	ldr	r3, [sp, #24]
 800835e:	e777      	b.n	8008250 <_dtoa_r+0x7f0>
 8008360:	2300      	movs	r3, #0
 8008362:	930a      	str	r3, [sp, #40]	@ 0x28
 8008364:	e779      	b.n	800825a <_dtoa_r+0x7fa>
 8008366:	d093      	beq.n	8008290 <_dtoa_r+0x830>
 8008368:	9a04      	ldr	r2, [sp, #16]
 800836a:	331c      	adds	r3, #28
 800836c:	441a      	add	r2, r3
 800836e:	9204      	str	r2, [sp, #16]
 8008370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008372:	441e      	add	r6, r3
 8008374:	441a      	add	r2, r3
 8008376:	9209      	str	r2, [sp, #36]	@ 0x24
 8008378:	e78a      	b.n	8008290 <_dtoa_r+0x830>
 800837a:	4603      	mov	r3, r0
 800837c:	e7f4      	b.n	8008368 <_dtoa_r+0x908>
 800837e:	9b08      	ldr	r3, [sp, #32]
 8008380:	46b8      	mov	r8, r7
 8008382:	2b00      	cmp	r3, #0
 8008384:	dc20      	bgt.n	80083c8 <_dtoa_r+0x968>
 8008386:	469b      	mov	fp, r3
 8008388:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800838a:	2b02      	cmp	r3, #2
 800838c:	dd1e      	ble.n	80083cc <_dtoa_r+0x96c>
 800838e:	f1bb 0f00 	cmp.w	fp, #0
 8008392:	f47f adb1 	bne.w	8007ef8 <_dtoa_r+0x498>
 8008396:	4621      	mov	r1, r4
 8008398:	465b      	mov	r3, fp
 800839a:	2205      	movs	r2, #5
 800839c:	4648      	mov	r0, r9
 800839e:	f000 fa93 	bl	80088c8 <__multadd>
 80083a2:	4601      	mov	r1, r0
 80083a4:	4604      	mov	r4, r0
 80083a6:	9803      	ldr	r0, [sp, #12]
 80083a8:	f000 fce8 	bl	8008d7c <__mcmp>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f77f ada3 	ble.w	8007ef8 <_dtoa_r+0x498>
 80083b2:	4656      	mov	r6, sl
 80083b4:	2331      	movs	r3, #49	@ 0x31
 80083b6:	f108 0801 	add.w	r8, r8, #1
 80083ba:	f806 3b01 	strb.w	r3, [r6], #1
 80083be:	e59f      	b.n	8007f00 <_dtoa_r+0x4a0>
 80083c0:	46b8      	mov	r8, r7
 80083c2:	9c08      	ldr	r4, [sp, #32]
 80083c4:	4625      	mov	r5, r4
 80083c6:	e7f4      	b.n	80083b2 <_dtoa_r+0x952>
 80083c8:	f8dd b020 	ldr.w	fp, [sp, #32]
 80083cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8101 	beq.w	80085d6 <_dtoa_r+0xb76>
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	dd05      	ble.n	80083e4 <_dtoa_r+0x984>
 80083d8:	4629      	mov	r1, r5
 80083da:	4632      	mov	r2, r6
 80083dc:	4648      	mov	r0, r9
 80083de:	f000 fc61 	bl	8008ca4 <__lshift>
 80083e2:	4605      	mov	r5, r0
 80083e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d05c      	beq.n	80084a4 <_dtoa_r+0xa44>
 80083ea:	4648      	mov	r0, r9
 80083ec:	6869      	ldr	r1, [r5, #4]
 80083ee:	f000 fa09 	bl	8008804 <_Balloc>
 80083f2:	4606      	mov	r6, r0
 80083f4:	b928      	cbnz	r0, 8008402 <_dtoa_r+0x9a2>
 80083f6:	4602      	mov	r2, r0
 80083f8:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80083fc:	4b80      	ldr	r3, [pc, #512]	@ (8008600 <_dtoa_r+0xba0>)
 80083fe:	f7ff bb43 	b.w	8007a88 <_dtoa_r+0x28>
 8008402:	692a      	ldr	r2, [r5, #16]
 8008404:	f105 010c 	add.w	r1, r5, #12
 8008408:	3202      	adds	r2, #2
 800840a:	0092      	lsls	r2, r2, #2
 800840c:	300c      	adds	r0, #12
 800840e:	f7ff fa8a 	bl	8007926 <memcpy>
 8008412:	2201      	movs	r2, #1
 8008414:	4631      	mov	r1, r6
 8008416:	4648      	mov	r0, r9
 8008418:	f000 fc44 	bl	8008ca4 <__lshift>
 800841c:	462f      	mov	r7, r5
 800841e:	4605      	mov	r5, r0
 8008420:	f10a 0301 	add.w	r3, sl, #1
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	eb0a 030b 	add.w	r3, sl, fp
 800842a:	930a      	str	r3, [sp, #40]	@ 0x28
 800842c:	9b06      	ldr	r3, [sp, #24]
 800842e:	f003 0301 	and.w	r3, r3, #1
 8008432:	9309      	str	r3, [sp, #36]	@ 0x24
 8008434:	9b04      	ldr	r3, [sp, #16]
 8008436:	4621      	mov	r1, r4
 8008438:	9803      	ldr	r0, [sp, #12]
 800843a:	f103 3bff 	add.w	fp, r3, #4294967295
 800843e:	f7ff fa85 	bl	800794c <quorem>
 8008442:	4603      	mov	r3, r0
 8008444:	4639      	mov	r1, r7
 8008446:	3330      	adds	r3, #48	@ 0x30
 8008448:	9006      	str	r0, [sp, #24]
 800844a:	9803      	ldr	r0, [sp, #12]
 800844c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800844e:	f000 fc95 	bl	8008d7c <__mcmp>
 8008452:	462a      	mov	r2, r5
 8008454:	9008      	str	r0, [sp, #32]
 8008456:	4621      	mov	r1, r4
 8008458:	4648      	mov	r0, r9
 800845a:	f000 fcab 	bl	8008db4 <__mdiff>
 800845e:	68c2      	ldr	r2, [r0, #12]
 8008460:	4606      	mov	r6, r0
 8008462:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008464:	bb02      	cbnz	r2, 80084a8 <_dtoa_r+0xa48>
 8008466:	4601      	mov	r1, r0
 8008468:	9803      	ldr	r0, [sp, #12]
 800846a:	f000 fc87 	bl	8008d7c <__mcmp>
 800846e:	4602      	mov	r2, r0
 8008470:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008472:	4631      	mov	r1, r6
 8008474:	4648      	mov	r0, r9
 8008476:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 800847a:	f000 fa03 	bl	8008884 <_Bfree>
 800847e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008480:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008482:	9e04      	ldr	r6, [sp, #16]
 8008484:	ea42 0103 	orr.w	r1, r2, r3
 8008488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800848a:	4319      	orrs	r1, r3
 800848c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800848e:	d10d      	bne.n	80084ac <_dtoa_r+0xa4c>
 8008490:	2b39      	cmp	r3, #57	@ 0x39
 8008492:	d027      	beq.n	80084e4 <_dtoa_r+0xa84>
 8008494:	9a08      	ldr	r2, [sp, #32]
 8008496:	2a00      	cmp	r2, #0
 8008498:	dd01      	ble.n	800849e <_dtoa_r+0xa3e>
 800849a:	9b06      	ldr	r3, [sp, #24]
 800849c:	3331      	adds	r3, #49	@ 0x31
 800849e:	f88b 3000 	strb.w	r3, [fp]
 80084a2:	e52e      	b.n	8007f02 <_dtoa_r+0x4a2>
 80084a4:	4628      	mov	r0, r5
 80084a6:	e7b9      	b.n	800841c <_dtoa_r+0x9bc>
 80084a8:	2201      	movs	r2, #1
 80084aa:	e7e2      	b.n	8008472 <_dtoa_r+0xa12>
 80084ac:	9908      	ldr	r1, [sp, #32]
 80084ae:	2900      	cmp	r1, #0
 80084b0:	db04      	blt.n	80084bc <_dtoa_r+0xa5c>
 80084b2:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80084b4:	4301      	orrs	r1, r0
 80084b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084b8:	4301      	orrs	r1, r0
 80084ba:	d120      	bne.n	80084fe <_dtoa_r+0xa9e>
 80084bc:	2a00      	cmp	r2, #0
 80084be:	ddee      	ble.n	800849e <_dtoa_r+0xa3e>
 80084c0:	2201      	movs	r2, #1
 80084c2:	9903      	ldr	r1, [sp, #12]
 80084c4:	4648      	mov	r0, r9
 80084c6:	9304      	str	r3, [sp, #16]
 80084c8:	f000 fbec 	bl	8008ca4 <__lshift>
 80084cc:	4621      	mov	r1, r4
 80084ce:	9003      	str	r0, [sp, #12]
 80084d0:	f000 fc54 	bl	8008d7c <__mcmp>
 80084d4:	2800      	cmp	r0, #0
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	dc02      	bgt.n	80084e0 <_dtoa_r+0xa80>
 80084da:	d1e0      	bne.n	800849e <_dtoa_r+0xa3e>
 80084dc:	07da      	lsls	r2, r3, #31
 80084de:	d5de      	bpl.n	800849e <_dtoa_r+0xa3e>
 80084e0:	2b39      	cmp	r3, #57	@ 0x39
 80084e2:	d1da      	bne.n	800849a <_dtoa_r+0xa3a>
 80084e4:	2339      	movs	r3, #57	@ 0x39
 80084e6:	f88b 3000 	strb.w	r3, [fp]
 80084ea:	4633      	mov	r3, r6
 80084ec:	461e      	mov	r6, r3
 80084ee:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	2a39      	cmp	r2, #57	@ 0x39
 80084f6:	d04e      	beq.n	8008596 <_dtoa_r+0xb36>
 80084f8:	3201      	adds	r2, #1
 80084fa:	701a      	strb	r2, [r3, #0]
 80084fc:	e501      	b.n	8007f02 <_dtoa_r+0x4a2>
 80084fe:	2a00      	cmp	r2, #0
 8008500:	dd03      	ble.n	800850a <_dtoa_r+0xaaa>
 8008502:	2b39      	cmp	r3, #57	@ 0x39
 8008504:	d0ee      	beq.n	80084e4 <_dtoa_r+0xa84>
 8008506:	3301      	adds	r3, #1
 8008508:	e7c9      	b.n	800849e <_dtoa_r+0xa3e>
 800850a:	9a04      	ldr	r2, [sp, #16]
 800850c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800850e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008512:	428a      	cmp	r2, r1
 8008514:	d028      	beq.n	8008568 <_dtoa_r+0xb08>
 8008516:	2300      	movs	r3, #0
 8008518:	220a      	movs	r2, #10
 800851a:	9903      	ldr	r1, [sp, #12]
 800851c:	4648      	mov	r0, r9
 800851e:	f000 f9d3 	bl	80088c8 <__multadd>
 8008522:	42af      	cmp	r7, r5
 8008524:	9003      	str	r0, [sp, #12]
 8008526:	f04f 0300 	mov.w	r3, #0
 800852a:	f04f 020a 	mov.w	r2, #10
 800852e:	4639      	mov	r1, r7
 8008530:	4648      	mov	r0, r9
 8008532:	d107      	bne.n	8008544 <_dtoa_r+0xae4>
 8008534:	f000 f9c8 	bl	80088c8 <__multadd>
 8008538:	4607      	mov	r7, r0
 800853a:	4605      	mov	r5, r0
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	3301      	adds	r3, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	e777      	b.n	8008434 <_dtoa_r+0x9d4>
 8008544:	f000 f9c0 	bl	80088c8 <__multadd>
 8008548:	4629      	mov	r1, r5
 800854a:	4607      	mov	r7, r0
 800854c:	2300      	movs	r3, #0
 800854e:	220a      	movs	r2, #10
 8008550:	4648      	mov	r0, r9
 8008552:	f000 f9b9 	bl	80088c8 <__multadd>
 8008556:	4605      	mov	r5, r0
 8008558:	e7f0      	b.n	800853c <_dtoa_r+0xadc>
 800855a:	f1bb 0f00 	cmp.w	fp, #0
 800855e:	bfcc      	ite	gt
 8008560:	465e      	movgt	r6, fp
 8008562:	2601      	movle	r6, #1
 8008564:	2700      	movs	r7, #0
 8008566:	4456      	add	r6, sl
 8008568:	2201      	movs	r2, #1
 800856a:	9903      	ldr	r1, [sp, #12]
 800856c:	4648      	mov	r0, r9
 800856e:	9304      	str	r3, [sp, #16]
 8008570:	f000 fb98 	bl	8008ca4 <__lshift>
 8008574:	4621      	mov	r1, r4
 8008576:	9003      	str	r0, [sp, #12]
 8008578:	f000 fc00 	bl	8008d7c <__mcmp>
 800857c:	2800      	cmp	r0, #0
 800857e:	dcb4      	bgt.n	80084ea <_dtoa_r+0xa8a>
 8008580:	d102      	bne.n	8008588 <_dtoa_r+0xb28>
 8008582:	9b04      	ldr	r3, [sp, #16]
 8008584:	07db      	lsls	r3, r3, #31
 8008586:	d4b0      	bmi.n	80084ea <_dtoa_r+0xa8a>
 8008588:	4633      	mov	r3, r6
 800858a:	461e      	mov	r6, r3
 800858c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008590:	2a30      	cmp	r2, #48	@ 0x30
 8008592:	d0fa      	beq.n	800858a <_dtoa_r+0xb2a>
 8008594:	e4b5      	b.n	8007f02 <_dtoa_r+0x4a2>
 8008596:	459a      	cmp	sl, r3
 8008598:	d1a8      	bne.n	80084ec <_dtoa_r+0xa8c>
 800859a:	2331      	movs	r3, #49	@ 0x31
 800859c:	f108 0801 	add.w	r8, r8, #1
 80085a0:	f88a 3000 	strb.w	r3, [sl]
 80085a4:	e4ad      	b.n	8007f02 <_dtoa_r+0x4a2>
 80085a6:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008604 <_dtoa_r+0xba4>
 80085ac:	b11b      	cbz	r3, 80085b6 <_dtoa_r+0xb56>
 80085ae:	f10a 0308 	add.w	r3, sl, #8
 80085b2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80085b4:	6013      	str	r3, [r2, #0]
 80085b6:	4650      	mov	r0, sl
 80085b8:	b017      	add	sp, #92	@ 0x5c
 80085ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	f77f ae2e 	ble.w	8008222 <_dtoa_r+0x7c2>
 80085c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085ca:	2001      	movs	r0, #1
 80085cc:	e64d      	b.n	800826a <_dtoa_r+0x80a>
 80085ce:	f1bb 0f00 	cmp.w	fp, #0
 80085d2:	f77f aed9 	ble.w	8008388 <_dtoa_r+0x928>
 80085d6:	4656      	mov	r6, sl
 80085d8:	4621      	mov	r1, r4
 80085da:	9803      	ldr	r0, [sp, #12]
 80085dc:	f7ff f9b6 	bl	800794c <quorem>
 80085e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80085e4:	f806 3b01 	strb.w	r3, [r6], #1
 80085e8:	eba6 020a 	sub.w	r2, r6, sl
 80085ec:	4593      	cmp	fp, r2
 80085ee:	ddb4      	ble.n	800855a <_dtoa_r+0xafa>
 80085f0:	2300      	movs	r3, #0
 80085f2:	220a      	movs	r2, #10
 80085f4:	4648      	mov	r0, r9
 80085f6:	9903      	ldr	r1, [sp, #12]
 80085f8:	f000 f966 	bl	80088c8 <__multadd>
 80085fc:	9003      	str	r0, [sp, #12]
 80085fe:	e7eb      	b.n	80085d8 <_dtoa_r+0xb78>
 8008600:	0800c6bd 	.word	0x0800c6bd
 8008604:	0800c641 	.word	0x0800c641

08008608 <_free_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	2900      	cmp	r1, #0
 800860e:	d040      	beq.n	8008692 <_free_r+0x8a>
 8008610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008614:	1f0c      	subs	r4, r1, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	18e4      	addlt	r4, r4, r3
 800861c:	f000 f8e6 	bl	80087ec <__malloc_lock>
 8008620:	4a1c      	ldr	r2, [pc, #112]	@ (8008694 <_free_r+0x8c>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x2c>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008630:	f000 b8e2 	b.w	80087f8 <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x42>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	1821      	adds	r1, r4, r0
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1809      	addeq	r1, r1, r0
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x1e>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x4c>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x42>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1850      	adds	r0, r2, r1
 8008658:	42a0      	cmp	r0, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x6c>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4401      	add	r1, r0
 8008660:	1850      	adds	r0, r2, r1
 8008662:	4283      	cmp	r3, r0
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x22>
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4408      	add	r0, r1
 800866e:	6010      	str	r0, [r2, #0]
 8008670:	6053      	str	r3, [r2, #4]
 8008672:	e7da      	b.n	800862a <_free_r+0x22>
 8008674:	d902      	bls.n	800867c <_free_r+0x74>
 8008676:	230c      	movs	r3, #12
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x22>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	1821      	adds	r1, r4, r0
 8008680:	428b      	cmp	r3, r1
 8008682:	bf01      	itttt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	1809      	addeq	r1, r1, r0
 800868a:	6021      	streq	r1, [r4, #0]
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6054      	str	r4, [r2, #4]
 8008690:	e7cb      	b.n	800862a <_free_r+0x22>
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	20001284 	.word	0x20001284

08008698 <malloc>:
 8008698:	4b02      	ldr	r3, [pc, #8]	@ (80086a4 <malloc+0xc>)
 800869a:	4601      	mov	r1, r0
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	f000 b825 	b.w	80086ec <_malloc_r>
 80086a2:	bf00      	nop
 80086a4:	20000030 	.word	0x20000030

080086a8 <sbrk_aligned>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	4e0f      	ldr	r6, [pc, #60]	@ (80086e8 <sbrk_aligned+0x40>)
 80086ac:	460c      	mov	r4, r1
 80086ae:	6831      	ldr	r1, [r6, #0]
 80086b0:	4605      	mov	r5, r0
 80086b2:	b911      	cbnz	r1, 80086ba <sbrk_aligned+0x12>
 80086b4:	f001 ffb2 	bl	800a61c <_sbrk_r>
 80086b8:	6030      	str	r0, [r6, #0]
 80086ba:	4621      	mov	r1, r4
 80086bc:	4628      	mov	r0, r5
 80086be:	f001 ffad 	bl	800a61c <_sbrk_r>
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	d103      	bne.n	80086ce <sbrk_aligned+0x26>
 80086c6:	f04f 34ff 	mov.w	r4, #4294967295
 80086ca:	4620      	mov	r0, r4
 80086cc:	bd70      	pop	{r4, r5, r6, pc}
 80086ce:	1cc4      	adds	r4, r0, #3
 80086d0:	f024 0403 	bic.w	r4, r4, #3
 80086d4:	42a0      	cmp	r0, r4
 80086d6:	d0f8      	beq.n	80086ca <sbrk_aligned+0x22>
 80086d8:	1a21      	subs	r1, r4, r0
 80086da:	4628      	mov	r0, r5
 80086dc:	f001 ff9e 	bl	800a61c <_sbrk_r>
 80086e0:	3001      	adds	r0, #1
 80086e2:	d1f2      	bne.n	80086ca <sbrk_aligned+0x22>
 80086e4:	e7ef      	b.n	80086c6 <sbrk_aligned+0x1e>
 80086e6:	bf00      	nop
 80086e8:	20001280 	.word	0x20001280

080086ec <_malloc_r>:
 80086ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f0:	1ccd      	adds	r5, r1, #3
 80086f2:	f025 0503 	bic.w	r5, r5, #3
 80086f6:	3508      	adds	r5, #8
 80086f8:	2d0c      	cmp	r5, #12
 80086fa:	bf38      	it	cc
 80086fc:	250c      	movcc	r5, #12
 80086fe:	2d00      	cmp	r5, #0
 8008700:	4606      	mov	r6, r0
 8008702:	db01      	blt.n	8008708 <_malloc_r+0x1c>
 8008704:	42a9      	cmp	r1, r5
 8008706:	d904      	bls.n	8008712 <_malloc_r+0x26>
 8008708:	230c      	movs	r3, #12
 800870a:	6033      	str	r3, [r6, #0]
 800870c:	2000      	movs	r0, #0
 800870e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087e8 <_malloc_r+0xfc>
 8008716:	f000 f869 	bl	80087ec <__malloc_lock>
 800871a:	f8d8 3000 	ldr.w	r3, [r8]
 800871e:	461c      	mov	r4, r3
 8008720:	bb44      	cbnz	r4, 8008774 <_malloc_r+0x88>
 8008722:	4629      	mov	r1, r5
 8008724:	4630      	mov	r0, r6
 8008726:	f7ff ffbf 	bl	80086a8 <sbrk_aligned>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	4604      	mov	r4, r0
 800872e:	d158      	bne.n	80087e2 <_malloc_r+0xf6>
 8008730:	f8d8 4000 	ldr.w	r4, [r8]
 8008734:	4627      	mov	r7, r4
 8008736:	2f00      	cmp	r7, #0
 8008738:	d143      	bne.n	80087c2 <_malloc_r+0xd6>
 800873a:	2c00      	cmp	r4, #0
 800873c:	d04b      	beq.n	80087d6 <_malloc_r+0xea>
 800873e:	6823      	ldr	r3, [r4, #0]
 8008740:	4639      	mov	r1, r7
 8008742:	4630      	mov	r0, r6
 8008744:	eb04 0903 	add.w	r9, r4, r3
 8008748:	f001 ff68 	bl	800a61c <_sbrk_r>
 800874c:	4581      	cmp	r9, r0
 800874e:	d142      	bne.n	80087d6 <_malloc_r+0xea>
 8008750:	6821      	ldr	r1, [r4, #0]
 8008752:	4630      	mov	r0, r6
 8008754:	1a6d      	subs	r5, r5, r1
 8008756:	4629      	mov	r1, r5
 8008758:	f7ff ffa6 	bl	80086a8 <sbrk_aligned>
 800875c:	3001      	adds	r0, #1
 800875e:	d03a      	beq.n	80087d6 <_malloc_r+0xea>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	442b      	add	r3, r5
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	f8d8 3000 	ldr.w	r3, [r8]
 800876a:	685a      	ldr	r2, [r3, #4]
 800876c:	bb62      	cbnz	r2, 80087c8 <_malloc_r+0xdc>
 800876e:	f8c8 7000 	str.w	r7, [r8]
 8008772:	e00f      	b.n	8008794 <_malloc_r+0xa8>
 8008774:	6822      	ldr	r2, [r4, #0]
 8008776:	1b52      	subs	r2, r2, r5
 8008778:	d420      	bmi.n	80087bc <_malloc_r+0xd0>
 800877a:	2a0b      	cmp	r2, #11
 800877c:	d917      	bls.n	80087ae <_malloc_r+0xc2>
 800877e:	1961      	adds	r1, r4, r5
 8008780:	42a3      	cmp	r3, r4
 8008782:	6025      	str	r5, [r4, #0]
 8008784:	bf18      	it	ne
 8008786:	6059      	strne	r1, [r3, #4]
 8008788:	6863      	ldr	r3, [r4, #4]
 800878a:	bf08      	it	eq
 800878c:	f8c8 1000 	streq.w	r1, [r8]
 8008790:	5162      	str	r2, [r4, r5]
 8008792:	604b      	str	r3, [r1, #4]
 8008794:	4630      	mov	r0, r6
 8008796:	f000 f82f 	bl	80087f8 <__malloc_unlock>
 800879a:	f104 000b 	add.w	r0, r4, #11
 800879e:	1d23      	adds	r3, r4, #4
 80087a0:	f020 0007 	bic.w	r0, r0, #7
 80087a4:	1ac2      	subs	r2, r0, r3
 80087a6:	bf1c      	itt	ne
 80087a8:	1a1b      	subne	r3, r3, r0
 80087aa:	50a3      	strne	r3, [r4, r2]
 80087ac:	e7af      	b.n	800870e <_malloc_r+0x22>
 80087ae:	6862      	ldr	r2, [r4, #4]
 80087b0:	42a3      	cmp	r3, r4
 80087b2:	bf0c      	ite	eq
 80087b4:	f8c8 2000 	streq.w	r2, [r8]
 80087b8:	605a      	strne	r2, [r3, #4]
 80087ba:	e7eb      	b.n	8008794 <_malloc_r+0xa8>
 80087bc:	4623      	mov	r3, r4
 80087be:	6864      	ldr	r4, [r4, #4]
 80087c0:	e7ae      	b.n	8008720 <_malloc_r+0x34>
 80087c2:	463c      	mov	r4, r7
 80087c4:	687f      	ldr	r7, [r7, #4]
 80087c6:	e7b6      	b.n	8008736 <_malloc_r+0x4a>
 80087c8:	461a      	mov	r2, r3
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	d1fb      	bne.n	80087c8 <_malloc_r+0xdc>
 80087d0:	2300      	movs	r3, #0
 80087d2:	6053      	str	r3, [r2, #4]
 80087d4:	e7de      	b.n	8008794 <_malloc_r+0xa8>
 80087d6:	230c      	movs	r3, #12
 80087d8:	4630      	mov	r0, r6
 80087da:	6033      	str	r3, [r6, #0]
 80087dc:	f000 f80c 	bl	80087f8 <__malloc_unlock>
 80087e0:	e794      	b.n	800870c <_malloc_r+0x20>
 80087e2:	6005      	str	r5, [r0, #0]
 80087e4:	e7d6      	b.n	8008794 <_malloc_r+0xa8>
 80087e6:	bf00      	nop
 80087e8:	20001284 	.word	0x20001284

080087ec <__malloc_lock>:
 80087ec:	4801      	ldr	r0, [pc, #4]	@ (80087f4 <__malloc_lock+0x8>)
 80087ee:	f7ff b88a 	b.w	8007906 <__retarget_lock_acquire_recursive>
 80087f2:	bf00      	nop
 80087f4:	2000127c 	.word	0x2000127c

080087f8 <__malloc_unlock>:
 80087f8:	4801      	ldr	r0, [pc, #4]	@ (8008800 <__malloc_unlock+0x8>)
 80087fa:	f7ff b885 	b.w	8007908 <__retarget_lock_release_recursive>
 80087fe:	bf00      	nop
 8008800:	2000127c 	.word	0x2000127c

08008804 <_Balloc>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	69c6      	ldr	r6, [r0, #28]
 8008808:	4604      	mov	r4, r0
 800880a:	460d      	mov	r5, r1
 800880c:	b976      	cbnz	r6, 800882c <_Balloc+0x28>
 800880e:	2010      	movs	r0, #16
 8008810:	f7ff ff42 	bl	8008698 <malloc>
 8008814:	4602      	mov	r2, r0
 8008816:	61e0      	str	r0, [r4, #28]
 8008818:	b920      	cbnz	r0, 8008824 <_Balloc+0x20>
 800881a:	216b      	movs	r1, #107	@ 0x6b
 800881c:	4b17      	ldr	r3, [pc, #92]	@ (800887c <_Balloc+0x78>)
 800881e:	4818      	ldr	r0, [pc, #96]	@ (8008880 <_Balloc+0x7c>)
 8008820:	f001 ff12 	bl	800a648 <__assert_func>
 8008824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008828:	6006      	str	r6, [r0, #0]
 800882a:	60c6      	str	r6, [r0, #12]
 800882c:	69e6      	ldr	r6, [r4, #28]
 800882e:	68f3      	ldr	r3, [r6, #12]
 8008830:	b183      	cbz	r3, 8008854 <_Balloc+0x50>
 8008832:	69e3      	ldr	r3, [r4, #28]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800883a:	b9b8      	cbnz	r0, 800886c <_Balloc+0x68>
 800883c:	2101      	movs	r1, #1
 800883e:	fa01 f605 	lsl.w	r6, r1, r5
 8008842:	1d72      	adds	r2, r6, #5
 8008844:	4620      	mov	r0, r4
 8008846:	0092      	lsls	r2, r2, #2
 8008848:	f001 ff1c 	bl	800a684 <_calloc_r>
 800884c:	b160      	cbz	r0, 8008868 <_Balloc+0x64>
 800884e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008852:	e00e      	b.n	8008872 <_Balloc+0x6e>
 8008854:	2221      	movs	r2, #33	@ 0x21
 8008856:	2104      	movs	r1, #4
 8008858:	4620      	mov	r0, r4
 800885a:	f001 ff13 	bl	800a684 <_calloc_r>
 800885e:	69e3      	ldr	r3, [r4, #28]
 8008860:	60f0      	str	r0, [r6, #12]
 8008862:	68db      	ldr	r3, [r3, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e4      	bne.n	8008832 <_Balloc+0x2e>
 8008868:	2000      	movs	r0, #0
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	6802      	ldr	r2, [r0, #0]
 800886e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008872:	2300      	movs	r3, #0
 8008874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008878:	e7f7      	b.n	800886a <_Balloc+0x66>
 800887a:	bf00      	nop
 800887c:	0800c64e 	.word	0x0800c64e
 8008880:	0800c6ce 	.word	0x0800c6ce

08008884 <_Bfree>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	69c6      	ldr	r6, [r0, #28]
 8008888:	4605      	mov	r5, r0
 800888a:	460c      	mov	r4, r1
 800888c:	b976      	cbnz	r6, 80088ac <_Bfree+0x28>
 800888e:	2010      	movs	r0, #16
 8008890:	f7ff ff02 	bl	8008698 <malloc>
 8008894:	4602      	mov	r2, r0
 8008896:	61e8      	str	r0, [r5, #28]
 8008898:	b920      	cbnz	r0, 80088a4 <_Bfree+0x20>
 800889a:	218f      	movs	r1, #143	@ 0x8f
 800889c:	4b08      	ldr	r3, [pc, #32]	@ (80088c0 <_Bfree+0x3c>)
 800889e:	4809      	ldr	r0, [pc, #36]	@ (80088c4 <_Bfree+0x40>)
 80088a0:	f001 fed2 	bl	800a648 <__assert_func>
 80088a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088a8:	6006      	str	r6, [r0, #0]
 80088aa:	60c6      	str	r6, [r0, #12]
 80088ac:	b13c      	cbz	r4, 80088be <_Bfree+0x3a>
 80088ae:	69eb      	ldr	r3, [r5, #28]
 80088b0:	6862      	ldr	r2, [r4, #4]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088b8:	6021      	str	r1, [r4, #0]
 80088ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088be:	bd70      	pop	{r4, r5, r6, pc}
 80088c0:	0800c64e 	.word	0x0800c64e
 80088c4:	0800c6ce 	.word	0x0800c6ce

080088c8 <__multadd>:
 80088c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088cc:	4607      	mov	r7, r0
 80088ce:	460c      	mov	r4, r1
 80088d0:	461e      	mov	r6, r3
 80088d2:	2000      	movs	r0, #0
 80088d4:	690d      	ldr	r5, [r1, #16]
 80088d6:	f101 0c14 	add.w	ip, r1, #20
 80088da:	f8dc 3000 	ldr.w	r3, [ip]
 80088de:	3001      	adds	r0, #1
 80088e0:	b299      	uxth	r1, r3
 80088e2:	fb02 6101 	mla	r1, r2, r1, r6
 80088e6:	0c1e      	lsrs	r6, r3, #16
 80088e8:	0c0b      	lsrs	r3, r1, #16
 80088ea:	fb02 3306 	mla	r3, r2, r6, r3
 80088ee:	b289      	uxth	r1, r1
 80088f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80088f4:	4285      	cmp	r5, r0
 80088f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088fa:	f84c 1b04 	str.w	r1, [ip], #4
 80088fe:	dcec      	bgt.n	80088da <__multadd+0x12>
 8008900:	b30e      	cbz	r6, 8008946 <__multadd+0x7e>
 8008902:	68a3      	ldr	r3, [r4, #8]
 8008904:	42ab      	cmp	r3, r5
 8008906:	dc19      	bgt.n	800893c <__multadd+0x74>
 8008908:	6861      	ldr	r1, [r4, #4]
 800890a:	4638      	mov	r0, r7
 800890c:	3101      	adds	r1, #1
 800890e:	f7ff ff79 	bl	8008804 <_Balloc>
 8008912:	4680      	mov	r8, r0
 8008914:	b928      	cbnz	r0, 8008922 <__multadd+0x5a>
 8008916:	4602      	mov	r2, r0
 8008918:	21ba      	movs	r1, #186	@ 0xba
 800891a:	4b0c      	ldr	r3, [pc, #48]	@ (800894c <__multadd+0x84>)
 800891c:	480c      	ldr	r0, [pc, #48]	@ (8008950 <__multadd+0x88>)
 800891e:	f001 fe93 	bl	800a648 <__assert_func>
 8008922:	6922      	ldr	r2, [r4, #16]
 8008924:	f104 010c 	add.w	r1, r4, #12
 8008928:	3202      	adds	r2, #2
 800892a:	0092      	lsls	r2, r2, #2
 800892c:	300c      	adds	r0, #12
 800892e:	f7fe fffa 	bl	8007926 <memcpy>
 8008932:	4621      	mov	r1, r4
 8008934:	4638      	mov	r0, r7
 8008936:	f7ff ffa5 	bl	8008884 <_Bfree>
 800893a:	4644      	mov	r4, r8
 800893c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008940:	3501      	adds	r5, #1
 8008942:	615e      	str	r6, [r3, #20]
 8008944:	6125      	str	r5, [r4, #16]
 8008946:	4620      	mov	r0, r4
 8008948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800894c:	0800c6bd 	.word	0x0800c6bd
 8008950:	0800c6ce 	.word	0x0800c6ce

08008954 <__s2b>:
 8008954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008958:	4615      	mov	r5, r2
 800895a:	2209      	movs	r2, #9
 800895c:	461f      	mov	r7, r3
 800895e:	3308      	adds	r3, #8
 8008960:	460c      	mov	r4, r1
 8008962:	fb93 f3f2 	sdiv	r3, r3, r2
 8008966:	4606      	mov	r6, r0
 8008968:	2201      	movs	r2, #1
 800896a:	2100      	movs	r1, #0
 800896c:	429a      	cmp	r2, r3
 800896e:	db09      	blt.n	8008984 <__s2b+0x30>
 8008970:	4630      	mov	r0, r6
 8008972:	f7ff ff47 	bl	8008804 <_Balloc>
 8008976:	b940      	cbnz	r0, 800898a <__s2b+0x36>
 8008978:	4602      	mov	r2, r0
 800897a:	21d3      	movs	r1, #211	@ 0xd3
 800897c:	4b18      	ldr	r3, [pc, #96]	@ (80089e0 <__s2b+0x8c>)
 800897e:	4819      	ldr	r0, [pc, #100]	@ (80089e4 <__s2b+0x90>)
 8008980:	f001 fe62 	bl	800a648 <__assert_func>
 8008984:	0052      	lsls	r2, r2, #1
 8008986:	3101      	adds	r1, #1
 8008988:	e7f0      	b.n	800896c <__s2b+0x18>
 800898a:	9b08      	ldr	r3, [sp, #32]
 800898c:	2d09      	cmp	r5, #9
 800898e:	6143      	str	r3, [r0, #20]
 8008990:	f04f 0301 	mov.w	r3, #1
 8008994:	6103      	str	r3, [r0, #16]
 8008996:	dd16      	ble.n	80089c6 <__s2b+0x72>
 8008998:	f104 0909 	add.w	r9, r4, #9
 800899c:	46c8      	mov	r8, r9
 800899e:	442c      	add	r4, r5
 80089a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089a4:	4601      	mov	r1, r0
 80089a6:	220a      	movs	r2, #10
 80089a8:	4630      	mov	r0, r6
 80089aa:	3b30      	subs	r3, #48	@ 0x30
 80089ac:	f7ff ff8c 	bl	80088c8 <__multadd>
 80089b0:	45a0      	cmp	r8, r4
 80089b2:	d1f5      	bne.n	80089a0 <__s2b+0x4c>
 80089b4:	f1a5 0408 	sub.w	r4, r5, #8
 80089b8:	444c      	add	r4, r9
 80089ba:	1b2d      	subs	r5, r5, r4
 80089bc:	1963      	adds	r3, r4, r5
 80089be:	42bb      	cmp	r3, r7
 80089c0:	db04      	blt.n	80089cc <__s2b+0x78>
 80089c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089c6:	2509      	movs	r5, #9
 80089c8:	340a      	adds	r4, #10
 80089ca:	e7f6      	b.n	80089ba <__s2b+0x66>
 80089cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089d0:	4601      	mov	r1, r0
 80089d2:	220a      	movs	r2, #10
 80089d4:	4630      	mov	r0, r6
 80089d6:	3b30      	subs	r3, #48	@ 0x30
 80089d8:	f7ff ff76 	bl	80088c8 <__multadd>
 80089dc:	e7ee      	b.n	80089bc <__s2b+0x68>
 80089de:	bf00      	nop
 80089e0:	0800c6bd 	.word	0x0800c6bd
 80089e4:	0800c6ce 	.word	0x0800c6ce

080089e8 <__hi0bits>:
 80089e8:	4603      	mov	r3, r0
 80089ea:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80089ee:	bf3a      	itte	cc
 80089f0:	0403      	lslcc	r3, r0, #16
 80089f2:	2010      	movcc	r0, #16
 80089f4:	2000      	movcs	r0, #0
 80089f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089fa:	bf3c      	itt	cc
 80089fc:	021b      	lslcc	r3, r3, #8
 80089fe:	3008      	addcc	r0, #8
 8008a00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a04:	bf3c      	itt	cc
 8008a06:	011b      	lslcc	r3, r3, #4
 8008a08:	3004      	addcc	r0, #4
 8008a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a0e:	bf3c      	itt	cc
 8008a10:	009b      	lslcc	r3, r3, #2
 8008a12:	3002      	addcc	r0, #2
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	db05      	blt.n	8008a24 <__hi0bits+0x3c>
 8008a18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a1c:	f100 0001 	add.w	r0, r0, #1
 8008a20:	bf08      	it	eq
 8008a22:	2020      	moveq	r0, #32
 8008a24:	4770      	bx	lr

08008a26 <__lo0bits>:
 8008a26:	6803      	ldr	r3, [r0, #0]
 8008a28:	4602      	mov	r2, r0
 8008a2a:	f013 0007 	ands.w	r0, r3, #7
 8008a2e:	d00b      	beq.n	8008a48 <__lo0bits+0x22>
 8008a30:	07d9      	lsls	r1, r3, #31
 8008a32:	d421      	bmi.n	8008a78 <__lo0bits+0x52>
 8008a34:	0798      	lsls	r0, r3, #30
 8008a36:	bf49      	itett	mi
 8008a38:	085b      	lsrmi	r3, r3, #1
 8008a3a:	089b      	lsrpl	r3, r3, #2
 8008a3c:	2001      	movmi	r0, #1
 8008a3e:	6013      	strmi	r3, [r2, #0]
 8008a40:	bf5c      	itt	pl
 8008a42:	2002      	movpl	r0, #2
 8008a44:	6013      	strpl	r3, [r2, #0]
 8008a46:	4770      	bx	lr
 8008a48:	b299      	uxth	r1, r3
 8008a4a:	b909      	cbnz	r1, 8008a50 <__lo0bits+0x2a>
 8008a4c:	2010      	movs	r0, #16
 8008a4e:	0c1b      	lsrs	r3, r3, #16
 8008a50:	b2d9      	uxtb	r1, r3
 8008a52:	b909      	cbnz	r1, 8008a58 <__lo0bits+0x32>
 8008a54:	3008      	adds	r0, #8
 8008a56:	0a1b      	lsrs	r3, r3, #8
 8008a58:	0719      	lsls	r1, r3, #28
 8008a5a:	bf04      	itt	eq
 8008a5c:	091b      	lsreq	r3, r3, #4
 8008a5e:	3004      	addeq	r0, #4
 8008a60:	0799      	lsls	r1, r3, #30
 8008a62:	bf04      	itt	eq
 8008a64:	089b      	lsreq	r3, r3, #2
 8008a66:	3002      	addeq	r0, #2
 8008a68:	07d9      	lsls	r1, r3, #31
 8008a6a:	d403      	bmi.n	8008a74 <__lo0bits+0x4e>
 8008a6c:	085b      	lsrs	r3, r3, #1
 8008a6e:	f100 0001 	add.w	r0, r0, #1
 8008a72:	d003      	beq.n	8008a7c <__lo0bits+0x56>
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	4770      	bx	lr
 8008a78:	2000      	movs	r0, #0
 8008a7a:	4770      	bx	lr
 8008a7c:	2020      	movs	r0, #32
 8008a7e:	4770      	bx	lr

08008a80 <__i2b>:
 8008a80:	b510      	push	{r4, lr}
 8008a82:	460c      	mov	r4, r1
 8008a84:	2101      	movs	r1, #1
 8008a86:	f7ff febd 	bl	8008804 <_Balloc>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	b928      	cbnz	r0, 8008a9a <__i2b+0x1a>
 8008a8e:	f240 1145 	movw	r1, #325	@ 0x145
 8008a92:	4b04      	ldr	r3, [pc, #16]	@ (8008aa4 <__i2b+0x24>)
 8008a94:	4804      	ldr	r0, [pc, #16]	@ (8008aa8 <__i2b+0x28>)
 8008a96:	f001 fdd7 	bl	800a648 <__assert_func>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	6144      	str	r4, [r0, #20]
 8008a9e:	6103      	str	r3, [r0, #16]
 8008aa0:	bd10      	pop	{r4, pc}
 8008aa2:	bf00      	nop
 8008aa4:	0800c6bd 	.word	0x0800c6bd
 8008aa8:	0800c6ce 	.word	0x0800c6ce

08008aac <__multiply>:
 8008aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab0:	4617      	mov	r7, r2
 8008ab2:	690a      	ldr	r2, [r1, #16]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4689      	mov	r9, r1
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	bfa2      	ittt	ge
 8008abc:	463b      	movge	r3, r7
 8008abe:	460f      	movge	r7, r1
 8008ac0:	4699      	movge	r9, r3
 8008ac2:	693d      	ldr	r5, [r7, #16]
 8008ac4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	eb05 060a 	add.w	r6, r5, sl
 8008ad0:	42b3      	cmp	r3, r6
 8008ad2:	b085      	sub	sp, #20
 8008ad4:	bfb8      	it	lt
 8008ad6:	3101      	addlt	r1, #1
 8008ad8:	f7ff fe94 	bl	8008804 <_Balloc>
 8008adc:	b930      	cbnz	r0, 8008aec <__multiply+0x40>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ae4:	4b40      	ldr	r3, [pc, #256]	@ (8008be8 <__multiply+0x13c>)
 8008ae6:	4841      	ldr	r0, [pc, #260]	@ (8008bec <__multiply+0x140>)
 8008ae8:	f001 fdae 	bl	800a648 <__assert_func>
 8008aec:	f100 0414 	add.w	r4, r0, #20
 8008af0:	4623      	mov	r3, r4
 8008af2:	2200      	movs	r2, #0
 8008af4:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008af8:	4573      	cmp	r3, lr
 8008afa:	d320      	bcc.n	8008b3e <__multiply+0x92>
 8008afc:	f107 0814 	add.w	r8, r7, #20
 8008b00:	f109 0114 	add.w	r1, r9, #20
 8008b04:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008b08:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008b0c:	9302      	str	r3, [sp, #8]
 8008b0e:	1beb      	subs	r3, r5, r7
 8008b10:	3b15      	subs	r3, #21
 8008b12:	f023 0303 	bic.w	r3, r3, #3
 8008b16:	3304      	adds	r3, #4
 8008b18:	3715      	adds	r7, #21
 8008b1a:	42bd      	cmp	r5, r7
 8008b1c:	bf38      	it	cc
 8008b1e:	2304      	movcc	r3, #4
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	9b02      	ldr	r3, [sp, #8]
 8008b24:	9103      	str	r1, [sp, #12]
 8008b26:	428b      	cmp	r3, r1
 8008b28:	d80c      	bhi.n	8008b44 <__multiply+0x98>
 8008b2a:	2e00      	cmp	r6, #0
 8008b2c:	dd03      	ble.n	8008b36 <__multiply+0x8a>
 8008b2e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d055      	beq.n	8008be2 <__multiply+0x136>
 8008b36:	6106      	str	r6, [r0, #16]
 8008b38:	b005      	add	sp, #20
 8008b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b3e:	f843 2b04 	str.w	r2, [r3], #4
 8008b42:	e7d9      	b.n	8008af8 <__multiply+0x4c>
 8008b44:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b48:	f1ba 0f00 	cmp.w	sl, #0
 8008b4c:	d01f      	beq.n	8008b8e <__multiply+0xe2>
 8008b4e:	46c4      	mov	ip, r8
 8008b50:	46a1      	mov	r9, r4
 8008b52:	2700      	movs	r7, #0
 8008b54:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b58:	f8d9 3000 	ldr.w	r3, [r9]
 8008b5c:	fa1f fb82 	uxth.w	fp, r2
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b66:	443b      	add	r3, r7
 8008b68:	f8d9 7000 	ldr.w	r7, [r9]
 8008b6c:	0c12      	lsrs	r2, r2, #16
 8008b6e:	0c3f      	lsrs	r7, r7, #16
 8008b70:	fb0a 7202 	mla	r2, sl, r2, r7
 8008b74:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b7e:	4565      	cmp	r5, ip
 8008b80:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008b84:	f849 3b04 	str.w	r3, [r9], #4
 8008b88:	d8e4      	bhi.n	8008b54 <__multiply+0xa8>
 8008b8a:	9b01      	ldr	r3, [sp, #4]
 8008b8c:	50e7      	str	r7, [r4, r3]
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	3104      	adds	r1, #4
 8008b92:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b96:	f1b9 0f00 	cmp.w	r9, #0
 8008b9a:	d020      	beq.n	8008bde <__multiply+0x132>
 8008b9c:	4647      	mov	r7, r8
 8008b9e:	46a4      	mov	ip, r4
 8008ba0:	f04f 0a00 	mov.w	sl, #0
 8008ba4:	6823      	ldr	r3, [r4, #0]
 8008ba6:	f8b7 b000 	ldrh.w	fp, [r7]
 8008baa:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	fb09 220b 	mla	r2, r9, fp, r2
 8008bb4:	4452      	add	r2, sl
 8008bb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bba:	f84c 3b04 	str.w	r3, [ip], #4
 8008bbe:	f857 3b04 	ldr.w	r3, [r7], #4
 8008bc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bc6:	f8bc 3000 	ldrh.w	r3, [ip]
 8008bca:	42bd      	cmp	r5, r7
 8008bcc:	fb09 330a 	mla	r3, r9, sl, r3
 8008bd0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008bd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008bd8:	d8e5      	bhi.n	8008ba6 <__multiply+0xfa>
 8008bda:	9a01      	ldr	r2, [sp, #4]
 8008bdc:	50a3      	str	r3, [r4, r2]
 8008bde:	3404      	adds	r4, #4
 8008be0:	e79f      	b.n	8008b22 <__multiply+0x76>
 8008be2:	3e01      	subs	r6, #1
 8008be4:	e7a1      	b.n	8008b2a <__multiply+0x7e>
 8008be6:	bf00      	nop
 8008be8:	0800c6bd 	.word	0x0800c6bd
 8008bec:	0800c6ce 	.word	0x0800c6ce

08008bf0 <__pow5mult>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4615      	mov	r5, r2
 8008bf6:	f012 0203 	ands.w	r2, r2, #3
 8008bfa:	4607      	mov	r7, r0
 8008bfc:	460e      	mov	r6, r1
 8008bfe:	d007      	beq.n	8008c10 <__pow5mult+0x20>
 8008c00:	4c25      	ldr	r4, [pc, #148]	@ (8008c98 <__pow5mult+0xa8>)
 8008c02:	3a01      	subs	r2, #1
 8008c04:	2300      	movs	r3, #0
 8008c06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c0a:	f7ff fe5d 	bl	80088c8 <__multadd>
 8008c0e:	4606      	mov	r6, r0
 8008c10:	10ad      	asrs	r5, r5, #2
 8008c12:	d03d      	beq.n	8008c90 <__pow5mult+0xa0>
 8008c14:	69fc      	ldr	r4, [r7, #28]
 8008c16:	b97c      	cbnz	r4, 8008c38 <__pow5mult+0x48>
 8008c18:	2010      	movs	r0, #16
 8008c1a:	f7ff fd3d 	bl	8008698 <malloc>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	61f8      	str	r0, [r7, #28]
 8008c22:	b928      	cbnz	r0, 8008c30 <__pow5mult+0x40>
 8008c24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c28:	4b1c      	ldr	r3, [pc, #112]	@ (8008c9c <__pow5mult+0xac>)
 8008c2a:	481d      	ldr	r0, [pc, #116]	@ (8008ca0 <__pow5mult+0xb0>)
 8008c2c:	f001 fd0c 	bl	800a648 <__assert_func>
 8008c30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c34:	6004      	str	r4, [r0, #0]
 8008c36:	60c4      	str	r4, [r0, #12]
 8008c38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c40:	b94c      	cbnz	r4, 8008c56 <__pow5mult+0x66>
 8008c42:	f240 2171 	movw	r1, #625	@ 0x271
 8008c46:	4638      	mov	r0, r7
 8008c48:	f7ff ff1a 	bl	8008a80 <__i2b>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4604      	mov	r4, r0
 8008c50:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	f04f 0900 	mov.w	r9, #0
 8008c5a:	07eb      	lsls	r3, r5, #31
 8008c5c:	d50a      	bpl.n	8008c74 <__pow5mult+0x84>
 8008c5e:	4631      	mov	r1, r6
 8008c60:	4622      	mov	r2, r4
 8008c62:	4638      	mov	r0, r7
 8008c64:	f7ff ff22 	bl	8008aac <__multiply>
 8008c68:	4680      	mov	r8, r0
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4638      	mov	r0, r7
 8008c6e:	f7ff fe09 	bl	8008884 <_Bfree>
 8008c72:	4646      	mov	r6, r8
 8008c74:	106d      	asrs	r5, r5, #1
 8008c76:	d00b      	beq.n	8008c90 <__pow5mult+0xa0>
 8008c78:	6820      	ldr	r0, [r4, #0]
 8008c7a:	b938      	cbnz	r0, 8008c8c <__pow5mult+0x9c>
 8008c7c:	4622      	mov	r2, r4
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4638      	mov	r0, r7
 8008c82:	f7ff ff13 	bl	8008aac <__multiply>
 8008c86:	6020      	str	r0, [r4, #0]
 8008c88:	f8c0 9000 	str.w	r9, [r0]
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	e7e4      	b.n	8008c5a <__pow5mult+0x6a>
 8008c90:	4630      	mov	r0, r6
 8008c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c96:	bf00      	nop
 8008c98:	0800c7e0 	.word	0x0800c7e0
 8008c9c:	0800c64e 	.word	0x0800c64e
 8008ca0:	0800c6ce 	.word	0x0800c6ce

08008ca4 <__lshift>:
 8008ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	460c      	mov	r4, r1
 8008caa:	4607      	mov	r7, r0
 8008cac:	4691      	mov	r9, r2
 8008cae:	6923      	ldr	r3, [r4, #16]
 8008cb0:	6849      	ldr	r1, [r1, #4]
 8008cb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cb6:	68a3      	ldr	r3, [r4, #8]
 8008cb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008cbc:	f108 0601 	add.w	r6, r8, #1
 8008cc0:	42b3      	cmp	r3, r6
 8008cc2:	db0b      	blt.n	8008cdc <__lshift+0x38>
 8008cc4:	4638      	mov	r0, r7
 8008cc6:	f7ff fd9d 	bl	8008804 <_Balloc>
 8008cca:	4605      	mov	r5, r0
 8008ccc:	b948      	cbnz	r0, 8008ce2 <__lshift+0x3e>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008cd4:	4b27      	ldr	r3, [pc, #156]	@ (8008d74 <__lshift+0xd0>)
 8008cd6:	4828      	ldr	r0, [pc, #160]	@ (8008d78 <__lshift+0xd4>)
 8008cd8:	f001 fcb6 	bl	800a648 <__assert_func>
 8008cdc:	3101      	adds	r1, #1
 8008cde:	005b      	lsls	r3, r3, #1
 8008ce0:	e7ee      	b.n	8008cc0 <__lshift+0x1c>
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	f100 0114 	add.w	r1, r0, #20
 8008ce8:	f100 0210 	add.w	r2, r0, #16
 8008cec:	4618      	mov	r0, r3
 8008cee:	4553      	cmp	r3, sl
 8008cf0:	db33      	blt.n	8008d5a <__lshift+0xb6>
 8008cf2:	6920      	ldr	r0, [r4, #16]
 8008cf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cf8:	f104 0314 	add.w	r3, r4, #20
 8008cfc:	f019 091f 	ands.w	r9, r9, #31
 8008d00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d08:	d02b      	beq.n	8008d62 <__lshift+0xbe>
 8008d0a:	468a      	mov	sl, r1
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	fa00 f009 	lsl.w	r0, r0, r9
 8008d18:	4310      	orrs	r0, r2
 8008d1a:	f84a 0b04 	str.w	r0, [sl], #4
 8008d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d22:	459c      	cmp	ip, r3
 8008d24:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d28:	d8f3      	bhi.n	8008d12 <__lshift+0x6e>
 8008d2a:	ebac 0304 	sub.w	r3, ip, r4
 8008d2e:	3b15      	subs	r3, #21
 8008d30:	f023 0303 	bic.w	r3, r3, #3
 8008d34:	3304      	adds	r3, #4
 8008d36:	f104 0015 	add.w	r0, r4, #21
 8008d3a:	4560      	cmp	r0, ip
 8008d3c:	bf88      	it	hi
 8008d3e:	2304      	movhi	r3, #4
 8008d40:	50ca      	str	r2, [r1, r3]
 8008d42:	b10a      	cbz	r2, 8008d48 <__lshift+0xa4>
 8008d44:	f108 0602 	add.w	r6, r8, #2
 8008d48:	3e01      	subs	r6, #1
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	612e      	str	r6, [r5, #16]
 8008d50:	f7ff fd98 	bl	8008884 <_Bfree>
 8008d54:	4628      	mov	r0, r5
 8008d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d5a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d5e:	3301      	adds	r3, #1
 8008d60:	e7c5      	b.n	8008cee <__lshift+0x4a>
 8008d62:	3904      	subs	r1, #4
 8008d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d68:	459c      	cmp	ip, r3
 8008d6a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d6e:	d8f9      	bhi.n	8008d64 <__lshift+0xc0>
 8008d70:	e7ea      	b.n	8008d48 <__lshift+0xa4>
 8008d72:	bf00      	nop
 8008d74:	0800c6bd 	.word	0x0800c6bd
 8008d78:	0800c6ce 	.word	0x0800c6ce

08008d7c <__mcmp>:
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	690a      	ldr	r2, [r1, #16]
 8008d80:	6900      	ldr	r0, [r0, #16]
 8008d82:	b530      	push	{r4, r5, lr}
 8008d84:	1a80      	subs	r0, r0, r2
 8008d86:	d10e      	bne.n	8008da6 <__mcmp+0x2a>
 8008d88:	3314      	adds	r3, #20
 8008d8a:	3114      	adds	r1, #20
 8008d8c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d90:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d94:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d98:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d9c:	4295      	cmp	r5, r2
 8008d9e:	d003      	beq.n	8008da8 <__mcmp+0x2c>
 8008da0:	d205      	bcs.n	8008dae <__mcmp+0x32>
 8008da2:	f04f 30ff 	mov.w	r0, #4294967295
 8008da6:	bd30      	pop	{r4, r5, pc}
 8008da8:	42a3      	cmp	r3, r4
 8008daa:	d3f3      	bcc.n	8008d94 <__mcmp+0x18>
 8008dac:	e7fb      	b.n	8008da6 <__mcmp+0x2a>
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7f9      	b.n	8008da6 <__mcmp+0x2a>
	...

08008db4 <__mdiff>:
 8008db4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db8:	4689      	mov	r9, r1
 8008dba:	4606      	mov	r6, r0
 8008dbc:	4611      	mov	r1, r2
 8008dbe:	4648      	mov	r0, r9
 8008dc0:	4614      	mov	r4, r2
 8008dc2:	f7ff ffdb 	bl	8008d7c <__mcmp>
 8008dc6:	1e05      	subs	r5, r0, #0
 8008dc8:	d112      	bne.n	8008df0 <__mdiff+0x3c>
 8008dca:	4629      	mov	r1, r5
 8008dcc:	4630      	mov	r0, r6
 8008dce:	f7ff fd19 	bl	8008804 <_Balloc>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	b928      	cbnz	r0, 8008de2 <__mdiff+0x2e>
 8008dd6:	f240 2137 	movw	r1, #567	@ 0x237
 8008dda:	4b3e      	ldr	r3, [pc, #248]	@ (8008ed4 <__mdiff+0x120>)
 8008ddc:	483e      	ldr	r0, [pc, #248]	@ (8008ed8 <__mdiff+0x124>)
 8008dde:	f001 fc33 	bl	800a648 <__assert_func>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008de8:	4610      	mov	r0, r2
 8008dea:	b003      	add	sp, #12
 8008dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008df0:	bfbc      	itt	lt
 8008df2:	464b      	movlt	r3, r9
 8008df4:	46a1      	movlt	r9, r4
 8008df6:	4630      	mov	r0, r6
 8008df8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008dfc:	bfba      	itte	lt
 8008dfe:	461c      	movlt	r4, r3
 8008e00:	2501      	movlt	r5, #1
 8008e02:	2500      	movge	r5, #0
 8008e04:	f7ff fcfe 	bl	8008804 <_Balloc>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	b918      	cbnz	r0, 8008e14 <__mdiff+0x60>
 8008e0c:	f240 2145 	movw	r1, #581	@ 0x245
 8008e10:	4b30      	ldr	r3, [pc, #192]	@ (8008ed4 <__mdiff+0x120>)
 8008e12:	e7e3      	b.n	8008ddc <__mdiff+0x28>
 8008e14:	f100 0b14 	add.w	fp, r0, #20
 8008e18:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e1c:	f109 0310 	add.w	r3, r9, #16
 8008e20:	60c5      	str	r5, [r0, #12]
 8008e22:	f04f 0c00 	mov.w	ip, #0
 8008e26:	f109 0514 	add.w	r5, r9, #20
 8008e2a:	46d9      	mov	r9, fp
 8008e2c:	6926      	ldr	r6, [r4, #16]
 8008e2e:	f104 0e14 	add.w	lr, r4, #20
 8008e32:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e36:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e3a:	9301      	str	r3, [sp, #4]
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e42:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008e46:	b281      	uxth	r1, r0
 8008e48:	9301      	str	r3, [sp, #4]
 8008e4a:	fa1f f38a 	uxth.w	r3, sl
 8008e4e:	1a5b      	subs	r3, r3, r1
 8008e50:	0c00      	lsrs	r0, r0, #16
 8008e52:	4463      	add	r3, ip
 8008e54:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e58:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e62:	4576      	cmp	r6, lr
 8008e64:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e68:	f849 3b04 	str.w	r3, [r9], #4
 8008e6c:	d8e6      	bhi.n	8008e3c <__mdiff+0x88>
 8008e6e:	1b33      	subs	r3, r6, r4
 8008e70:	3b15      	subs	r3, #21
 8008e72:	f023 0303 	bic.w	r3, r3, #3
 8008e76:	3415      	adds	r4, #21
 8008e78:	3304      	adds	r3, #4
 8008e7a:	42a6      	cmp	r6, r4
 8008e7c:	bf38      	it	cc
 8008e7e:	2304      	movcc	r3, #4
 8008e80:	441d      	add	r5, r3
 8008e82:	445b      	add	r3, fp
 8008e84:	461e      	mov	r6, r3
 8008e86:	462c      	mov	r4, r5
 8008e88:	4544      	cmp	r4, r8
 8008e8a:	d30e      	bcc.n	8008eaa <__mdiff+0xf6>
 8008e8c:	f108 0103 	add.w	r1, r8, #3
 8008e90:	1b49      	subs	r1, r1, r5
 8008e92:	f021 0103 	bic.w	r1, r1, #3
 8008e96:	3d03      	subs	r5, #3
 8008e98:	45a8      	cmp	r8, r5
 8008e9a:	bf38      	it	cc
 8008e9c:	2100      	movcc	r1, #0
 8008e9e:	440b      	add	r3, r1
 8008ea0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ea4:	b199      	cbz	r1, 8008ece <__mdiff+0x11a>
 8008ea6:	6117      	str	r7, [r2, #16]
 8008ea8:	e79e      	b.n	8008de8 <__mdiff+0x34>
 8008eaa:	46e6      	mov	lr, ip
 8008eac:	f854 1b04 	ldr.w	r1, [r4], #4
 8008eb0:	fa1f fc81 	uxth.w	ip, r1
 8008eb4:	44f4      	add	ip, lr
 8008eb6:	0c08      	lsrs	r0, r1, #16
 8008eb8:	4471      	add	r1, lr
 8008eba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008ebe:	b289      	uxth	r1, r1
 8008ec0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008ec4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ec8:	f846 1b04 	str.w	r1, [r6], #4
 8008ecc:	e7dc      	b.n	8008e88 <__mdiff+0xd4>
 8008ece:	3f01      	subs	r7, #1
 8008ed0:	e7e6      	b.n	8008ea0 <__mdiff+0xec>
 8008ed2:	bf00      	nop
 8008ed4:	0800c6bd 	.word	0x0800c6bd
 8008ed8:	0800c6ce 	.word	0x0800c6ce

08008edc <__ulp>:
 8008edc:	4b0e      	ldr	r3, [pc, #56]	@ (8008f18 <__ulp+0x3c>)
 8008ede:	400b      	ands	r3, r1
 8008ee0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	dc08      	bgt.n	8008efa <__ulp+0x1e>
 8008ee8:	425b      	negs	r3, r3
 8008eea:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008eee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ef2:	da04      	bge.n	8008efe <__ulp+0x22>
 8008ef4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008ef8:	4113      	asrs	r3, r2
 8008efa:	2200      	movs	r2, #0
 8008efc:	e008      	b.n	8008f10 <__ulp+0x34>
 8008efe:	f1a2 0314 	sub.w	r3, r2, #20
 8008f02:	2b1e      	cmp	r3, #30
 8008f04:	bfd6      	itet	le
 8008f06:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f0a:	2201      	movgt	r2, #1
 8008f0c:	40da      	lsrle	r2, r3
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	7ff00000 	.word	0x7ff00000

08008f1c <__b2d>:
 8008f1c:	6902      	ldr	r2, [r0, #16]
 8008f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f20:	f100 0614 	add.w	r6, r0, #20
 8008f24:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008f28:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008f2c:	4f1e      	ldr	r7, [pc, #120]	@ (8008fa8 <__b2d+0x8c>)
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f7ff fd5a 	bl	80089e8 <__hi0bits>
 8008f34:	4603      	mov	r3, r0
 8008f36:	f1c0 0020 	rsb	r0, r0, #32
 8008f3a:	2b0a      	cmp	r3, #10
 8008f3c:	f1a2 0504 	sub.w	r5, r2, #4
 8008f40:	6008      	str	r0, [r1, #0]
 8008f42:	dc12      	bgt.n	8008f6a <__b2d+0x4e>
 8008f44:	42ae      	cmp	r6, r5
 8008f46:	bf2c      	ite	cs
 8008f48:	2200      	movcs	r2, #0
 8008f4a:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f4e:	f1c3 0c0b 	rsb	ip, r3, #11
 8008f52:	3315      	adds	r3, #21
 8008f54:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008f58:	fa04 f303 	lsl.w	r3, r4, r3
 8008f5c:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f60:	ea4e 0107 	orr.w	r1, lr, r7
 8008f64:	431a      	orrs	r2, r3
 8008f66:	4610      	mov	r0, r2
 8008f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f6a:	42ae      	cmp	r6, r5
 8008f6c:	bf36      	itet	cc
 8008f6e:	f1a2 0508 	subcc.w	r5, r2, #8
 8008f72:	2200      	movcs	r2, #0
 8008f74:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f78:	3b0b      	subs	r3, #11
 8008f7a:	d012      	beq.n	8008fa2 <__b2d+0x86>
 8008f7c:	f1c3 0720 	rsb	r7, r3, #32
 8008f80:	fa22 f107 	lsr.w	r1, r2, r7
 8008f84:	409c      	lsls	r4, r3
 8008f86:	430c      	orrs	r4, r1
 8008f88:	42b5      	cmp	r5, r6
 8008f8a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008f8e:	bf94      	ite	ls
 8008f90:	2400      	movls	r4, #0
 8008f92:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008f96:	409a      	lsls	r2, r3
 8008f98:	40fc      	lsrs	r4, r7
 8008f9a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008f9e:	4322      	orrs	r2, r4
 8008fa0:	e7e1      	b.n	8008f66 <__b2d+0x4a>
 8008fa2:	ea44 0107 	orr.w	r1, r4, r7
 8008fa6:	e7de      	b.n	8008f66 <__b2d+0x4a>
 8008fa8:	3ff00000 	.word	0x3ff00000

08008fac <__d2b>:
 8008fac:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	4690      	mov	r8, r2
 8008fb4:	4699      	mov	r9, r3
 8008fb6:	9e08      	ldr	r6, [sp, #32]
 8008fb8:	f7ff fc24 	bl	8008804 <_Balloc>
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	b930      	cbnz	r0, 8008fce <__d2b+0x22>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	f240 310f 	movw	r1, #783	@ 0x30f
 8008fc6:	4b23      	ldr	r3, [pc, #140]	@ (8009054 <__d2b+0xa8>)
 8008fc8:	4823      	ldr	r0, [pc, #140]	@ (8009058 <__d2b+0xac>)
 8008fca:	f001 fb3d 	bl	800a648 <__assert_func>
 8008fce:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fd2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fd6:	b10d      	cbz	r5, 8008fdc <__d2b+0x30>
 8008fd8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008fdc:	9301      	str	r3, [sp, #4]
 8008fde:	f1b8 0300 	subs.w	r3, r8, #0
 8008fe2:	d024      	beq.n	800902e <__d2b+0x82>
 8008fe4:	4668      	mov	r0, sp
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	f7ff fd1d 	bl	8008a26 <__lo0bits>
 8008fec:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008ff0:	b1d8      	cbz	r0, 800902a <__d2b+0x7e>
 8008ff2:	f1c0 0320 	rsb	r3, r0, #32
 8008ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ffa:	430b      	orrs	r3, r1
 8008ffc:	40c2      	lsrs	r2, r0
 8008ffe:	6163      	str	r3, [r4, #20]
 8009000:	9201      	str	r2, [sp, #4]
 8009002:	9b01      	ldr	r3, [sp, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	bf0c      	ite	eq
 8009008:	2201      	moveq	r2, #1
 800900a:	2202      	movne	r2, #2
 800900c:	61a3      	str	r3, [r4, #24]
 800900e:	6122      	str	r2, [r4, #16]
 8009010:	b1ad      	cbz	r5, 800903e <__d2b+0x92>
 8009012:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009016:	4405      	add	r5, r0
 8009018:	6035      	str	r5, [r6, #0]
 800901a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800901e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009020:	6018      	str	r0, [r3, #0]
 8009022:	4620      	mov	r0, r4
 8009024:	b002      	add	sp, #8
 8009026:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800902a:	6161      	str	r1, [r4, #20]
 800902c:	e7e9      	b.n	8009002 <__d2b+0x56>
 800902e:	a801      	add	r0, sp, #4
 8009030:	f7ff fcf9 	bl	8008a26 <__lo0bits>
 8009034:	9b01      	ldr	r3, [sp, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	6163      	str	r3, [r4, #20]
 800903a:	3020      	adds	r0, #32
 800903c:	e7e7      	b.n	800900e <__d2b+0x62>
 800903e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009042:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009046:	6030      	str	r0, [r6, #0]
 8009048:	6918      	ldr	r0, [r3, #16]
 800904a:	f7ff fccd 	bl	80089e8 <__hi0bits>
 800904e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009052:	e7e4      	b.n	800901e <__d2b+0x72>
 8009054:	0800c6bd 	.word	0x0800c6bd
 8009058:	0800c6ce 	.word	0x0800c6ce

0800905c <__ratio>:
 800905c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009060:	b085      	sub	sp, #20
 8009062:	e9cd 1000 	strd	r1, r0, [sp]
 8009066:	a902      	add	r1, sp, #8
 8009068:	f7ff ff58 	bl	8008f1c <__b2d>
 800906c:	468b      	mov	fp, r1
 800906e:	4606      	mov	r6, r0
 8009070:	460f      	mov	r7, r1
 8009072:	9800      	ldr	r0, [sp, #0]
 8009074:	a903      	add	r1, sp, #12
 8009076:	f7ff ff51 	bl	8008f1c <__b2d>
 800907a:	460d      	mov	r5, r1
 800907c:	9b01      	ldr	r3, [sp, #4]
 800907e:	4689      	mov	r9, r1
 8009080:	6919      	ldr	r1, [r3, #16]
 8009082:	9b00      	ldr	r3, [sp, #0]
 8009084:	4604      	mov	r4, r0
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	4630      	mov	r0, r6
 800908a:	1ac9      	subs	r1, r1, r3
 800908c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009096:	2b00      	cmp	r3, #0
 8009098:	bfcd      	iteet	gt
 800909a:	463a      	movgt	r2, r7
 800909c:	462a      	movle	r2, r5
 800909e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80090a2:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80090a6:	bfd8      	it	le
 80090a8:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80090ac:	464b      	mov	r3, r9
 80090ae:	4622      	mov	r2, r4
 80090b0:	4659      	mov	r1, fp
 80090b2:	f7f7 fb53 	bl	800075c <__aeabi_ddiv>
 80090b6:	b005      	add	sp, #20
 80090b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080090bc <__copybits>:
 80090bc:	3901      	subs	r1, #1
 80090be:	b570      	push	{r4, r5, r6, lr}
 80090c0:	1149      	asrs	r1, r1, #5
 80090c2:	6914      	ldr	r4, [r2, #16]
 80090c4:	3101      	adds	r1, #1
 80090c6:	f102 0314 	add.w	r3, r2, #20
 80090ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80090ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80090d2:	1f05      	subs	r5, r0, #4
 80090d4:	42a3      	cmp	r3, r4
 80090d6:	d30c      	bcc.n	80090f2 <__copybits+0x36>
 80090d8:	1aa3      	subs	r3, r4, r2
 80090da:	3b11      	subs	r3, #17
 80090dc:	f023 0303 	bic.w	r3, r3, #3
 80090e0:	3211      	adds	r2, #17
 80090e2:	42a2      	cmp	r2, r4
 80090e4:	bf88      	it	hi
 80090e6:	2300      	movhi	r3, #0
 80090e8:	4418      	add	r0, r3
 80090ea:	2300      	movs	r3, #0
 80090ec:	4288      	cmp	r0, r1
 80090ee:	d305      	bcc.n	80090fc <__copybits+0x40>
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80090f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80090fa:	e7eb      	b.n	80090d4 <__copybits+0x18>
 80090fc:	f840 3b04 	str.w	r3, [r0], #4
 8009100:	e7f4      	b.n	80090ec <__copybits+0x30>

08009102 <__any_on>:
 8009102:	f100 0214 	add.w	r2, r0, #20
 8009106:	6900      	ldr	r0, [r0, #16]
 8009108:	114b      	asrs	r3, r1, #5
 800910a:	4298      	cmp	r0, r3
 800910c:	b510      	push	{r4, lr}
 800910e:	db11      	blt.n	8009134 <__any_on+0x32>
 8009110:	dd0a      	ble.n	8009128 <__any_on+0x26>
 8009112:	f011 011f 	ands.w	r1, r1, #31
 8009116:	d007      	beq.n	8009128 <__any_on+0x26>
 8009118:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800911c:	fa24 f001 	lsr.w	r0, r4, r1
 8009120:	fa00 f101 	lsl.w	r1, r0, r1
 8009124:	428c      	cmp	r4, r1
 8009126:	d10b      	bne.n	8009140 <__any_on+0x3e>
 8009128:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800912c:	4293      	cmp	r3, r2
 800912e:	d803      	bhi.n	8009138 <__any_on+0x36>
 8009130:	2000      	movs	r0, #0
 8009132:	bd10      	pop	{r4, pc}
 8009134:	4603      	mov	r3, r0
 8009136:	e7f7      	b.n	8009128 <__any_on+0x26>
 8009138:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800913c:	2900      	cmp	r1, #0
 800913e:	d0f5      	beq.n	800912c <__any_on+0x2a>
 8009140:	2001      	movs	r0, #1
 8009142:	e7f6      	b.n	8009132 <__any_on+0x30>

08009144 <sulp>:
 8009144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009148:	460f      	mov	r7, r1
 800914a:	4690      	mov	r8, r2
 800914c:	f7ff fec6 	bl	8008edc <__ulp>
 8009150:	4604      	mov	r4, r0
 8009152:	460d      	mov	r5, r1
 8009154:	f1b8 0f00 	cmp.w	r8, #0
 8009158:	d011      	beq.n	800917e <sulp+0x3a>
 800915a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800915e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009162:	2b00      	cmp	r3, #0
 8009164:	dd0b      	ble.n	800917e <sulp+0x3a>
 8009166:	2400      	movs	r4, #0
 8009168:	051b      	lsls	r3, r3, #20
 800916a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800916e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009172:	4622      	mov	r2, r4
 8009174:	462b      	mov	r3, r5
 8009176:	f7f7 f9c7 	bl	8000508 <__aeabi_dmul>
 800917a:	4604      	mov	r4, r0
 800917c:	460d      	mov	r5, r1
 800917e:	4620      	mov	r0, r4
 8009180:	4629      	mov	r1, r5
 8009182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009188 <_strtod_l>:
 8009188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800918c:	b09f      	sub	sp, #124	@ 0x7c
 800918e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009190:	2200      	movs	r2, #0
 8009192:	460c      	mov	r4, r1
 8009194:	921a      	str	r2, [sp, #104]	@ 0x68
 8009196:	f04f 0a00 	mov.w	sl, #0
 800919a:	f04f 0b00 	mov.w	fp, #0
 800919e:	460a      	mov	r2, r1
 80091a0:	9005      	str	r0, [sp, #20]
 80091a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80091a4:	7811      	ldrb	r1, [r2, #0]
 80091a6:	292b      	cmp	r1, #43	@ 0x2b
 80091a8:	d048      	beq.n	800923c <_strtod_l+0xb4>
 80091aa:	d836      	bhi.n	800921a <_strtod_l+0x92>
 80091ac:	290d      	cmp	r1, #13
 80091ae:	d830      	bhi.n	8009212 <_strtod_l+0x8a>
 80091b0:	2908      	cmp	r1, #8
 80091b2:	d830      	bhi.n	8009216 <_strtod_l+0x8e>
 80091b4:	2900      	cmp	r1, #0
 80091b6:	d039      	beq.n	800922c <_strtod_l+0xa4>
 80091b8:	2200      	movs	r2, #0
 80091ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80091bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80091be:	782a      	ldrb	r2, [r5, #0]
 80091c0:	2a30      	cmp	r2, #48	@ 0x30
 80091c2:	f040 80b0 	bne.w	8009326 <_strtod_l+0x19e>
 80091c6:	786a      	ldrb	r2, [r5, #1]
 80091c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80091cc:	2a58      	cmp	r2, #88	@ 0x58
 80091ce:	d16c      	bne.n	80092aa <_strtod_l+0x122>
 80091d0:	9302      	str	r3, [sp, #8]
 80091d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091d4:	4a8f      	ldr	r2, [pc, #572]	@ (8009414 <_strtod_l+0x28c>)
 80091d6:	9301      	str	r3, [sp, #4]
 80091d8:	ab1a      	add	r3, sp, #104	@ 0x68
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	9805      	ldr	r0, [sp, #20]
 80091de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80091e0:	a919      	add	r1, sp, #100	@ 0x64
 80091e2:	f001 facb 	bl	800a77c <__gethex>
 80091e6:	f010 060f 	ands.w	r6, r0, #15
 80091ea:	4604      	mov	r4, r0
 80091ec:	d005      	beq.n	80091fa <_strtod_l+0x72>
 80091ee:	2e06      	cmp	r6, #6
 80091f0:	d126      	bne.n	8009240 <_strtod_l+0xb8>
 80091f2:	2300      	movs	r3, #0
 80091f4:	3501      	adds	r5, #1
 80091f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80091f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80091fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f040 8582 	bne.w	8009d06 <_strtod_l+0xb7e>
 8009202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009204:	b1bb      	cbz	r3, 8009236 <_strtod_l+0xae>
 8009206:	4650      	mov	r0, sl
 8009208:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800920c:	b01f      	add	sp, #124	@ 0x7c
 800920e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009212:	2920      	cmp	r1, #32
 8009214:	d1d0      	bne.n	80091b8 <_strtod_l+0x30>
 8009216:	3201      	adds	r2, #1
 8009218:	e7c3      	b.n	80091a2 <_strtod_l+0x1a>
 800921a:	292d      	cmp	r1, #45	@ 0x2d
 800921c:	d1cc      	bne.n	80091b8 <_strtod_l+0x30>
 800921e:	2101      	movs	r1, #1
 8009220:	910e      	str	r1, [sp, #56]	@ 0x38
 8009222:	1c51      	adds	r1, r2, #1
 8009224:	9119      	str	r1, [sp, #100]	@ 0x64
 8009226:	7852      	ldrb	r2, [r2, #1]
 8009228:	2a00      	cmp	r2, #0
 800922a:	d1c7      	bne.n	80091bc <_strtod_l+0x34>
 800922c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800922e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009230:	2b00      	cmp	r3, #0
 8009232:	f040 8566 	bne.w	8009d02 <_strtod_l+0xb7a>
 8009236:	4650      	mov	r0, sl
 8009238:	4659      	mov	r1, fp
 800923a:	e7e7      	b.n	800920c <_strtod_l+0x84>
 800923c:	2100      	movs	r1, #0
 800923e:	e7ef      	b.n	8009220 <_strtod_l+0x98>
 8009240:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009242:	b13a      	cbz	r2, 8009254 <_strtod_l+0xcc>
 8009244:	2135      	movs	r1, #53	@ 0x35
 8009246:	a81c      	add	r0, sp, #112	@ 0x70
 8009248:	f7ff ff38 	bl	80090bc <__copybits>
 800924c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800924e:	9805      	ldr	r0, [sp, #20]
 8009250:	f7ff fb18 	bl	8008884 <_Bfree>
 8009254:	3e01      	subs	r6, #1
 8009256:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009258:	2e04      	cmp	r6, #4
 800925a:	d806      	bhi.n	800926a <_strtod_l+0xe2>
 800925c:	e8df f006 	tbb	[pc, r6]
 8009260:	201d0314 	.word	0x201d0314
 8009264:	14          	.byte	0x14
 8009265:	00          	.byte	0x00
 8009266:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800926a:	05e1      	lsls	r1, r4, #23
 800926c:	bf48      	it	mi
 800926e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009272:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009276:	0d1b      	lsrs	r3, r3, #20
 8009278:	051b      	lsls	r3, r3, #20
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1bd      	bne.n	80091fa <_strtod_l+0x72>
 800927e:	f7fe fb17 	bl	80078b0 <__errno>
 8009282:	2322      	movs	r3, #34	@ 0x22
 8009284:	6003      	str	r3, [r0, #0]
 8009286:	e7b8      	b.n	80091fa <_strtod_l+0x72>
 8009288:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800928c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009290:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009294:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009298:	e7e7      	b.n	800926a <_strtod_l+0xe2>
 800929a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009418 <_strtod_l+0x290>
 800929e:	e7e4      	b.n	800926a <_strtod_l+0xe2>
 80092a0:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80092a4:	f04f 3aff 	mov.w	sl, #4294967295
 80092a8:	e7df      	b.n	800926a <_strtod_l+0xe2>
 80092aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092ac:	1c5a      	adds	r2, r3, #1
 80092ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	2b30      	cmp	r3, #48	@ 0x30
 80092b4:	d0f9      	beq.n	80092aa <_strtod_l+0x122>
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d09f      	beq.n	80091fa <_strtod_l+0x72>
 80092ba:	2301      	movs	r3, #1
 80092bc:	2700      	movs	r7, #0
 80092be:	220a      	movs	r2, #10
 80092c0:	46b9      	mov	r9, r7
 80092c2:	9308      	str	r3, [sp, #32]
 80092c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092c6:	970b      	str	r7, [sp, #44]	@ 0x2c
 80092c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80092ca:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80092cc:	7805      	ldrb	r5, [r0, #0]
 80092ce:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80092d2:	b2d9      	uxtb	r1, r3
 80092d4:	2909      	cmp	r1, #9
 80092d6:	d928      	bls.n	800932a <_strtod_l+0x1a2>
 80092d8:	2201      	movs	r2, #1
 80092da:	4950      	ldr	r1, [pc, #320]	@ (800941c <_strtod_l+0x294>)
 80092dc:	f001 f969 	bl	800a5b2 <strncmp>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d032      	beq.n	800934a <_strtod_l+0x1c2>
 80092e4:	2000      	movs	r0, #0
 80092e6:	462a      	mov	r2, r5
 80092e8:	4603      	mov	r3, r0
 80092ea:	464d      	mov	r5, r9
 80092ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80092ee:	2a65      	cmp	r2, #101	@ 0x65
 80092f0:	d001      	beq.n	80092f6 <_strtod_l+0x16e>
 80092f2:	2a45      	cmp	r2, #69	@ 0x45
 80092f4:	d114      	bne.n	8009320 <_strtod_l+0x198>
 80092f6:	b91d      	cbnz	r5, 8009300 <_strtod_l+0x178>
 80092f8:	9a08      	ldr	r2, [sp, #32]
 80092fa:	4302      	orrs	r2, r0
 80092fc:	d096      	beq.n	800922c <_strtod_l+0xa4>
 80092fe:	2500      	movs	r5, #0
 8009300:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009302:	1c62      	adds	r2, r4, #1
 8009304:	9219      	str	r2, [sp, #100]	@ 0x64
 8009306:	7862      	ldrb	r2, [r4, #1]
 8009308:	2a2b      	cmp	r2, #43	@ 0x2b
 800930a:	d07a      	beq.n	8009402 <_strtod_l+0x27a>
 800930c:	2a2d      	cmp	r2, #45	@ 0x2d
 800930e:	d07e      	beq.n	800940e <_strtod_l+0x286>
 8009310:	f04f 0c00 	mov.w	ip, #0
 8009314:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009318:	2909      	cmp	r1, #9
 800931a:	f240 8085 	bls.w	8009428 <_strtod_l+0x2a0>
 800931e:	9419      	str	r4, [sp, #100]	@ 0x64
 8009320:	f04f 0800 	mov.w	r8, #0
 8009324:	e0a5      	b.n	8009472 <_strtod_l+0x2ea>
 8009326:	2300      	movs	r3, #0
 8009328:	e7c8      	b.n	80092bc <_strtod_l+0x134>
 800932a:	f1b9 0f08 	cmp.w	r9, #8
 800932e:	bfd8      	it	le
 8009330:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009332:	f100 0001 	add.w	r0, r0, #1
 8009336:	bfd6      	itet	le
 8009338:	fb02 3301 	mlale	r3, r2, r1, r3
 800933c:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009340:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009342:	f109 0901 	add.w	r9, r9, #1
 8009346:	9019      	str	r0, [sp, #100]	@ 0x64
 8009348:	e7bf      	b.n	80092ca <_strtod_l+0x142>
 800934a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800934c:	1c5a      	adds	r2, r3, #1
 800934e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009350:	785a      	ldrb	r2, [r3, #1]
 8009352:	f1b9 0f00 	cmp.w	r9, #0
 8009356:	d03b      	beq.n	80093d0 <_strtod_l+0x248>
 8009358:	464d      	mov	r5, r9
 800935a:	900a      	str	r0, [sp, #40]	@ 0x28
 800935c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009360:	2b09      	cmp	r3, #9
 8009362:	d912      	bls.n	800938a <_strtod_l+0x202>
 8009364:	2301      	movs	r3, #1
 8009366:	e7c2      	b.n	80092ee <_strtod_l+0x166>
 8009368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800936a:	3001      	adds	r0, #1
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	9219      	str	r2, [sp, #100]	@ 0x64
 8009370:	785a      	ldrb	r2, [r3, #1]
 8009372:	2a30      	cmp	r2, #48	@ 0x30
 8009374:	d0f8      	beq.n	8009368 <_strtod_l+0x1e0>
 8009376:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800937a:	2b08      	cmp	r3, #8
 800937c:	f200 84c8 	bhi.w	8009d10 <_strtod_l+0xb88>
 8009380:	900a      	str	r0, [sp, #40]	@ 0x28
 8009382:	2000      	movs	r0, #0
 8009384:	4605      	mov	r5, r0
 8009386:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009388:	930c      	str	r3, [sp, #48]	@ 0x30
 800938a:	3a30      	subs	r2, #48	@ 0x30
 800938c:	f100 0301 	add.w	r3, r0, #1
 8009390:	d018      	beq.n	80093c4 <_strtod_l+0x23c>
 8009392:	462e      	mov	r6, r5
 8009394:	f04f 0e0a 	mov.w	lr, #10
 8009398:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800939a:	4419      	add	r1, r3
 800939c:	910a      	str	r1, [sp, #40]	@ 0x28
 800939e:	1c71      	adds	r1, r6, #1
 80093a0:	eba1 0c05 	sub.w	ip, r1, r5
 80093a4:	4563      	cmp	r3, ip
 80093a6:	dc15      	bgt.n	80093d4 <_strtod_l+0x24c>
 80093a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80093ac:	182b      	adds	r3, r5, r0
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	f105 0501 	add.w	r5, r5, #1
 80093b4:	4405      	add	r5, r0
 80093b6:	dc1a      	bgt.n	80093ee <_strtod_l+0x266>
 80093b8:	230a      	movs	r3, #10
 80093ba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80093bc:	fb03 2301 	mla	r3, r3, r1, r2
 80093c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80093c2:	2300      	movs	r3, #0
 80093c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093c6:	4618      	mov	r0, r3
 80093c8:	1c51      	adds	r1, r2, #1
 80093ca:	9119      	str	r1, [sp, #100]	@ 0x64
 80093cc:	7852      	ldrb	r2, [r2, #1]
 80093ce:	e7c5      	b.n	800935c <_strtod_l+0x1d4>
 80093d0:	4648      	mov	r0, r9
 80093d2:	e7ce      	b.n	8009372 <_strtod_l+0x1ea>
 80093d4:	2e08      	cmp	r6, #8
 80093d6:	dc05      	bgt.n	80093e4 <_strtod_l+0x25c>
 80093d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80093da:	fb0e f606 	mul.w	r6, lr, r6
 80093de:	960b      	str	r6, [sp, #44]	@ 0x2c
 80093e0:	460e      	mov	r6, r1
 80093e2:	e7dc      	b.n	800939e <_strtod_l+0x216>
 80093e4:	2910      	cmp	r1, #16
 80093e6:	bfd8      	it	le
 80093e8:	fb0e f707 	mulle.w	r7, lr, r7
 80093ec:	e7f8      	b.n	80093e0 <_strtod_l+0x258>
 80093ee:	2b0f      	cmp	r3, #15
 80093f0:	bfdc      	itt	le
 80093f2:	230a      	movle	r3, #10
 80093f4:	fb03 2707 	mlale	r7, r3, r7, r2
 80093f8:	e7e3      	b.n	80093c2 <_strtod_l+0x23a>
 80093fa:	2300      	movs	r3, #0
 80093fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80093fe:	2301      	movs	r3, #1
 8009400:	e77a      	b.n	80092f8 <_strtod_l+0x170>
 8009402:	f04f 0c00 	mov.w	ip, #0
 8009406:	1ca2      	adds	r2, r4, #2
 8009408:	9219      	str	r2, [sp, #100]	@ 0x64
 800940a:	78a2      	ldrb	r2, [r4, #2]
 800940c:	e782      	b.n	8009314 <_strtod_l+0x18c>
 800940e:	f04f 0c01 	mov.w	ip, #1
 8009412:	e7f8      	b.n	8009406 <_strtod_l+0x27e>
 8009414:	0800c8f4 	.word	0x0800c8f4
 8009418:	7ff00000 	.word	0x7ff00000
 800941c:	0800c727 	.word	0x0800c727
 8009420:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009422:	1c51      	adds	r1, r2, #1
 8009424:	9119      	str	r1, [sp, #100]	@ 0x64
 8009426:	7852      	ldrb	r2, [r2, #1]
 8009428:	2a30      	cmp	r2, #48	@ 0x30
 800942a:	d0f9      	beq.n	8009420 <_strtod_l+0x298>
 800942c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009430:	2908      	cmp	r1, #8
 8009432:	f63f af75 	bhi.w	8009320 <_strtod_l+0x198>
 8009436:	f04f 080a 	mov.w	r8, #10
 800943a:	3a30      	subs	r2, #48	@ 0x30
 800943c:	9209      	str	r2, [sp, #36]	@ 0x24
 800943e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009440:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009442:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009444:	1c56      	adds	r6, r2, #1
 8009446:	9619      	str	r6, [sp, #100]	@ 0x64
 8009448:	7852      	ldrb	r2, [r2, #1]
 800944a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800944e:	f1be 0f09 	cmp.w	lr, #9
 8009452:	d939      	bls.n	80094c8 <_strtod_l+0x340>
 8009454:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009456:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800945a:	1a76      	subs	r6, r6, r1
 800945c:	2e08      	cmp	r6, #8
 800945e:	dc03      	bgt.n	8009468 <_strtod_l+0x2e0>
 8009460:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009462:	4588      	cmp	r8, r1
 8009464:	bfa8      	it	ge
 8009466:	4688      	movge	r8, r1
 8009468:	f1bc 0f00 	cmp.w	ip, #0
 800946c:	d001      	beq.n	8009472 <_strtod_l+0x2ea>
 800946e:	f1c8 0800 	rsb	r8, r8, #0
 8009472:	2d00      	cmp	r5, #0
 8009474:	d14e      	bne.n	8009514 <_strtod_l+0x38c>
 8009476:	9908      	ldr	r1, [sp, #32]
 8009478:	4308      	orrs	r0, r1
 800947a:	f47f aebe 	bne.w	80091fa <_strtod_l+0x72>
 800947e:	2b00      	cmp	r3, #0
 8009480:	f47f aed4 	bne.w	800922c <_strtod_l+0xa4>
 8009484:	2a69      	cmp	r2, #105	@ 0x69
 8009486:	d028      	beq.n	80094da <_strtod_l+0x352>
 8009488:	dc25      	bgt.n	80094d6 <_strtod_l+0x34e>
 800948a:	2a49      	cmp	r2, #73	@ 0x49
 800948c:	d025      	beq.n	80094da <_strtod_l+0x352>
 800948e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009490:	f47f aecc 	bne.w	800922c <_strtod_l+0xa4>
 8009494:	4999      	ldr	r1, [pc, #612]	@ (80096fc <_strtod_l+0x574>)
 8009496:	a819      	add	r0, sp, #100	@ 0x64
 8009498:	f001 fb92 	bl	800abc0 <__match>
 800949c:	2800      	cmp	r0, #0
 800949e:	f43f aec5 	beq.w	800922c <_strtod_l+0xa4>
 80094a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	2b28      	cmp	r3, #40	@ 0x28
 80094a8:	d12e      	bne.n	8009508 <_strtod_l+0x380>
 80094aa:	4995      	ldr	r1, [pc, #596]	@ (8009700 <_strtod_l+0x578>)
 80094ac:	aa1c      	add	r2, sp, #112	@ 0x70
 80094ae:	a819      	add	r0, sp, #100	@ 0x64
 80094b0:	f001 fb9a 	bl	800abe8 <__hexnan>
 80094b4:	2805      	cmp	r0, #5
 80094b6:	d127      	bne.n	8009508 <_strtod_l+0x380>
 80094b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80094be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80094c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80094c6:	e698      	b.n	80091fa <_strtod_l+0x72>
 80094c8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094ca:	fb08 2101 	mla	r1, r8, r1, r2
 80094ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80094d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80094d4:	e7b5      	b.n	8009442 <_strtod_l+0x2ba>
 80094d6:	2a6e      	cmp	r2, #110	@ 0x6e
 80094d8:	e7da      	b.n	8009490 <_strtod_l+0x308>
 80094da:	498a      	ldr	r1, [pc, #552]	@ (8009704 <_strtod_l+0x57c>)
 80094dc:	a819      	add	r0, sp, #100	@ 0x64
 80094de:	f001 fb6f 	bl	800abc0 <__match>
 80094e2:	2800      	cmp	r0, #0
 80094e4:	f43f aea2 	beq.w	800922c <_strtod_l+0xa4>
 80094e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ea:	4987      	ldr	r1, [pc, #540]	@ (8009708 <_strtod_l+0x580>)
 80094ec:	3b01      	subs	r3, #1
 80094ee:	a819      	add	r0, sp, #100	@ 0x64
 80094f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80094f2:	f001 fb65 	bl	800abc0 <__match>
 80094f6:	b910      	cbnz	r0, 80094fe <_strtod_l+0x376>
 80094f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094fa:	3301      	adds	r3, #1
 80094fc:	9319      	str	r3, [sp, #100]	@ 0x64
 80094fe:	f04f 0a00 	mov.w	sl, #0
 8009502:	f8df b208 	ldr.w	fp, [pc, #520]	@ 800970c <_strtod_l+0x584>
 8009506:	e678      	b.n	80091fa <_strtod_l+0x72>
 8009508:	4881      	ldr	r0, [pc, #516]	@ (8009710 <_strtod_l+0x588>)
 800950a:	f001 f897 	bl	800a63c <nan>
 800950e:	4682      	mov	sl, r0
 8009510:	468b      	mov	fp, r1
 8009512:	e672      	b.n	80091fa <_strtod_l+0x72>
 8009514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009516:	f1b9 0f00 	cmp.w	r9, #0
 800951a:	bf08      	it	eq
 800951c:	46a9      	moveq	r9, r5
 800951e:	eba8 0303 	sub.w	r3, r8, r3
 8009522:	2d10      	cmp	r5, #16
 8009524:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009526:	462c      	mov	r4, r5
 8009528:	9309      	str	r3, [sp, #36]	@ 0x24
 800952a:	bfa8      	it	ge
 800952c:	2410      	movge	r4, #16
 800952e:	f7f6 ff71 	bl	8000414 <__aeabi_ui2d>
 8009532:	2d09      	cmp	r5, #9
 8009534:	4682      	mov	sl, r0
 8009536:	468b      	mov	fp, r1
 8009538:	dc11      	bgt.n	800955e <_strtod_l+0x3d6>
 800953a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953c:	2b00      	cmp	r3, #0
 800953e:	f43f ae5c 	beq.w	80091fa <_strtod_l+0x72>
 8009542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009544:	dd76      	ble.n	8009634 <_strtod_l+0x4ac>
 8009546:	2b16      	cmp	r3, #22
 8009548:	dc5d      	bgt.n	8009606 <_strtod_l+0x47e>
 800954a:	4972      	ldr	r1, [pc, #456]	@ (8009714 <_strtod_l+0x58c>)
 800954c:	4652      	mov	r2, sl
 800954e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009552:	465b      	mov	r3, fp
 8009554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009558:	f7f6 ffd6 	bl	8000508 <__aeabi_dmul>
 800955c:	e7d7      	b.n	800950e <_strtod_l+0x386>
 800955e:	4b6d      	ldr	r3, [pc, #436]	@ (8009714 <_strtod_l+0x58c>)
 8009560:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009564:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009568:	f7f6 ffce 	bl	8000508 <__aeabi_dmul>
 800956c:	4682      	mov	sl, r0
 800956e:	4638      	mov	r0, r7
 8009570:	468b      	mov	fp, r1
 8009572:	f7f6 ff4f 	bl	8000414 <__aeabi_ui2d>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	4650      	mov	r0, sl
 800957c:	4659      	mov	r1, fp
 800957e:	f7f6 fe0d 	bl	800019c <__adddf3>
 8009582:	2d0f      	cmp	r5, #15
 8009584:	4682      	mov	sl, r0
 8009586:	468b      	mov	fp, r1
 8009588:	ddd7      	ble.n	800953a <_strtod_l+0x3b2>
 800958a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800958c:	1b2c      	subs	r4, r5, r4
 800958e:	441c      	add	r4, r3
 8009590:	2c00      	cmp	r4, #0
 8009592:	f340 8093 	ble.w	80096bc <_strtod_l+0x534>
 8009596:	f014 030f 	ands.w	r3, r4, #15
 800959a:	d00a      	beq.n	80095b2 <_strtod_l+0x42a>
 800959c:	495d      	ldr	r1, [pc, #372]	@ (8009714 <_strtod_l+0x58c>)
 800959e:	4652      	mov	r2, sl
 80095a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095a8:	465b      	mov	r3, fp
 80095aa:	f7f6 ffad 	bl	8000508 <__aeabi_dmul>
 80095ae:	4682      	mov	sl, r0
 80095b0:	468b      	mov	fp, r1
 80095b2:	f034 040f 	bics.w	r4, r4, #15
 80095b6:	d073      	beq.n	80096a0 <_strtod_l+0x518>
 80095b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80095bc:	dd49      	ble.n	8009652 <_strtod_l+0x4ca>
 80095be:	2400      	movs	r4, #0
 80095c0:	46a0      	mov	r8, r4
 80095c2:	46a1      	mov	r9, r4
 80095c4:	940b      	str	r4, [sp, #44]	@ 0x2c
 80095c6:	2322      	movs	r3, #34	@ 0x22
 80095c8:	f04f 0a00 	mov.w	sl, #0
 80095cc:	9a05      	ldr	r2, [sp, #20]
 80095ce:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 800970c <_strtod_l+0x584>
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f43f ae0f 	beq.w	80091fa <_strtod_l+0x72>
 80095dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095de:	9805      	ldr	r0, [sp, #20]
 80095e0:	f7ff f950 	bl	8008884 <_Bfree>
 80095e4:	4649      	mov	r1, r9
 80095e6:	9805      	ldr	r0, [sp, #20]
 80095e8:	f7ff f94c 	bl	8008884 <_Bfree>
 80095ec:	4641      	mov	r1, r8
 80095ee:	9805      	ldr	r0, [sp, #20]
 80095f0:	f7ff f948 	bl	8008884 <_Bfree>
 80095f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80095f6:	9805      	ldr	r0, [sp, #20]
 80095f8:	f7ff f944 	bl	8008884 <_Bfree>
 80095fc:	4621      	mov	r1, r4
 80095fe:	9805      	ldr	r0, [sp, #20]
 8009600:	f7ff f940 	bl	8008884 <_Bfree>
 8009604:	e5f9      	b.n	80091fa <_strtod_l+0x72>
 8009606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009608:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800960c:	4293      	cmp	r3, r2
 800960e:	dbbc      	blt.n	800958a <_strtod_l+0x402>
 8009610:	4c40      	ldr	r4, [pc, #256]	@ (8009714 <_strtod_l+0x58c>)
 8009612:	f1c5 050f 	rsb	r5, r5, #15
 8009616:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800961a:	4652      	mov	r2, sl
 800961c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009620:	465b      	mov	r3, fp
 8009622:	f7f6 ff71 	bl	8000508 <__aeabi_dmul>
 8009626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009628:	1b5d      	subs	r5, r3, r5
 800962a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800962e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009632:	e791      	b.n	8009558 <_strtod_l+0x3d0>
 8009634:	3316      	adds	r3, #22
 8009636:	dba8      	blt.n	800958a <_strtod_l+0x402>
 8009638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800963a:	4650      	mov	r0, sl
 800963c:	eba3 0808 	sub.w	r8, r3, r8
 8009640:	4b34      	ldr	r3, [pc, #208]	@ (8009714 <_strtod_l+0x58c>)
 8009642:	4659      	mov	r1, fp
 8009644:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009648:	e9d8 2300 	ldrd	r2, r3, [r8]
 800964c:	f7f7 f886 	bl	800075c <__aeabi_ddiv>
 8009650:	e75d      	b.n	800950e <_strtod_l+0x386>
 8009652:	2300      	movs	r3, #0
 8009654:	4650      	mov	r0, sl
 8009656:	4659      	mov	r1, fp
 8009658:	461e      	mov	r6, r3
 800965a:	4f2f      	ldr	r7, [pc, #188]	@ (8009718 <_strtod_l+0x590>)
 800965c:	1124      	asrs	r4, r4, #4
 800965e:	2c01      	cmp	r4, #1
 8009660:	dc21      	bgt.n	80096a6 <_strtod_l+0x51e>
 8009662:	b10b      	cbz	r3, 8009668 <_strtod_l+0x4e0>
 8009664:	4682      	mov	sl, r0
 8009666:	468b      	mov	fp, r1
 8009668:	492b      	ldr	r1, [pc, #172]	@ (8009718 <_strtod_l+0x590>)
 800966a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800966e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009672:	4652      	mov	r2, sl
 8009674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009678:	465b      	mov	r3, fp
 800967a:	f7f6 ff45 	bl	8000508 <__aeabi_dmul>
 800967e:	4b23      	ldr	r3, [pc, #140]	@ (800970c <_strtod_l+0x584>)
 8009680:	460a      	mov	r2, r1
 8009682:	400b      	ands	r3, r1
 8009684:	4925      	ldr	r1, [pc, #148]	@ (800971c <_strtod_l+0x594>)
 8009686:	4682      	mov	sl, r0
 8009688:	428b      	cmp	r3, r1
 800968a:	d898      	bhi.n	80095be <_strtod_l+0x436>
 800968c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009690:	428b      	cmp	r3, r1
 8009692:	bf86      	itte	hi
 8009694:	f04f 3aff 	movhi.w	sl, #4294967295
 8009698:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8009720 <_strtod_l+0x598>
 800969c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80096a0:	2300      	movs	r3, #0
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	e076      	b.n	8009794 <_strtod_l+0x60c>
 80096a6:	07e2      	lsls	r2, r4, #31
 80096a8:	d504      	bpl.n	80096b4 <_strtod_l+0x52c>
 80096aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096ae:	f7f6 ff2b 	bl	8000508 <__aeabi_dmul>
 80096b2:	2301      	movs	r3, #1
 80096b4:	3601      	adds	r6, #1
 80096b6:	1064      	asrs	r4, r4, #1
 80096b8:	3708      	adds	r7, #8
 80096ba:	e7d0      	b.n	800965e <_strtod_l+0x4d6>
 80096bc:	d0f0      	beq.n	80096a0 <_strtod_l+0x518>
 80096be:	4264      	negs	r4, r4
 80096c0:	f014 020f 	ands.w	r2, r4, #15
 80096c4:	d00a      	beq.n	80096dc <_strtod_l+0x554>
 80096c6:	4b13      	ldr	r3, [pc, #76]	@ (8009714 <_strtod_l+0x58c>)
 80096c8:	4650      	mov	r0, sl
 80096ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096ce:	4659      	mov	r1, fp
 80096d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d4:	f7f7 f842 	bl	800075c <__aeabi_ddiv>
 80096d8:	4682      	mov	sl, r0
 80096da:	468b      	mov	fp, r1
 80096dc:	1124      	asrs	r4, r4, #4
 80096de:	d0df      	beq.n	80096a0 <_strtod_l+0x518>
 80096e0:	2c1f      	cmp	r4, #31
 80096e2:	dd1f      	ble.n	8009724 <_strtod_l+0x59c>
 80096e4:	2400      	movs	r4, #0
 80096e6:	46a0      	mov	r8, r4
 80096e8:	46a1      	mov	r9, r4
 80096ea:	940b      	str	r4, [sp, #44]	@ 0x2c
 80096ec:	2322      	movs	r3, #34	@ 0x22
 80096ee:	9a05      	ldr	r2, [sp, #20]
 80096f0:	f04f 0a00 	mov.w	sl, #0
 80096f4:	f04f 0b00 	mov.w	fp, #0
 80096f8:	6013      	str	r3, [r2, #0]
 80096fa:	e76b      	b.n	80095d4 <_strtod_l+0x44c>
 80096fc:	0800c615 	.word	0x0800c615
 8009700:	0800c8e0 	.word	0x0800c8e0
 8009704:	0800c60d 	.word	0x0800c60d
 8009708:	0800c644 	.word	0x0800c644
 800970c:	7ff00000 	.word	0x7ff00000
 8009710:	0800c77d 	.word	0x0800c77d
 8009714:	0800c818 	.word	0x0800c818
 8009718:	0800c7f0 	.word	0x0800c7f0
 800971c:	7ca00000 	.word	0x7ca00000
 8009720:	7fefffff 	.word	0x7fefffff
 8009724:	f014 0310 	ands.w	r3, r4, #16
 8009728:	bf18      	it	ne
 800972a:	236a      	movne	r3, #106	@ 0x6a
 800972c:	4650      	mov	r0, sl
 800972e:	9308      	str	r3, [sp, #32]
 8009730:	4659      	mov	r1, fp
 8009732:	2300      	movs	r3, #0
 8009734:	4e77      	ldr	r6, [pc, #476]	@ (8009914 <_strtod_l+0x78c>)
 8009736:	07e7      	lsls	r7, r4, #31
 8009738:	d504      	bpl.n	8009744 <_strtod_l+0x5bc>
 800973a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800973e:	f7f6 fee3 	bl	8000508 <__aeabi_dmul>
 8009742:	2301      	movs	r3, #1
 8009744:	1064      	asrs	r4, r4, #1
 8009746:	f106 0608 	add.w	r6, r6, #8
 800974a:	d1f4      	bne.n	8009736 <_strtod_l+0x5ae>
 800974c:	b10b      	cbz	r3, 8009752 <_strtod_l+0x5ca>
 800974e:	4682      	mov	sl, r0
 8009750:	468b      	mov	fp, r1
 8009752:	9b08      	ldr	r3, [sp, #32]
 8009754:	b1b3      	cbz	r3, 8009784 <_strtod_l+0x5fc>
 8009756:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800975a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800975e:	2b00      	cmp	r3, #0
 8009760:	4659      	mov	r1, fp
 8009762:	dd0f      	ble.n	8009784 <_strtod_l+0x5fc>
 8009764:	2b1f      	cmp	r3, #31
 8009766:	dd58      	ble.n	800981a <_strtod_l+0x692>
 8009768:	2b34      	cmp	r3, #52	@ 0x34
 800976a:	bfd8      	it	le
 800976c:	f04f 33ff 	movle.w	r3, #4294967295
 8009770:	f04f 0a00 	mov.w	sl, #0
 8009774:	bfcf      	iteee	gt
 8009776:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800977a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800977e:	4093      	lslle	r3, r2
 8009780:	ea03 0b01 	andle.w	fp, r3, r1
 8009784:	2200      	movs	r2, #0
 8009786:	2300      	movs	r3, #0
 8009788:	4650      	mov	r0, sl
 800978a:	4659      	mov	r1, fp
 800978c:	f7f7 f924 	bl	80009d8 <__aeabi_dcmpeq>
 8009790:	2800      	cmp	r0, #0
 8009792:	d1a7      	bne.n	80096e4 <_strtod_l+0x55c>
 8009794:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009796:	464a      	mov	r2, r9
 8009798:	9300      	str	r3, [sp, #0]
 800979a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800979c:	462b      	mov	r3, r5
 800979e:	9805      	ldr	r0, [sp, #20]
 80097a0:	f7ff f8d8 	bl	8008954 <__s2b>
 80097a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f43f af09 	beq.w	80095be <_strtod_l+0x436>
 80097ac:	2400      	movs	r4, #0
 80097ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b2:	2a00      	cmp	r2, #0
 80097b4:	eba3 0308 	sub.w	r3, r3, r8
 80097b8:	bfa8      	it	ge
 80097ba:	2300      	movge	r3, #0
 80097bc:	46a0      	mov	r8, r4
 80097be:	9312      	str	r3, [sp, #72]	@ 0x48
 80097c0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80097c4:	9316      	str	r3, [sp, #88]	@ 0x58
 80097c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097c8:	9805      	ldr	r0, [sp, #20]
 80097ca:	6859      	ldr	r1, [r3, #4]
 80097cc:	f7ff f81a 	bl	8008804 <_Balloc>
 80097d0:	4681      	mov	r9, r0
 80097d2:	2800      	cmp	r0, #0
 80097d4:	f43f aef7 	beq.w	80095c6 <_strtod_l+0x43e>
 80097d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80097da:	300c      	adds	r0, #12
 80097dc:	691a      	ldr	r2, [r3, #16]
 80097de:	f103 010c 	add.w	r1, r3, #12
 80097e2:	3202      	adds	r2, #2
 80097e4:	0092      	lsls	r2, r2, #2
 80097e6:	f7fe f89e 	bl	8007926 <memcpy>
 80097ea:	ab1c      	add	r3, sp, #112	@ 0x70
 80097ec:	9301      	str	r3, [sp, #4]
 80097ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	4652      	mov	r2, sl
 80097f4:	465b      	mov	r3, fp
 80097f6:	9805      	ldr	r0, [sp, #20]
 80097f8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097fc:	f7ff fbd6 	bl	8008fac <__d2b>
 8009800:	901a      	str	r0, [sp, #104]	@ 0x68
 8009802:	2800      	cmp	r0, #0
 8009804:	f43f aedf 	beq.w	80095c6 <_strtod_l+0x43e>
 8009808:	2101      	movs	r1, #1
 800980a:	9805      	ldr	r0, [sp, #20]
 800980c:	f7ff f938 	bl	8008a80 <__i2b>
 8009810:	4680      	mov	r8, r0
 8009812:	b948      	cbnz	r0, 8009828 <_strtod_l+0x6a0>
 8009814:	f04f 0800 	mov.w	r8, #0
 8009818:	e6d5      	b.n	80095c6 <_strtod_l+0x43e>
 800981a:	f04f 32ff 	mov.w	r2, #4294967295
 800981e:	fa02 f303 	lsl.w	r3, r2, r3
 8009822:	ea03 0a0a 	and.w	sl, r3, sl
 8009826:	e7ad      	b.n	8009784 <_strtod_l+0x5fc>
 8009828:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800982a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800982c:	2d00      	cmp	r5, #0
 800982e:	bfab      	itete	ge
 8009830:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009832:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009834:	18ef      	addge	r7, r5, r3
 8009836:	1b5e      	sublt	r6, r3, r5
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	bfa8      	it	ge
 800983c:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800983e:	eba5 0503 	sub.w	r5, r5, r3
 8009842:	4415      	add	r5, r2
 8009844:	4b34      	ldr	r3, [pc, #208]	@ (8009918 <_strtod_l+0x790>)
 8009846:	f105 35ff 	add.w	r5, r5, #4294967295
 800984a:	bfb8      	it	lt
 800984c:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800984e:	429d      	cmp	r5, r3
 8009850:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009854:	da50      	bge.n	80098f8 <_strtod_l+0x770>
 8009856:	1b5b      	subs	r3, r3, r5
 8009858:	2b1f      	cmp	r3, #31
 800985a:	f04f 0101 	mov.w	r1, #1
 800985e:	eba2 0203 	sub.w	r2, r2, r3
 8009862:	dc3d      	bgt.n	80098e0 <_strtod_l+0x758>
 8009864:	fa01 f303 	lsl.w	r3, r1, r3
 8009868:	9313      	str	r3, [sp, #76]	@ 0x4c
 800986a:	2300      	movs	r3, #0
 800986c:	9310      	str	r3, [sp, #64]	@ 0x40
 800986e:	18bd      	adds	r5, r7, r2
 8009870:	9b08      	ldr	r3, [sp, #32]
 8009872:	42af      	cmp	r7, r5
 8009874:	4416      	add	r6, r2
 8009876:	441e      	add	r6, r3
 8009878:	463b      	mov	r3, r7
 800987a:	bfa8      	it	ge
 800987c:	462b      	movge	r3, r5
 800987e:	42b3      	cmp	r3, r6
 8009880:	bfa8      	it	ge
 8009882:	4633      	movge	r3, r6
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfc2      	ittt	gt
 8009888:	1aed      	subgt	r5, r5, r3
 800988a:	1af6      	subgt	r6, r6, r3
 800988c:	1aff      	subgt	r7, r7, r3
 800988e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009890:	2b00      	cmp	r3, #0
 8009892:	dd16      	ble.n	80098c2 <_strtod_l+0x73a>
 8009894:	4641      	mov	r1, r8
 8009896:	461a      	mov	r2, r3
 8009898:	9805      	ldr	r0, [sp, #20]
 800989a:	f7ff f9a9 	bl	8008bf0 <__pow5mult>
 800989e:	4680      	mov	r8, r0
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d0b7      	beq.n	8009814 <_strtod_l+0x68c>
 80098a4:	4601      	mov	r1, r0
 80098a6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80098a8:	9805      	ldr	r0, [sp, #20]
 80098aa:	f7ff f8ff 	bl	8008aac <__multiply>
 80098ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80098b0:	2800      	cmp	r0, #0
 80098b2:	f43f ae88 	beq.w	80095c6 <_strtod_l+0x43e>
 80098b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098b8:	9805      	ldr	r0, [sp, #20]
 80098ba:	f7fe ffe3 	bl	8008884 <_Bfree>
 80098be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098c0:	931a      	str	r3, [sp, #104]	@ 0x68
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	dc1d      	bgt.n	8009902 <_strtod_l+0x77a>
 80098c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	dd27      	ble.n	800991c <_strtod_l+0x794>
 80098cc:	4649      	mov	r1, r9
 80098ce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80098d0:	9805      	ldr	r0, [sp, #20]
 80098d2:	f7ff f98d 	bl	8008bf0 <__pow5mult>
 80098d6:	4681      	mov	r9, r0
 80098d8:	bb00      	cbnz	r0, 800991c <_strtod_l+0x794>
 80098da:	f04f 0900 	mov.w	r9, #0
 80098de:	e672      	b.n	80095c6 <_strtod_l+0x43e>
 80098e0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80098e4:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80098e8:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80098ec:	35e2      	adds	r5, #226	@ 0xe2
 80098ee:	fa01 f305 	lsl.w	r3, r1, r5
 80098f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80098f4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80098f6:	e7ba      	b.n	800986e <_strtod_l+0x6e6>
 80098f8:	2300      	movs	r3, #0
 80098fa:	9310      	str	r3, [sp, #64]	@ 0x40
 80098fc:	2301      	movs	r3, #1
 80098fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009900:	e7b5      	b.n	800986e <_strtod_l+0x6e6>
 8009902:	462a      	mov	r2, r5
 8009904:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009906:	9805      	ldr	r0, [sp, #20]
 8009908:	f7ff f9cc 	bl	8008ca4 <__lshift>
 800990c:	901a      	str	r0, [sp, #104]	@ 0x68
 800990e:	2800      	cmp	r0, #0
 8009910:	d1d9      	bne.n	80098c6 <_strtod_l+0x73e>
 8009912:	e658      	b.n	80095c6 <_strtod_l+0x43e>
 8009914:	0800c908 	.word	0x0800c908
 8009918:	fffffc02 	.word	0xfffffc02
 800991c:	2e00      	cmp	r6, #0
 800991e:	dd07      	ble.n	8009930 <_strtod_l+0x7a8>
 8009920:	4649      	mov	r1, r9
 8009922:	4632      	mov	r2, r6
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	f7ff f9bd 	bl	8008ca4 <__lshift>
 800992a:	4681      	mov	r9, r0
 800992c:	2800      	cmp	r0, #0
 800992e:	d0d4      	beq.n	80098da <_strtod_l+0x752>
 8009930:	2f00      	cmp	r7, #0
 8009932:	dd08      	ble.n	8009946 <_strtod_l+0x7be>
 8009934:	4641      	mov	r1, r8
 8009936:	463a      	mov	r2, r7
 8009938:	9805      	ldr	r0, [sp, #20]
 800993a:	f7ff f9b3 	bl	8008ca4 <__lshift>
 800993e:	4680      	mov	r8, r0
 8009940:	2800      	cmp	r0, #0
 8009942:	f43f ae40 	beq.w	80095c6 <_strtod_l+0x43e>
 8009946:	464a      	mov	r2, r9
 8009948:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800994a:	9805      	ldr	r0, [sp, #20]
 800994c:	f7ff fa32 	bl	8008db4 <__mdiff>
 8009950:	4604      	mov	r4, r0
 8009952:	2800      	cmp	r0, #0
 8009954:	f43f ae37 	beq.w	80095c6 <_strtod_l+0x43e>
 8009958:	68c3      	ldr	r3, [r0, #12]
 800995a:	4641      	mov	r1, r8
 800995c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800995e:	2300      	movs	r3, #0
 8009960:	60c3      	str	r3, [r0, #12]
 8009962:	f7ff fa0b 	bl	8008d7c <__mcmp>
 8009966:	2800      	cmp	r0, #0
 8009968:	da3d      	bge.n	80099e6 <_strtod_l+0x85e>
 800996a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800996c:	ea53 030a 	orrs.w	r3, r3, sl
 8009970:	d163      	bne.n	8009a3a <_strtod_l+0x8b2>
 8009972:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009976:	2b00      	cmp	r3, #0
 8009978:	d15f      	bne.n	8009a3a <_strtod_l+0x8b2>
 800997a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800997e:	0d1b      	lsrs	r3, r3, #20
 8009980:	051b      	lsls	r3, r3, #20
 8009982:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009986:	d958      	bls.n	8009a3a <_strtod_l+0x8b2>
 8009988:	6963      	ldr	r3, [r4, #20]
 800998a:	b913      	cbnz	r3, 8009992 <_strtod_l+0x80a>
 800998c:	6923      	ldr	r3, [r4, #16]
 800998e:	2b01      	cmp	r3, #1
 8009990:	dd53      	ble.n	8009a3a <_strtod_l+0x8b2>
 8009992:	4621      	mov	r1, r4
 8009994:	2201      	movs	r2, #1
 8009996:	9805      	ldr	r0, [sp, #20]
 8009998:	f7ff f984 	bl	8008ca4 <__lshift>
 800999c:	4641      	mov	r1, r8
 800999e:	4604      	mov	r4, r0
 80099a0:	f7ff f9ec 	bl	8008d7c <__mcmp>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	dd48      	ble.n	8009a3a <_strtod_l+0x8b2>
 80099a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099ac:	9a08      	ldr	r2, [sp, #32]
 80099ae:	0d1b      	lsrs	r3, r3, #20
 80099b0:	051b      	lsls	r3, r3, #20
 80099b2:	2a00      	cmp	r2, #0
 80099b4:	d062      	beq.n	8009a7c <_strtod_l+0x8f4>
 80099b6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099ba:	d85f      	bhi.n	8009a7c <_strtod_l+0x8f4>
 80099bc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80099c0:	f67f ae94 	bls.w	80096ec <_strtod_l+0x564>
 80099c4:	4650      	mov	r0, sl
 80099c6:	4659      	mov	r1, fp
 80099c8:	4ba3      	ldr	r3, [pc, #652]	@ (8009c58 <_strtod_l+0xad0>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	f7f6 fd9c 	bl	8000508 <__aeabi_dmul>
 80099d0:	4ba2      	ldr	r3, [pc, #648]	@ (8009c5c <_strtod_l+0xad4>)
 80099d2:	4682      	mov	sl, r0
 80099d4:	400b      	ands	r3, r1
 80099d6:	468b      	mov	fp, r1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f47f adff 	bne.w	80095dc <_strtod_l+0x454>
 80099de:	2322      	movs	r3, #34	@ 0x22
 80099e0:	9a05      	ldr	r2, [sp, #20]
 80099e2:	6013      	str	r3, [r2, #0]
 80099e4:	e5fa      	b.n	80095dc <_strtod_l+0x454>
 80099e6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80099ea:	d165      	bne.n	8009ab8 <_strtod_l+0x930>
 80099ec:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099f2:	b35a      	cbz	r2, 8009a4c <_strtod_l+0x8c4>
 80099f4:	4a9a      	ldr	r2, [pc, #616]	@ (8009c60 <_strtod_l+0xad8>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d12b      	bne.n	8009a52 <_strtod_l+0x8ca>
 80099fa:	9b08      	ldr	r3, [sp, #32]
 80099fc:	4651      	mov	r1, sl
 80099fe:	b303      	cbz	r3, 8009a42 <_strtod_l+0x8ba>
 8009a00:	465a      	mov	r2, fp
 8009a02:	4b96      	ldr	r3, [pc, #600]	@ (8009c5c <_strtod_l+0xad4>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a0e:	d81b      	bhi.n	8009a48 <_strtod_l+0x8c0>
 8009a10:	0d1b      	lsrs	r3, r3, #20
 8009a12:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a16:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1a:	4299      	cmp	r1, r3
 8009a1c:	d119      	bne.n	8009a52 <_strtod_l+0x8ca>
 8009a1e:	4b91      	ldr	r3, [pc, #580]	@ (8009c64 <_strtod_l+0xadc>)
 8009a20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d102      	bne.n	8009a2c <_strtod_l+0x8a4>
 8009a26:	3101      	adds	r1, #1
 8009a28:	f43f adcd 	beq.w	80095c6 <_strtod_l+0x43e>
 8009a2c:	f04f 0a00 	mov.w	sl, #0
 8009a30:	4b8a      	ldr	r3, [pc, #552]	@ (8009c5c <_strtod_l+0xad4>)
 8009a32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a34:	401a      	ands	r2, r3
 8009a36:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1c1      	bne.n	80099c4 <_strtod_l+0x83c>
 8009a40:	e5cc      	b.n	80095dc <_strtod_l+0x454>
 8009a42:	f04f 33ff 	mov.w	r3, #4294967295
 8009a46:	e7e8      	b.n	8009a1a <_strtod_l+0x892>
 8009a48:	4613      	mov	r3, r2
 8009a4a:	e7e6      	b.n	8009a1a <_strtod_l+0x892>
 8009a4c:	ea53 030a 	orrs.w	r3, r3, sl
 8009a50:	d0aa      	beq.n	80099a8 <_strtod_l+0x820>
 8009a52:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a54:	b1db      	cbz	r3, 8009a8e <_strtod_l+0x906>
 8009a56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a58:	4213      	tst	r3, r2
 8009a5a:	d0ee      	beq.n	8009a3a <_strtod_l+0x8b2>
 8009a5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a5e:	4650      	mov	r0, sl
 8009a60:	4659      	mov	r1, fp
 8009a62:	9a08      	ldr	r2, [sp, #32]
 8009a64:	b1bb      	cbz	r3, 8009a96 <_strtod_l+0x90e>
 8009a66:	f7ff fb6d 	bl	8009144 <sulp>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	460b      	mov	r3, r1
 8009a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a72:	f7f6 fb93 	bl	800019c <__adddf3>
 8009a76:	4682      	mov	sl, r0
 8009a78:	468b      	mov	fp, r1
 8009a7a:	e7de      	b.n	8009a3a <_strtod_l+0x8b2>
 8009a7c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a80:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a84:	f04f 3aff 	mov.w	sl, #4294967295
 8009a88:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a8c:	e7d5      	b.n	8009a3a <_strtod_l+0x8b2>
 8009a8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a90:	ea13 0f0a 	tst.w	r3, sl
 8009a94:	e7e1      	b.n	8009a5a <_strtod_l+0x8d2>
 8009a96:	f7ff fb55 	bl	8009144 <sulp>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009aa2:	f7f6 fb79 	bl	8000198 <__aeabi_dsub>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	4682      	mov	sl, r0
 8009aac:	468b      	mov	fp, r1
 8009aae:	f7f6 ff93 	bl	80009d8 <__aeabi_dcmpeq>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d0c1      	beq.n	8009a3a <_strtod_l+0x8b2>
 8009ab6:	e619      	b.n	80096ec <_strtod_l+0x564>
 8009ab8:	4641      	mov	r1, r8
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff face 	bl	800905c <__ratio>
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009ac6:	4606      	mov	r6, r0
 8009ac8:	460f      	mov	r7, r1
 8009aca:	f7f6 ff99 	bl	8000a00 <__aeabi_dcmple>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	d06d      	beq.n	8009bae <_strtod_l+0xa26>
 8009ad2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d178      	bne.n	8009bca <_strtod_l+0xa42>
 8009ad8:	f1ba 0f00 	cmp.w	sl, #0
 8009adc:	d156      	bne.n	8009b8c <_strtod_l+0xa04>
 8009ade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d158      	bne.n	8009b9a <_strtod_l+0xa12>
 8009ae8:	2200      	movs	r2, #0
 8009aea:	4630      	mov	r0, r6
 8009aec:	4639      	mov	r1, r7
 8009aee:	4b5e      	ldr	r3, [pc, #376]	@ (8009c68 <_strtod_l+0xae0>)
 8009af0:	f7f6 ff7c 	bl	80009ec <__aeabi_dcmplt>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d157      	bne.n	8009ba8 <_strtod_l+0xa20>
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	2200      	movs	r2, #0
 8009afe:	4b5b      	ldr	r3, [pc, #364]	@ (8009c6c <_strtod_l+0xae4>)
 8009b00:	f7f6 fd02 	bl	8000508 <__aeabi_dmul>
 8009b04:	4606      	mov	r6, r0
 8009b06:	460f      	mov	r7, r1
 8009b08:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b0c:	9606      	str	r6, [sp, #24]
 8009b0e:	9307      	str	r3, [sp, #28]
 8009b10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b14:	4d51      	ldr	r5, [pc, #324]	@ (8009c5c <_strtod_l+0xad4>)
 8009b16:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b1c:	401d      	ands	r5, r3
 8009b1e:	4b54      	ldr	r3, [pc, #336]	@ (8009c70 <_strtod_l+0xae8>)
 8009b20:	429d      	cmp	r5, r3
 8009b22:	f040 80ab 	bne.w	8009c7c <_strtod_l+0xaf4>
 8009b26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b28:	4650      	mov	r0, sl
 8009b2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b2e:	4659      	mov	r1, fp
 8009b30:	f7ff f9d4 	bl	8008edc <__ulp>
 8009b34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b38:	f7f6 fce6 	bl	8000508 <__aeabi_dmul>
 8009b3c:	4652      	mov	r2, sl
 8009b3e:	465b      	mov	r3, fp
 8009b40:	f7f6 fb2c 	bl	800019c <__adddf3>
 8009b44:	460b      	mov	r3, r1
 8009b46:	4945      	ldr	r1, [pc, #276]	@ (8009c5c <_strtod_l+0xad4>)
 8009b48:	4a4a      	ldr	r2, [pc, #296]	@ (8009c74 <_strtod_l+0xaec>)
 8009b4a:	4019      	ands	r1, r3
 8009b4c:	4291      	cmp	r1, r2
 8009b4e:	4682      	mov	sl, r0
 8009b50:	d942      	bls.n	8009bd8 <_strtod_l+0xa50>
 8009b52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b54:	4b43      	ldr	r3, [pc, #268]	@ (8009c64 <_strtod_l+0xadc>)
 8009b56:	429a      	cmp	r2, r3
 8009b58:	d103      	bne.n	8009b62 <_strtod_l+0x9da>
 8009b5a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	f43f ad32 	beq.w	80095c6 <_strtod_l+0x43e>
 8009b62:	f04f 3aff 	mov.w	sl, #4294967295
 8009b66:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8009c64 <_strtod_l+0xadc>
 8009b6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b6c:	9805      	ldr	r0, [sp, #20]
 8009b6e:	f7fe fe89 	bl	8008884 <_Bfree>
 8009b72:	4649      	mov	r1, r9
 8009b74:	9805      	ldr	r0, [sp, #20]
 8009b76:	f7fe fe85 	bl	8008884 <_Bfree>
 8009b7a:	4641      	mov	r1, r8
 8009b7c:	9805      	ldr	r0, [sp, #20]
 8009b7e:	f7fe fe81 	bl	8008884 <_Bfree>
 8009b82:	4621      	mov	r1, r4
 8009b84:	9805      	ldr	r0, [sp, #20]
 8009b86:	f7fe fe7d 	bl	8008884 <_Bfree>
 8009b8a:	e61c      	b.n	80097c6 <_strtod_l+0x63e>
 8009b8c:	f1ba 0f01 	cmp.w	sl, #1
 8009b90:	d103      	bne.n	8009b9a <_strtod_l+0xa12>
 8009b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f43f ada9 	beq.w	80096ec <_strtod_l+0x564>
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	4b36      	ldr	r3, [pc, #216]	@ (8009c78 <_strtod_l+0xaf0>)
 8009b9e:	2600      	movs	r6, #0
 8009ba0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ba4:	4f30      	ldr	r7, [pc, #192]	@ (8009c68 <_strtod_l+0xae0>)
 8009ba6:	e7b3      	b.n	8009b10 <_strtod_l+0x988>
 8009ba8:	2600      	movs	r6, #0
 8009baa:	4f30      	ldr	r7, [pc, #192]	@ (8009c6c <_strtod_l+0xae4>)
 8009bac:	e7ac      	b.n	8009b08 <_strtod_l+0x980>
 8009bae:	4630      	mov	r0, r6
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	4b2e      	ldr	r3, [pc, #184]	@ (8009c6c <_strtod_l+0xae4>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	f7f6 fca7 	bl	8000508 <__aeabi_dmul>
 8009bba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460f      	mov	r7, r1
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0a1      	beq.n	8009b08 <_strtod_l+0x980>
 8009bc4:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009bc8:	e7a2      	b.n	8009b10 <_strtod_l+0x988>
 8009bca:	2200      	movs	r2, #0
 8009bcc:	4b26      	ldr	r3, [pc, #152]	@ (8009c68 <_strtod_l+0xae0>)
 8009bce:	4616      	mov	r6, r2
 8009bd0:	461f      	mov	r7, r3
 8009bd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009bd6:	e79b      	b.n	8009b10 <_strtod_l+0x988>
 8009bd8:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009bdc:	9b08      	ldr	r3, [sp, #32]
 8009bde:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1c1      	bne.n	8009b6a <_strtod_l+0x9e2>
 8009be6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009bea:	0d1b      	lsrs	r3, r3, #20
 8009bec:	051b      	lsls	r3, r3, #20
 8009bee:	429d      	cmp	r5, r3
 8009bf0:	d1bb      	bne.n	8009b6a <_strtod_l+0x9e2>
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	4639      	mov	r1, r7
 8009bf6:	f7f7 fae1 	bl	80011bc <__aeabi_d2lz>
 8009bfa:	f7f6 fc57 	bl	80004ac <__aeabi_l2d>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 fac7 	bl	8000198 <__aeabi_dsub>
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c12:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c18:	ea46 060a 	orr.w	r6, r6, sl
 8009c1c:	431e      	orrs	r6, r3
 8009c1e:	d06a      	beq.n	8009cf6 <_strtod_l+0xb6e>
 8009c20:	a309      	add	r3, pc, #36	@ (adr r3, 8009c48 <_strtod_l+0xac0>)
 8009c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c26:	f7f6 fee1 	bl	80009ec <__aeabi_dcmplt>
 8009c2a:	2800      	cmp	r0, #0
 8009c2c:	f47f acd6 	bne.w	80095dc <_strtod_l+0x454>
 8009c30:	a307      	add	r3, pc, #28	@ (adr r3, 8009c50 <_strtod_l+0xac8>)
 8009c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c3a:	f7f6 fef5 	bl	8000a28 <__aeabi_dcmpgt>
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	d093      	beq.n	8009b6a <_strtod_l+0x9e2>
 8009c42:	e4cb      	b.n	80095dc <_strtod_l+0x454>
 8009c44:	f3af 8000 	nop.w
 8009c48:	94a03595 	.word	0x94a03595
 8009c4c:	3fdfffff 	.word	0x3fdfffff
 8009c50:	35afe535 	.word	0x35afe535
 8009c54:	3fe00000 	.word	0x3fe00000
 8009c58:	39500000 	.word	0x39500000
 8009c5c:	7ff00000 	.word	0x7ff00000
 8009c60:	000fffff 	.word	0x000fffff
 8009c64:	7fefffff 	.word	0x7fefffff
 8009c68:	3ff00000 	.word	0x3ff00000
 8009c6c:	3fe00000 	.word	0x3fe00000
 8009c70:	7fe00000 	.word	0x7fe00000
 8009c74:	7c9fffff 	.word	0x7c9fffff
 8009c78:	bff00000 	.word	0xbff00000
 8009c7c:	9b08      	ldr	r3, [sp, #32]
 8009c7e:	b323      	cbz	r3, 8009cca <_strtod_l+0xb42>
 8009c80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c84:	d821      	bhi.n	8009cca <_strtod_l+0xb42>
 8009c86:	a328      	add	r3, pc, #160	@ (adr r3, 8009d28 <_strtod_l+0xba0>)
 8009c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	4639      	mov	r1, r7
 8009c90:	f7f6 feb6 	bl	8000a00 <__aeabi_dcmple>
 8009c94:	b1a0      	cbz	r0, 8009cc0 <_strtod_l+0xb38>
 8009c96:	4639      	mov	r1, r7
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7f6 ff0d 	bl	8000ab8 <__aeabi_d2uiz>
 8009c9e:	2801      	cmp	r0, #1
 8009ca0:	bf38      	it	cc
 8009ca2:	2001      	movcc	r0, #1
 8009ca4:	f7f6 fbb6 	bl	8000414 <__aeabi_ui2d>
 8009ca8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009caa:	4606      	mov	r6, r0
 8009cac:	460f      	mov	r7, r1
 8009cae:	b9fb      	cbnz	r3, 8009cf0 <_strtod_l+0xb68>
 8009cb0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009cb4:	9014      	str	r0, [sp, #80]	@ 0x50
 8009cb6:	9315      	str	r3, [sp, #84]	@ 0x54
 8009cb8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009cbc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009cc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cc2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009cc6:	1b5b      	subs	r3, r3, r5
 8009cc8:	9311      	str	r3, [sp, #68]	@ 0x44
 8009cca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cce:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009cd2:	f7ff f903 	bl	8008edc <__ulp>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4650      	mov	r0, sl
 8009cdc:	4659      	mov	r1, fp
 8009cde:	f7f6 fc13 	bl	8000508 <__aeabi_dmul>
 8009ce2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ce6:	f7f6 fa59 	bl	800019c <__adddf3>
 8009cea:	4682      	mov	sl, r0
 8009cec:	468b      	mov	fp, r1
 8009cee:	e775      	b.n	8009bdc <_strtod_l+0xa54>
 8009cf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009cf4:	e7e0      	b.n	8009cb8 <_strtod_l+0xb30>
 8009cf6:	a30e      	add	r3, pc, #56	@ (adr r3, 8009d30 <_strtod_l+0xba8>)
 8009cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfc:	f7f6 fe76 	bl	80009ec <__aeabi_dcmplt>
 8009d00:	e79d      	b.n	8009c3e <_strtod_l+0xab6>
 8009d02:	2300      	movs	r3, #0
 8009d04:	930e      	str	r3, [sp, #56]	@ 0x38
 8009d06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d08:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d0a:	6013      	str	r3, [r2, #0]
 8009d0c:	f7ff ba79 	b.w	8009202 <_strtod_l+0x7a>
 8009d10:	2a65      	cmp	r2, #101	@ 0x65
 8009d12:	f43f ab72 	beq.w	80093fa <_strtod_l+0x272>
 8009d16:	2a45      	cmp	r2, #69	@ 0x45
 8009d18:	f43f ab6f 	beq.w	80093fa <_strtod_l+0x272>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	f7ff bbaa 	b.w	8009476 <_strtod_l+0x2ee>
 8009d22:	bf00      	nop
 8009d24:	f3af 8000 	nop.w
 8009d28:	ffc00000 	.word	0xffc00000
 8009d2c:	41dfffff 	.word	0x41dfffff
 8009d30:	94a03595 	.word	0x94a03595
 8009d34:	3fcfffff 	.word	0x3fcfffff

08009d38 <_strtod_r>:
 8009d38:	4b01      	ldr	r3, [pc, #4]	@ (8009d40 <_strtod_r+0x8>)
 8009d3a:	f7ff ba25 	b.w	8009188 <_strtod_l>
 8009d3e:	bf00      	nop
 8009d40:	20000080 	.word	0x20000080

08009d44 <_strtol_l.isra.0>:
 8009d44:	2b24      	cmp	r3, #36	@ 0x24
 8009d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d4a:	4686      	mov	lr, r0
 8009d4c:	4690      	mov	r8, r2
 8009d4e:	d801      	bhi.n	8009d54 <_strtol_l.isra.0+0x10>
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	d106      	bne.n	8009d62 <_strtol_l.isra.0+0x1e>
 8009d54:	f7fd fdac 	bl	80078b0 <__errno>
 8009d58:	2316      	movs	r3, #22
 8009d5a:	6003      	str	r3, [r0, #0]
 8009d5c:	2000      	movs	r0, #0
 8009d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d62:	460d      	mov	r5, r1
 8009d64:	4833      	ldr	r0, [pc, #204]	@ (8009e34 <_strtol_l.isra.0+0xf0>)
 8009d66:	462a      	mov	r2, r5
 8009d68:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d6c:	5d06      	ldrb	r6, [r0, r4]
 8009d6e:	f016 0608 	ands.w	r6, r6, #8
 8009d72:	d1f8      	bne.n	8009d66 <_strtol_l.isra.0+0x22>
 8009d74:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d76:	d110      	bne.n	8009d9a <_strtol_l.isra.0+0x56>
 8009d78:	2601      	movs	r6, #1
 8009d7a:	782c      	ldrb	r4, [r5, #0]
 8009d7c:	1c95      	adds	r5, r2, #2
 8009d7e:	f033 0210 	bics.w	r2, r3, #16
 8009d82:	d115      	bne.n	8009db0 <_strtol_l.isra.0+0x6c>
 8009d84:	2c30      	cmp	r4, #48	@ 0x30
 8009d86:	d10d      	bne.n	8009da4 <_strtol_l.isra.0+0x60>
 8009d88:	782a      	ldrb	r2, [r5, #0]
 8009d8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d8e:	2a58      	cmp	r2, #88	@ 0x58
 8009d90:	d108      	bne.n	8009da4 <_strtol_l.isra.0+0x60>
 8009d92:	786c      	ldrb	r4, [r5, #1]
 8009d94:	3502      	adds	r5, #2
 8009d96:	2310      	movs	r3, #16
 8009d98:	e00a      	b.n	8009db0 <_strtol_l.isra.0+0x6c>
 8009d9a:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d9c:	bf04      	itt	eq
 8009d9e:	782c      	ldrbeq	r4, [r5, #0]
 8009da0:	1c95      	addeq	r5, r2, #2
 8009da2:	e7ec      	b.n	8009d7e <_strtol_l.isra.0+0x3a>
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d1f6      	bne.n	8009d96 <_strtol_l.isra.0+0x52>
 8009da8:	2c30      	cmp	r4, #48	@ 0x30
 8009daa:	bf14      	ite	ne
 8009dac:	230a      	movne	r3, #10
 8009dae:	2308      	moveq	r3, #8
 8009db0:	2200      	movs	r2, #0
 8009db2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009db6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009dba:	fbbc f9f3 	udiv	r9, ip, r3
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	fb03 ca19 	mls	sl, r3, r9, ip
 8009dc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009dc8:	2f09      	cmp	r7, #9
 8009dca:	d80f      	bhi.n	8009dec <_strtol_l.isra.0+0xa8>
 8009dcc:	463c      	mov	r4, r7
 8009dce:	42a3      	cmp	r3, r4
 8009dd0:	dd1b      	ble.n	8009e0a <_strtol_l.isra.0+0xc6>
 8009dd2:	1c57      	adds	r7, r2, #1
 8009dd4:	d007      	beq.n	8009de6 <_strtol_l.isra.0+0xa2>
 8009dd6:	4581      	cmp	r9, r0
 8009dd8:	d314      	bcc.n	8009e04 <_strtol_l.isra.0+0xc0>
 8009dda:	d101      	bne.n	8009de0 <_strtol_l.isra.0+0x9c>
 8009ddc:	45a2      	cmp	sl, r4
 8009dde:	db11      	blt.n	8009e04 <_strtol_l.isra.0+0xc0>
 8009de0:	2201      	movs	r2, #1
 8009de2:	fb00 4003 	mla	r0, r0, r3, r4
 8009de6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dea:	e7eb      	b.n	8009dc4 <_strtol_l.isra.0+0x80>
 8009dec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009df0:	2f19      	cmp	r7, #25
 8009df2:	d801      	bhi.n	8009df8 <_strtol_l.isra.0+0xb4>
 8009df4:	3c37      	subs	r4, #55	@ 0x37
 8009df6:	e7ea      	b.n	8009dce <_strtol_l.isra.0+0x8a>
 8009df8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009dfc:	2f19      	cmp	r7, #25
 8009dfe:	d804      	bhi.n	8009e0a <_strtol_l.isra.0+0xc6>
 8009e00:	3c57      	subs	r4, #87	@ 0x57
 8009e02:	e7e4      	b.n	8009dce <_strtol_l.isra.0+0x8a>
 8009e04:	f04f 32ff 	mov.w	r2, #4294967295
 8009e08:	e7ed      	b.n	8009de6 <_strtol_l.isra.0+0xa2>
 8009e0a:	1c53      	adds	r3, r2, #1
 8009e0c:	d108      	bne.n	8009e20 <_strtol_l.isra.0+0xdc>
 8009e0e:	2322      	movs	r3, #34	@ 0x22
 8009e10:	4660      	mov	r0, ip
 8009e12:	f8ce 3000 	str.w	r3, [lr]
 8009e16:	f1b8 0f00 	cmp.w	r8, #0
 8009e1a:	d0a0      	beq.n	8009d5e <_strtol_l.isra.0+0x1a>
 8009e1c:	1e69      	subs	r1, r5, #1
 8009e1e:	e006      	b.n	8009e2e <_strtol_l.isra.0+0xea>
 8009e20:	b106      	cbz	r6, 8009e24 <_strtol_l.isra.0+0xe0>
 8009e22:	4240      	negs	r0, r0
 8009e24:	f1b8 0f00 	cmp.w	r8, #0
 8009e28:	d099      	beq.n	8009d5e <_strtol_l.isra.0+0x1a>
 8009e2a:	2a00      	cmp	r2, #0
 8009e2c:	d1f6      	bne.n	8009e1c <_strtol_l.isra.0+0xd8>
 8009e2e:	f8c8 1000 	str.w	r1, [r8]
 8009e32:	e794      	b.n	8009d5e <_strtol_l.isra.0+0x1a>
 8009e34:	0800c931 	.word	0x0800c931

08009e38 <_strtol_r>:
 8009e38:	f7ff bf84 	b.w	8009d44 <_strtol_l.isra.0>

08009e3c <__ssputs_r>:
 8009e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e40:	461f      	mov	r7, r3
 8009e42:	688e      	ldr	r6, [r1, #8]
 8009e44:	4682      	mov	sl, r0
 8009e46:	42be      	cmp	r6, r7
 8009e48:	460c      	mov	r4, r1
 8009e4a:	4690      	mov	r8, r2
 8009e4c:	680b      	ldr	r3, [r1, #0]
 8009e4e:	d82d      	bhi.n	8009eac <__ssputs_r+0x70>
 8009e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e58:	d026      	beq.n	8009ea8 <__ssputs_r+0x6c>
 8009e5a:	6965      	ldr	r5, [r4, #20]
 8009e5c:	6909      	ldr	r1, [r1, #16]
 8009e5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e62:	eba3 0901 	sub.w	r9, r3, r1
 8009e66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e6a:	1c7b      	adds	r3, r7, #1
 8009e6c:	444b      	add	r3, r9
 8009e6e:	106d      	asrs	r5, r5, #1
 8009e70:	429d      	cmp	r5, r3
 8009e72:	bf38      	it	cc
 8009e74:	461d      	movcc	r5, r3
 8009e76:	0553      	lsls	r3, r2, #21
 8009e78:	d527      	bpl.n	8009eca <__ssputs_r+0x8e>
 8009e7a:	4629      	mov	r1, r5
 8009e7c:	f7fe fc36 	bl	80086ec <_malloc_r>
 8009e80:	4606      	mov	r6, r0
 8009e82:	b360      	cbz	r0, 8009ede <__ssputs_r+0xa2>
 8009e84:	464a      	mov	r2, r9
 8009e86:	6921      	ldr	r1, [r4, #16]
 8009e88:	f7fd fd4d 	bl	8007926 <memcpy>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e96:	81a3      	strh	r3, [r4, #12]
 8009e98:	6126      	str	r6, [r4, #16]
 8009e9a:	444e      	add	r6, r9
 8009e9c:	6026      	str	r6, [r4, #0]
 8009e9e:	463e      	mov	r6, r7
 8009ea0:	6165      	str	r5, [r4, #20]
 8009ea2:	eba5 0509 	sub.w	r5, r5, r9
 8009ea6:	60a5      	str	r5, [r4, #8]
 8009ea8:	42be      	cmp	r6, r7
 8009eaa:	d900      	bls.n	8009eae <__ssputs_r+0x72>
 8009eac:	463e      	mov	r6, r7
 8009eae:	4632      	mov	r2, r6
 8009eb0:	4641      	mov	r1, r8
 8009eb2:	6820      	ldr	r0, [r4, #0]
 8009eb4:	f000 fb63 	bl	800a57e <memmove>
 8009eb8:	2000      	movs	r0, #0
 8009eba:	68a3      	ldr	r3, [r4, #8]
 8009ebc:	1b9b      	subs	r3, r3, r6
 8009ebe:	60a3      	str	r3, [r4, #8]
 8009ec0:	6823      	ldr	r3, [r4, #0]
 8009ec2:	4433      	add	r3, r6
 8009ec4:	6023      	str	r3, [r4, #0]
 8009ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eca:	462a      	mov	r2, r5
 8009ecc:	f000 ff39 	bl	800ad42 <_realloc_r>
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	2800      	cmp	r0, #0
 8009ed4:	d1e0      	bne.n	8009e98 <__ssputs_r+0x5c>
 8009ed6:	4650      	mov	r0, sl
 8009ed8:	6921      	ldr	r1, [r4, #16]
 8009eda:	f7fe fb95 	bl	8008608 <_free_r>
 8009ede:	230c      	movs	r3, #12
 8009ee0:	f8ca 3000 	str.w	r3, [sl]
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8009eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009eee:	81a3      	strh	r3, [r4, #12]
 8009ef0:	e7e9      	b.n	8009ec6 <__ssputs_r+0x8a>
	...

08009ef4 <_svfiprintf_r>:
 8009ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef8:	4698      	mov	r8, r3
 8009efa:	898b      	ldrh	r3, [r1, #12]
 8009efc:	4607      	mov	r7, r0
 8009efe:	061b      	lsls	r3, r3, #24
 8009f00:	460d      	mov	r5, r1
 8009f02:	4614      	mov	r4, r2
 8009f04:	b09d      	sub	sp, #116	@ 0x74
 8009f06:	d510      	bpl.n	8009f2a <_svfiprintf_r+0x36>
 8009f08:	690b      	ldr	r3, [r1, #16]
 8009f0a:	b973      	cbnz	r3, 8009f2a <_svfiprintf_r+0x36>
 8009f0c:	2140      	movs	r1, #64	@ 0x40
 8009f0e:	f7fe fbed 	bl	80086ec <_malloc_r>
 8009f12:	6028      	str	r0, [r5, #0]
 8009f14:	6128      	str	r0, [r5, #16]
 8009f16:	b930      	cbnz	r0, 8009f26 <_svfiprintf_r+0x32>
 8009f18:	230c      	movs	r3, #12
 8009f1a:	603b      	str	r3, [r7, #0]
 8009f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f20:	b01d      	add	sp, #116	@ 0x74
 8009f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f26:	2340      	movs	r3, #64	@ 0x40
 8009f28:	616b      	str	r3, [r5, #20]
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f2e:	2320      	movs	r3, #32
 8009f30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f34:	2330      	movs	r3, #48	@ 0x30
 8009f36:	f04f 0901 	mov.w	r9, #1
 8009f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f3e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a0d8 <_svfiprintf_r+0x1e4>
 8009f42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f46:	4623      	mov	r3, r4
 8009f48:	469a      	mov	sl, r3
 8009f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f4e:	b10a      	cbz	r2, 8009f54 <_svfiprintf_r+0x60>
 8009f50:	2a25      	cmp	r2, #37	@ 0x25
 8009f52:	d1f9      	bne.n	8009f48 <_svfiprintf_r+0x54>
 8009f54:	ebba 0b04 	subs.w	fp, sl, r4
 8009f58:	d00b      	beq.n	8009f72 <_svfiprintf_r+0x7e>
 8009f5a:	465b      	mov	r3, fp
 8009f5c:	4622      	mov	r2, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	4638      	mov	r0, r7
 8009f62:	f7ff ff6b 	bl	8009e3c <__ssputs_r>
 8009f66:	3001      	adds	r0, #1
 8009f68:	f000 80a7 	beq.w	800a0ba <_svfiprintf_r+0x1c6>
 8009f6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f6e:	445a      	add	r2, fp
 8009f70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f72:	f89a 3000 	ldrb.w	r3, [sl]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	f000 809f 	beq.w	800a0ba <_svfiprintf_r+0x1c6>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009f82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f86:	f10a 0a01 	add.w	sl, sl, #1
 8009f8a:	9304      	str	r3, [sp, #16]
 8009f8c:	9307      	str	r3, [sp, #28]
 8009f8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f94:	4654      	mov	r4, sl
 8009f96:	2205      	movs	r2, #5
 8009f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f9c:	484e      	ldr	r0, [pc, #312]	@ (800a0d8 <_svfiprintf_r+0x1e4>)
 8009f9e:	f7fd fcb4 	bl	800790a <memchr>
 8009fa2:	9a04      	ldr	r2, [sp, #16]
 8009fa4:	b9d8      	cbnz	r0, 8009fde <_svfiprintf_r+0xea>
 8009fa6:	06d0      	lsls	r0, r2, #27
 8009fa8:	bf44      	itt	mi
 8009faa:	2320      	movmi	r3, #32
 8009fac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fb0:	0711      	lsls	r1, r2, #28
 8009fb2:	bf44      	itt	mi
 8009fb4:	232b      	movmi	r3, #43	@ 0x2b
 8009fb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009fba:	f89a 3000 	ldrb.w	r3, [sl]
 8009fbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fc0:	d015      	beq.n	8009fee <_svfiprintf_r+0xfa>
 8009fc2:	4654      	mov	r4, sl
 8009fc4:	2000      	movs	r0, #0
 8009fc6:	f04f 0c0a 	mov.w	ip, #10
 8009fca:	9a07      	ldr	r2, [sp, #28]
 8009fcc:	4621      	mov	r1, r4
 8009fce:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fd2:	3b30      	subs	r3, #48	@ 0x30
 8009fd4:	2b09      	cmp	r3, #9
 8009fd6:	d94b      	bls.n	800a070 <_svfiprintf_r+0x17c>
 8009fd8:	b1b0      	cbz	r0, 800a008 <_svfiprintf_r+0x114>
 8009fda:	9207      	str	r2, [sp, #28]
 8009fdc:	e014      	b.n	800a008 <_svfiprintf_r+0x114>
 8009fde:	eba0 0308 	sub.w	r3, r0, r8
 8009fe2:	fa09 f303 	lsl.w	r3, r9, r3
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	46a2      	mov	sl, r4
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	e7d2      	b.n	8009f94 <_svfiprintf_r+0xa0>
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	1d19      	adds	r1, r3, #4
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	9103      	str	r1, [sp, #12]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	bfbb      	ittet	lt
 8009ffa:	425b      	neglt	r3, r3
 8009ffc:	f042 0202 	orrlt.w	r2, r2, #2
 800a000:	9307      	strge	r3, [sp, #28]
 800a002:	9307      	strlt	r3, [sp, #28]
 800a004:	bfb8      	it	lt
 800a006:	9204      	strlt	r2, [sp, #16]
 800a008:	7823      	ldrb	r3, [r4, #0]
 800a00a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a00c:	d10a      	bne.n	800a024 <_svfiprintf_r+0x130>
 800a00e:	7863      	ldrb	r3, [r4, #1]
 800a010:	2b2a      	cmp	r3, #42	@ 0x2a
 800a012:	d132      	bne.n	800a07a <_svfiprintf_r+0x186>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	3402      	adds	r4, #2
 800a018:	1d1a      	adds	r2, r3, #4
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	9203      	str	r2, [sp, #12]
 800a01e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a022:	9305      	str	r3, [sp, #20]
 800a024:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a0dc <_svfiprintf_r+0x1e8>
 800a028:	2203      	movs	r2, #3
 800a02a:	4650      	mov	r0, sl
 800a02c:	7821      	ldrb	r1, [r4, #0]
 800a02e:	f7fd fc6c 	bl	800790a <memchr>
 800a032:	b138      	cbz	r0, 800a044 <_svfiprintf_r+0x150>
 800a034:	2240      	movs	r2, #64	@ 0x40
 800a036:	9b04      	ldr	r3, [sp, #16]
 800a038:	eba0 000a 	sub.w	r0, r0, sl
 800a03c:	4082      	lsls	r2, r0
 800a03e:	4313      	orrs	r3, r2
 800a040:	3401      	adds	r4, #1
 800a042:	9304      	str	r3, [sp, #16]
 800a044:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a048:	2206      	movs	r2, #6
 800a04a:	4825      	ldr	r0, [pc, #148]	@ (800a0e0 <_svfiprintf_r+0x1ec>)
 800a04c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a050:	f7fd fc5b 	bl	800790a <memchr>
 800a054:	2800      	cmp	r0, #0
 800a056:	d036      	beq.n	800a0c6 <_svfiprintf_r+0x1d2>
 800a058:	4b22      	ldr	r3, [pc, #136]	@ (800a0e4 <_svfiprintf_r+0x1f0>)
 800a05a:	bb1b      	cbnz	r3, 800a0a4 <_svfiprintf_r+0x1b0>
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	3307      	adds	r3, #7
 800a060:	f023 0307 	bic.w	r3, r3, #7
 800a064:	3308      	adds	r3, #8
 800a066:	9303      	str	r3, [sp, #12]
 800a068:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a06a:	4433      	add	r3, r6
 800a06c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a06e:	e76a      	b.n	8009f46 <_svfiprintf_r+0x52>
 800a070:	460c      	mov	r4, r1
 800a072:	2001      	movs	r0, #1
 800a074:	fb0c 3202 	mla	r2, ip, r2, r3
 800a078:	e7a8      	b.n	8009fcc <_svfiprintf_r+0xd8>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f04f 0c0a 	mov.w	ip, #10
 800a080:	4619      	mov	r1, r3
 800a082:	3401      	adds	r4, #1
 800a084:	9305      	str	r3, [sp, #20]
 800a086:	4620      	mov	r0, r4
 800a088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a08c:	3a30      	subs	r2, #48	@ 0x30
 800a08e:	2a09      	cmp	r2, #9
 800a090:	d903      	bls.n	800a09a <_svfiprintf_r+0x1a6>
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0c6      	beq.n	800a024 <_svfiprintf_r+0x130>
 800a096:	9105      	str	r1, [sp, #20]
 800a098:	e7c4      	b.n	800a024 <_svfiprintf_r+0x130>
 800a09a:	4604      	mov	r4, r0
 800a09c:	2301      	movs	r3, #1
 800a09e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0a2:	e7f0      	b.n	800a086 <_svfiprintf_r+0x192>
 800a0a4:	ab03      	add	r3, sp, #12
 800a0a6:	9300      	str	r3, [sp, #0]
 800a0a8:	462a      	mov	r2, r5
 800a0aa:	4638      	mov	r0, r7
 800a0ac:	4b0e      	ldr	r3, [pc, #56]	@ (800a0e8 <_svfiprintf_r+0x1f4>)
 800a0ae:	a904      	add	r1, sp, #16
 800a0b0:	f7fc fbba 	bl	8006828 <_printf_float>
 800a0b4:	1c42      	adds	r2, r0, #1
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	d1d6      	bne.n	800a068 <_svfiprintf_r+0x174>
 800a0ba:	89ab      	ldrh	r3, [r5, #12]
 800a0bc:	065b      	lsls	r3, r3, #25
 800a0be:	f53f af2d 	bmi.w	8009f1c <_svfiprintf_r+0x28>
 800a0c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0c4:	e72c      	b.n	8009f20 <_svfiprintf_r+0x2c>
 800a0c6:	ab03      	add	r3, sp, #12
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	462a      	mov	r2, r5
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	4b06      	ldr	r3, [pc, #24]	@ (800a0e8 <_svfiprintf_r+0x1f4>)
 800a0d0:	a904      	add	r1, sp, #16
 800a0d2:	f7fc fe47 	bl	8006d64 <_printf_i>
 800a0d6:	e7ed      	b.n	800a0b4 <_svfiprintf_r+0x1c0>
 800a0d8:	0800c729 	.word	0x0800c729
 800a0dc:	0800c72f 	.word	0x0800c72f
 800a0e0:	0800c733 	.word	0x0800c733
 800a0e4:	08006829 	.word	0x08006829
 800a0e8:	08009e3d 	.word	0x08009e3d

0800a0ec <__sfputc_r>:
 800a0ec:	6893      	ldr	r3, [r2, #8]
 800a0ee:	b410      	push	{r4}
 800a0f0:	3b01      	subs	r3, #1
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	6093      	str	r3, [r2, #8]
 800a0f6:	da07      	bge.n	800a108 <__sfputc_r+0x1c>
 800a0f8:	6994      	ldr	r4, [r2, #24]
 800a0fa:	42a3      	cmp	r3, r4
 800a0fc:	db01      	blt.n	800a102 <__sfputc_r+0x16>
 800a0fe:	290a      	cmp	r1, #10
 800a100:	d102      	bne.n	800a108 <__sfputc_r+0x1c>
 800a102:	bc10      	pop	{r4}
 800a104:	f7fd baed 	b.w	80076e2 <__swbuf_r>
 800a108:	6813      	ldr	r3, [r2, #0]
 800a10a:	1c58      	adds	r0, r3, #1
 800a10c:	6010      	str	r0, [r2, #0]
 800a10e:	7019      	strb	r1, [r3, #0]
 800a110:	4608      	mov	r0, r1
 800a112:	bc10      	pop	{r4}
 800a114:	4770      	bx	lr

0800a116 <__sfputs_r>:
 800a116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a118:	4606      	mov	r6, r0
 800a11a:	460f      	mov	r7, r1
 800a11c:	4614      	mov	r4, r2
 800a11e:	18d5      	adds	r5, r2, r3
 800a120:	42ac      	cmp	r4, r5
 800a122:	d101      	bne.n	800a128 <__sfputs_r+0x12>
 800a124:	2000      	movs	r0, #0
 800a126:	e007      	b.n	800a138 <__sfputs_r+0x22>
 800a128:	463a      	mov	r2, r7
 800a12a:	4630      	mov	r0, r6
 800a12c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a130:	f7ff ffdc 	bl	800a0ec <__sfputc_r>
 800a134:	1c43      	adds	r3, r0, #1
 800a136:	d1f3      	bne.n	800a120 <__sfputs_r+0xa>
 800a138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a13c <_vfiprintf_r>:
 800a13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a140:	460d      	mov	r5, r1
 800a142:	4614      	mov	r4, r2
 800a144:	4698      	mov	r8, r3
 800a146:	4606      	mov	r6, r0
 800a148:	b09d      	sub	sp, #116	@ 0x74
 800a14a:	b118      	cbz	r0, 800a154 <_vfiprintf_r+0x18>
 800a14c:	6a03      	ldr	r3, [r0, #32]
 800a14e:	b90b      	cbnz	r3, 800a154 <_vfiprintf_r+0x18>
 800a150:	f7fd f9bc 	bl	80074cc <__sinit>
 800a154:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a156:	07d9      	lsls	r1, r3, #31
 800a158:	d405      	bmi.n	800a166 <_vfiprintf_r+0x2a>
 800a15a:	89ab      	ldrh	r3, [r5, #12]
 800a15c:	059a      	lsls	r2, r3, #22
 800a15e:	d402      	bmi.n	800a166 <_vfiprintf_r+0x2a>
 800a160:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a162:	f7fd fbd0 	bl	8007906 <__retarget_lock_acquire_recursive>
 800a166:	89ab      	ldrh	r3, [r5, #12]
 800a168:	071b      	lsls	r3, r3, #28
 800a16a:	d501      	bpl.n	800a170 <_vfiprintf_r+0x34>
 800a16c:	692b      	ldr	r3, [r5, #16]
 800a16e:	b99b      	cbnz	r3, 800a198 <_vfiprintf_r+0x5c>
 800a170:	4629      	mov	r1, r5
 800a172:	4630      	mov	r0, r6
 800a174:	f7fd faf4 	bl	8007760 <__swsetup_r>
 800a178:	b170      	cbz	r0, 800a198 <_vfiprintf_r+0x5c>
 800a17a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a17c:	07dc      	lsls	r4, r3, #31
 800a17e:	d504      	bpl.n	800a18a <_vfiprintf_r+0x4e>
 800a180:	f04f 30ff 	mov.w	r0, #4294967295
 800a184:	b01d      	add	sp, #116	@ 0x74
 800a186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18a:	89ab      	ldrh	r3, [r5, #12]
 800a18c:	0598      	lsls	r0, r3, #22
 800a18e:	d4f7      	bmi.n	800a180 <_vfiprintf_r+0x44>
 800a190:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a192:	f7fd fbb9 	bl	8007908 <__retarget_lock_release_recursive>
 800a196:	e7f3      	b.n	800a180 <_vfiprintf_r+0x44>
 800a198:	2300      	movs	r3, #0
 800a19a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a19c:	2320      	movs	r3, #32
 800a19e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a1a2:	2330      	movs	r3, #48	@ 0x30
 800a1a4:	f04f 0901 	mov.w	r9, #1
 800a1a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a358 <_vfiprintf_r+0x21c>
 800a1b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a1b4:	4623      	mov	r3, r4
 800a1b6:	469a      	mov	sl, r3
 800a1b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1bc:	b10a      	cbz	r2, 800a1c2 <_vfiprintf_r+0x86>
 800a1be:	2a25      	cmp	r2, #37	@ 0x25
 800a1c0:	d1f9      	bne.n	800a1b6 <_vfiprintf_r+0x7a>
 800a1c2:	ebba 0b04 	subs.w	fp, sl, r4
 800a1c6:	d00b      	beq.n	800a1e0 <_vfiprintf_r+0xa4>
 800a1c8:	465b      	mov	r3, fp
 800a1ca:	4622      	mov	r2, r4
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4630      	mov	r0, r6
 800a1d0:	f7ff ffa1 	bl	800a116 <__sfputs_r>
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	f000 80a7 	beq.w	800a328 <_vfiprintf_r+0x1ec>
 800a1da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1dc:	445a      	add	r2, fp
 800a1de:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f000 809f 	beq.w	800a328 <_vfiprintf_r+0x1ec>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a1f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1f4:	f10a 0a01 	add.w	sl, sl, #1
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	9307      	str	r3, [sp, #28]
 800a1fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a200:	931a      	str	r3, [sp, #104]	@ 0x68
 800a202:	4654      	mov	r4, sl
 800a204:	2205      	movs	r2, #5
 800a206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a20a:	4853      	ldr	r0, [pc, #332]	@ (800a358 <_vfiprintf_r+0x21c>)
 800a20c:	f7fd fb7d 	bl	800790a <memchr>
 800a210:	9a04      	ldr	r2, [sp, #16]
 800a212:	b9d8      	cbnz	r0, 800a24c <_vfiprintf_r+0x110>
 800a214:	06d1      	lsls	r1, r2, #27
 800a216:	bf44      	itt	mi
 800a218:	2320      	movmi	r3, #32
 800a21a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a21e:	0713      	lsls	r3, r2, #28
 800a220:	bf44      	itt	mi
 800a222:	232b      	movmi	r3, #43	@ 0x2b
 800a224:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a228:	f89a 3000 	ldrb.w	r3, [sl]
 800a22c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a22e:	d015      	beq.n	800a25c <_vfiprintf_r+0x120>
 800a230:	4654      	mov	r4, sl
 800a232:	2000      	movs	r0, #0
 800a234:	f04f 0c0a 	mov.w	ip, #10
 800a238:	9a07      	ldr	r2, [sp, #28]
 800a23a:	4621      	mov	r1, r4
 800a23c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a240:	3b30      	subs	r3, #48	@ 0x30
 800a242:	2b09      	cmp	r3, #9
 800a244:	d94b      	bls.n	800a2de <_vfiprintf_r+0x1a2>
 800a246:	b1b0      	cbz	r0, 800a276 <_vfiprintf_r+0x13a>
 800a248:	9207      	str	r2, [sp, #28]
 800a24a:	e014      	b.n	800a276 <_vfiprintf_r+0x13a>
 800a24c:	eba0 0308 	sub.w	r3, r0, r8
 800a250:	fa09 f303 	lsl.w	r3, r9, r3
 800a254:	4313      	orrs	r3, r2
 800a256:	46a2      	mov	sl, r4
 800a258:	9304      	str	r3, [sp, #16]
 800a25a:	e7d2      	b.n	800a202 <_vfiprintf_r+0xc6>
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	1d19      	adds	r1, r3, #4
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	9103      	str	r1, [sp, #12]
 800a264:	2b00      	cmp	r3, #0
 800a266:	bfbb      	ittet	lt
 800a268:	425b      	neglt	r3, r3
 800a26a:	f042 0202 	orrlt.w	r2, r2, #2
 800a26e:	9307      	strge	r3, [sp, #28]
 800a270:	9307      	strlt	r3, [sp, #28]
 800a272:	bfb8      	it	lt
 800a274:	9204      	strlt	r2, [sp, #16]
 800a276:	7823      	ldrb	r3, [r4, #0]
 800a278:	2b2e      	cmp	r3, #46	@ 0x2e
 800a27a:	d10a      	bne.n	800a292 <_vfiprintf_r+0x156>
 800a27c:	7863      	ldrb	r3, [r4, #1]
 800a27e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a280:	d132      	bne.n	800a2e8 <_vfiprintf_r+0x1ac>
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	3402      	adds	r4, #2
 800a286:	1d1a      	adds	r2, r3, #4
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	9203      	str	r2, [sp, #12]
 800a28c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a290:	9305      	str	r3, [sp, #20]
 800a292:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a35c <_vfiprintf_r+0x220>
 800a296:	2203      	movs	r2, #3
 800a298:	4650      	mov	r0, sl
 800a29a:	7821      	ldrb	r1, [r4, #0]
 800a29c:	f7fd fb35 	bl	800790a <memchr>
 800a2a0:	b138      	cbz	r0, 800a2b2 <_vfiprintf_r+0x176>
 800a2a2:	2240      	movs	r2, #64	@ 0x40
 800a2a4:	9b04      	ldr	r3, [sp, #16]
 800a2a6:	eba0 000a 	sub.w	r0, r0, sl
 800a2aa:	4082      	lsls	r2, r0
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	3401      	adds	r4, #1
 800a2b0:	9304      	str	r3, [sp, #16]
 800a2b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b6:	2206      	movs	r2, #6
 800a2b8:	4829      	ldr	r0, [pc, #164]	@ (800a360 <_vfiprintf_r+0x224>)
 800a2ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2be:	f7fd fb24 	bl	800790a <memchr>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	d03f      	beq.n	800a346 <_vfiprintf_r+0x20a>
 800a2c6:	4b27      	ldr	r3, [pc, #156]	@ (800a364 <_vfiprintf_r+0x228>)
 800a2c8:	bb1b      	cbnz	r3, 800a312 <_vfiprintf_r+0x1d6>
 800a2ca:	9b03      	ldr	r3, [sp, #12]
 800a2cc:	3307      	adds	r3, #7
 800a2ce:	f023 0307 	bic.w	r3, r3, #7
 800a2d2:	3308      	adds	r3, #8
 800a2d4:	9303      	str	r3, [sp, #12]
 800a2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2d8:	443b      	add	r3, r7
 800a2da:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2dc:	e76a      	b.n	800a1b4 <_vfiprintf_r+0x78>
 800a2de:	460c      	mov	r4, r1
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2e6:	e7a8      	b.n	800a23a <_vfiprintf_r+0xfe>
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	f04f 0c0a 	mov.w	ip, #10
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	3401      	adds	r4, #1
 800a2f2:	9305      	str	r3, [sp, #20]
 800a2f4:	4620      	mov	r0, r4
 800a2f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2fa:	3a30      	subs	r2, #48	@ 0x30
 800a2fc:	2a09      	cmp	r2, #9
 800a2fe:	d903      	bls.n	800a308 <_vfiprintf_r+0x1cc>
 800a300:	2b00      	cmp	r3, #0
 800a302:	d0c6      	beq.n	800a292 <_vfiprintf_r+0x156>
 800a304:	9105      	str	r1, [sp, #20]
 800a306:	e7c4      	b.n	800a292 <_vfiprintf_r+0x156>
 800a308:	4604      	mov	r4, r0
 800a30a:	2301      	movs	r3, #1
 800a30c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a310:	e7f0      	b.n	800a2f4 <_vfiprintf_r+0x1b8>
 800a312:	ab03      	add	r3, sp, #12
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	462a      	mov	r2, r5
 800a318:	4630      	mov	r0, r6
 800a31a:	4b13      	ldr	r3, [pc, #76]	@ (800a368 <_vfiprintf_r+0x22c>)
 800a31c:	a904      	add	r1, sp, #16
 800a31e:	f7fc fa83 	bl	8006828 <_printf_float>
 800a322:	4607      	mov	r7, r0
 800a324:	1c78      	adds	r0, r7, #1
 800a326:	d1d6      	bne.n	800a2d6 <_vfiprintf_r+0x19a>
 800a328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a32a:	07d9      	lsls	r1, r3, #31
 800a32c:	d405      	bmi.n	800a33a <_vfiprintf_r+0x1fe>
 800a32e:	89ab      	ldrh	r3, [r5, #12]
 800a330:	059a      	lsls	r2, r3, #22
 800a332:	d402      	bmi.n	800a33a <_vfiprintf_r+0x1fe>
 800a334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a336:	f7fd fae7 	bl	8007908 <__retarget_lock_release_recursive>
 800a33a:	89ab      	ldrh	r3, [r5, #12]
 800a33c:	065b      	lsls	r3, r3, #25
 800a33e:	f53f af1f 	bmi.w	800a180 <_vfiprintf_r+0x44>
 800a342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a344:	e71e      	b.n	800a184 <_vfiprintf_r+0x48>
 800a346:	ab03      	add	r3, sp, #12
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	462a      	mov	r2, r5
 800a34c:	4630      	mov	r0, r6
 800a34e:	4b06      	ldr	r3, [pc, #24]	@ (800a368 <_vfiprintf_r+0x22c>)
 800a350:	a904      	add	r1, sp, #16
 800a352:	f7fc fd07 	bl	8006d64 <_printf_i>
 800a356:	e7e4      	b.n	800a322 <_vfiprintf_r+0x1e6>
 800a358:	0800c729 	.word	0x0800c729
 800a35c:	0800c72f 	.word	0x0800c72f
 800a360:	0800c733 	.word	0x0800c733
 800a364:	08006829 	.word	0x08006829
 800a368:	0800a117 	.word	0x0800a117

0800a36c <__sflush_r>:
 800a36c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a372:	0716      	lsls	r6, r2, #28
 800a374:	4605      	mov	r5, r0
 800a376:	460c      	mov	r4, r1
 800a378:	d454      	bmi.n	800a424 <__sflush_r+0xb8>
 800a37a:	684b      	ldr	r3, [r1, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dc02      	bgt.n	800a386 <__sflush_r+0x1a>
 800a380:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a382:	2b00      	cmp	r3, #0
 800a384:	dd48      	ble.n	800a418 <__sflush_r+0xac>
 800a386:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a388:	2e00      	cmp	r6, #0
 800a38a:	d045      	beq.n	800a418 <__sflush_r+0xac>
 800a38c:	2300      	movs	r3, #0
 800a38e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a392:	682f      	ldr	r7, [r5, #0]
 800a394:	6a21      	ldr	r1, [r4, #32]
 800a396:	602b      	str	r3, [r5, #0]
 800a398:	d030      	beq.n	800a3fc <__sflush_r+0x90>
 800a39a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a39c:	89a3      	ldrh	r3, [r4, #12]
 800a39e:	0759      	lsls	r1, r3, #29
 800a3a0:	d505      	bpl.n	800a3ae <__sflush_r+0x42>
 800a3a2:	6863      	ldr	r3, [r4, #4]
 800a3a4:	1ad2      	subs	r2, r2, r3
 800a3a6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a3a8:	b10b      	cbz	r3, 800a3ae <__sflush_r+0x42>
 800a3aa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3ac:	1ad2      	subs	r2, r2, r3
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a3b4:	6a21      	ldr	r1, [r4, #32]
 800a3b6:	47b0      	blx	r6
 800a3b8:	1c43      	adds	r3, r0, #1
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	d106      	bne.n	800a3cc <__sflush_r+0x60>
 800a3be:	6829      	ldr	r1, [r5, #0]
 800a3c0:	291d      	cmp	r1, #29
 800a3c2:	d82b      	bhi.n	800a41c <__sflush_r+0xb0>
 800a3c4:	4a28      	ldr	r2, [pc, #160]	@ (800a468 <__sflush_r+0xfc>)
 800a3c6:	40ca      	lsrs	r2, r1
 800a3c8:	07d6      	lsls	r6, r2, #31
 800a3ca:	d527      	bpl.n	800a41c <__sflush_r+0xb0>
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	6062      	str	r2, [r4, #4]
 800a3d0:	6922      	ldr	r2, [r4, #16]
 800a3d2:	04d9      	lsls	r1, r3, #19
 800a3d4:	6022      	str	r2, [r4, #0]
 800a3d6:	d504      	bpl.n	800a3e2 <__sflush_r+0x76>
 800a3d8:	1c42      	adds	r2, r0, #1
 800a3da:	d101      	bne.n	800a3e0 <__sflush_r+0x74>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b903      	cbnz	r3, 800a3e2 <__sflush_r+0x76>
 800a3e0:	6560      	str	r0, [r4, #84]	@ 0x54
 800a3e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3e4:	602f      	str	r7, [r5, #0]
 800a3e6:	b1b9      	cbz	r1, 800a418 <__sflush_r+0xac>
 800a3e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a3ec:	4299      	cmp	r1, r3
 800a3ee:	d002      	beq.n	800a3f6 <__sflush_r+0x8a>
 800a3f0:	4628      	mov	r0, r5
 800a3f2:	f7fe f909 	bl	8008608 <_free_r>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a3fa:	e00d      	b.n	800a418 <__sflush_r+0xac>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b0      	blx	r6
 800a402:	4602      	mov	r2, r0
 800a404:	1c50      	adds	r0, r2, #1
 800a406:	d1c9      	bne.n	800a39c <__sflush_r+0x30>
 800a408:	682b      	ldr	r3, [r5, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d0c6      	beq.n	800a39c <__sflush_r+0x30>
 800a40e:	2b1d      	cmp	r3, #29
 800a410:	d001      	beq.n	800a416 <__sflush_r+0xaa>
 800a412:	2b16      	cmp	r3, #22
 800a414:	d11d      	bne.n	800a452 <__sflush_r+0xe6>
 800a416:	602f      	str	r7, [r5, #0]
 800a418:	2000      	movs	r0, #0
 800a41a:	e021      	b.n	800a460 <__sflush_r+0xf4>
 800a41c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a420:	b21b      	sxth	r3, r3
 800a422:	e01a      	b.n	800a45a <__sflush_r+0xee>
 800a424:	690f      	ldr	r7, [r1, #16]
 800a426:	2f00      	cmp	r7, #0
 800a428:	d0f6      	beq.n	800a418 <__sflush_r+0xac>
 800a42a:	0793      	lsls	r3, r2, #30
 800a42c:	bf18      	it	ne
 800a42e:	2300      	movne	r3, #0
 800a430:	680e      	ldr	r6, [r1, #0]
 800a432:	bf08      	it	eq
 800a434:	694b      	ldreq	r3, [r1, #20]
 800a436:	1bf6      	subs	r6, r6, r7
 800a438:	600f      	str	r7, [r1, #0]
 800a43a:	608b      	str	r3, [r1, #8]
 800a43c:	2e00      	cmp	r6, #0
 800a43e:	ddeb      	ble.n	800a418 <__sflush_r+0xac>
 800a440:	4633      	mov	r3, r6
 800a442:	463a      	mov	r2, r7
 800a444:	4628      	mov	r0, r5
 800a446:	6a21      	ldr	r1, [r4, #32]
 800a448:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a44c:	47e0      	blx	ip
 800a44e:	2800      	cmp	r0, #0
 800a450:	dc07      	bgt.n	800a462 <__sflush_r+0xf6>
 800a452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a45a:	f04f 30ff 	mov.w	r0, #4294967295
 800a45e:	81a3      	strh	r3, [r4, #12]
 800a460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a462:	4407      	add	r7, r0
 800a464:	1a36      	subs	r6, r6, r0
 800a466:	e7e9      	b.n	800a43c <__sflush_r+0xd0>
 800a468:	20400001 	.word	0x20400001

0800a46c <_fflush_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	690b      	ldr	r3, [r1, #16]
 800a470:	4605      	mov	r5, r0
 800a472:	460c      	mov	r4, r1
 800a474:	b913      	cbnz	r3, 800a47c <_fflush_r+0x10>
 800a476:	2500      	movs	r5, #0
 800a478:	4628      	mov	r0, r5
 800a47a:	bd38      	pop	{r3, r4, r5, pc}
 800a47c:	b118      	cbz	r0, 800a486 <_fflush_r+0x1a>
 800a47e:	6a03      	ldr	r3, [r0, #32]
 800a480:	b90b      	cbnz	r3, 800a486 <_fflush_r+0x1a>
 800a482:	f7fd f823 	bl	80074cc <__sinit>
 800a486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d0f3      	beq.n	800a476 <_fflush_r+0xa>
 800a48e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a490:	07d0      	lsls	r0, r2, #31
 800a492:	d404      	bmi.n	800a49e <_fflush_r+0x32>
 800a494:	0599      	lsls	r1, r3, #22
 800a496:	d402      	bmi.n	800a49e <_fflush_r+0x32>
 800a498:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a49a:	f7fd fa34 	bl	8007906 <__retarget_lock_acquire_recursive>
 800a49e:	4628      	mov	r0, r5
 800a4a0:	4621      	mov	r1, r4
 800a4a2:	f7ff ff63 	bl	800a36c <__sflush_r>
 800a4a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a4a8:	4605      	mov	r5, r0
 800a4aa:	07da      	lsls	r2, r3, #31
 800a4ac:	d4e4      	bmi.n	800a478 <_fflush_r+0xc>
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	059b      	lsls	r3, r3, #22
 800a4b2:	d4e1      	bmi.n	800a478 <_fflush_r+0xc>
 800a4b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a4b6:	f7fd fa27 	bl	8007908 <__retarget_lock_release_recursive>
 800a4ba:	e7dd      	b.n	800a478 <_fflush_r+0xc>

0800a4bc <__swhatbuf_r>:
 800a4bc:	b570      	push	{r4, r5, r6, lr}
 800a4be:	460c      	mov	r4, r1
 800a4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c4:	4615      	mov	r5, r2
 800a4c6:	2900      	cmp	r1, #0
 800a4c8:	461e      	mov	r6, r3
 800a4ca:	b096      	sub	sp, #88	@ 0x58
 800a4cc:	da0c      	bge.n	800a4e8 <__swhatbuf_r+0x2c>
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	2100      	movs	r1, #0
 800a4d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4d6:	bf14      	ite	ne
 800a4d8:	2340      	movne	r3, #64	@ 0x40
 800a4da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4de:	2000      	movs	r0, #0
 800a4e0:	6031      	str	r1, [r6, #0]
 800a4e2:	602b      	str	r3, [r5, #0]
 800a4e4:	b016      	add	sp, #88	@ 0x58
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}
 800a4e8:	466a      	mov	r2, sp
 800a4ea:	f000 f875 	bl	800a5d8 <_fstat_r>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	dbed      	blt.n	800a4ce <__swhatbuf_r+0x12>
 800a4f2:	9901      	ldr	r1, [sp, #4]
 800a4f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4fc:	4259      	negs	r1, r3
 800a4fe:	4159      	adcs	r1, r3
 800a500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a504:	e7eb      	b.n	800a4de <__swhatbuf_r+0x22>

0800a506 <__smakebuf_r>:
 800a506:	898b      	ldrh	r3, [r1, #12]
 800a508:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a50a:	079d      	lsls	r5, r3, #30
 800a50c:	4606      	mov	r6, r0
 800a50e:	460c      	mov	r4, r1
 800a510:	d507      	bpl.n	800a522 <__smakebuf_r+0x1c>
 800a512:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a516:	6023      	str	r3, [r4, #0]
 800a518:	6123      	str	r3, [r4, #16]
 800a51a:	2301      	movs	r3, #1
 800a51c:	6163      	str	r3, [r4, #20]
 800a51e:	b003      	add	sp, #12
 800a520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a522:	466a      	mov	r2, sp
 800a524:	ab01      	add	r3, sp, #4
 800a526:	f7ff ffc9 	bl	800a4bc <__swhatbuf_r>
 800a52a:	9f00      	ldr	r7, [sp, #0]
 800a52c:	4605      	mov	r5, r0
 800a52e:	4639      	mov	r1, r7
 800a530:	4630      	mov	r0, r6
 800a532:	f7fe f8db 	bl	80086ec <_malloc_r>
 800a536:	b948      	cbnz	r0, 800a54c <__smakebuf_r+0x46>
 800a538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a53c:	059a      	lsls	r2, r3, #22
 800a53e:	d4ee      	bmi.n	800a51e <__smakebuf_r+0x18>
 800a540:	f023 0303 	bic.w	r3, r3, #3
 800a544:	f043 0302 	orr.w	r3, r3, #2
 800a548:	81a3      	strh	r3, [r4, #12]
 800a54a:	e7e2      	b.n	800a512 <__smakebuf_r+0xc>
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a552:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	6020      	str	r0, [r4, #0]
 800a55c:	b15b      	cbz	r3, 800a576 <__smakebuf_r+0x70>
 800a55e:	4630      	mov	r0, r6
 800a560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a564:	f000 f84a 	bl	800a5fc <_isatty_r>
 800a568:	b128      	cbz	r0, 800a576 <__smakebuf_r+0x70>
 800a56a:	89a3      	ldrh	r3, [r4, #12]
 800a56c:	f023 0303 	bic.w	r3, r3, #3
 800a570:	f043 0301 	orr.w	r3, r3, #1
 800a574:	81a3      	strh	r3, [r4, #12]
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	431d      	orrs	r5, r3
 800a57a:	81a5      	strh	r5, [r4, #12]
 800a57c:	e7cf      	b.n	800a51e <__smakebuf_r+0x18>

0800a57e <memmove>:
 800a57e:	4288      	cmp	r0, r1
 800a580:	b510      	push	{r4, lr}
 800a582:	eb01 0402 	add.w	r4, r1, r2
 800a586:	d902      	bls.n	800a58e <memmove+0x10>
 800a588:	4284      	cmp	r4, r0
 800a58a:	4623      	mov	r3, r4
 800a58c:	d807      	bhi.n	800a59e <memmove+0x20>
 800a58e:	1e43      	subs	r3, r0, #1
 800a590:	42a1      	cmp	r1, r4
 800a592:	d008      	beq.n	800a5a6 <memmove+0x28>
 800a594:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a598:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a59c:	e7f8      	b.n	800a590 <memmove+0x12>
 800a59e:	4601      	mov	r1, r0
 800a5a0:	4402      	add	r2, r0
 800a5a2:	428a      	cmp	r2, r1
 800a5a4:	d100      	bne.n	800a5a8 <memmove+0x2a>
 800a5a6:	bd10      	pop	{r4, pc}
 800a5a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5b0:	e7f7      	b.n	800a5a2 <memmove+0x24>

0800a5b2 <strncmp>:
 800a5b2:	b510      	push	{r4, lr}
 800a5b4:	b16a      	cbz	r2, 800a5d2 <strncmp+0x20>
 800a5b6:	3901      	subs	r1, #1
 800a5b8:	1884      	adds	r4, r0, r2
 800a5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5be:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d103      	bne.n	800a5ce <strncmp+0x1c>
 800a5c6:	42a0      	cmp	r0, r4
 800a5c8:	d001      	beq.n	800a5ce <strncmp+0x1c>
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	d1f5      	bne.n	800a5ba <strncmp+0x8>
 800a5ce:	1ad0      	subs	r0, r2, r3
 800a5d0:	bd10      	pop	{r4, pc}
 800a5d2:	4610      	mov	r0, r2
 800a5d4:	e7fc      	b.n	800a5d0 <strncmp+0x1e>
	...

0800a5d8 <_fstat_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	2300      	movs	r3, #0
 800a5dc:	4d06      	ldr	r5, [pc, #24]	@ (800a5f8 <_fstat_r+0x20>)
 800a5de:	4604      	mov	r4, r0
 800a5e0:	4608      	mov	r0, r1
 800a5e2:	4611      	mov	r1, r2
 800a5e4:	602b      	str	r3, [r5, #0]
 800a5e6:	f7f7 fbea 	bl	8001dbe <_fstat>
 800a5ea:	1c43      	adds	r3, r0, #1
 800a5ec:	d102      	bne.n	800a5f4 <_fstat_r+0x1c>
 800a5ee:	682b      	ldr	r3, [r5, #0]
 800a5f0:	b103      	cbz	r3, 800a5f4 <_fstat_r+0x1c>
 800a5f2:	6023      	str	r3, [r4, #0]
 800a5f4:	bd38      	pop	{r3, r4, r5, pc}
 800a5f6:	bf00      	nop
 800a5f8:	20001278 	.word	0x20001278

0800a5fc <_isatty_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	2300      	movs	r3, #0
 800a600:	4d05      	ldr	r5, [pc, #20]	@ (800a618 <_isatty_r+0x1c>)
 800a602:	4604      	mov	r4, r0
 800a604:	4608      	mov	r0, r1
 800a606:	602b      	str	r3, [r5, #0]
 800a608:	f7f7 fbe8 	bl	8001ddc <_isatty>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_isatty_r+0x1a>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_isatty_r+0x1a>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	20001278 	.word	0x20001278

0800a61c <_sbrk_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	2300      	movs	r3, #0
 800a620:	4d05      	ldr	r5, [pc, #20]	@ (800a638 <_sbrk_r+0x1c>)
 800a622:	4604      	mov	r4, r0
 800a624:	4608      	mov	r0, r1
 800a626:	602b      	str	r3, [r5, #0]
 800a628:	f7f7 fbee 	bl	8001e08 <_sbrk>
 800a62c:	1c43      	adds	r3, r0, #1
 800a62e:	d102      	bne.n	800a636 <_sbrk_r+0x1a>
 800a630:	682b      	ldr	r3, [r5, #0]
 800a632:	b103      	cbz	r3, 800a636 <_sbrk_r+0x1a>
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	bd38      	pop	{r3, r4, r5, pc}
 800a638:	20001278 	.word	0x20001278

0800a63c <nan>:
 800a63c:	2000      	movs	r0, #0
 800a63e:	4901      	ldr	r1, [pc, #4]	@ (800a644 <nan+0x8>)
 800a640:	4770      	bx	lr
 800a642:	bf00      	nop
 800a644:	7ff80000 	.word	0x7ff80000

0800a648 <__assert_func>:
 800a648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a64a:	4614      	mov	r4, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	4b09      	ldr	r3, [pc, #36]	@ (800a674 <__assert_func+0x2c>)
 800a650:	4605      	mov	r5, r0
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68d8      	ldr	r0, [r3, #12]
 800a656:	b14c      	cbz	r4, 800a66c <__assert_func+0x24>
 800a658:	4b07      	ldr	r3, [pc, #28]	@ (800a678 <__assert_func+0x30>)
 800a65a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a65e:	9100      	str	r1, [sp, #0]
 800a660:	462b      	mov	r3, r5
 800a662:	4906      	ldr	r1, [pc, #24]	@ (800a67c <__assert_func+0x34>)
 800a664:	f000 fba8 	bl	800adb8 <fiprintf>
 800a668:	f000 fbb8 	bl	800addc <abort>
 800a66c:	4b04      	ldr	r3, [pc, #16]	@ (800a680 <__assert_func+0x38>)
 800a66e:	461c      	mov	r4, r3
 800a670:	e7f3      	b.n	800a65a <__assert_func+0x12>
 800a672:	bf00      	nop
 800a674:	20000030 	.word	0x20000030
 800a678:	0800c742 	.word	0x0800c742
 800a67c:	0800c74f 	.word	0x0800c74f
 800a680:	0800c77d 	.word	0x0800c77d

0800a684 <_calloc_r>:
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	fba1 5402 	umull	r5, r4, r1, r2
 800a68a:	b934      	cbnz	r4, 800a69a <_calloc_r+0x16>
 800a68c:	4629      	mov	r1, r5
 800a68e:	f7fe f82d 	bl	80086ec <_malloc_r>
 800a692:	4606      	mov	r6, r0
 800a694:	b928      	cbnz	r0, 800a6a2 <_calloc_r+0x1e>
 800a696:	4630      	mov	r0, r6
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	220c      	movs	r2, #12
 800a69c:	2600      	movs	r6, #0
 800a69e:	6002      	str	r2, [r0, #0]
 800a6a0:	e7f9      	b.n	800a696 <_calloc_r+0x12>
 800a6a2:	462a      	mov	r2, r5
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	f7fd f8b1 	bl	800780c <memset>
 800a6aa:	e7f4      	b.n	800a696 <_calloc_r+0x12>

0800a6ac <rshift>:
 800a6ac:	6903      	ldr	r3, [r0, #16]
 800a6ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a6b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a6b6:	f100 0414 	add.w	r4, r0, #20
 800a6ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a6be:	dd46      	ble.n	800a74e <rshift+0xa2>
 800a6c0:	f011 011f 	ands.w	r1, r1, #31
 800a6c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a6c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a6cc:	d10c      	bne.n	800a6e8 <rshift+0x3c>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f100 0710 	add.w	r7, r0, #16
 800a6d4:	42b1      	cmp	r1, r6
 800a6d6:	d335      	bcc.n	800a744 <rshift+0x98>
 800a6d8:	1a9b      	subs	r3, r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	1eea      	subs	r2, r5, #3
 800a6de:	4296      	cmp	r6, r2
 800a6e0:	bf38      	it	cc
 800a6e2:	2300      	movcc	r3, #0
 800a6e4:	4423      	add	r3, r4
 800a6e6:	e015      	b.n	800a714 <rshift+0x68>
 800a6e8:	46a1      	mov	r9, r4
 800a6ea:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a6ee:	f1c1 0820 	rsb	r8, r1, #32
 800a6f2:	40cf      	lsrs	r7, r1
 800a6f4:	f105 0e04 	add.w	lr, r5, #4
 800a6f8:	4576      	cmp	r6, lr
 800a6fa:	46f4      	mov	ip, lr
 800a6fc:	d816      	bhi.n	800a72c <rshift+0x80>
 800a6fe:	1a9a      	subs	r2, r3, r2
 800a700:	0092      	lsls	r2, r2, #2
 800a702:	3a04      	subs	r2, #4
 800a704:	3501      	adds	r5, #1
 800a706:	42ae      	cmp	r6, r5
 800a708:	bf38      	it	cc
 800a70a:	2200      	movcc	r2, #0
 800a70c:	18a3      	adds	r3, r4, r2
 800a70e:	50a7      	str	r7, [r4, r2]
 800a710:	b107      	cbz	r7, 800a714 <rshift+0x68>
 800a712:	3304      	adds	r3, #4
 800a714:	42a3      	cmp	r3, r4
 800a716:	eba3 0204 	sub.w	r2, r3, r4
 800a71a:	bf08      	it	eq
 800a71c:	2300      	moveq	r3, #0
 800a71e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a722:	6102      	str	r2, [r0, #16]
 800a724:	bf08      	it	eq
 800a726:	6143      	streq	r3, [r0, #20]
 800a728:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a72c:	f8dc c000 	ldr.w	ip, [ip]
 800a730:	fa0c fc08 	lsl.w	ip, ip, r8
 800a734:	ea4c 0707 	orr.w	r7, ip, r7
 800a738:	f849 7b04 	str.w	r7, [r9], #4
 800a73c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a740:	40cf      	lsrs	r7, r1
 800a742:	e7d9      	b.n	800a6f8 <rshift+0x4c>
 800a744:	f851 cb04 	ldr.w	ip, [r1], #4
 800a748:	f847 cf04 	str.w	ip, [r7, #4]!
 800a74c:	e7c2      	b.n	800a6d4 <rshift+0x28>
 800a74e:	4623      	mov	r3, r4
 800a750:	e7e0      	b.n	800a714 <rshift+0x68>

0800a752 <__hexdig_fun>:
 800a752:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a756:	2b09      	cmp	r3, #9
 800a758:	d802      	bhi.n	800a760 <__hexdig_fun+0xe>
 800a75a:	3820      	subs	r0, #32
 800a75c:	b2c0      	uxtb	r0, r0
 800a75e:	4770      	bx	lr
 800a760:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a764:	2b05      	cmp	r3, #5
 800a766:	d801      	bhi.n	800a76c <__hexdig_fun+0x1a>
 800a768:	3847      	subs	r0, #71	@ 0x47
 800a76a:	e7f7      	b.n	800a75c <__hexdig_fun+0xa>
 800a76c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a770:	2b05      	cmp	r3, #5
 800a772:	d801      	bhi.n	800a778 <__hexdig_fun+0x26>
 800a774:	3827      	subs	r0, #39	@ 0x27
 800a776:	e7f1      	b.n	800a75c <__hexdig_fun+0xa>
 800a778:	2000      	movs	r0, #0
 800a77a:	4770      	bx	lr

0800a77c <__gethex>:
 800a77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a780:	468a      	mov	sl, r1
 800a782:	4690      	mov	r8, r2
 800a784:	b085      	sub	sp, #20
 800a786:	9302      	str	r3, [sp, #8]
 800a788:	680b      	ldr	r3, [r1, #0]
 800a78a:	9001      	str	r0, [sp, #4]
 800a78c:	1c9c      	adds	r4, r3, #2
 800a78e:	46a1      	mov	r9, r4
 800a790:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a794:	2830      	cmp	r0, #48	@ 0x30
 800a796:	d0fa      	beq.n	800a78e <__gethex+0x12>
 800a798:	eba9 0303 	sub.w	r3, r9, r3
 800a79c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a7a0:	f7ff ffd7 	bl	800a752 <__hexdig_fun>
 800a7a4:	4605      	mov	r5, r0
 800a7a6:	2800      	cmp	r0, #0
 800a7a8:	d168      	bne.n	800a87c <__gethex+0x100>
 800a7aa:	2201      	movs	r2, #1
 800a7ac:	4648      	mov	r0, r9
 800a7ae:	499f      	ldr	r1, [pc, #636]	@ (800aa2c <__gethex+0x2b0>)
 800a7b0:	f7ff feff 	bl	800a5b2 <strncmp>
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d167      	bne.n	800a88a <__gethex+0x10e>
 800a7ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a7be:	4626      	mov	r6, r4
 800a7c0:	f7ff ffc7 	bl	800a752 <__hexdig_fun>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	d062      	beq.n	800a88e <__gethex+0x112>
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	7818      	ldrb	r0, [r3, #0]
 800a7cc:	4699      	mov	r9, r3
 800a7ce:	2830      	cmp	r0, #48	@ 0x30
 800a7d0:	f103 0301 	add.w	r3, r3, #1
 800a7d4:	d0f9      	beq.n	800a7ca <__gethex+0x4e>
 800a7d6:	f7ff ffbc 	bl	800a752 <__hexdig_fun>
 800a7da:	fab0 f580 	clz	r5, r0
 800a7de:	f04f 0b01 	mov.w	fp, #1
 800a7e2:	096d      	lsrs	r5, r5, #5
 800a7e4:	464a      	mov	r2, r9
 800a7e6:	4616      	mov	r6, r2
 800a7e8:	7830      	ldrb	r0, [r6, #0]
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	f7ff ffb1 	bl	800a752 <__hexdig_fun>
 800a7f0:	2800      	cmp	r0, #0
 800a7f2:	d1f8      	bne.n	800a7e6 <__gethex+0x6a>
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	498c      	ldr	r1, [pc, #560]	@ (800aa2c <__gethex+0x2b0>)
 800a7fa:	f7ff feda 	bl	800a5b2 <strncmp>
 800a7fe:	2800      	cmp	r0, #0
 800a800:	d13f      	bne.n	800a882 <__gethex+0x106>
 800a802:	b944      	cbnz	r4, 800a816 <__gethex+0x9a>
 800a804:	1c74      	adds	r4, r6, #1
 800a806:	4622      	mov	r2, r4
 800a808:	4616      	mov	r6, r2
 800a80a:	7830      	ldrb	r0, [r6, #0]
 800a80c:	3201      	adds	r2, #1
 800a80e:	f7ff ffa0 	bl	800a752 <__hexdig_fun>
 800a812:	2800      	cmp	r0, #0
 800a814:	d1f8      	bne.n	800a808 <__gethex+0x8c>
 800a816:	1ba4      	subs	r4, r4, r6
 800a818:	00a7      	lsls	r7, r4, #2
 800a81a:	7833      	ldrb	r3, [r6, #0]
 800a81c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a820:	2b50      	cmp	r3, #80	@ 0x50
 800a822:	d13e      	bne.n	800a8a2 <__gethex+0x126>
 800a824:	7873      	ldrb	r3, [r6, #1]
 800a826:	2b2b      	cmp	r3, #43	@ 0x2b
 800a828:	d033      	beq.n	800a892 <__gethex+0x116>
 800a82a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a82c:	d034      	beq.n	800a898 <__gethex+0x11c>
 800a82e:	2400      	movs	r4, #0
 800a830:	1c71      	adds	r1, r6, #1
 800a832:	7808      	ldrb	r0, [r1, #0]
 800a834:	f7ff ff8d 	bl	800a752 <__hexdig_fun>
 800a838:	1e43      	subs	r3, r0, #1
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	2b18      	cmp	r3, #24
 800a83e:	d830      	bhi.n	800a8a2 <__gethex+0x126>
 800a840:	f1a0 0210 	sub.w	r2, r0, #16
 800a844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a848:	f7ff ff83 	bl	800a752 <__hexdig_fun>
 800a84c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a850:	fa5f fc8c 	uxtb.w	ip, ip
 800a854:	f1bc 0f18 	cmp.w	ip, #24
 800a858:	f04f 030a 	mov.w	r3, #10
 800a85c:	d91e      	bls.n	800a89c <__gethex+0x120>
 800a85e:	b104      	cbz	r4, 800a862 <__gethex+0xe6>
 800a860:	4252      	negs	r2, r2
 800a862:	4417      	add	r7, r2
 800a864:	f8ca 1000 	str.w	r1, [sl]
 800a868:	b1ed      	cbz	r5, 800a8a6 <__gethex+0x12a>
 800a86a:	f1bb 0f00 	cmp.w	fp, #0
 800a86e:	bf0c      	ite	eq
 800a870:	2506      	moveq	r5, #6
 800a872:	2500      	movne	r5, #0
 800a874:	4628      	mov	r0, r5
 800a876:	b005      	add	sp, #20
 800a878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87c:	2500      	movs	r5, #0
 800a87e:	462c      	mov	r4, r5
 800a880:	e7b0      	b.n	800a7e4 <__gethex+0x68>
 800a882:	2c00      	cmp	r4, #0
 800a884:	d1c7      	bne.n	800a816 <__gethex+0x9a>
 800a886:	4627      	mov	r7, r4
 800a888:	e7c7      	b.n	800a81a <__gethex+0x9e>
 800a88a:	464e      	mov	r6, r9
 800a88c:	462f      	mov	r7, r5
 800a88e:	2501      	movs	r5, #1
 800a890:	e7c3      	b.n	800a81a <__gethex+0x9e>
 800a892:	2400      	movs	r4, #0
 800a894:	1cb1      	adds	r1, r6, #2
 800a896:	e7cc      	b.n	800a832 <__gethex+0xb6>
 800a898:	2401      	movs	r4, #1
 800a89a:	e7fb      	b.n	800a894 <__gethex+0x118>
 800a89c:	fb03 0002 	mla	r0, r3, r2, r0
 800a8a0:	e7ce      	b.n	800a840 <__gethex+0xc4>
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	e7de      	b.n	800a864 <__gethex+0xe8>
 800a8a6:	4629      	mov	r1, r5
 800a8a8:	eba6 0309 	sub.w	r3, r6, r9
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	dc0a      	bgt.n	800a8c8 <__gethex+0x14c>
 800a8b2:	9801      	ldr	r0, [sp, #4]
 800a8b4:	f7fd ffa6 	bl	8008804 <_Balloc>
 800a8b8:	4604      	mov	r4, r0
 800a8ba:	b940      	cbnz	r0, 800a8ce <__gethex+0x152>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	21e4      	movs	r1, #228	@ 0xe4
 800a8c0:	4b5b      	ldr	r3, [pc, #364]	@ (800aa30 <__gethex+0x2b4>)
 800a8c2:	485c      	ldr	r0, [pc, #368]	@ (800aa34 <__gethex+0x2b8>)
 800a8c4:	f7ff fec0 	bl	800a648 <__assert_func>
 800a8c8:	3101      	adds	r1, #1
 800a8ca:	105b      	asrs	r3, r3, #1
 800a8cc:	e7ef      	b.n	800a8ae <__gethex+0x132>
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	f100 0a14 	add.w	sl, r0, #20
 800a8d4:	4655      	mov	r5, sl
 800a8d6:	469b      	mov	fp, r3
 800a8d8:	45b1      	cmp	r9, r6
 800a8da:	d337      	bcc.n	800a94c <__gethex+0x1d0>
 800a8dc:	f845 bb04 	str.w	fp, [r5], #4
 800a8e0:	eba5 050a 	sub.w	r5, r5, sl
 800a8e4:	10ad      	asrs	r5, r5, #2
 800a8e6:	6125      	str	r5, [r4, #16]
 800a8e8:	4658      	mov	r0, fp
 800a8ea:	f7fe f87d 	bl	80089e8 <__hi0bits>
 800a8ee:	016d      	lsls	r5, r5, #5
 800a8f0:	f8d8 6000 	ldr.w	r6, [r8]
 800a8f4:	1a2d      	subs	r5, r5, r0
 800a8f6:	42b5      	cmp	r5, r6
 800a8f8:	dd54      	ble.n	800a9a4 <__gethex+0x228>
 800a8fa:	1bad      	subs	r5, r5, r6
 800a8fc:	4629      	mov	r1, r5
 800a8fe:	4620      	mov	r0, r4
 800a900:	f7fe fbff 	bl	8009102 <__any_on>
 800a904:	4681      	mov	r9, r0
 800a906:	b178      	cbz	r0, 800a928 <__gethex+0x1ac>
 800a908:	f04f 0901 	mov.w	r9, #1
 800a90c:	1e6b      	subs	r3, r5, #1
 800a90e:	1159      	asrs	r1, r3, #5
 800a910:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a914:	f003 021f 	and.w	r2, r3, #31
 800a918:	fa09 f202 	lsl.w	r2, r9, r2
 800a91c:	420a      	tst	r2, r1
 800a91e:	d003      	beq.n	800a928 <__gethex+0x1ac>
 800a920:	454b      	cmp	r3, r9
 800a922:	dc36      	bgt.n	800a992 <__gethex+0x216>
 800a924:	f04f 0902 	mov.w	r9, #2
 800a928:	4629      	mov	r1, r5
 800a92a:	4620      	mov	r0, r4
 800a92c:	f7ff febe 	bl	800a6ac <rshift>
 800a930:	442f      	add	r7, r5
 800a932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a936:	42bb      	cmp	r3, r7
 800a938:	da42      	bge.n	800a9c0 <__gethex+0x244>
 800a93a:	4621      	mov	r1, r4
 800a93c:	9801      	ldr	r0, [sp, #4]
 800a93e:	f7fd ffa1 	bl	8008884 <_Bfree>
 800a942:	2300      	movs	r3, #0
 800a944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a946:	25a3      	movs	r5, #163	@ 0xa3
 800a948:	6013      	str	r3, [r2, #0]
 800a94a:	e793      	b.n	800a874 <__gethex+0xf8>
 800a94c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a950:	2a2e      	cmp	r2, #46	@ 0x2e
 800a952:	d012      	beq.n	800a97a <__gethex+0x1fe>
 800a954:	2b20      	cmp	r3, #32
 800a956:	d104      	bne.n	800a962 <__gethex+0x1e6>
 800a958:	f845 bb04 	str.w	fp, [r5], #4
 800a95c:	f04f 0b00 	mov.w	fp, #0
 800a960:	465b      	mov	r3, fp
 800a962:	7830      	ldrb	r0, [r6, #0]
 800a964:	9303      	str	r3, [sp, #12]
 800a966:	f7ff fef4 	bl	800a752 <__hexdig_fun>
 800a96a:	9b03      	ldr	r3, [sp, #12]
 800a96c:	f000 000f 	and.w	r0, r0, #15
 800a970:	4098      	lsls	r0, r3
 800a972:	ea4b 0b00 	orr.w	fp, fp, r0
 800a976:	3304      	adds	r3, #4
 800a978:	e7ae      	b.n	800a8d8 <__gethex+0x15c>
 800a97a:	45b1      	cmp	r9, r6
 800a97c:	d8ea      	bhi.n	800a954 <__gethex+0x1d8>
 800a97e:	2201      	movs	r2, #1
 800a980:	4630      	mov	r0, r6
 800a982:	492a      	ldr	r1, [pc, #168]	@ (800aa2c <__gethex+0x2b0>)
 800a984:	9303      	str	r3, [sp, #12]
 800a986:	f7ff fe14 	bl	800a5b2 <strncmp>
 800a98a:	9b03      	ldr	r3, [sp, #12]
 800a98c:	2800      	cmp	r0, #0
 800a98e:	d1e1      	bne.n	800a954 <__gethex+0x1d8>
 800a990:	e7a2      	b.n	800a8d8 <__gethex+0x15c>
 800a992:	4620      	mov	r0, r4
 800a994:	1ea9      	subs	r1, r5, #2
 800a996:	f7fe fbb4 	bl	8009102 <__any_on>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	d0c2      	beq.n	800a924 <__gethex+0x1a8>
 800a99e:	f04f 0903 	mov.w	r9, #3
 800a9a2:	e7c1      	b.n	800a928 <__gethex+0x1ac>
 800a9a4:	da09      	bge.n	800a9ba <__gethex+0x23e>
 800a9a6:	1b75      	subs	r5, r6, r5
 800a9a8:	4621      	mov	r1, r4
 800a9aa:	462a      	mov	r2, r5
 800a9ac:	9801      	ldr	r0, [sp, #4]
 800a9ae:	f7fe f979 	bl	8008ca4 <__lshift>
 800a9b2:	4604      	mov	r4, r0
 800a9b4:	1b7f      	subs	r7, r7, r5
 800a9b6:	f100 0a14 	add.w	sl, r0, #20
 800a9ba:	f04f 0900 	mov.w	r9, #0
 800a9be:	e7b8      	b.n	800a932 <__gethex+0x1b6>
 800a9c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a9c4:	42bd      	cmp	r5, r7
 800a9c6:	dd6f      	ble.n	800aaa8 <__gethex+0x32c>
 800a9c8:	1bed      	subs	r5, r5, r7
 800a9ca:	42ae      	cmp	r6, r5
 800a9cc:	dc34      	bgt.n	800aa38 <__gethex+0x2bc>
 800a9ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a9d2:	2b02      	cmp	r3, #2
 800a9d4:	d022      	beq.n	800aa1c <__gethex+0x2a0>
 800a9d6:	2b03      	cmp	r3, #3
 800a9d8:	d024      	beq.n	800aa24 <__gethex+0x2a8>
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d115      	bne.n	800aa0a <__gethex+0x28e>
 800a9de:	42ae      	cmp	r6, r5
 800a9e0:	d113      	bne.n	800aa0a <__gethex+0x28e>
 800a9e2:	2e01      	cmp	r6, #1
 800a9e4:	d10b      	bne.n	800a9fe <__gethex+0x282>
 800a9e6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a9ea:	9a02      	ldr	r2, [sp, #8]
 800a9ec:	2562      	movs	r5, #98	@ 0x62
 800a9ee:	6013      	str	r3, [r2, #0]
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	6123      	str	r3, [r4, #16]
 800a9f4:	f8ca 3000 	str.w	r3, [sl]
 800a9f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9fa:	601c      	str	r4, [r3, #0]
 800a9fc:	e73a      	b.n	800a874 <__gethex+0xf8>
 800a9fe:	4620      	mov	r0, r4
 800aa00:	1e71      	subs	r1, r6, #1
 800aa02:	f7fe fb7e 	bl	8009102 <__any_on>
 800aa06:	2800      	cmp	r0, #0
 800aa08:	d1ed      	bne.n	800a9e6 <__gethex+0x26a>
 800aa0a:	4621      	mov	r1, r4
 800aa0c:	9801      	ldr	r0, [sp, #4]
 800aa0e:	f7fd ff39 	bl	8008884 <_Bfree>
 800aa12:	2300      	movs	r3, #0
 800aa14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa16:	2550      	movs	r5, #80	@ 0x50
 800aa18:	6013      	str	r3, [r2, #0]
 800aa1a:	e72b      	b.n	800a874 <__gethex+0xf8>
 800aa1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d1f3      	bne.n	800aa0a <__gethex+0x28e>
 800aa22:	e7e0      	b.n	800a9e6 <__gethex+0x26a>
 800aa24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d1dd      	bne.n	800a9e6 <__gethex+0x26a>
 800aa2a:	e7ee      	b.n	800aa0a <__gethex+0x28e>
 800aa2c:	0800c727 	.word	0x0800c727
 800aa30:	0800c6bd 	.word	0x0800c6bd
 800aa34:	0800c77e 	.word	0x0800c77e
 800aa38:	1e6f      	subs	r7, r5, #1
 800aa3a:	f1b9 0f00 	cmp.w	r9, #0
 800aa3e:	d130      	bne.n	800aaa2 <__gethex+0x326>
 800aa40:	b127      	cbz	r7, 800aa4c <__gethex+0x2d0>
 800aa42:	4639      	mov	r1, r7
 800aa44:	4620      	mov	r0, r4
 800aa46:	f7fe fb5c 	bl	8009102 <__any_on>
 800aa4a:	4681      	mov	r9, r0
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	4629      	mov	r1, r5
 800aa50:	1b76      	subs	r6, r6, r5
 800aa52:	2502      	movs	r5, #2
 800aa54:	117a      	asrs	r2, r7, #5
 800aa56:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800aa5a:	f007 071f 	and.w	r7, r7, #31
 800aa5e:	40bb      	lsls	r3, r7
 800aa60:	4213      	tst	r3, r2
 800aa62:	4620      	mov	r0, r4
 800aa64:	bf18      	it	ne
 800aa66:	f049 0902 	orrne.w	r9, r9, #2
 800aa6a:	f7ff fe1f 	bl	800a6ac <rshift>
 800aa6e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800aa72:	f1b9 0f00 	cmp.w	r9, #0
 800aa76:	d047      	beq.n	800ab08 <__gethex+0x38c>
 800aa78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d015      	beq.n	800aaac <__gethex+0x330>
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d017      	beq.n	800aab4 <__gethex+0x338>
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d109      	bne.n	800aa9c <__gethex+0x320>
 800aa88:	f019 0f02 	tst.w	r9, #2
 800aa8c:	d006      	beq.n	800aa9c <__gethex+0x320>
 800aa8e:	f8da 3000 	ldr.w	r3, [sl]
 800aa92:	ea49 0903 	orr.w	r9, r9, r3
 800aa96:	f019 0f01 	tst.w	r9, #1
 800aa9a:	d10e      	bne.n	800aaba <__gethex+0x33e>
 800aa9c:	f045 0510 	orr.w	r5, r5, #16
 800aaa0:	e032      	b.n	800ab08 <__gethex+0x38c>
 800aaa2:	f04f 0901 	mov.w	r9, #1
 800aaa6:	e7d1      	b.n	800aa4c <__gethex+0x2d0>
 800aaa8:	2501      	movs	r5, #1
 800aaaa:	e7e2      	b.n	800aa72 <__gethex+0x2f6>
 800aaac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaae:	f1c3 0301 	rsb	r3, r3, #1
 800aab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d0f0      	beq.n	800aa9c <__gethex+0x320>
 800aaba:	f04f 0c00 	mov.w	ip, #0
 800aabe:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800aac2:	f104 0314 	add.w	r3, r4, #20
 800aac6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800aaca:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800aace:	4618      	mov	r0, r3
 800aad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800aad8:	d01b      	beq.n	800ab12 <__gethex+0x396>
 800aada:	3201      	adds	r2, #1
 800aadc:	6002      	str	r2, [r0, #0]
 800aade:	2d02      	cmp	r5, #2
 800aae0:	f104 0314 	add.w	r3, r4, #20
 800aae4:	d13c      	bne.n	800ab60 <__gethex+0x3e4>
 800aae6:	f8d8 2000 	ldr.w	r2, [r8]
 800aaea:	3a01      	subs	r2, #1
 800aaec:	42b2      	cmp	r2, r6
 800aaee:	d109      	bne.n	800ab04 <__gethex+0x388>
 800aaf0:	2201      	movs	r2, #1
 800aaf2:	1171      	asrs	r1, r6, #5
 800aaf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aaf8:	f006 061f 	and.w	r6, r6, #31
 800aafc:	fa02 f606 	lsl.w	r6, r2, r6
 800ab00:	421e      	tst	r6, r3
 800ab02:	d13a      	bne.n	800ab7a <__gethex+0x3fe>
 800ab04:	f045 0520 	orr.w	r5, r5, #32
 800ab08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab0a:	601c      	str	r4, [r3, #0]
 800ab0c:	9b02      	ldr	r3, [sp, #8]
 800ab0e:	601f      	str	r7, [r3, #0]
 800ab10:	e6b0      	b.n	800a874 <__gethex+0xf8>
 800ab12:	4299      	cmp	r1, r3
 800ab14:	f843 cc04 	str.w	ip, [r3, #-4]
 800ab18:	d8d9      	bhi.n	800aace <__gethex+0x352>
 800ab1a:	68a3      	ldr	r3, [r4, #8]
 800ab1c:	459b      	cmp	fp, r3
 800ab1e:	db17      	blt.n	800ab50 <__gethex+0x3d4>
 800ab20:	6861      	ldr	r1, [r4, #4]
 800ab22:	9801      	ldr	r0, [sp, #4]
 800ab24:	3101      	adds	r1, #1
 800ab26:	f7fd fe6d 	bl	8008804 <_Balloc>
 800ab2a:	4681      	mov	r9, r0
 800ab2c:	b918      	cbnz	r0, 800ab36 <__gethex+0x3ba>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	2184      	movs	r1, #132	@ 0x84
 800ab32:	4b19      	ldr	r3, [pc, #100]	@ (800ab98 <__gethex+0x41c>)
 800ab34:	e6c5      	b.n	800a8c2 <__gethex+0x146>
 800ab36:	6922      	ldr	r2, [r4, #16]
 800ab38:	f104 010c 	add.w	r1, r4, #12
 800ab3c:	3202      	adds	r2, #2
 800ab3e:	0092      	lsls	r2, r2, #2
 800ab40:	300c      	adds	r0, #12
 800ab42:	f7fc fef0 	bl	8007926 <memcpy>
 800ab46:	4621      	mov	r1, r4
 800ab48:	9801      	ldr	r0, [sp, #4]
 800ab4a:	f7fd fe9b 	bl	8008884 <_Bfree>
 800ab4e:	464c      	mov	r4, r9
 800ab50:	6923      	ldr	r3, [r4, #16]
 800ab52:	1c5a      	adds	r2, r3, #1
 800ab54:	6122      	str	r2, [r4, #16]
 800ab56:	2201      	movs	r2, #1
 800ab58:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ab5c:	615a      	str	r2, [r3, #20]
 800ab5e:	e7be      	b.n	800aade <__gethex+0x362>
 800ab60:	6922      	ldr	r2, [r4, #16]
 800ab62:	455a      	cmp	r2, fp
 800ab64:	dd0b      	ble.n	800ab7e <__gethex+0x402>
 800ab66:	2101      	movs	r1, #1
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f7ff fd9f 	bl	800a6ac <rshift>
 800ab6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ab72:	3701      	adds	r7, #1
 800ab74:	42bb      	cmp	r3, r7
 800ab76:	f6ff aee0 	blt.w	800a93a <__gethex+0x1be>
 800ab7a:	2501      	movs	r5, #1
 800ab7c:	e7c2      	b.n	800ab04 <__gethex+0x388>
 800ab7e:	f016 061f 	ands.w	r6, r6, #31
 800ab82:	d0fa      	beq.n	800ab7a <__gethex+0x3fe>
 800ab84:	4453      	add	r3, sl
 800ab86:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ab8a:	f7fd ff2d 	bl	80089e8 <__hi0bits>
 800ab8e:	f1c6 0620 	rsb	r6, r6, #32
 800ab92:	42b0      	cmp	r0, r6
 800ab94:	dbe7      	blt.n	800ab66 <__gethex+0x3ea>
 800ab96:	e7f0      	b.n	800ab7a <__gethex+0x3fe>
 800ab98:	0800c6bd 	.word	0x0800c6bd

0800ab9c <L_shift>:
 800ab9c:	f1c2 0208 	rsb	r2, r2, #8
 800aba0:	0092      	lsls	r2, r2, #2
 800aba2:	b570      	push	{r4, r5, r6, lr}
 800aba4:	f1c2 0620 	rsb	r6, r2, #32
 800aba8:	6843      	ldr	r3, [r0, #4]
 800abaa:	6804      	ldr	r4, [r0, #0]
 800abac:	fa03 f506 	lsl.w	r5, r3, r6
 800abb0:	432c      	orrs	r4, r5
 800abb2:	40d3      	lsrs	r3, r2
 800abb4:	6004      	str	r4, [r0, #0]
 800abb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800abba:	4288      	cmp	r0, r1
 800abbc:	d3f4      	bcc.n	800aba8 <L_shift+0xc>
 800abbe:	bd70      	pop	{r4, r5, r6, pc}

0800abc0 <__match>:
 800abc0:	b530      	push	{r4, r5, lr}
 800abc2:	6803      	ldr	r3, [r0, #0]
 800abc4:	3301      	adds	r3, #1
 800abc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abca:	b914      	cbnz	r4, 800abd2 <__match+0x12>
 800abcc:	6003      	str	r3, [r0, #0]
 800abce:	2001      	movs	r0, #1
 800abd0:	bd30      	pop	{r4, r5, pc}
 800abd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800abda:	2d19      	cmp	r5, #25
 800abdc:	bf98      	it	ls
 800abde:	3220      	addls	r2, #32
 800abe0:	42a2      	cmp	r2, r4
 800abe2:	d0f0      	beq.n	800abc6 <__match+0x6>
 800abe4:	2000      	movs	r0, #0
 800abe6:	e7f3      	b.n	800abd0 <__match+0x10>

0800abe8 <__hexnan>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	2500      	movs	r5, #0
 800abee:	680b      	ldr	r3, [r1, #0]
 800abf0:	4682      	mov	sl, r0
 800abf2:	115e      	asrs	r6, r3, #5
 800abf4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800abf8:	f013 031f 	ands.w	r3, r3, #31
 800abfc:	bf18      	it	ne
 800abfe:	3604      	addne	r6, #4
 800ac00:	1f37      	subs	r7, r6, #4
 800ac02:	4690      	mov	r8, r2
 800ac04:	46b9      	mov	r9, r7
 800ac06:	463c      	mov	r4, r7
 800ac08:	46ab      	mov	fp, r5
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	6801      	ldr	r1, [r0, #0]
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	f846 5c04 	str.w	r5, [r6, #-4]
 800ac14:	9502      	str	r5, [sp, #8]
 800ac16:	784a      	ldrb	r2, [r1, #1]
 800ac18:	1c4b      	adds	r3, r1, #1
 800ac1a:	9303      	str	r3, [sp, #12]
 800ac1c:	b342      	cbz	r2, 800ac70 <__hexnan+0x88>
 800ac1e:	4610      	mov	r0, r2
 800ac20:	9105      	str	r1, [sp, #20]
 800ac22:	9204      	str	r2, [sp, #16]
 800ac24:	f7ff fd95 	bl	800a752 <__hexdig_fun>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	d151      	bne.n	800acd0 <__hexnan+0xe8>
 800ac2c:	9a04      	ldr	r2, [sp, #16]
 800ac2e:	9905      	ldr	r1, [sp, #20]
 800ac30:	2a20      	cmp	r2, #32
 800ac32:	d818      	bhi.n	800ac66 <__hexnan+0x7e>
 800ac34:	9b02      	ldr	r3, [sp, #8]
 800ac36:	459b      	cmp	fp, r3
 800ac38:	dd13      	ble.n	800ac62 <__hexnan+0x7a>
 800ac3a:	454c      	cmp	r4, r9
 800ac3c:	d206      	bcs.n	800ac4c <__hexnan+0x64>
 800ac3e:	2d07      	cmp	r5, #7
 800ac40:	dc04      	bgt.n	800ac4c <__hexnan+0x64>
 800ac42:	462a      	mov	r2, r5
 800ac44:	4649      	mov	r1, r9
 800ac46:	4620      	mov	r0, r4
 800ac48:	f7ff ffa8 	bl	800ab9c <L_shift>
 800ac4c:	4544      	cmp	r4, r8
 800ac4e:	d952      	bls.n	800acf6 <__hexnan+0x10e>
 800ac50:	2300      	movs	r3, #0
 800ac52:	f1a4 0904 	sub.w	r9, r4, #4
 800ac56:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac5a:	461d      	mov	r5, r3
 800ac5c:	464c      	mov	r4, r9
 800ac5e:	f8cd b008 	str.w	fp, [sp, #8]
 800ac62:	9903      	ldr	r1, [sp, #12]
 800ac64:	e7d7      	b.n	800ac16 <__hexnan+0x2e>
 800ac66:	2a29      	cmp	r2, #41	@ 0x29
 800ac68:	d157      	bne.n	800ad1a <__hexnan+0x132>
 800ac6a:	3102      	adds	r1, #2
 800ac6c:	f8ca 1000 	str.w	r1, [sl]
 800ac70:	f1bb 0f00 	cmp.w	fp, #0
 800ac74:	d051      	beq.n	800ad1a <__hexnan+0x132>
 800ac76:	454c      	cmp	r4, r9
 800ac78:	d206      	bcs.n	800ac88 <__hexnan+0xa0>
 800ac7a:	2d07      	cmp	r5, #7
 800ac7c:	dc04      	bgt.n	800ac88 <__hexnan+0xa0>
 800ac7e:	462a      	mov	r2, r5
 800ac80:	4649      	mov	r1, r9
 800ac82:	4620      	mov	r0, r4
 800ac84:	f7ff ff8a 	bl	800ab9c <L_shift>
 800ac88:	4544      	cmp	r4, r8
 800ac8a:	d936      	bls.n	800acfa <__hexnan+0x112>
 800ac8c:	4623      	mov	r3, r4
 800ac8e:	f1a8 0204 	sub.w	r2, r8, #4
 800ac92:	f853 1b04 	ldr.w	r1, [r3], #4
 800ac96:	429f      	cmp	r7, r3
 800ac98:	f842 1f04 	str.w	r1, [r2, #4]!
 800ac9c:	d2f9      	bcs.n	800ac92 <__hexnan+0xaa>
 800ac9e:	1b3b      	subs	r3, r7, r4
 800aca0:	f023 0303 	bic.w	r3, r3, #3
 800aca4:	3304      	adds	r3, #4
 800aca6:	3401      	adds	r4, #1
 800aca8:	3e03      	subs	r6, #3
 800acaa:	42b4      	cmp	r4, r6
 800acac:	bf88      	it	hi
 800acae:	2304      	movhi	r3, #4
 800acb0:	2200      	movs	r2, #0
 800acb2:	4443      	add	r3, r8
 800acb4:	f843 2b04 	str.w	r2, [r3], #4
 800acb8:	429f      	cmp	r7, r3
 800acba:	d2fb      	bcs.n	800acb4 <__hexnan+0xcc>
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	b91b      	cbnz	r3, 800acc8 <__hexnan+0xe0>
 800acc0:	4547      	cmp	r7, r8
 800acc2:	d128      	bne.n	800ad16 <__hexnan+0x12e>
 800acc4:	2301      	movs	r3, #1
 800acc6:	603b      	str	r3, [r7, #0]
 800acc8:	2005      	movs	r0, #5
 800acca:	b007      	add	sp, #28
 800accc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd0:	3501      	adds	r5, #1
 800acd2:	2d08      	cmp	r5, #8
 800acd4:	f10b 0b01 	add.w	fp, fp, #1
 800acd8:	dd06      	ble.n	800ace8 <__hexnan+0x100>
 800acda:	4544      	cmp	r4, r8
 800acdc:	d9c1      	bls.n	800ac62 <__hexnan+0x7a>
 800acde:	2300      	movs	r3, #0
 800ace0:	2501      	movs	r5, #1
 800ace2:	f844 3c04 	str.w	r3, [r4, #-4]
 800ace6:	3c04      	subs	r4, #4
 800ace8:	6822      	ldr	r2, [r4, #0]
 800acea:	f000 000f 	and.w	r0, r0, #15
 800acee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800acf2:	6020      	str	r0, [r4, #0]
 800acf4:	e7b5      	b.n	800ac62 <__hexnan+0x7a>
 800acf6:	2508      	movs	r5, #8
 800acf8:	e7b3      	b.n	800ac62 <__hexnan+0x7a>
 800acfa:	9b01      	ldr	r3, [sp, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d0dd      	beq.n	800acbc <__hexnan+0xd4>
 800ad00:	f04f 32ff 	mov.w	r2, #4294967295
 800ad04:	f1c3 0320 	rsb	r3, r3, #32
 800ad08:	40da      	lsrs	r2, r3
 800ad0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ad0e:	4013      	ands	r3, r2
 800ad10:	f846 3c04 	str.w	r3, [r6, #-4]
 800ad14:	e7d2      	b.n	800acbc <__hexnan+0xd4>
 800ad16:	3f04      	subs	r7, #4
 800ad18:	e7d0      	b.n	800acbc <__hexnan+0xd4>
 800ad1a:	2004      	movs	r0, #4
 800ad1c:	e7d5      	b.n	800acca <__hexnan+0xe2>

0800ad1e <__ascii_mbtowc>:
 800ad1e:	b082      	sub	sp, #8
 800ad20:	b901      	cbnz	r1, 800ad24 <__ascii_mbtowc+0x6>
 800ad22:	a901      	add	r1, sp, #4
 800ad24:	b142      	cbz	r2, 800ad38 <__ascii_mbtowc+0x1a>
 800ad26:	b14b      	cbz	r3, 800ad3c <__ascii_mbtowc+0x1e>
 800ad28:	7813      	ldrb	r3, [r2, #0]
 800ad2a:	600b      	str	r3, [r1, #0]
 800ad2c:	7812      	ldrb	r2, [r2, #0]
 800ad2e:	1e10      	subs	r0, r2, #0
 800ad30:	bf18      	it	ne
 800ad32:	2001      	movne	r0, #1
 800ad34:	b002      	add	sp, #8
 800ad36:	4770      	bx	lr
 800ad38:	4610      	mov	r0, r2
 800ad3a:	e7fb      	b.n	800ad34 <__ascii_mbtowc+0x16>
 800ad3c:	f06f 0001 	mvn.w	r0, #1
 800ad40:	e7f8      	b.n	800ad34 <__ascii_mbtowc+0x16>

0800ad42 <_realloc_r>:
 800ad42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	4607      	mov	r7, r0
 800ad48:	4614      	mov	r4, r2
 800ad4a:	460d      	mov	r5, r1
 800ad4c:	b921      	cbnz	r1, 800ad58 <_realloc_r+0x16>
 800ad4e:	4611      	mov	r1, r2
 800ad50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	f7fd bcca 	b.w	80086ec <_malloc_r>
 800ad58:	b92a      	cbnz	r2, 800ad66 <_realloc_r+0x24>
 800ad5a:	f7fd fc55 	bl	8008608 <_free_r>
 800ad5e:	4625      	mov	r5, r4
 800ad60:	4628      	mov	r0, r5
 800ad62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad66:	f000 f840 	bl	800adea <_malloc_usable_size_r>
 800ad6a:	4284      	cmp	r4, r0
 800ad6c:	4606      	mov	r6, r0
 800ad6e:	d802      	bhi.n	800ad76 <_realloc_r+0x34>
 800ad70:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad74:	d8f4      	bhi.n	800ad60 <_realloc_r+0x1e>
 800ad76:	4621      	mov	r1, r4
 800ad78:	4638      	mov	r0, r7
 800ad7a:	f7fd fcb7 	bl	80086ec <_malloc_r>
 800ad7e:	4680      	mov	r8, r0
 800ad80:	b908      	cbnz	r0, 800ad86 <_realloc_r+0x44>
 800ad82:	4645      	mov	r5, r8
 800ad84:	e7ec      	b.n	800ad60 <_realloc_r+0x1e>
 800ad86:	42b4      	cmp	r4, r6
 800ad88:	4622      	mov	r2, r4
 800ad8a:	4629      	mov	r1, r5
 800ad8c:	bf28      	it	cs
 800ad8e:	4632      	movcs	r2, r6
 800ad90:	f7fc fdc9 	bl	8007926 <memcpy>
 800ad94:	4629      	mov	r1, r5
 800ad96:	4638      	mov	r0, r7
 800ad98:	f7fd fc36 	bl	8008608 <_free_r>
 800ad9c:	e7f1      	b.n	800ad82 <_realloc_r+0x40>

0800ad9e <__ascii_wctomb>:
 800ad9e:	4603      	mov	r3, r0
 800ada0:	4608      	mov	r0, r1
 800ada2:	b141      	cbz	r1, 800adb6 <__ascii_wctomb+0x18>
 800ada4:	2aff      	cmp	r2, #255	@ 0xff
 800ada6:	d904      	bls.n	800adb2 <__ascii_wctomb+0x14>
 800ada8:	228a      	movs	r2, #138	@ 0x8a
 800adaa:	f04f 30ff 	mov.w	r0, #4294967295
 800adae:	601a      	str	r2, [r3, #0]
 800adb0:	4770      	bx	lr
 800adb2:	2001      	movs	r0, #1
 800adb4:	700a      	strb	r2, [r1, #0]
 800adb6:	4770      	bx	lr

0800adb8 <fiprintf>:
 800adb8:	b40e      	push	{r1, r2, r3}
 800adba:	b503      	push	{r0, r1, lr}
 800adbc:	4601      	mov	r1, r0
 800adbe:	ab03      	add	r3, sp, #12
 800adc0:	4805      	ldr	r0, [pc, #20]	@ (800add8 <fiprintf+0x20>)
 800adc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc6:	6800      	ldr	r0, [r0, #0]
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	f7ff f9b7 	bl	800a13c <_vfiprintf_r>
 800adce:	b002      	add	sp, #8
 800add0:	f85d eb04 	ldr.w	lr, [sp], #4
 800add4:	b003      	add	sp, #12
 800add6:	4770      	bx	lr
 800add8:	20000030 	.word	0x20000030

0800addc <abort>:
 800addc:	2006      	movs	r0, #6
 800adde:	b508      	push	{r3, lr}
 800ade0:	f000 f834 	bl	800ae4c <raise>
 800ade4:	2001      	movs	r0, #1
 800ade6:	f7f6 ff9b 	bl	8001d20 <_exit>

0800adea <_malloc_usable_size_r>:
 800adea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adee:	1f18      	subs	r0, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	bfbc      	itt	lt
 800adf4:	580b      	ldrlt	r3, [r1, r0]
 800adf6:	18c0      	addlt	r0, r0, r3
 800adf8:	4770      	bx	lr

0800adfa <_raise_r>:
 800adfa:	291f      	cmp	r1, #31
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	4605      	mov	r5, r0
 800ae00:	460c      	mov	r4, r1
 800ae02:	d904      	bls.n	800ae0e <_raise_r+0x14>
 800ae04:	2316      	movs	r3, #22
 800ae06:	6003      	str	r3, [r0, #0]
 800ae08:	f04f 30ff 	mov.w	r0, #4294967295
 800ae0c:	bd38      	pop	{r3, r4, r5, pc}
 800ae0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae10:	b112      	cbz	r2, 800ae18 <_raise_r+0x1e>
 800ae12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae16:	b94b      	cbnz	r3, 800ae2c <_raise_r+0x32>
 800ae18:	4628      	mov	r0, r5
 800ae1a:	f000 f831 	bl	800ae80 <_getpid_r>
 800ae1e:	4622      	mov	r2, r4
 800ae20:	4601      	mov	r1, r0
 800ae22:	4628      	mov	r0, r5
 800ae24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae28:	f000 b818 	b.w	800ae5c <_kill_r>
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d00a      	beq.n	800ae46 <_raise_r+0x4c>
 800ae30:	1c59      	adds	r1, r3, #1
 800ae32:	d103      	bne.n	800ae3c <_raise_r+0x42>
 800ae34:	2316      	movs	r3, #22
 800ae36:	6003      	str	r3, [r0, #0]
 800ae38:	2001      	movs	r0, #1
 800ae3a:	e7e7      	b.n	800ae0c <_raise_r+0x12>
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae44:	4798      	blx	r3
 800ae46:	2000      	movs	r0, #0
 800ae48:	e7e0      	b.n	800ae0c <_raise_r+0x12>
	...

0800ae4c <raise>:
 800ae4c:	4b02      	ldr	r3, [pc, #8]	@ (800ae58 <raise+0xc>)
 800ae4e:	4601      	mov	r1, r0
 800ae50:	6818      	ldr	r0, [r3, #0]
 800ae52:	f7ff bfd2 	b.w	800adfa <_raise_r>
 800ae56:	bf00      	nop
 800ae58:	20000030 	.word	0x20000030

0800ae5c <_kill_r>:
 800ae5c:	b538      	push	{r3, r4, r5, lr}
 800ae5e:	2300      	movs	r3, #0
 800ae60:	4d06      	ldr	r5, [pc, #24]	@ (800ae7c <_kill_r+0x20>)
 800ae62:	4604      	mov	r4, r0
 800ae64:	4608      	mov	r0, r1
 800ae66:	4611      	mov	r1, r2
 800ae68:	602b      	str	r3, [r5, #0]
 800ae6a:	f7f6 ff49 	bl	8001d00 <_kill>
 800ae6e:	1c43      	adds	r3, r0, #1
 800ae70:	d102      	bne.n	800ae78 <_kill_r+0x1c>
 800ae72:	682b      	ldr	r3, [r5, #0]
 800ae74:	b103      	cbz	r3, 800ae78 <_kill_r+0x1c>
 800ae76:	6023      	str	r3, [r4, #0]
 800ae78:	bd38      	pop	{r3, r4, r5, pc}
 800ae7a:	bf00      	nop
 800ae7c:	20001278 	.word	0x20001278

0800ae80 <_getpid_r>:
 800ae80:	f7f6 bf37 	b.w	8001cf2 <_getpid>

0800ae84 <tanh>:
 800ae84:	4a41      	ldr	r2, [pc, #260]	@ (800af8c <tanh+0x108>)
 800ae86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae8a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	4606      	mov	r6, r0
 800ae92:	460f      	mov	r7, r1
 800ae94:	460c      	mov	r4, r1
 800ae96:	d917      	bls.n	800aec8 <tanh+0x44>
 800ae98:	4b3d      	ldr	r3, [pc, #244]	@ (800af90 <tanh+0x10c>)
 800ae9a:	2900      	cmp	r1, #0
 800ae9c:	4632      	mov	r2, r6
 800ae9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aea2:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aea6:	463b      	mov	r3, r7
 800aea8:	db07      	blt.n	800aeba <tanh+0x36>
 800aeaa:	f7f5 fc57 	bl	800075c <__aeabi_ddiv>
 800aeae:	4622      	mov	r2, r4
 800aeb0:	462b      	mov	r3, r5
 800aeb2:	f7f5 f973 	bl	800019c <__adddf3>
 800aeb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeba:	f7f5 fc4f 	bl	800075c <__aeabi_ddiv>
 800aebe:	4622      	mov	r2, r4
 800aec0:	462b      	mov	r3, r5
 800aec2:	f7f5 f969 	bl	8000198 <__aeabi_dsub>
 800aec6:	e7f6      	b.n	800aeb6 <tanh+0x32>
 800aec8:	4a32      	ldr	r2, [pc, #200]	@ (800af94 <tanh+0x110>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d856      	bhi.n	800af7c <tanh+0xf8>
 800aece:	f1b3 5f72 	cmp.w	r3, #1015021568	@ 0x3c800000
 800aed2:	d20b      	bcs.n	800aeec <tanh+0x68>
 800aed4:	460b      	mov	r3, r1
 800aed6:	492e      	ldr	r1, [pc, #184]	@ (800af90 <tanh+0x10c>)
 800aed8:	4602      	mov	r2, r0
 800aeda:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aede:	f7f5 f95d 	bl	800019c <__adddf3>
 800aee2:	4632      	mov	r2, r6
 800aee4:	463b      	mov	r3, r7
 800aee6:	f7f5 fb0f 	bl	8000508 <__aeabi_dmul>
 800aeea:	e7e4      	b.n	800aeb6 <tanh+0x32>
 800aeec:	4a2a      	ldr	r2, [pc, #168]	@ (800af98 <tanh+0x114>)
 800aeee:	4d2b      	ldr	r5, [pc, #172]	@ (800af9c <tanh+0x118>)
 800aef0:	4293      	cmp	r3, r2
 800aef2:	d91f      	bls.n	800af34 <tanh+0xb0>
 800aef4:	f000 fafa 	bl	800b4ec <fabs>
 800aef8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aefc:	f7f5 fb04 	bl	8000508 <__aeabi_dmul>
 800af00:	f000 f876 	bl	800aff0 <expm1>
 800af04:	460b      	mov	r3, r1
 800af06:	4922      	ldr	r1, [pc, #136]	@ (800af90 <tanh+0x10c>)
 800af08:	4602      	mov	r2, r0
 800af0a:	e9d1 6700 	ldrd	r6, r7, [r1]
 800af0e:	e9d5 8900 	ldrd	r8, r9, [r5]
 800af12:	e9d5 0100 	ldrd	r0, r1, [r5]
 800af16:	f7f5 f941 	bl	800019c <__adddf3>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
 800af1e:	4640      	mov	r0, r8
 800af20:	4649      	mov	r1, r9
 800af22:	f7f5 fc1b 	bl	800075c <__aeabi_ddiv>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	4630      	mov	r0, r6
 800af2c:	4639      	mov	r1, r7
 800af2e:	f7f5 f933 	bl	8000198 <__aeabi_dsub>
 800af32:	e01b      	b.n	800af6c <tanh+0xe8>
 800af34:	e9d5 6700 	ldrd	r6, r7, [r5]
 800af38:	f000 fad8 	bl	800b4ec <fabs>
 800af3c:	4602      	mov	r2, r0
 800af3e:	460b      	mov	r3, r1
 800af40:	4630      	mov	r0, r6
 800af42:	f107 4100 	add.w	r1, r7, #2147483648	@ 0x80000000
 800af46:	f7f5 fadf 	bl	8000508 <__aeabi_dmul>
 800af4a:	f000 f851 	bl	800aff0 <expm1>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4606      	mov	r6, r0
 800af54:	f101 4700 	add.w	r7, r1, #2147483648	@ 0x80000000
 800af58:	e9d5 0100 	ldrd	r0, r1, [r5]
 800af5c:	f7f5 f91e 	bl	800019c <__adddf3>
 800af60:	4602      	mov	r2, r0
 800af62:	460b      	mov	r3, r1
 800af64:	4630      	mov	r0, r6
 800af66:	4639      	mov	r1, r7
 800af68:	f7f5 fbf8 	bl	800075c <__aeabi_ddiv>
 800af6c:	2c00      	cmp	r4, #0
 800af6e:	bfbf      	itttt	lt
 800af70:	4602      	movlt	r2, r0
 800af72:	f101 4300 	addlt.w	r3, r1, #2147483648	@ 0x80000000
 800af76:	4610      	movlt	r0, r2
 800af78:	4619      	movlt	r1, r3
 800af7a:	e79c      	b.n	800aeb6 <tanh+0x32>
 800af7c:	4b04      	ldr	r3, [pc, #16]	@ (800af90 <tanh+0x10c>)
 800af7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af82:	4b07      	ldr	r3, [pc, #28]	@ (800afa0 <tanh+0x11c>)
 800af84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af88:	e7d1      	b.n	800af2e <tanh+0xaa>
 800af8a:	bf00      	nop
 800af8c:	7fefffff 	.word	0x7fefffff
 800af90:	0800ca48 	.word	0x0800ca48
 800af94:	4035ffff 	.word	0x4035ffff
 800af98:	3fefffff 	.word	0x3fefffff
 800af9c:	0800ca40 	.word	0x0800ca40
 800afa0:	0800ca38 	.word	0x0800ca38

0800afa4 <expf>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4605      	mov	r5, r0
 800afa8:	f000 faa4 	bl	800b4f4 <__ieee754_expf>
 800afac:	4604      	mov	r4, r0
 800afae:	4628      	mov	r0, r5
 800afb0:	f000 fa64 	bl	800b47c <finitef>
 800afb4:	b150      	cbz	r0, 800afcc <expf+0x28>
 800afb6:	4628      	mov	r0, r5
 800afb8:	490b      	ldr	r1, [pc, #44]	@ (800afe8 <expf+0x44>)
 800afba:	f7f6 f8b7 	bl	800112c <__aeabi_fcmpgt>
 800afbe:	b138      	cbz	r0, 800afd0 <expf+0x2c>
 800afc0:	f7fc fc76 	bl	80078b0 <__errno>
 800afc4:	2322      	movs	r3, #34	@ 0x22
 800afc6:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 800afca:	6003      	str	r3, [r0, #0]
 800afcc:	4620      	mov	r0, r4
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	4628      	mov	r0, r5
 800afd2:	4906      	ldr	r1, [pc, #24]	@ (800afec <expf+0x48>)
 800afd4:	f7f6 f88c 	bl	80010f0 <__aeabi_fcmplt>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d0f7      	beq.n	800afcc <expf+0x28>
 800afdc:	f7fc fc68 	bl	80078b0 <__errno>
 800afe0:	2322      	movs	r3, #34	@ 0x22
 800afe2:	2400      	movs	r4, #0
 800afe4:	6003      	str	r3, [r0, #0]
 800afe6:	e7f1      	b.n	800afcc <expf+0x28>
 800afe8:	42b17217 	.word	0x42b17217
 800afec:	c2cff1b5 	.word	0xc2cff1b5

0800aff0 <expm1>:
 800aff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff4:	4dcc      	ldr	r5, [pc, #816]	@ (800b328 <expm1+0x338>)
 800aff6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800affa:	42ab      	cmp	r3, r5
 800affc:	4682      	mov	sl, r0
 800affe:	468b      	mov	fp, r1
 800b000:	b085      	sub	sp, #20
 800b002:	f001 4400 	and.w	r4, r1, #2147483648	@ 0x80000000
 800b006:	d93e      	bls.n	800b086 <expm1+0x96>
 800b008:	4dc8      	ldr	r5, [pc, #800]	@ (800b32c <expm1+0x33c>)
 800b00a:	42ab      	cmp	r3, r5
 800b00c:	d91f      	bls.n	800b04e <expm1+0x5e>
 800b00e:	4dc8      	ldr	r5, [pc, #800]	@ (800b330 <expm1+0x340>)
 800b010:	42ab      	cmp	r3, r5
 800b012:	d910      	bls.n	800b036 <expm1+0x46>
 800b014:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800b018:	4302      	orrs	r2, r0
 800b01a:	d004      	beq.n	800b026 <expm1+0x36>
 800b01c:	4602      	mov	r2, r0
 800b01e:	460b      	mov	r3, r1
 800b020:	f7f5 f8bc 	bl	800019c <__adddf3>
 800b024:	e123      	b.n	800b26e <expm1+0x27e>
 800b026:	2c00      	cmp	r4, #0
 800b028:	f000 8123 	beq.w	800b272 <expm1+0x282>
 800b02c:	f04f 0a00 	mov.w	sl, #0
 800b030:	f8df b300 	ldr.w	fp, [pc, #768]	@ 800b334 <expm1+0x344>
 800b034:	e11d      	b.n	800b272 <expm1+0x282>
 800b036:	a3a4      	add	r3, pc, #656	@ (adr r3, 800b2c8 <expm1+0x2d8>)
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f7f5 fcf4 	bl	8000a28 <__aeabi_dcmpgt>
 800b040:	b128      	cbz	r0, 800b04e <expm1+0x5e>
 800b042:	2000      	movs	r0, #0
 800b044:	b005      	add	sp, #20
 800b046:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b04a:	f000 ba12 	b.w	800b472 <__math_oflow>
 800b04e:	2c00      	cmp	r4, #0
 800b050:	f000 80c5 	beq.w	800b1de <expm1+0x1ee>
 800b054:	a39e      	add	r3, pc, #632	@ (adr r3, 800b2d0 <expm1+0x2e0>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	4650      	mov	r0, sl
 800b05c:	4659      	mov	r1, fp
 800b05e:	f7f5 f89d 	bl	800019c <__adddf3>
 800b062:	2200      	movs	r2, #0
 800b064:	2300      	movs	r3, #0
 800b066:	f7f5 fcc1 	bl	80009ec <__aeabi_dcmplt>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d1de      	bne.n	800b02c <expm1+0x3c>
 800b06e:	a39a      	add	r3, pc, #616	@ (adr r3, 800b2d8 <expm1+0x2e8>)
 800b070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b074:	4650      	mov	r0, sl
 800b076:	4659      	mov	r1, fp
 800b078:	f7f5 fa46 	bl	8000508 <__aeabi_dmul>
 800b07c:	4602      	mov	r2, r0
 800b07e:	460b      	mov	r3, r1
 800b080:	2000      	movs	r0, #0
 800b082:	49ad      	ldr	r1, [pc, #692]	@ (800b338 <expm1+0x348>)
 800b084:	e0b6      	b.n	800b1f4 <expm1+0x204>
 800b086:	4aad      	ldr	r2, [pc, #692]	@ (800b33c <expm1+0x34c>)
 800b088:	4293      	cmp	r3, r2
 800b08a:	f240 80de 	bls.w	800b24a <expm1+0x25a>
 800b08e:	4aac      	ldr	r2, [pc, #688]	@ (800b340 <expm1+0x350>)
 800b090:	4293      	cmp	r3, r2
 800b092:	f200 80cf 	bhi.w	800b234 <expm1+0x244>
 800b096:	a392      	add	r3, pc, #584	@ (adr r3, 800b2e0 <expm1+0x2f0>)
 800b098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09c:	2c00      	cmp	r4, #0
 800b09e:	f040 8093 	bne.w	800b1c8 <expm1+0x1d8>
 800b0a2:	f20f 2944 	addw	r9, pc, #580	@ 0x244
 800b0a6:	e9d9 8900 	ldrd	r8, r9, [r9]
 800b0aa:	f7f5 f875 	bl	8000198 <__aeabi_dsub>
 800b0ae:	2401      	movs	r4, #1
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	460f      	mov	r7, r1
 800b0b4:	4642      	mov	r2, r8
 800b0b6:	464b      	mov	r3, r9
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	f7f5 f86c 	bl	8000198 <__aeabi_dsub>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4682      	mov	sl, r0
 800b0c6:	468b      	mov	fp, r1
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	4639      	mov	r1, r7
 800b0cc:	f7f5 f864 	bl	8000198 <__aeabi_dsub>
 800b0d0:	4642      	mov	r2, r8
 800b0d2:	464b      	mov	r3, r9
 800b0d4:	f7f5 f860 	bl	8000198 <__aeabi_dsub>
 800b0d8:	e9cd 0100 	strd	r0, r1, [sp]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	4b99      	ldr	r3, [pc, #612]	@ (800b344 <expm1+0x354>)
 800b0e0:	4650      	mov	r0, sl
 800b0e2:	4659      	mov	r1, fp
 800b0e4:	f7f5 fa10 	bl	8000508 <__aeabi_dmul>
 800b0e8:	4606      	mov	r6, r0
 800b0ea:	460f      	mov	r7, r1
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4650      	mov	r0, sl
 800b0f2:	4659      	mov	r1, fp
 800b0f4:	f7f5 fa08 	bl	8000508 <__aeabi_dmul>
 800b0f8:	a37d      	add	r3, pc, #500	@ (adr r3, 800b2f0 <expm1+0x300>)
 800b0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fe:	4680      	mov	r8, r0
 800b100:	4689      	mov	r9, r1
 800b102:	f7f5 fa01 	bl	8000508 <__aeabi_dmul>
 800b106:	a37c      	add	r3, pc, #496	@ (adr r3, 800b2f8 <expm1+0x308>)
 800b108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10c:	f7f5 f846 	bl	800019c <__adddf3>
 800b110:	4642      	mov	r2, r8
 800b112:	464b      	mov	r3, r9
 800b114:	f7f5 f9f8 	bl	8000508 <__aeabi_dmul>
 800b118:	a379      	add	r3, pc, #484	@ (adr r3, 800b300 <expm1+0x310>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	f7f5 f83b 	bl	8000198 <__aeabi_dsub>
 800b122:	4642      	mov	r2, r8
 800b124:	464b      	mov	r3, r9
 800b126:	f7f5 f9ef 	bl	8000508 <__aeabi_dmul>
 800b12a:	a377      	add	r3, pc, #476	@ (adr r3, 800b308 <expm1+0x318>)
 800b12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b130:	f7f5 f834 	bl	800019c <__adddf3>
 800b134:	4642      	mov	r2, r8
 800b136:	464b      	mov	r3, r9
 800b138:	f7f5 f9e6 	bl	8000508 <__aeabi_dmul>
 800b13c:	a374      	add	r3, pc, #464	@ (adr r3, 800b310 <expm1+0x320>)
 800b13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b142:	f7f5 f829 	bl	8000198 <__aeabi_dsub>
 800b146:	4642      	mov	r2, r8
 800b148:	464b      	mov	r3, r9
 800b14a:	f7f5 f9dd 	bl	8000508 <__aeabi_dmul>
 800b14e:	2200      	movs	r2, #0
 800b150:	4b7d      	ldr	r3, [pc, #500]	@ (800b348 <expm1+0x358>)
 800b152:	f7f5 f823 	bl	800019c <__adddf3>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b15e:	4630      	mov	r0, r6
 800b160:	4639      	mov	r1, r7
 800b162:	f7f5 f9d1 	bl	8000508 <__aeabi_dmul>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	2000      	movs	r0, #0
 800b16c:	4977      	ldr	r1, [pc, #476]	@ (800b34c <expm1+0x35c>)
 800b16e:	f7f5 f813 	bl	8000198 <__aeabi_dsub>
 800b172:	4602      	mov	r2, r0
 800b174:	460b      	mov	r3, r1
 800b176:	4606      	mov	r6, r0
 800b178:	460f      	mov	r7, r1
 800b17a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b17e:	f7f5 f80b 	bl	8000198 <__aeabi_dsub>
 800b182:	4632      	mov	r2, r6
 800b184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b188:	463b      	mov	r3, r7
 800b18a:	4650      	mov	r0, sl
 800b18c:	4659      	mov	r1, fp
 800b18e:	f7f5 f9bb 	bl	8000508 <__aeabi_dmul>
 800b192:	4602      	mov	r2, r0
 800b194:	460b      	mov	r3, r1
 800b196:	2000      	movs	r0, #0
 800b198:	496d      	ldr	r1, [pc, #436]	@ (800b350 <expm1+0x360>)
 800b19a:	f7f4 fffd 	bl	8000198 <__aeabi_dsub>
 800b19e:	4602      	mov	r2, r0
 800b1a0:	460b      	mov	r3, r1
 800b1a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1a6:	f7f5 fad9 	bl	800075c <__aeabi_ddiv>
 800b1aa:	4642      	mov	r2, r8
 800b1ac:	464b      	mov	r3, r9
 800b1ae:	f7f5 f9ab 	bl	8000508 <__aeabi_dmul>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	2c00      	cmp	r4, #0
 800b1b8:	d162      	bne.n	800b280 <expm1+0x290>
 800b1ba:	4650      	mov	r0, sl
 800b1bc:	4659      	mov	r1, fp
 800b1be:	f7f5 f9a3 	bl	8000508 <__aeabi_dmul>
 800b1c2:	4642      	mov	r2, r8
 800b1c4:	464b      	mov	r3, r9
 800b1c6:	e04a      	b.n	800b25e <expm1+0x26e>
 800b1c8:	f7f4 ffe8 	bl	800019c <__adddf3>
 800b1cc:	f20f 1948 	addw	r9, pc, #328	@ 0x148
 800b1d0:	e9d9 8900 	ldrd	r8, r9, [r9]
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	460f      	mov	r7, r1
 800b1d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b1dc:	e76a      	b.n	800b0b4 <expm1+0xc4>
 800b1de:	a33e      	add	r3, pc, #248	@ (adr r3, 800b2d8 <expm1+0x2e8>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	4650      	mov	r0, sl
 800b1e6:	4659      	mov	r1, fp
 800b1e8:	f7f5 f98e 	bl	8000508 <__aeabi_dmul>
 800b1ec:	4602      	mov	r2, r0
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	2000      	movs	r0, #0
 800b1f2:	4954      	ldr	r1, [pc, #336]	@ (800b344 <expm1+0x354>)
 800b1f4:	f7f4 ffd2 	bl	800019c <__adddf3>
 800b1f8:	f7f5 fc36 	bl	8000a68 <__aeabi_d2iz>
 800b1fc:	4604      	mov	r4, r0
 800b1fe:	f7f5 f919 	bl	8000434 <__aeabi_i2d>
 800b202:	a337      	add	r3, pc, #220	@ (adr r3, 800b2e0 <expm1+0x2f0>)
 800b204:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	f7f5 f97c 	bl	8000508 <__aeabi_dmul>
 800b210:	4602      	mov	r2, r0
 800b212:	460b      	mov	r3, r1
 800b214:	4650      	mov	r0, sl
 800b216:	4659      	mov	r1, fp
 800b218:	f7f4 ffbe 	bl	8000198 <__aeabi_dsub>
 800b21c:	a332      	add	r3, pc, #200	@ (adr r3, 800b2e8 <expm1+0x2f8>)
 800b21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	4640      	mov	r0, r8
 800b228:	4649      	mov	r1, r9
 800b22a:	f7f5 f96d 	bl	8000508 <__aeabi_dmul>
 800b22e:	4680      	mov	r8, r0
 800b230:	4689      	mov	r9, r1
 800b232:	e73f      	b.n	800b0b4 <expm1+0xc4>
 800b234:	a328      	add	r3, pc, #160	@ (adr r3, 800b2d8 <expm1+0x2e8>)
 800b236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23a:	f7f5 f965 	bl	8000508 <__aeabi_dmul>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	2c00      	cmp	r4, #0
 800b244:	f47f af1c 	bne.w	800b080 <expm1+0x90>
 800b248:	e7d2      	b.n	800b1f0 <expm1+0x200>
 800b24a:	4a42      	ldr	r2, [pc, #264]	@ (800b354 <expm1+0x364>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d815      	bhi.n	800b27c <expm1+0x28c>
 800b250:	a333      	add	r3, pc, #204	@ (adr r3, 800b320 <expm1+0x330>)
 800b252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b256:	f7f4 ffa1 	bl	800019c <__adddf3>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	f7f4 ff9b 	bl	8000198 <__aeabi_dsub>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4650      	mov	r0, sl
 800b268:	4659      	mov	r1, fp
 800b26a:	f7f4 ff95 	bl	8000198 <__aeabi_dsub>
 800b26e:	4682      	mov	sl, r0
 800b270:	468b      	mov	fp, r1
 800b272:	4650      	mov	r0, sl
 800b274:	4659      	mov	r1, fp
 800b276:	b005      	add	sp, #20
 800b278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b27c:	2400      	movs	r4, #0
 800b27e:	e72d      	b.n	800b0dc <expm1+0xec>
 800b280:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b284:	f7f4 ff88 	bl	8000198 <__aeabi_dsub>
 800b288:	4652      	mov	r2, sl
 800b28a:	465b      	mov	r3, fp
 800b28c:	f7f5 f93c 	bl	8000508 <__aeabi_dmul>
 800b290:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b294:	f7f4 ff80 	bl	8000198 <__aeabi_dsub>
 800b298:	464b      	mov	r3, r9
 800b29a:	4642      	mov	r2, r8
 800b29c:	f7f4 ff7c 	bl	8000198 <__aeabi_dsub>
 800b2a0:	1c63      	adds	r3, r4, #1
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	460f      	mov	r7, r1
 800b2a6:	d157      	bne.n	800b358 <expm1+0x368>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	460b      	mov	r3, r1
 800b2ac:	4650      	mov	r0, sl
 800b2ae:	4659      	mov	r1, fp
 800b2b0:	f7f4 ff72 	bl	8000198 <__aeabi_dsub>
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4b23      	ldr	r3, [pc, #140]	@ (800b344 <expm1+0x354>)
 800b2b8:	f7f5 f926 	bl	8000508 <__aeabi_dmul>
 800b2bc:	2200      	movs	r2, #0
 800b2be:	4b21      	ldr	r3, [pc, #132]	@ (800b344 <expm1+0x354>)
 800b2c0:	e7d3      	b.n	800b26a <expm1+0x27a>
 800b2c2:	bf00      	nop
 800b2c4:	f3af 8000 	nop.w
 800b2c8:	fefa39ef 	.word	0xfefa39ef
 800b2cc:	40862e42 	.word	0x40862e42
 800b2d0:	c2f8f359 	.word	0xc2f8f359
 800b2d4:	01a56e1f 	.word	0x01a56e1f
 800b2d8:	652b82fe 	.word	0x652b82fe
 800b2dc:	3ff71547 	.word	0x3ff71547
 800b2e0:	fee00000 	.word	0xfee00000
 800b2e4:	3fe62e42 	.word	0x3fe62e42
 800b2e8:	35793c76 	.word	0x35793c76
 800b2ec:	3dea39ef 	.word	0x3dea39ef
 800b2f0:	6e09c32d 	.word	0x6e09c32d
 800b2f4:	be8afdb7 	.word	0xbe8afdb7
 800b2f8:	86e65239 	.word	0x86e65239
 800b2fc:	3ed0cfca 	.word	0x3ed0cfca
 800b300:	9eaadbb7 	.word	0x9eaadbb7
 800b304:	3f14ce19 	.word	0x3f14ce19
 800b308:	19fe5585 	.word	0x19fe5585
 800b30c:	3f5a01a0 	.word	0x3f5a01a0
 800b310:	111110f4 	.word	0x111110f4
 800b314:	3fa11111 	.word	0x3fa11111
 800b318:	35793c76 	.word	0x35793c76
 800b31c:	bdea39ef 	.word	0xbdea39ef
 800b320:	8800759c 	.word	0x8800759c
 800b324:	7e37e43c 	.word	0x7e37e43c
 800b328:	40436879 	.word	0x40436879
 800b32c:	40862e41 	.word	0x40862e41
 800b330:	7fefffff 	.word	0x7fefffff
 800b334:	bff00000 	.word	0xbff00000
 800b338:	bfe00000 	.word	0xbfe00000
 800b33c:	3fd62e42 	.word	0x3fd62e42
 800b340:	3ff0a2b1 	.word	0x3ff0a2b1
 800b344:	3fe00000 	.word	0x3fe00000
 800b348:	3ff00000 	.word	0x3ff00000
 800b34c:	40080000 	.word	0x40080000
 800b350:	40180000 	.word	0x40180000
 800b354:	3c8fffff 	.word	0x3c8fffff
 800b358:	2c01      	cmp	r4, #1
 800b35a:	d125      	bne.n	800b3a8 <expm1+0x3b8>
 800b35c:	2200      	movs	r2, #0
 800b35e:	4650      	mov	r0, sl
 800b360:	4659      	mov	r1, fp
 800b362:	4b32      	ldr	r3, [pc, #200]	@ (800b42c <expm1+0x43c>)
 800b364:	f7f5 fb42 	bl	80009ec <__aeabi_dcmplt>
 800b368:	b188      	cbz	r0, 800b38e <expm1+0x39e>
 800b36a:	2200      	movs	r2, #0
 800b36c:	4650      	mov	r0, sl
 800b36e:	4659      	mov	r1, fp
 800b370:	4b2f      	ldr	r3, [pc, #188]	@ (800b430 <expm1+0x440>)
 800b372:	f7f4 ff13 	bl	800019c <__adddf3>
 800b376:	4602      	mov	r2, r0
 800b378:	460b      	mov	r3, r1
 800b37a:	4630      	mov	r0, r6
 800b37c:	4639      	mov	r1, r7
 800b37e:	f7f4 ff0b 	bl	8000198 <__aeabi_dsub>
 800b382:	2200      	movs	r2, #0
 800b384:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 800b388:	f7f5 f8be 	bl	8000508 <__aeabi_dmul>
 800b38c:	e76f      	b.n	800b26e <expm1+0x27e>
 800b38e:	4632      	mov	r2, r6
 800b390:	463b      	mov	r3, r7
 800b392:	4650      	mov	r0, sl
 800b394:	4659      	mov	r1, fp
 800b396:	f7f4 feff 	bl	8000198 <__aeabi_dsub>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	f7f4 fefd 	bl	800019c <__adddf3>
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	4b23      	ldr	r3, [pc, #140]	@ (800b434 <expm1+0x444>)
 800b3a6:	e63b      	b.n	800b020 <expm1+0x30>
 800b3a8:	1c63      	adds	r3, r4, #1
 800b3aa:	2b39      	cmp	r3, #57	@ 0x39
 800b3ac:	ea4f 5504 	mov.w	r5, r4, lsl #20
 800b3b0:	d90e      	bls.n	800b3d0 <expm1+0x3e0>
 800b3b2:	4652      	mov	r2, sl
 800b3b4:	465b      	mov	r3, fp
 800b3b6:	f7f4 feef 	bl	8000198 <__aeabi_dsub>
 800b3ba:	4602      	mov	r2, r0
 800b3bc:	460b      	mov	r3, r1
 800b3be:	2000      	movs	r0, #0
 800b3c0:	491c      	ldr	r1, [pc, #112]	@ (800b434 <expm1+0x444>)
 800b3c2:	f7f4 fee9 	bl	8000198 <__aeabi_dsub>
 800b3c6:	186b      	adds	r3, r5, r1
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	4b19      	ldr	r3, [pc, #100]	@ (800b434 <expm1+0x444>)
 800b3ce:	e74c      	b.n	800b26a <expm1+0x27a>
 800b3d0:	2c13      	cmp	r4, #19
 800b3d2:	f04f 0200 	mov.w	r2, #0
 800b3d6:	dc17      	bgt.n	800b408 <expm1+0x418>
 800b3d8:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 800b3dc:	fa46 f404 	asr.w	r4, r6, r4
 800b3e0:	f1c4 537f 	rsb	r3, r4, #1069547520	@ 0x3fc00000
 800b3e4:	f503 1340 	add.w	r3, r3, #3145728	@ 0x300000
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	461f      	mov	r7, r3
 800b3ec:	4652      	mov	r2, sl
 800b3ee:	465b      	mov	r3, fp
 800b3f0:	f7f4 fed2 	bl	8000198 <__aeabi_dsub>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	4630      	mov	r0, r6
 800b3fa:	4639      	mov	r1, r7
 800b3fc:	f7f4 fecc 	bl	8000198 <__aeabi_dsub>
 800b400:	4682      	mov	sl, r0
 800b402:	eb05 0b01 	add.w	fp, r5, r1
 800b406:	e734      	b.n	800b272 <expm1+0x282>
 800b408:	f5c4 747f 	rsb	r4, r4, #1020	@ 0x3fc
 800b40c:	3403      	adds	r4, #3
 800b40e:	0523      	lsls	r3, r4, #20
 800b410:	f7f4 fec4 	bl	800019c <__adddf3>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4650      	mov	r0, sl
 800b41a:	4659      	mov	r1, fp
 800b41c:	f7f4 febc 	bl	8000198 <__aeabi_dsub>
 800b420:	2200      	movs	r2, #0
 800b422:	4b04      	ldr	r3, [pc, #16]	@ (800b434 <expm1+0x444>)
 800b424:	f7f4 feba 	bl	800019c <__adddf3>
 800b428:	e7ea      	b.n	800b400 <expm1+0x410>
 800b42a:	bf00      	nop
 800b42c:	bfd00000 	.word	0xbfd00000
 800b430:	3fe00000 	.word	0x3fe00000
 800b434:	3ff00000 	.word	0x3ff00000

0800b438 <with_errno>:
 800b438:	b570      	push	{r4, r5, r6, lr}
 800b43a:	4604      	mov	r4, r0
 800b43c:	460d      	mov	r5, r1
 800b43e:	4616      	mov	r6, r2
 800b440:	f7fc fa36 	bl	80078b0 <__errno>
 800b444:	4629      	mov	r1, r5
 800b446:	6006      	str	r6, [r0, #0]
 800b448:	4620      	mov	r0, r4
 800b44a:	bd70      	pop	{r4, r5, r6, pc}

0800b44c <xflow>:
 800b44c:	b513      	push	{r0, r1, r4, lr}
 800b44e:	4604      	mov	r4, r0
 800b450:	4619      	mov	r1, r3
 800b452:	4610      	mov	r0, r2
 800b454:	b10c      	cbz	r4, 800b45a <xflow+0xe>
 800b456:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b45a:	e9cd 2300 	strd	r2, r3, [sp]
 800b45e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b462:	f7f5 f851 	bl	8000508 <__aeabi_dmul>
 800b466:	2222      	movs	r2, #34	@ 0x22
 800b468:	b002      	add	sp, #8
 800b46a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b46e:	f7ff bfe3 	b.w	800b438 <with_errno>

0800b472 <__math_oflow>:
 800b472:	2200      	movs	r2, #0
 800b474:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 800b478:	f7ff bfe8 	b.w	800b44c <xflow>

0800b47c <finitef>:
 800b47c:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800b480:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800b484:	bfac      	ite	ge
 800b486:	2000      	movge	r0, #0
 800b488:	2001      	movlt	r0, #1
 800b48a:	4770      	bx	lr

0800b48c <fminf>:
 800b48c:	b538      	push	{r3, r4, r5, lr}
 800b48e:	4604      	mov	r4, r0
 800b490:	460d      	mov	r5, r1
 800b492:	f000 f811 	bl	800b4b8 <__fpclassifyf>
 800b496:	b910      	cbnz	r0, 800b49e <fminf+0x12>
 800b498:	462c      	mov	r4, r5
 800b49a:	4620      	mov	r0, r4
 800b49c:	bd38      	pop	{r3, r4, r5, pc}
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f000 f80a 	bl	800b4b8 <__fpclassifyf>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d0f8      	beq.n	800b49a <fminf+0xe>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4620      	mov	r0, r4
 800b4ac:	f7f5 fe20 	bl	80010f0 <__aeabi_fcmplt>
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d0f1      	beq.n	800b498 <fminf+0xc>
 800b4b4:	e7f1      	b.n	800b49a <fminf+0xe>
	...

0800b4b8 <__fpclassifyf>:
 800b4b8:	f030 4000 	bics.w	r0, r0, #2147483648	@ 0x80000000
 800b4bc:	d00d      	beq.n	800b4da <__fpclassifyf+0x22>
 800b4be:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800b4c2:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800b4c6:	d30a      	bcc.n	800b4de <__fpclassifyf+0x26>
 800b4c8:	4b07      	ldr	r3, [pc, #28]	@ (800b4e8 <__fpclassifyf+0x30>)
 800b4ca:	1e42      	subs	r2, r0, #1
 800b4cc:	429a      	cmp	r2, r3
 800b4ce:	d908      	bls.n	800b4e2 <__fpclassifyf+0x2a>
 800b4d0:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800b4d4:	4258      	negs	r0, r3
 800b4d6:	4158      	adcs	r0, r3
 800b4d8:	4770      	bx	lr
 800b4da:	2002      	movs	r0, #2
 800b4dc:	4770      	bx	lr
 800b4de:	2004      	movs	r0, #4
 800b4e0:	4770      	bx	lr
 800b4e2:	2003      	movs	r0, #3
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	007ffffe 	.word	0x007ffffe

0800b4ec <fabs>:
 800b4ec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	4770      	bx	lr

0800b4f4 <__ieee754_expf>:
 800b4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4f8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b4fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b500:	4604      	mov	r4, r0
 800b502:	d904      	bls.n	800b50e <__ieee754_expf+0x1a>
 800b504:	4601      	mov	r1, r0
 800b506:	f7f5 fb4d 	bl	8000ba4 <__addsf3>
 800b50a:	4604      	mov	r4, r0
 800b50c:	e005      	b.n	800b51a <__ieee754_expf+0x26>
 800b50e:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 800b512:	d105      	bne.n	800b520 <__ieee754_expf+0x2c>
 800b514:	2e00      	cmp	r6, #0
 800b516:	f040 80c3 	bne.w	800b6a0 <__ieee754_expf+0x1ac>
 800b51a:	4620      	mov	r0, r4
 800b51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b520:	4960      	ldr	r1, [pc, #384]	@ (800b6a4 <__ieee754_expf+0x1b0>)
 800b522:	4288      	cmp	r0, r1
 800b524:	dd04      	ble.n	800b530 <__ieee754_expf+0x3c>
 800b526:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b52a:	2000      	movs	r0, #0
 800b52c:	f000 b8f3 	b.w	800b716 <__math_oflowf>
 800b530:	2800      	cmp	r0, #0
 800b532:	da07      	bge.n	800b544 <__ieee754_expf+0x50>
 800b534:	4a5c      	ldr	r2, [pc, #368]	@ (800b6a8 <__ieee754_expf+0x1b4>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d904      	bls.n	800b544 <__ieee754_expf+0x50>
 800b53a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b53e:	2000      	movs	r0, #0
 800b540:	f000 b8e5 	b.w	800b70e <__math_uflowf>
 800b544:	4a59      	ldr	r2, [pc, #356]	@ (800b6ac <__ieee754_expf+0x1b8>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d971      	bls.n	800b62e <__ieee754_expf+0x13a>
 800b54a:	4a59      	ldr	r2, [pc, #356]	@ (800b6b0 <__ieee754_expf+0x1bc>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d851      	bhi.n	800b5f4 <__ieee754_expf+0x100>
 800b550:	4b58      	ldr	r3, [pc, #352]	@ (800b6b4 <__ieee754_expf+0x1c0>)
 800b552:	4620      	mov	r0, r4
 800b554:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b558:	f7f5 fb22 	bl	8000ba0 <__aeabi_fsub>
 800b55c:	4605      	mov	r5, r0
 800b55e:	4b56      	ldr	r3, [pc, #344]	@ (800b6b8 <__ieee754_expf+0x1c4>)
 800b560:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800b564:	f086 0301 	eor.w	r3, r6, #1
 800b568:	eba3 0806 	sub.w	r8, r3, r6
 800b56c:	4639      	mov	r1, r7
 800b56e:	4628      	mov	r0, r5
 800b570:	f7f5 fb16 	bl	8000ba0 <__aeabi_fsub>
 800b574:	4604      	mov	r4, r0
 800b576:	4621      	mov	r1, r4
 800b578:	4620      	mov	r0, r4
 800b57a:	f7f5 fc1b 	bl	8000db4 <__aeabi_fmul>
 800b57e:	4606      	mov	r6, r0
 800b580:	494e      	ldr	r1, [pc, #312]	@ (800b6bc <__ieee754_expf+0x1c8>)
 800b582:	f7f5 fc17 	bl	8000db4 <__aeabi_fmul>
 800b586:	494e      	ldr	r1, [pc, #312]	@ (800b6c0 <__ieee754_expf+0x1cc>)
 800b588:	f7f5 fb0a 	bl	8000ba0 <__aeabi_fsub>
 800b58c:	4631      	mov	r1, r6
 800b58e:	f7f5 fc11 	bl	8000db4 <__aeabi_fmul>
 800b592:	494c      	ldr	r1, [pc, #304]	@ (800b6c4 <__ieee754_expf+0x1d0>)
 800b594:	f7f5 fb06 	bl	8000ba4 <__addsf3>
 800b598:	4631      	mov	r1, r6
 800b59a:	f7f5 fc0b 	bl	8000db4 <__aeabi_fmul>
 800b59e:	494a      	ldr	r1, [pc, #296]	@ (800b6c8 <__ieee754_expf+0x1d4>)
 800b5a0:	f7f5 fafe 	bl	8000ba0 <__aeabi_fsub>
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	f7f5 fc05 	bl	8000db4 <__aeabi_fmul>
 800b5aa:	4948      	ldr	r1, [pc, #288]	@ (800b6cc <__ieee754_expf+0x1d8>)
 800b5ac:	f7f5 fafa 	bl	8000ba4 <__addsf3>
 800b5b0:	4631      	mov	r1, r6
 800b5b2:	f7f5 fbff 	bl	8000db4 <__aeabi_fmul>
 800b5b6:	4601      	mov	r1, r0
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7f5 faf1 	bl	8000ba0 <__aeabi_fsub>
 800b5be:	4601      	mov	r1, r0
 800b5c0:	4606      	mov	r6, r0
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f7f5 fbf6 	bl	8000db4 <__aeabi_fmul>
 800b5c8:	4681      	mov	r9, r0
 800b5ca:	f1b8 0f00 	cmp.w	r8, #0
 800b5ce:	d143      	bne.n	800b658 <__ieee754_expf+0x164>
 800b5d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800b5d4:	4630      	mov	r0, r6
 800b5d6:	f7f5 fae3 	bl	8000ba0 <__aeabi_fsub>
 800b5da:	4601      	mov	r1, r0
 800b5dc:	4648      	mov	r0, r9
 800b5de:	f7f5 fc9d 	bl	8000f1c <__aeabi_fdiv>
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f7f5 fadc 	bl	8000ba0 <__aeabi_fsub>
 800b5e8:	4601      	mov	r1, r0
 800b5ea:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b5ee:	f7f5 fad7 	bl	8000ba0 <__aeabi_fsub>
 800b5f2:	e78a      	b.n	800b50a <__ieee754_expf+0x16>
 800b5f4:	4936      	ldr	r1, [pc, #216]	@ (800b6d0 <__ieee754_expf+0x1dc>)
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7f5 fbdc 	bl	8000db4 <__aeabi_fmul>
 800b5fc:	4b35      	ldr	r3, [pc, #212]	@ (800b6d4 <__ieee754_expf+0x1e0>)
 800b5fe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800b602:	f7f5 facf 	bl	8000ba4 <__addsf3>
 800b606:	f7f5 fd9b 	bl	8001140 <__aeabi_f2iz>
 800b60a:	4680      	mov	r8, r0
 800b60c:	f7f5 fb7e 	bl	8000d0c <__aeabi_i2f>
 800b610:	4931      	ldr	r1, [pc, #196]	@ (800b6d8 <__ieee754_expf+0x1e4>)
 800b612:	4606      	mov	r6, r0
 800b614:	f7f5 fbce 	bl	8000db4 <__aeabi_fmul>
 800b618:	4601      	mov	r1, r0
 800b61a:	4620      	mov	r0, r4
 800b61c:	f7f5 fac0 	bl	8000ba0 <__aeabi_fsub>
 800b620:	492e      	ldr	r1, [pc, #184]	@ (800b6dc <__ieee754_expf+0x1e8>)
 800b622:	4605      	mov	r5, r0
 800b624:	4630      	mov	r0, r6
 800b626:	f7f5 fbc5 	bl	8000db4 <__aeabi_fmul>
 800b62a:	4607      	mov	r7, r0
 800b62c:	e79e      	b.n	800b56c <__ieee754_expf+0x78>
 800b62e:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800b632:	d20c      	bcs.n	800b64e <__ieee754_expf+0x15a>
 800b634:	492a      	ldr	r1, [pc, #168]	@ (800b6e0 <__ieee754_expf+0x1ec>)
 800b636:	4620      	mov	r0, r4
 800b638:	f7f5 fab4 	bl	8000ba4 <__addsf3>
 800b63c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b640:	f7f5 fd74 	bl	800112c <__aeabi_fcmpgt>
 800b644:	b130      	cbz	r0, 800b654 <__ieee754_expf+0x160>
 800b646:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800b64a:	4620      	mov	r0, r4
 800b64c:	e75b      	b.n	800b506 <__ieee754_expf+0x12>
 800b64e:	f04f 0800 	mov.w	r8, #0
 800b652:	e790      	b.n	800b576 <__ieee754_expf+0x82>
 800b654:	4680      	mov	r8, r0
 800b656:	e78e      	b.n	800b576 <__ieee754_expf+0x82>
 800b658:	4631      	mov	r1, r6
 800b65a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800b65e:	f7f5 fa9f 	bl	8000ba0 <__aeabi_fsub>
 800b662:	4601      	mov	r1, r0
 800b664:	4648      	mov	r0, r9
 800b666:	f7f5 fc59 	bl	8000f1c <__aeabi_fdiv>
 800b66a:	4601      	mov	r1, r0
 800b66c:	4638      	mov	r0, r7
 800b66e:	f7f5 fa97 	bl	8000ba0 <__aeabi_fsub>
 800b672:	4629      	mov	r1, r5
 800b674:	f7f5 fa94 	bl	8000ba0 <__aeabi_fsub>
 800b678:	4601      	mov	r1, r0
 800b67a:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b67e:	f7f5 fa8f 	bl	8000ba0 <__aeabi_fsub>
 800b682:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 800b686:	db02      	blt.n	800b68e <__ieee754_expf+0x19a>
 800b688:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 800b68c:	e745      	b.n	800b51a <__ieee754_expf+0x26>
 800b68e:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 800b692:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 800b696:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 800b69a:	f7f5 fb8b 	bl	8000db4 <__aeabi_fmul>
 800b69e:	e734      	b.n	800b50a <__ieee754_expf+0x16>
 800b6a0:	2400      	movs	r4, #0
 800b6a2:	e73a      	b.n	800b51a <__ieee754_expf+0x26>
 800b6a4:	42b17217 	.word	0x42b17217
 800b6a8:	42cff1b5 	.word	0x42cff1b5
 800b6ac:	3eb17218 	.word	0x3eb17218
 800b6b0:	3f851591 	.word	0x3f851591
 800b6b4:	0800ca58 	.word	0x0800ca58
 800b6b8:	0800ca50 	.word	0x0800ca50
 800b6bc:	3331bb4c 	.word	0x3331bb4c
 800b6c0:	35ddea0e 	.word	0x35ddea0e
 800b6c4:	388ab355 	.word	0x388ab355
 800b6c8:	3b360b61 	.word	0x3b360b61
 800b6cc:	3e2aaaab 	.word	0x3e2aaaab
 800b6d0:	3fb8aa3b 	.word	0x3fb8aa3b
 800b6d4:	0800ca60 	.word	0x0800ca60
 800b6d8:	3f317180 	.word	0x3f317180
 800b6dc:	3717f7d1 	.word	0x3717f7d1
 800b6e0:	7149f2ca 	.word	0x7149f2ca

0800b6e4 <with_errnof>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	f7fc f8e1 	bl	80078b0 <__errno>
 800b6ee:	6005      	str	r5, [r0, #0]
 800b6f0:	4620      	mov	r0, r4
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}

0800b6f4 <xflowf>:
 800b6f4:	b508      	push	{r3, lr}
 800b6f6:	b140      	cbz	r0, 800b70a <xflowf+0x16>
 800b6f8:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 800b6fc:	f7f5 fb5a 	bl	8000db4 <__aeabi_fmul>
 800b700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b704:	2122      	movs	r1, #34	@ 0x22
 800b706:	f7ff bfed 	b.w	800b6e4 <with_errnof>
 800b70a:	4608      	mov	r0, r1
 800b70c:	e7f6      	b.n	800b6fc <xflowf+0x8>

0800b70e <__math_uflowf>:
 800b70e:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 800b712:	f7ff bfef 	b.w	800b6f4 <xflowf>

0800b716 <__math_oflowf>:
 800b716:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 800b71a:	f7ff bfeb 	b.w	800b6f4 <xflowf>
	...

0800b720 <_init>:
 800b720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b722:	bf00      	nop
 800b724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b726:	bc08      	pop	{r3}
 800b728:	469e      	mov	lr, r3
 800b72a:	4770      	bx	lr

0800b72c <_fini>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	bf00      	nop
 800b730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b732:	bc08      	pop	{r3}
 800b734:	469e      	mov	lr, r3
 800b736:	4770      	bx	lr
